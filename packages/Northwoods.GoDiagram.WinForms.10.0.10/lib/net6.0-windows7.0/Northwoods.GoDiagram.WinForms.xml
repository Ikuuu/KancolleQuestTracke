<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Northwoods.GoDiagram.WinForms</name>
    </assembly>
    <members>
        <member name="M:Northwoods.Go.WinForms.ContextGdiPlus.FillOrClip">
            <summary>
            Calls context.Fill, or context.Clip if appropriate
            This can be replaced by an abstract context in the future
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.ContextGdiPlus.CommitTransform">
            <summary>
            Apply the cached transform to the context.
            </summary>
            <remarks>
            The intent of this method is to call the backing context methods as few times as possible
            so this should only be called right before relevant drawing. In other words,
            we should expect DrawProtected methods to call this once.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.WinForms.ContextSkiaSharpBase.FillOrClip">
            <summary>
            Calls context.Fill, or context.Clip if appropriate
            This can be replaced by an abstract context in the future
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.ContextSkiaSharpBase.CommitTransform">
            <summary>
            Apply the cached transform to the context.
            </summary>
            <remarks>
            The intent of this method is to call the backing context methods as few times as possible
            so this should only be called right before relevant drawing. In other words,
            we should expect DrawProtected methods to call this once.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.WinForms.DiagramControl">
            <summary>
            A Control that provides display and editing of <see cref="T:Northwoods.Go.Diagram"/>s.
            </summary>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControl.Diagram">
            <summary>
            The <see cref="T:Northwoods.Go.Diagram"/> displayed by this control.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.#ctor">
            <summary>
            Constructs a new DiagramControl.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.ConstructDiagram">
            <summary>
            Construct the Diagram.
            Overridden by Palette and Overview to construct those repsective classes.
            </summary>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControl.VerticalScrollBar">
            <summary>
            Gets or sets the vertical scroll bar used by the view when not all objects can be
            displayed at once in the given client area.
            </summary>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControl.HorizontalScrollBar">
            <summary>
            Gets or sets the horizontal scroll bar used by the view when not all objects can be
            displayed at once in the given client area.
            </summary>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControl.ScrollSmallChange">
            <summary>
            Gets or sets the distance to scroll when scrolling a small amount.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.Dispose(System.Boolean)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnPaintSurface(SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnResize(System.EventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnBackColorChanged(System.EventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.CommonEvent(System.EventArgs,System.String)">
            <summary>
            Common code that occurs on every event. Some methods may go on to change
            the properties from these defaults (ie, mouseWheel changes delta)
            </summary>
            <param name="e"></param>
            <param name="eventType"></param>
            <returns>n</returns>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnMouseEnter(System.EventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnMouseLeave(System.EventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnDragLeave(System.EventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControl.UpdateScrollBars">
            <summary>
            Update the scroll bars for this view, changing the minimum/maximum/value
            and visibility as appropriate.
            </summary>
            <seealso cref="M:Northwoods.Go.WinForms.DiagramControl.LayoutScrollBars(System.Boolean)"/>
        </member>
        <member name="T:Northwoods.Go.WinForms.DiagramControlGdiPlus">
            <summary>
            A Control that provides display and editing of <see cref="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.Diagram"/>s.
            </summary>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.Diagram">
            <summary>
            The <see cref="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.Diagram"/> displayed by this control.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.#ctor">
            <summary>
            Constructs a new DiagramControl.
            </summary>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.BorderStyle">
            <summary>
            Gets or sets the border style for this diagram.
            </summary>
            <value>
            The default value is <c>BorderStyle.FixedSingle</c>.
            </value>
            <remarks>
            The border surrounds the view's display area and its scrollbars, if any.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.BorderSize">
            <summary>
            Read-only accessor for DiagramControl's border size.
            </summary>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.Border3DStyle">
            <summary>
            Gets or sets the 3D border style for this diagram.
            </summary>
            <value>
            The default value is <c>Border3DStyle.Etched</c>.
            </value>
            <remarks>
            When the <see cref="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.BorderStyle"/> value is <c>BorderStyle.Fixed3D</c>,
            this property specifies what kind of 3D border is displayed.
            </remarks>
            <seealso cref="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.BorderStyle"/>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.VerticalScrollBar">
            <summary>
            Gets or sets the vertical scroll bar used by the view when not all objects can be
            displayed at once in the given client area.
            </summary>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.HorizontalScrollBar">
            <summary>
            Gets or sets the horizontal scroll bar used by the view when not all objects can be
            displayed at once in the given client area.
            </summary>
        </member>
        <member name="P:Northwoods.Go.WinForms.DiagramControlGdiPlus.ScrollSmallChange">
            <summary>
            Gets or sets the distance to scroll when scrolling a small amount.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.Dispose(System.Boolean)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnResize(System.EventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnBackColorChanged(System.EventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.CommonEvent(System.EventArgs,System.String)">
            <summary>
            Common code that occurs on every event. Some methods may go on to change
            the properties from these defaults (ie, mouseWheel changes delta)
            </summary>
            <param name="e"></param>
            <param name="eventType"></param>
            <returns>n</returns>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnMouseLeave(System.EventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnDragLeave(System.EventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.UpdateScrollBars">
            <summary>
            Update the scroll bars for this view, changing the minimum/maximum/value
            and visibility as appropriate.
            </summary>
            <seealso cref="M:Northwoods.Go.WinForms.DiagramControlGdiPlus.LayoutScrollBars(System.Boolean)"/>
        </member>
        <member name="T:Northwoods.Go.WinForms.OverviewControl">
            <summary>
            A Control that provides display of <see cref="T:Northwoods.Go.Overview"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.OverviewControl.#ctor">
            <summary>
            Constructs a new OverviewControl.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.OverviewControl.ConstructDiagram">
            <summary>
            Called by DiagramControl constructor.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.OverviewControl.Dispose(System.Boolean)">
            <summary>
            Remove any event handlers the <see cref="T:Northwoods.Go.Overview"/> added to the observed <see cref="T:Northwoods.Go.Diagram"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Northwoods.Go.WinForms.PaletteControl">
            <summary>
            A Control that provides display of <see cref="T:Northwoods.Go.Palette"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.WinForms.PaletteControl.ConstructDiagram">
            <summary>
            Called by DiagramControl constructor.
            </summary>
        </member>
        <member name="T:Northwoods.Go.ExtensionMethods">
            <summary>
            (undocumented)
            </summary>
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.ExtensionMethods.AsGoFont(System.Drawing.Font)">
            <summary>
            Converts a System.Drawing.Font to a Northwoods.Go.Font.
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.ExtensionMethods.IsDefault``1(``0)">
            <summary>
            Determines whether a given value matches the default value for that type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.ExtensionMethods.RemoveRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the IList&lt;T&gt;.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Northwoods.Go.ExtensionMethods.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Checks if sstring contains a substring, using a given comparison.
            </summary>
            <param name="source"></param>
            <param name="value">The substring to serach for.</param>
            <param name="comparison">The type of comparison to use.</param>
        </member>
        <member name="T:Northwoods.Go.Font">
             <summary>
             Defines a particular format for text, including font face, size, weight, and style.
             </summary>
             <remarks>
             When constructing a font, properties have the following defaults if not provided:
               - <see cref="P:Northwoods.Go.Font.Family"/>: `Segoe UI`
               - <see cref="P:Northwoods.Go.Font.Size"/>: 13
               - <see cref="P:Northwoods.Go.Font.Unit"/>: <see cref="F:Northwoods.Go.FontUnit.Pixel"/>
               - <see cref="P:Northwoods.Go.Font.Style"/>: <see cref="F:Northwoods.Go.FontStyle.Regular"/>
               - <see cref="P:Northwoods.Go.Font.Weight"/>: <see cref="F:Northwoods.Go.FontWeight.Regular"/>
            
             Note that the default size unit is pixels, not points.
            
             To use a custom font file, specify a family ending with '.ttf' when constructing the font.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor(System.Drawing.Font)">
            <summary>
            Only called by <see cref="M:Northwoods.Go.ExtensionMethods.AsGoFont(System.Drawing.Font)"/>
            to provide a way to make Northwoods.Go.Fonts from system fonts.
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor">
            <summary>
            Constructs a Font with default properties.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor(System.String,System.Single)">
            <summary>
            Constructs a Font using a specified size.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor(System.String,System.Single,Northwoods.Go.FontUnit)">
            <summary>
            Constructs a Font using a specified size and unit.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor(System.String,System.Single,Northwoods.Go.FontStyle)">
            <summary>
            Constructs a Font using a specified size and style.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor(System.String,System.Single,Northwoods.Go.FontWeight)">
            <summary>
            Constructs a Font using a specified size and style.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor(System.String,System.Single,Northwoods.Go.FontStyle,Northwoods.Go.FontUnit)">
            <summary>
            Constructs a Font using a specified size, style, and unit.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor(System.String,System.Single,Northwoods.Go.FontWeight,Northwoods.Go.FontUnit)">
            <summary>
            Constructs a Font using a specified size, weight, and unit.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor(System.String,System.Single,Northwoods.Go.FontStyle,Northwoods.Go.FontWeight)">
            <summary>
            Constructs a Font using a specified size, style, and weight.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.#ctor(System.String,System.Single,Northwoods.Go.FontStyle,Northwoods.Go.FontUnit,Northwoods.Go.FontWeight)">
            <summary>
            Constructs a Font using a specified size, style, unit, and weight.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Font.Family">
            <summary>
            This read-only property returns the font's family.
            </summary>
            <remarks>
            The default value is `"Segoe UI"`.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Font.Size">
            <summary>
            This read-only property returns the font's size in units specified by <see cref="P:Northwoods.Go.Font.Unit"/>.
            </summary>
            <remarks>
            The default value is `13`.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Font.Unit">
            <summary>
            This read-only property returns the font's unit of measure.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.FontUnit.Pixel"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Font.Style">
             <summary>
             This read-only property returns the font's style.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.FontStyle.Regular"/>.
            
             This value allows a bitwise combination of <see cref="T:Northwoods.Go.FontStyle"/> values.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Font.Weight">
            <summary>
            This read-only property returns the font's weight.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.FontWeight.Regular"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Font.IsItalic">
            <summary>
            This read-only property returns whether this Font is italic.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.Parse(System.String)">
            <summary>
            This static method can be used to read in a <see cref="T:Northwoods.Go.Font"/> from a string that was produced by <see cref="M:Northwoods.Go.Font.Stringify(Northwoods.Go.Font)"/>.
            </summary>
            <remarks>
            `Font.Parse("Segoe UI;13;Pixel;Bold|Italic")` produces the Font `new Font("Segoe UI", 13, FontWeight.Bold | FontStyle.Italic, FontUnit.Pixel)`.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Font.Parse(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Font.Parse(System.String)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.Converter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.Stringify(Northwoods.Go.Font)">
            <summary>
            This static method can be used to write out a <see cref="T:Northwoods.Go.Point"/> as a string that can be read by <see cref="M:Northwoods.Go.Point.Parse(System.String)"/>.
            </summary>
            <remarks>
            `Font.Stringify(new Font("Segoe UI", 13, FontStyle.Italic, FontUnit.Pixel, FontWeight.Bold))`
            produces the string "Segoe UI;13;Pixel;Italic;Bold".
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Font.Stringify(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Font.Stringify(Northwoods.Go.Font)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.BackConverter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Font.ToString">
            <summary>
            Returns a string representation of the Font.
            </summary>
            <returns>A string representation of the current Font.</returns>
        </member>
        <member name="T:Northwoods.Go.ImageElement">
            <summary>
            Provides some kind of visual image for a <see cref="T:Northwoods.Go.Picture"/>,
            with a reference to a System.Drawing.Image.
            </summary>
            <remarks>
            When specifying a <see cref="P:Northwoods.Go.Picture.Source"/>, valid strings are:
              - an image/icon in the <see cref="P:Northwoods.Go.Diagram.ResourceManager"/>
              - an embedded resource image
              - an accessible image file
              - a web image URL
              - a base64 image string
            </remarks>
            <summary>
            An element to be displayed by a <see cref="T:Northwoods.Go.Picture"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ImageElement.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Contructs an element to be displayed by a Picture.
            </summary>
            <remarks>
            This class should only be constructed when setting <see cref="P:Northwoods.Go.Picture.Element"/> directly.
            </remarks>
            <param name="uri">the source attibute, which serves as an identifier</param>
            <param name="img">the Image to be displayed</param>
        </member>
        <member name="P:Northwoods.Go.ImageElement.Image">
            <summary>
            Gets the SKImage displayed by this ImageElement.
            </summary>
        </member>
        <member name="P:Northwoods.Go.ImageElement.Svg">
            <summary>
            Gets the SKSvg displayed by this ImageElement.
            </summary>
            <remarks>
            This property is only set if the image source was an SVG file.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.ImageElement.PlatformImage">
            <summary>
            Gets the System.Drawing.Image displayed by this ImageElement.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ImageElement._Init(System.String)">
             <summary>
             Constructs a ImageElement with the given source.
            
             A platform-specific constructor is used to construct ImageElements, and this just provides some common functionality.
             </summary>
             <param name="uri">the source attibute</param>
        </member>
        <member name="P:Northwoods.Go.ImageElement.Src">
            <summary>
            Gets the URI pointing to the image.
            </summary>
        </member>
        <member name="P:Northwoods.Go.ImageElement.Width">
            <summary>
            Gets the width of the element.
            </summary>
        </member>
        <member name="P:Northwoods.Go.ImageElement.Height">
            <summary>
            Gets the height of the element.
            </summary>
        </member>
        <member name="P:Northwoods.Go.ImageElement.IsLoaded">
            <summary>
            Gets whether this element loaded successfully.
            </summary>
        </member>
        <member name="P:Northwoods.Go.ImageElement.IsComplete">
            <summary>
            Gets whether this element has completed loading, successfully or not.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Properties.Resources.CopyCursor">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Northwoods.Go.Diagram">
             <summary>
             A Diagram is associated with a component within your application. Constructing a Diagram creates
             a the necessary page elements, along with other helpers elements.
             </summary>
             <remarks>
             **GoDiagram** will manage the contents of this element -- you should not modify the contents of the element,
             although you may style the given element (background, border, etc) and position and size it as needed.
            
             Each Diagram holds a set of <see cref="T:Northwoods.Go.Layer"/>s each of which holds some number of <see cref="T:Northwoods.Go.Part"/>s
             such as <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s.
             Each <see cref="T:Northwoods.Go.Part"/> consists of <see cref="T:Northwoods.Go.GraphObject"/>s such as <see cref="T:Northwoods.Go.TextBlock"/>s and <see cref="T:Northwoods.Go.Shape"/>s
             and <see cref="T:Northwoods.Go.Panel"/>s holding yet more GraphObjects.
            
             A Diagram and its Parts provide the visual representation of a <see cref="T:Northwoods.Go.Models.Model`3"/> that holds
             data objects for the nodes and the links.
             The model provides the way to recognize the relationships between the data.
            
             <p class="boxrun">
             Two Diagrams can display and manipulate the same Model. (<a href="../../samples/updateDemo.Html">Example</a>)
             </p>
            
             A diagram will automatically create <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s corresponding to the model data.
             The diagram has a number of named templates it uses to create the actual parts:
             <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/>, <see cref="P:Northwoods.Go.Diagram.GroupTemplateMap"/>, and <see cref="P:Northwoods.Go.Diagram.LinkTemplateMap"/>.
             Each template may have some data <see cref="T:Northwoods.Go.Models.Binding"/>s that set the part's <see cref="T:Northwoods.Go.GraphObject"/>s' properties
             based on the value of properties of the data.
            
             A simple Node template and Model data (both nodes and links) may look like this:
            
             <code language="cs">
             // define a simple Node template
             myDiagram.NodeTemplate =
               new Node(PanelLayoutAuto.Instance)
                 .Add(
                   new Shape { Figure = "RoundedRectangle" }
                     .Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                   new TextBlock { Margin = 3 }  // some room around the text
                     .Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                 );
            
             // create the model data that will be represented by Nodes and Links
             myDiagram.Model = new Model {
               NodeDataSource = new List&lt;NodeData&gt; {
                 new NodeData { Key = "Alpha", Color = "lightblue" },
                 new NodeData { Key = "Beta", Color = "orange" },
                 new NodeData { Key = "Gamma", Color = "lightgreen" },
                 new NodeData { Key = "Delta", Color = "pink" }
               },
               LinkDataSource = new List&lt;LinkData&gt; {
                 new LinkData { From = "Alpha", To = "Beta" },
                 new LinkData { From = "Alpha", To = "Gamma" },
                 new LinkData { From = "Beta", To = "Beta" },
                 new LinkData { From = "Gamma", To = "Delta" },
                 new LinkData { From = "Delta", To = "Alpha" }
               }
             };
             </code>
            
             <p class="boxrun">
             The above code is used to make the <a href="../../samples/minimal.Html">Minimal sample</a>, a simple example of
             creating a Diagram and setting its model.
             </p>
            
             <p class="boxread">
             Read about models on the <a href="../../intro/usingModels.Html">Using Models</a> page in the introduction.
             </p>
            
             A diagram is responsible for scrolling (<see cref="P:Northwoods.Go.Diagram.Position"/>) and zooming (<see cref="P:Northwoods.Go.Diagram.Scale"/>) all of the parts that it shows.
             Each <see cref="T:Northwoods.Go.Part"/> occupies some area given by its <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
            
             The union of all of the parts' bounds constitutes the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>.
             The document bounds determines the area that the diagram can be scrolled to.
             There are several properties that you can set, such as <see cref="P:Northwoods.Go.Diagram.InitialContentAlignment"/>,
             that control the initial size and position of the diagram contents.
            
             At any later time you can also explicitly set the <see cref="P:Northwoods.Go.Diagram.Position"/> and/or <see cref="P:Northwoods.Go.Diagram.Scale"/> to
             get the appearance that you want.  But you may find it easier to call methods to get the desired effect.
             For example, if you want to make a particular Node be centered in the viewport,
             call either <see cref="M:Northwoods.Go.Diagram.CenterRect(Northwoods.Go.Rect)"/> or <see cref="M:Northwoods.Go.Diagram.ScrollToRect(Northwoods.Go.Rect)"/> with the Node's <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>,
             depending on whether or not you want the view to be scrolled if the node is already in view.
            
             <p class="boxread">
             Read in the Introduction about <a href="../../intro/viewport.Html">Viewports</a>
             and the <a href="../../intro/initialView.Html">Initial Viewport</a>.
             </p>
            
             You can have the diagram perform automatic layouts of its nodes and links by setting
             <see cref="P:Northwoods.Go.Diagram.Layout"/> to an instance of the <see cref="T:Northwoods.Go.Layouts.Layout"/> subclass of your choice.
             The default <see cref="P:Northwoods.Go.Diagram.Layout"/> is an instance of the <see cref="T:Northwoods.Go.Layouts.Layout"/> base class that ignores links and
             only positions <see cref="T:Northwoods.Go.Node"/>s that do not have a location.
             This default layout will allow you to programmatically position nodes (including by loading
             from a database) and will also allow the user to manually position nodes using the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>.
            
             If you do supply a particular layout as the <see cref="P:Northwoods.Go.Diagram.Layout"/>, you can control which <see cref="T:Northwoods.Go.Part"/>s it operates
             on by setting <see cref="P:Northwoods.Go.Part.IsLayoutPositioned"/>.
             Normally, of course, it works on all top-level nodes and links.
             The layout is performed both after the model is first loaded as well as after any part is added or removed
             or changes visibility or size.
             You can disable the initial layout by setting <see cref="P:Northwoods.Go.Layouts.Layout.IsInitial"/> to false.
             You can disable later automatic layouts by setting <see cref="P:Northwoods.Go.Layouts.Layout.IsOngoing"/> to false.
            
             <p class="boxread">
             See the <a href="../../intro/layouts.Html">Layouts</a> page in the Introduction for a summary of layout behavior.
             </p>
            
             A diagram maintains a collection of selected parts, the <see cref="P:Northwoods.Go.Diagram.Selection"/>.
             To select a Part you set its <see cref="P:Northwoods.Go.Part.IsSelected"/> property to true.
            
             There are many properties, named "Allow...", that control what operations the user
             may perform on the parts in the diagram.  These correspond to the same named
             properties on <see cref="T:Northwoods.Go.Layer"/> that govern the behavior for those parts in a particular layer.
             Furthermore for some of these properties there are corresponding properties on
             <see cref="T:Northwoods.Go.Part"/>, named "...able", that govern the behavior for that individual part.
             For example, the <see cref="P:Northwoods.Go.Diagram.AllowCopy"/> property corresponds to <see cref="P:Northwoods.Go.Layer.AllowCopy"/> and
             to the property <see cref="P:Northwoods.Go.Part.Copyable"/>.
             The <see cref="M:Northwoods.Go.Part.CanCopy"/> predicate is false if any of these properties is false.
            
             <p class="boxread">
             See the <a href="../../intro/permissions.Html">Permissions</a> page for a more thorough discussion.
             </p>
            
             The <see cref="P:Northwoods.Go.Diagram.CommandHandler"/> implements various standard commands,
             such as the <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/> method and the
             <see cref="M:Northwoods.Go.CommandHandler.CanDeleteSelection"/> predicate.
            
             <p class="boxread">
             See the <a href="../../intro/commands.Html">Commands</a> page for a listing of keyboard commands and
             the use of commands in general.
             </p>
            
             The diagram supports modular behavior for mouse events by implementing "tools".
             All mouse and keyboard events are represented by <see cref="T:Northwoods.Go.InputEvent"/>s and redirected
             to the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>.
             The default tool is an instance of <see cref="T:Northwoods.Go.Tools.ToolManager"/> which keeps three lists of mode-less tools:
             <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>, <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/>, and <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/>.
             The ToolManager searches these lists when a mouse event happens to find the first tool that can run.
             It then makes that tool the new <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>, where it can continue to process input events.
             When the tool is done, it stops itself, causing the <see cref="P:Northwoods.Go.Diagram.DefaultTool"/> to be the new <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>.
            
             Mouse-down tools include:
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ActionTool"/>, to support objects like "buttons"
               - <see cref="P:Northwoods.Go.Tools.ToolManager.RelinkingTool"/>, to reconnect an existing link
               - <see cref="P:Northwoods.Go.Tools.ToolManager.LinkReshapingTool"/>, to modify the route of an existing link
               - <see cref="P:Northwoods.Go.Tools.ToolManager.RotatingTool"/>, to change the angle of an object
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ResizingTool"/>, to change the size of an object
            
             Mouse-move tools include:
               - <see cref="P:Northwoods.Go.Tools.ToolManager.LinkingTool"/>, to draw a new link
               - <see cref="P:Northwoods.Go.Tools.ToolManager.DraggingTool"/>, to move or copy the selection
               - <see cref="P:Northwoods.Go.Tools.ToolManager.DragSelectingTool"/>, to select parts within a rectangular area
               - <see cref="P:Northwoods.Go.Tools.ToolManager.PanningTool"/>, to pan the diagram
            
             Mouse-up tools include:
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ContextMenuTool"/>, to manage context menus
               - <see cref="P:Northwoods.Go.Tools.ToolManager.TextEditingTool"/>, to support in-place text editing
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ClickCreatingTool"/>, to create new parts where the user clicks
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ClickSelectingTool"/>, to select parts
            
             You can also run a tool in a modal fashion by explicitly setting <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>.
             That tool will keep running until some code replaces the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>.
             This normally happens when the current tool calls <see cref="M:Northwoods.Go.Tools.Tool.StopTool"/>, such as on a mouse-up event.
            
             <p class="boxread">
             See the <a href="../../intro/tools.Html">Tools</a> page for a listing of predefined tools and how they operate.
             </p>
            
             A diagram raises various <see cref="T:Northwoods.Go.DiagramEvent"/>s when interesting things happen that may have affected the whole diagram.
             See the documentation for <see cref="T:Northwoods.Go.DiagramEventName"/> for a complete listing.
            
             When you need to display multiple Models, but not at the same time, you can do so by using only one Diagram and setting the <see cref="P:Northwoods.Go.Diagram.Model"/> to a different one.
             These scenarios are discussed more on the
             <a href="../../intro/replacingDeleting.Html">Replacing Diagrams and Models</a> intro page.
             </remarks>
             @category Diagram
        </member>
        <member name="P:Northwoods.Go.Diagram.ResourceManager">
             <summary>
             A shared ResourceManager than can be used by all Diagrams within the application
             used to set images for <see cref="T:Northwoods.Go.Picture"/>s or load font files.
             </summary>
             <remarks>
             The default value is null.
            
             This should usually be set at the application level.
            
             <code language="cs">
             Diagram.ResourceManager = Properties.Resources.ResourceManager;
             </code>
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.#cctor">
            <summary>
            Static constructor to initialize any static fields.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.IsMouseCaptured">
            <summary>
            Gets or sets whether mouse events initiated within the Diagram will be captured.
            </summary>
            <remarks>
            The initial value is true. Setting this property does not notify about any changed event.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.RequestFrame(System.Action)">
            <summary>
            Run a callback function after a 10ms delay, yielding to the caller in the meantime.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.Immediate">
            <summary>
            Immediately perform an update if the control is ready.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.Focus">
             <summary>
             Explicitly bring focus to the Diagram's canvas.
            
             If <see cref="P:Northwoods.Go.Diagram.ScrollsPageOnFocus"/> is false, this tries to keep the page at the same scroll position
             that it had before calling <see cref="M:Northwoods.Go.Diagram.Focus"/>.
             This method is not overridable.
             </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.TransformMousePoint(Northwoods.Go.Point)">
            <summary>
            Takes a point in client coordinates and converts to document coordinates.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.SetScrollWidth">
            <summary>
            (undocumented)
            Computes the pixel width of the scrollbars
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.ComputePixelRatio">
            Can be overriden, consider overriding on Overview?
            <summary>
            (undocumented)
            Computes the device pixel ratio divided by the backing store pixel ratio.
            </summary>
            <remarks>
            Used to set pixel ratio to a value other than 1.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateViewport(Northwoods.Go.Rect,Northwoods.Go.Rect)">
            <summary>
            A special update called when only the viewport has been modified
            </summary>
            @hidden @internal
            <param name="oldv">old viewport bounds.</param>
            <param name="newv">new viewport bounds.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateScroll">
            <summary>
            Method for resizing the canvas as well as the scrollbar helper divs.
            </summary>
            <returns>false if the canvas changed size, true if the canvas did not change size</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.HandleScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            This is the event handler for both scroll bars.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.CurrentCursor">
             <summary>
             Gets or sets the current cursor for the Diagram, overriding the <see cref="P:Northwoods.Go.Diagram.DefaultCursor"/>.
            
             Setting this property does not notify about any changed event.
             Setting this value to the empty string ("") returns the Diagram's cursor to the <see cref="P:Northwoods.Go.Diagram.DefaultCursor"/>.
             </summary>
             <seealso cref="P:Northwoods.Go.Diagram.DefaultCursor"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Cursor"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.AddCustomCursor(System.String,System.Windows.Forms.Cursor)">
            <summary>
            Adds a custom cursor to the available cursors.
            </summary>
            <remarks>
            This method will replace existing custom cursors if given an existing name.
            </remarks>
            <param name="name">the string name associated with the cursor, used to specify the cursor</param>
            <param name="cursor">the cursor to be displayed</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.StartAutoScroll">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.StopAutoScroll">
            <summary>
            (undocumented)
            Stop any ongoing auto-scroll action.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.Draw(Northwoods.Go.IDrawingContext,System.Collections.Generic.HashSet{Northwoods.Go.Part})">
            @hidden @internal
            <summary>
            Draws the diagram using the given context.
            </summary>
            <param name="ctx">Special context to draw upon.</param>
            <param name="exclusion">a set of objects to exclude from drawing.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.MakeImage(Northwoods.Go.ImageDataProperties)">
            <summary>
            Create a bitmap of the current Diagram and returns it as a <see cref="T:System.Drawing.Image"/>.
            This calls <see cref="M:Northwoods.Go.Diagram.MakeImageData(Northwoods.Go.ImageDataProperties)"/>.
            </summary>
            <remarks>
            <p class="boxread">
            See the page on <a href="../../intro/makingImages.html">Making Images</a> for more usage examples.
            </p>
            At the current time, this method does not work on <see cref="T:Northwoods.Go.Overview"/>s.
            </remarks>
            <param name="properties">an <see cref="T:Northwoods.Go.ImageDataProperties"/> object detailing options arguments for image creation</param>
            <returns>a <see cref="T:System.Drawing.Image"/> depicting the Diagram.</returns>
            <seealso cref="M:Northwoods.Go.Diagram.MakeImageData(Northwoods.Go.ImageDataProperties)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.MakeImageData(Northwoods.Go.ImageDataProperties)">
            <summary>
            Create a bitmap of the current Diagram encoded as a base64 string.
            </summary>
            <example>
            <code language="cs">
            myDiagram.MakeImageData(new ImageDataProperties {
              Scale = 1.5,
              Size = new Size(100, 100)
            });
            </code>
            </example>
            <remarks>
            <p class="boxread">
            See the page on <a href="../../intro/makingImages.html">Making Images</a> for more usage examples.
            </p>
            At the current time, this method does not work on <see cref="T:Northwoods.Go.Overview"/>s.
            </remarks>
            <param name="properties">an <see cref="T:Northwoods.Go.ImageDataProperties"/> object detailing options arguments for image creation</param>
            <returns>a base64-encoded string describing an image</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.MakeSvg(System.String,Northwoods.Go.ImageDataProperties)">
            <summary>
            (undocumented)
            Create an SVG file for the current Diagram.
            </summary>
            <example>
            <code language="cs">
            myDiagram.MakeSvg("myDiagram.svg", new ImageDataProperties {
              Scale = 1.5,
              Size = new Size(100, 100)
            });
            </code>
            </example>
            <remarks>
            At the current time, this method does not work on <see cref="T:Northwoods.Go.Overview"/>s and only produces an SVG snapshot.
            </remarks>
            <param name="path">the output path for the PDF file</param>
            <param name="properties">an <see cref="T:Northwoods.Go.ImageDataProperties"/> object detailing options arguments for image creation</param>
            <seealso cref="M:Northwoods.Go.Diagram.MakeImage(Northwoods.Go.ImageDataProperties)"/>
            <seealso cref="M:Northwoods.Go.Diagram.MakePdf(System.String,Northwoods.Go.ImageDataProperties)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.MakePdf(System.String,Northwoods.Go.ImageDataProperties)">
            <summary>
            (undocumented)
            Create a PDF of the current Diagram.
            </summary>
            <example>
            <code language="cs">
            myDiagram.MakePdf("myDiagram.pdf", new ImageDataProperties {
              Scale = 1.5,
              Size = new Size(100, 100)
            });
            </code>
            </example>
            <remarks>
            At the current time, this method does not work on <see cref="T:Northwoods.Go.Overview"/>s and only produces image-based PDFs.
            </remarks>
            <param name="path">the output path for the PDF file</param>
            <param name="properties">an <see cref="T:Northwoods.Go.ImageDataProperties"/> object detailing options arguments for image creation</param>
            <seealso cref="M:Northwoods.Go.Diagram.MakeImage(Northwoods.Go.ImageDataProperties)"/>
            <seealso cref="M:Northwoods.Go.Diagram.MakeSvg(System.String,Northwoods.Go.ImageDataProperties)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.GenerateBase64String(System.Int32,System.Int32,Northwoods.Go.Margin,System.Double,Northwoods.Go.Point,System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.String,System.Boolean,System.Boolean)">
            <summary>
            Generate a base64 string for this diagram with using the options passed to <see cref="M:Northwoods.Go.Diagram.MakeImageData(Northwoods.Go.ImageDataProperties)"/>.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
            <param name="padding"></param>
            <param name="scale"></param>
            <param name="position"></param>
            <param name="parts"></param>
            <param name="background"></param>
            <param name="showTemporary"></param>
            <param name="showGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.#ctor">
             <summary>
             Construct an empty Diagram. You will not normally call this constructor.
             </summary>
             <remarks>
             You will normally initialize properties of the Diagram that control its appearance and behavior.
             These properties include:
               - templates (such as <see cref="P:Northwoods.Go.Diagram.NodeTemplate"/> or <see cref="P:Northwoods.Go.Diagram.LinkSelectionAdornmentTemplate"/>),
               - an automatic layout (if desired, <see cref="P:Northwoods.Go.Diagram.Layout"/>),
               - positioning or scaling (such as <see cref="P:Northwoods.Go.Diagram.InitialContentAlignment"/> or <see cref="P:Northwoods.Go.Diagram.InitialAutoScale"/>),
               - permissions (such as <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Diagram.AllowDelete"/>), or
               - Tool or CommandHandler customization (such as <see cref="P:Northwoods.Go.CommandHandler.ArchetypeGroupData"/> or
                 <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/>): `diagram.ToolManager.DragSelectingTool.IsEnabled = false;`.
            
             Then you will need to construct a Model (usually a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>) for the Diagram,
             initialize its data by setting its <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> and other properties,
             and then set the diagram's <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.Cleanup">
            <summary>
            Called when disposing Diagram to clean up any references.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.LicenseKey">
             <summary>
             This static/shared property holds the runtime license key that permits distribution
             of applications using this control without displaying a licensing watermark.
             </summary>
             <remarks>
             This should always be set before any <see cref="T:Northwoods.Go.Diagram"/> is created.
            
             For more details, read the intro documentation.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.LicenseKeyForDLL(System.String)">
             <summary>
             This static/shared method associates a runtime license key with the assembly that calls this method.
             </summary>
             <remarks>
             This should always be called before your assembly constructs a <see cref="T:Northwoods.Go.Diagram"/>.
            
             The recommended way to do that is to use a static initializer or static constructor
             in one of the classes defined in your DLL.
            
             For example:
             <code language="cs">
               private static string _LK = Diagram.LicenseKeyForDLL("...");
             </code>
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.Clear">
             <summary>
             Removes all Parts from the Diagram, including unbound Parts except for the background grid,
             and also clears out the <see cref="P:Northwoods.Go.Diagram.Model"/> and <see cref="T:Northwoods.Go.Models.UndoManager"/> and clipboard.
             This operation is not undoable.
             </summary>
             <remarks>
             Alternative actions are to replace the <see cref="P:Northwoods.Go.Diagram.Model"/> with a new <see cref="T:Northwoods.Go.Models.Model`3"/>
             (probably a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>
             or a <see cref="T:Northwoods.Go.Models.TreeModel`3"/>),
             or to set <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> with an empty JavaScript Array
             (and <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/>).
            
             This does not remove any listeners from the diagram.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.ClearAllParts(System.Boolean)">
            @hidden @internal
            <summary>
            Just remove all Parts from this Diagram without affecting the model,
            and while still keeping the background grid and clipboard.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.ClearClipboard">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.Reset">
            <summary>
            (undocumented)
            Call <see cref="M:Northwoods.Go.Diagram.Clear"/> and also restore the templates, layers, layout and various Diagram properties to their original state.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram._SetupTemplates">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.SetRTL">
            @hidden
            <summary>
            (undocumented)
            Used in Diagram constructor setup, this computes the pixel width of the scrollbars
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.ToString">
            <summary>
            Undocumented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.ToString(System.Int32)">
            @hidden @internal
            <param name="details">int Optional: If greater than zero, this includes descriptions of each layer.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RememberDiagram(Northwoods.Go.Diagram)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.GetLastDiagram">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.AddListeners">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.DoMouseMove">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.DoMouseDown">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.DoMouseUp">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.DoMouseWheel">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.DoKeyDown">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.DoKeyUp">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.DoFocus">
             <summary>
             (undocumented)
             Focus the Diagram's canvas, allowing it to receive keyboard events.
             </summary>
             <remarks>
             This is called upon activation of MouseDown or MouseMove tools, or on any MouseUp.
            
             This is normally implemented as a simple call to <see cref="M:Northwoods.Go.Diagram.Focus"/>.
             Override this if you do not wish to focus the canvas under certain circumstances.
             However the method should call <see cref="M:Northwoods.Go.Diagram.Focus"/> most of the time in order to get the normal behaviors.
            
             <see cref="P:Northwoods.Go.Diagram.LastInput"/> can be used to inspect the MouseDown event that calls this method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram._SetupLayers">
            @hidden @internal
            <summary>
            Called by setup, initializes default layers
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram._SetupBackgroundGrid">
            @hidden @internal
            <summary>
            Called by .Grid getter or setter only, initializes .Grid
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.ComputeBounds">
             <summary>
             This is called during a Diagram update to determine a new value for <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>.
             </summary>
             <remarks>
             By default this computes the union of the bounds of all the visible
             <see cref="T:Northwoods.Go.GraphObject"/>s in this Diagram, unless <see cref="P:Northwoods.Go.Diagram.FixedBounds"/> is set.
            
             This ignores parts for which <see cref="M:Northwoods.Go.Part.IsVisible"/> is false and
             ignores those for which <see cref="P:Northwoods.Go.Part.IsInDocumentBounds"/> is false.
             The returned value includes the addition of the <see cref="P:Northwoods.Go.Diagram.Padding"/> margin.
            
             To compute the bounds of a collection of Parts, call <see cref="M:Northwoods.Go.Diagram.ComputePartsBounds(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/>.
             </remarks>
             <returns>a Rect in document coordinates.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.ComputeBoundsNoValidate">
            @hidden @internal
            <summary>
            Always copies/creates new rect
            </summary>
            <returns>a Rect in document coordinates.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.ComputePartsBounds(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)">
            <summary>
            Find the union of the <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> of all of the <see cref="T:Northwoods.Go.Part"/>s in the given collection,
            excluding Links unless the second argument is true.
            </summary>
            <remarks>
            Unlike <see cref="M:Northwoods.Go.Diagram.ComputeBounds"/>, this ignores the visibility of each Part and does not add any padding to the result.
            </remarks>
            <param name="coll">an iterable collection or Array of <see cref="T:Northwoods.Go.Part"/>s.</param>
            <param name="includeLinks">defaults to false</param>
            <returns>This returns the bounding area of the given Parts;
            if there are no Parts in the collection, this returns a Rect with zero width and height and an X and Y that are NaN.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.OnContentAlignmentChanged(System.Boolean)">
            @hidden @internal
            <summary>
            This method is called when the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>
            or <see cref="P:Northwoods.Go.Diagram.ContentAlignment"/> properties change.
            </summary>
            <remarks>
            This may change the <see cref="P:Northwoods.Go.Diagram.Position"/> and/or <see cref="P:Northwoods.Go.Diagram.Scale"/> in order to
            maintain the desired content alignment, depending on the <see cref="P:Northwoods.Go.Diagram.AutoScale"/> policy.
            The <see cref="P:Northwoods.Go.Diagram.Scale"/> will not be greater than 1.
            </remarks>
            <param name="initial">whether or not the content alignment is occurring for the first time. Default is false.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram._ComputeScaleForStretch(Northwoods.Go.AutoScale)">
            @hidden @internal
            <param name="policy">Diagram enum (AutoScale.None, .Uniform, or .UniformToFill)</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.ZoomToFit">
            <summary>
            Scales the Diagram to uniformly fit into the viewport. To have this done automatically,
            set the Diagram's <see cref="P:Northwoods.Go.Diagram.AutoScale"/> to <see cref="F:Northwoods.Go.AutoScale.Uniform"/>.
            </summary>
            <remarks>
            To animate ZoomToFit, use <see cref="M:Northwoods.Go.CommandHandler.ZoomToFit"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.CommandHandler.ZoomToFit"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.ZoomToRect(Northwoods.Go.Rect,Northwoods.Go.AutoScale)">
            <summary>
            Modifies the <see cref="P:Northwoods.Go.Diagram.Scale"/> and <see cref="P:Northwoods.Go.Diagram.Position"/> of the Diagram
            so that the viewport displays a given document-coordinates rectangle.
            </summary>
            <param name="r">rectangular bounds in document coordinates.</param>
            <param name="scaling">an optional value of either <see cref="F:Northwoods.Go.AutoScale.Uniform"/> (the default) or <see cref="F:Northwoods.Go.AutoScale.UniformToFill"/>.</param>
        </member>
        <member name="P:Northwoods.Go.Diagram.IsAligning">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.AlignDocument(Northwoods.Go.Spot,Northwoods.Go.Spot)">
            <summary>
            Aligns the Diagram's <see cref="P:Northwoods.Go.Diagram.Position"/> based on a desired document <see cref="T:Northwoods.Go.Spot"/> and viewport <see cref="T:Northwoods.Go.Spot"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FocusElement(Northwoods.Go.GraphObject)">
            
             <summary>
             (undocumented)
             Sets the GraphObject on which to focus the viewport.
             </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram._SetupPos(Northwoods.Go.Rect,System.Double,System.Double,Northwoods.Go.Spot,System.Boolean)">
            @hidden @internal
            <summary>
            Code to keep the Diagram constrained
            </summary>
            <param name="bounds">typically documentBounds.</param>
            <param name="viewwidth"></param>
            <param name="viewheight"></param>
            <param name="contentAlignment"></param>
            <param name="initial"></param>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindPartAt(Northwoods.Go.Point,System.Boolean)">
            <summary>
            This convenience function finds the front-most <see cref="T:Northwoods.Go.Part"/>
            that is at a given point that might be selectable and that is not in a temporary layer.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Diagram.FindElementAt(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject})"/> with appropriate arguments,
            but ignoring Layers that are <see cref="P:Northwoods.Go.Layer.IsTemporary"/>.
            </remarks>
            <param name="p">a Point in document coordinates.</param>
            <param name="selectable">Whether to only consider parts that are <see cref="P:Northwoods.Go.Part.Selectable"/>. The default is true.</param>
            <seealso cref="M:Northwoods.Go.Diagram.FindElementAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindElementsAt``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartsAt``2(Northwoods.Go.Point,System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartsIn``2(Northwoods.Go.Rect,System.Boolean,System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartsNear``2(Northwoods.Go.Point,System.Double,System.Boolean,System.Boolean,``1)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})">
             <summary>
             Find the front-most <see cref="T:Northwoods.Go.GraphObject"/> at the given point in document coordinates.
             </summary>
             <remarks>
             If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any objects in that layer.
             However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            
             Example usage:
             <code language="cs">
             // Returns the top-most selectable Part, or null if there isn't one
             myDiagram.FindElementAt&lt;Part&gt;(
               myDiagram.LastInput.DocumentPoint,
               // Navigation function
               (x) => { return x.Part; },
               // Because of the navigation function, p will always be a Part.
               (p) => { return p.CanSelect(); }
             );
             </code>
             </remarks>
             <param name="p">A Point in document coordinates.</param>
             <param name="navig">A function taking a GraphObject and
             returning a GraphObject, defaulting to the identity.</param>
             <param name="pred">A function taking the GraphObject
             returned by navig and returning true if that element should be returned,
             defaulting to a predicate that always returns true.</param>
             <returns>The first GraphObject returned by the *navig* function
             and satisfying the *pred* function that is at the point *p*, in Z-order from front to back,
             or else null if nothing is found.</returns>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementsAt``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindPartAt(Northwoods.Go.Point,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementAt(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Diagram.FindElementAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})"/>,
            returning a GraphObject rather than a specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementAtNoTemp``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})">
            @hidden @internal
            <summary>
            Like FindElementAt but excludes temporary layers.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any objects in that layer.
            However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindPartsAt``2(Northwoods.Go.Point,System.Boolean,``1)">
            <summary>
            This convenience function finds all <see cref="T:Northwoods.Go.Part"/>s that are at a point in document coordinates
            and that are not in temporary layers.
            </summary>
            <param name="p">A Point in document coordinates.</param>
            <param name="selectable">Whether to only consider parts that are <see cref="P:Northwoods.Go.Part.Selectable"/>. The default is true.</param>
            <param name="coll">An optional collection to add the results to.</param>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartAt(Northwoods.Go.Point,System.Boolean)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartsIn``2(Northwoods.Go.Rect,System.Boolean,System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartsNear``2(Northwoods.Go.Point,System.Double,System.Boolean,System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindElementsAt``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindPartsAt(Northwoods.Go.Point,System.Boolean,System.Collections.Generic.ICollection{Northwoods.Go.Part})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Diagram.FindPartsAt``2(Northwoods.Go.Point,System.Boolean,``1)"/>,
            returning a collection of Parts rather than a collection of the specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsAtNoTemp``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)">
            @hidden @internal
            <summary>
            Like FindElementsAt but excludes temporary layers.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any objects in that layer.
            However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsAt``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)">
             <summary>
             Find a collection of <see cref="T:Northwoods.Go.GraphObject"/>s at the given point in document coordinates.
             </summary>
             <remarks>
             If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any objects in that layer.
             However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            
             Example usage:
             <code language="cs">
             // Returns the Nodes that are at a given point, overlapping each other
             myDiagram.FindElementsAt&lt;Node&gt;(somePoint,
               // Navigation function -- only return Nodes
               (x) => { var p = x.Part; return (p is Node) ? p : null; }
             );
             </code>
             </remarks>
             <param name="p">A Point in document coordinates.</param>
             <param name="navig">A function taking a GraphObject and
             returning a GraphObject, defaulting to the identity.
             If this function returns null, the given GraphObject will not be included in the results.</param>
             <param name="pred">A function taking the GraphObject
             returned by navig and returning true if that element should be returned,
             defaulting to a predicate that always returns true.</param>
             <param name="coll">An optional collection to add the results to.</param>
             <returns>a collection of GraphObjects returned by the *navig* function
             and satisfying the *pred* that are located at the point *p*, or else an empty collection.
             If a collection was passed in, it is returned.</returns>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindPartsAt``2(Northwoods.Go.Point,System.Boolean,``1)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsAt(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject},System.Collections.Generic.ICollection{Northwoods.Go.GraphObject})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Diagram.FindElementsAt``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)"/>,
            returning a collection of GraphObjects rather than a collection of the specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindPartsIn``2(Northwoods.Go.Rect,System.Boolean,System.Boolean,``1)">
            <summary>
            This convenience function finds <see cref="T:Northwoods.Go.Part"/>s that are inside or that intersect
            a given <see cref="T:Northwoods.Go.Rect"/> in document coordinates.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Diagram.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/> with appropriate arguments,
            but ignoring Layers that are <see cref="P:Northwoods.Go.Layer.IsTemporary"/>.
            </remarks>
            <param name="r">a Rect in document coordinates.</param>
            <param name="partialInclusion">Whether a Part can match if it merely intersects the rectangular area (true) or
            if it must be entirely inside the rectangular area (false). The default value is false.</param>
            <param name="selectable">Whether to only consider parts that are <see cref="P:Northwoods.Go.Part.Selectable"/>. The default is true.</param>
            <param name="coll">An optional collection to add the results to.</param>
            <returns></returns>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartAt(Northwoods.Go.Point,System.Boolean)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartsAt``2(Northwoods.Go.Point,System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartsNear``2(Northwoods.Go.Point,System.Double,System.Boolean,System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindPartsIn(Northwoods.Go.Rect,System.Boolean,System.Boolean,System.Collections.Generic.ICollection{Northwoods.Go.Part})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Diagram.FindPartsIn``2(Northwoods.Go.Rect,System.Boolean,System.Boolean,``1)"/>,
            returning a collection of Parts rather than a collection of the specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)">
             <summary>
             Returns a collection of all <see cref="T:Northwoods.Go.GraphObject"/>s that are inside or that intersect
             a given <see cref="T:Northwoods.Go.Rect"/> in document coordinates.
             </summary>
             <remarks>
             If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any objects in that layer.
             However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            
             Example usage:
             <code language="cs">
             // Returns the Links that intersect a given rectangle and have a certain data property
             myDiagram.FindElementsIn&lt;Link&gt;(someRect,
               // Navigation function -- only return Links
               (x) => { var p = x.Part; return (p is Link) ? p : null; },
               // Predicate that always receives a Link, due to above navigation function
               (link) => { return link.Data.SomeProp > 17; },
               // the links may only partly overlap the given rectangle
               true
             );
             </code>
             </remarks>
             <param name="r">A Rect in document coordinates.</param>
             <param name="navig">A function taking a GraphObject and
             returning a GraphObject, defaulting to the identity.
             If this function returns null, the given GraphObject will not be included in the results.</param>
             <param name="pred">A function taking the GraphObject
             returned by navig and returning true if that element should be returned,
             defaulting to a predicate that always returns true.</param>
             <param name="partialInclusion">Whether an element can match if it merely intersects the rectangular area (true) or
             if it must be entirely inside the rectangular area (false). The default value is false.</param>
             <param name="coll">An optional collection to add the results to.</param>
             <returns>a collection of GraphObjects returned by the *navig* function
             and satisfying the *pred* function that are within the rectangle *r*, or else an empty collection.
             If a collection was passed in, it is returned.</returns>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementsAt``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindPartsIn``2(Northwoods.Go.Rect,System.Boolean,System.Boolean,``1)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsIn(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject},System.Boolean,System.Collections.Generic.ICollection{Northwoods.Go.GraphObject})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Diagram.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>,
            returning a collection of GraphObjects rather than a collection of the specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsIn2``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,System.Predicate{``0},System.Boolean,``1)">
            @hidden @internal
            <summary>
            Special internal FindElementsIn that checks an extra predicate, in order to short-circuit some lookups
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsInNoTemp``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)">
            @hidden @internal
            <summary>
            Like FindElementsIn but excludes temporary layers
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindPartsNear``2(Northwoods.Go.Point,System.Double,System.Boolean,System.Boolean,``1)">
            <summary>
            This convenience function finds <see cref="T:Northwoods.Go.Part"/>s that are within a certain distance
            of a given point in document coordinates.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Diagram.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/> with appropriate arguments,
            but ignoring Layers that are <see cref="P:Northwoods.Go.Layer.IsTemporary"/>.
            </remarks>
            <param name="p">A Point in document coordinates.</param>
            <param name="dist">The distance from the point.</param>
            <param name="partialInclusion">Whether an element can match if it merely intersects the circular area (true) or
            if it must be entirely inside the circular area (false). The default is true.</param>
            <param name="selectable">Whether to only consider parts that are <see cref="P:Northwoods.Go.Part.Selectable"/>. The default is true.</param>
            <param name="coll">An optional collection to add the results to.</param>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartAt(Northwoods.Go.Point,System.Boolean)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartsAt``2(Northwoods.Go.Point,System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindPartsIn``2(Northwoods.Go.Rect,System.Boolean,System.Boolean,``1)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindPartsNear(Northwoods.Go.Point,System.Double,System.Boolean,System.Boolean,System.Collections.Generic.ICollection{Northwoods.Go.Part})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Diagram.FindPartsNear``2(Northwoods.Go.Point,System.Double,System.Boolean,System.Boolean,``1)"/>,
            returning a collection of Parts rather than a collection of the specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)">
             <summary>
             Returns a collection of all <see cref="T:Northwoods.Go.GraphObject"/>s that are within a certain distance
             of a given point in document coordinates.
             </summary>
             <remarks>
             If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any elements in that layer.
             However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            
             Example usage:
             <code language="cs">
             // Returns the Nodes that intersect a given circular area and have a certain data property
             myDiagram.FindElementsNear&lt;Node&gt;(somePoint,
               // The circular area is centered at somePoint and has radius 100
               100,
               // Navigation function -- only return Nodes
               (x) => { var p = x.Part; return (p is Node) ? p : null; },
               // Predicate that always receives a Node, due to above navigation function
               (node) => { return node.Data.SomeProp > 17; },
               // the nodes may only partly overlap the given circular area
               true
             );
             </code>
             </remarks>
             <param name="p">A Point in document coordinates.</param>
             <param name="dist">The distance from the point.</param>
             <param name="navig">A function taking a GraphObject and
             returning a GraphObject, defaulting to the identity.
             If this function returns null, the given GraphObject will not be included in the results.</param>
             <param name="pred">A function taking the GraphObject
             returned by navig and returning true if that element should be returned,
             defaulting to a predicate that always returns true.</param>
             <param name="partialInclusion">Whether an element can match if it merely intersects the circular area (true) or
             if it must be entirely inside the circular area (false).  The default value is true.
             The default is true.</param>
             <param name="coll">An optional collection to add the results to.</param>
             <returns>a collection of GraphObjects returned by the *navig* function
             and satisfying the *pred* that are located near the point *p*, or else an empty collection.
             If a collection was passed in, it is returned.</returns>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementsAt``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindPartsNear``2(Northwoods.Go.Point,System.Double,System.Boolean,System.Boolean,``1)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsNear(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject},System.Boolean,System.Collections.Generic.ICollection{Northwoods.Go.GraphObject})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Diagram.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>,
            returning a collection of GraphObjects rather than a collection of the specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindElementsNearNoTemp``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)">
            @hidden @internal
            <summary>
            Like FindElementsNear but excludes temporary layers
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.InvalidateDocumentBounds">
            @hidden
            <summary>
            (undocumented)
            Requests that the Diagram updates its <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> in the near-future.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateBounds">
            @hidden @internal
            <summary>
            Call <see cref="M:Northwoods.Go.Diagram.ComputeBounds"/> and set <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.Redraw">
            <summary>
            (undocumented)
            Invalidates all non-layout diagram state and forces an immediate redraw.
            Because this can be very inefficient, to discourage its use it remains an undocumented part of the API.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RedrawLater">
            <summary>
            Calls InvalidateDraw after 300ms of not being called.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.ResizeLater">
            <summary>
            Calls MaybeResize after 250 ms of not being called.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.IsUpdateRequested">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.DelayInitialization(System.Action{Northwoods.Go.Diagram})">
            <summary>
            Updates the diagram immediately, then resets initialization flags so that
            actions taken in the argument function will be considered part of Diagram initialization,
            and will participate in initial layouts, <see cref="P:Northwoods.Go.Diagram.InitialAutoScale"/>, <see cref="P:Northwoods.Go.Diagram.InitialContentAlignment"/>, etc.
            </summary>
            <remarks>
            This is useful in situations where you do not wish for the first content added to the diagram to be considered
            the "initial" content, such as with a Node that represents a "Loading" bar.
            </remarks>
            <param name="func">an optional procedure taking a Diagram argument to perform as part of another diagram initialization.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RequestUpdate(System.Boolean)">
             <summary>
             Usage of this method is uncommon and may affect performance,
             for efficiency do not call this method unless you have a well-defined need.
             Normally, Diagrams update automatically, and completeing a transaction ensures an immediate update.
             </summary>
             <remarks>
             The most common reason to call this method when the container has changed size but the window has not changed size,
             and the Diagram needs to be notified of this change. See an example of resizing diagrams
             <a href="../../intro/resizing.Html">here</a>.
            
             Requests that in the near-future the diagram makes sure all GraphObjects are arranged,
             recomputes the document bounds, updates the scrollbars, and redraws the viewport.
             </remarks>
             <param name="alwaysQueueUpdate">If true the Diagram will queue another update,
             even if an update is already occurring. The default value is false.
             Side effects in an "InitialLayoutCompleted" DiagramEvent listener might necessitate setting this parameter.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.MaybeUpdate">
            <summary>
            (undocumented)
            The use of this method at the wrong time may have some unexpected side-effects.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateScrollbars(System.Boolean,System.Boolean)">
            @hidden @internal
            <param name="validateparts"></param>
            <param name="align">whether to call onContentAlignmentChanged. Obviously onContentAlignmentChanged should have this flag as false!</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.DoUpdate(System.Boolean)">
            @hidden @internal
            <summary>
            Ensure that all GraphObjects are arranged, update the document bounds and the scrollbars,
            and draw all objects in the viewport.
            </summary>
            <remarks>
            **Caution:** this method can be very expensive in time and space.
            Avoid calling this method except in infrequent circumstances where redrawing immediately is necessary.
            Under most circumstances you should allow the transaction to perform its normal updating process.
            Calling <see cref="M:Northwoods.Go.Diagram.RequestUpdate(System.Boolean)"/> is the usually the right thing to do.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.IsInitialLayoutCompleted">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.OnInitialLayoutCompleted">
            @hidden @internal
            <summary>
            This overridable method is called after the first layout has been performed
            and the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> has been computed.
            </summary>
            <remarks>
            This uses the <see cref="P:Northwoods.Go.Diagram.AutoScale"/>, <see cref="P:Northwoods.Go.Diagram.InitialDocumentSpot"/>, and <see cref="P:Northwoods.Go.Diagram.InitialViewportSpot"/>
            properties to set the <see cref="P:Northwoods.Go.Diagram.Scale"/> and <see cref="P:Northwoods.Go.Diagram.Position"/>
            properties for the initial appearance of the Diagram.
            It then raises the "InitialLayoutCompleted" <see cref="T:Northwoods.Go.DiagramEvent"/>.
            It also clears out the <see cref="T:Northwoods.Go.Models.UndoManager"/>'s recorded changes, if any.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.OnLayoutCompleted">
            @hidden @internal
            <summary>
            This overridable method is called after each layout has been performed
            and the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> has been computed.
            </summary>
            <remarks>
            This raises the "LayoutCompleted" <see cref="T:Northwoods.Go.DiagramEvent"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.InvalidatePart(Northwoods.Go.Part)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.ValidateParts">
            @hidden @internal
            <summary>
            Validate all of the invalid Parts.
            </summary>
            <remarks>
            For efficiency, some parts can only be measured when other parts are valid.
            For example, a Link should not be measured until the two connected Nodes have been arranged.
            Measuring and arranging some parts will cause other parts to become invalid.
            For example, measuring and arranging a Link will result in routing that may reposition label nodes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.Validate(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Collections.Generic.HashSet{Northwoods.Go.Part})">
            @hidden @internal
            <summary>
            One pass of the validation loop.
            For Parts that probably should not be measured/arranged yet due to dependencies on other Parts,
            instead of calling Part.Measure and arrange, just add the Part to the DELAY hashset,
            which will be passed in as the INVALIDS hashset in the next iteration.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.MeasureArrangeGroup(Northwoods.Go.Group)">
            @hidden @internal
            <summary>
            Recursively walk through group and measure/arrange all its member parts
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RedrawViewport(System.Collections.Generic.List{Northwoods.Go.Rect},System.Collections.Generic.List{Northwoods.Go.Rect},System.Double,System.Double)">
            @hidden @internal
            <summary>
            Uses a saved image to to redraw the viewport at a different location.
            </summary>
            <remarks>
            After drawing the image, this draws the contents that intersects with a given set of rects.
            This is used for scrolling optimizations where two or three regions need to be redrawn.
            </remarks>
            <param name="rects">clipping region rects in document coordinates.</param>
            <param name="viewRects">precise (integer coordinate) clipping region rects in viewport coordinates.</param>
            <param name="x">coordinates for the saved image.</param>
            <param name="y"></param>
        </member>
        <member name="M:Northwoods.Go.Diagram.DrawForeign(Northwoods.Go.IDrawingContext,Northwoods.Go.Margin,Northwoods.Go.Size,System.Double,Northwoods.Go.Point,System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.String,System.Boolean,System.Boolean)">
            @hidden @internal
            <summary>
            Draws the contents of all layers onto a foreign context
            </summary>
            <param name="ctx">Special context to draw upon.</param>
            <param name="padding">Padding transform MUST be taken care of here, but padding size must be taken care of before.</param>
            <param name="size">specific drawing size (typically the size of ctx).</param>
            <param name="scale">specific drawing scale.</param>
            <param name="position">specific drawing position.</param>
            <param name="parts">a set of parts to draw instead of everything.</param>
            <param name="background">a background color.</param>
            <param name="showTemporary"></param>
            <param name="showGrid"></param>
        </member>
        <member name="M:Northwoods.Go.Diagram.GetRenderingHint(System.String)">
            <summary>
            (undocumented)
            Get value of a given rendering hint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.SetRenderingHint(System.String,System.Object)">
            <summary>
            (undocumented)
            Set a rendering hint and draw immediately.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.ResetRenderingHints">
            @hidden @internal
            <summary>
            Set back to defaults
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.CommitRenderingHints(Northwoods.Go.IDrawingContext)">
            @hidden @internal
            <summary>
            Used at draw time
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.GetInputOption(System.String)">
            <summary>
            (undocumented)
            Get value of a given input option.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.SetInputOption(System.String,System.Object)">
            Current input options:
            extraTouchArea: A number describing the width and height to increase small touch objects, default 10
            extraTouchThreshold: A number describing the real-pixel size an object must be to increase its touch area, default 10
            <summary>
            (undocumented)
            Set value of a given input option
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.ResetInputOptions">
            @hidden @internal
            <summary>
            Set back to defaults
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.ClearDelayedGeometries">
            @hidden @internal
            <summary>
            so full geometries don't get created during dragging tool or animation operations
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.InvalidateDraw(System.Nullable{Northwoods.Go.Rect})">
            @hidden @internal
            <summary>
            Causes the diagram to redraw eventually. Use Diagram.Redraw for immediate redrawing.
            </summary>
            <param name="rect1">An optional area to invalidate in document coordinates.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.InvalidateViewport(Northwoods.Go.Rect,Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Causes the diagram to redraw.
            </summary>
            <param name="oldv">old viewport bounds.</param>
            <param name="newv">new viewport bounds.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.InvalidateScroll">
            @hidden @internal
            <summary>
            Causes the diagram to update the scrollbars.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.InvalidateViewportElements">
            @hidden @internal
            <summary>
            Causes the diagram to redraw.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.ValidateCanvasSize">
            @hidden @internal
            <summary>
            Flag is called instead of updateCanvasSize, this is called in draw methods
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateCanvasSize(System.Double,System.Double)">
            @hidden @internal
            <summary>
            The only method that should be resizing the canvas
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateScrollCore">
            @hidden @internal
            <summary>
            Method for resizing the canvas as well as the scrollbar helper divs.
            </summary>
            <returns>false if the canvas changed size, true if the canvas did not change size</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.Add(Northwoods.Go.Part)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Part"/> to the <see cref="T:Northwoods.Go.Layer"/> that matches the Part's <see cref="P:Northwoods.Go.Part.LayerName"/>,
            or else the default layer, which is named with the empty string.
            </summary>
            <remarks>
            Normally parts added to a diagram are top-level parts.
            If you want nodes to be members of a <see cref="T:Northwoods.Go.Group"/>, in addition to calling this method
            call <see cref="M:Northwoods.Go.Group.AddMembers(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/> or set each <see cref="P:Northwoods.Go.Part.ContainingGroup"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Diagram.Remove(Northwoods.Go.Part)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.InternalAdd(Northwoods.Go.Part)">
            @hidden @internal
            <summary>
            This is called from <see cref="M:Northwoods.Go.Layer.InternalAdd(System.Int32,Northwoods.Go.Part,System.Boolean)"/> for bookkeeping.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.InternalRemove(Northwoods.Go.Part)">
            @hidden @internal
            <summary>
            This is called from <see cref="M:Northwoods.Go.Layer.InternalRemove(System.Int32,Northwoods.Go.Part,System.Boolean)"/> for bookkeeping.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.Remove(Northwoods.Go.Part)">
            <summary>
            Removes a <see cref="T:Northwoods.Go.Part"/> from its <see cref="T:Northwoods.Go.Layer"/>, provided the Layer is in this Diagram.
            </summary>
            <remarks>
            Removing a <see cref="T:Northwoods.Go.Node"/> will also remove any Links that are connected with it.
            Removing a <see cref="T:Northwoods.Go.Group"/> will also remove all of its members.
            Removing a <see cref="T:Northwoods.Go.Link"/> will also remove all of its label Nodes, if it has any.
            </remarks>
            <seealso cref="M:Northwoods.Go.Diagram.Add(Northwoods.Go.Part)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.DoRemove(Northwoods.Go.Part,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.RemoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)">
             <summary>
             This method removes from this Diagram all of the <see cref="T:Northwoods.Go.Part"/>s in a collection.
             </summary>
             <remarks>
             Removing a <see cref="T:Northwoods.Go.Node"/> will also remove any Links that are connected with it.
             Removing a <see cref="T:Northwoods.Go.Group"/> will also remove all of its members.
             Removing a <see cref="T:Northwoods.Go.Link"/> will also remove all of its label Nodes, if it has any.
            
             This does not perform a transaction nor does it raise a <see cref="T:Northwoods.Go.DiagramEvent"/>.
             Call <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/>, which calls this method,
             if you want to delete all selected Parts.
             The <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/> command may delete other Parts as well, depending on <see cref="P:Northwoods.Go.CommandHandler.DeletesTree"/>.
            
             At this time there is no "AddParts" method -- just call <see cref="M:Northwoods.Go.Diagram.Add(Northwoods.Go.Part)"/> on each Part.
             </remarks>
             <param name="coll">A collection of <see cref="T:Northwoods.Go.Part"/>s.</param>
             <param name="check">Whether to check <see cref="M:Northwoods.Go.Part.CanDelete"/> on each part; default value is false.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Diagram,System.Boolean)">
             <summary>
             Make a copy of a collection of <see cref="T:Northwoods.Go.Part"/>s and return them in a dictionary mapping each original Part to its copy.
             It may optionally add them to a given <see cref="T:Northwoods.Go.Diagram"/>.
             </summary>
             <remarks>
             Copying a <see cref="T:Northwoods.Go.Group"/> will also copy its member Nodes and Links.
             Copying a <see cref="T:Northwoods.Go.Link"/> will also copy any label Nodes that it owns.
            
             This does not perform a transaction nor does it raise a <see cref="T:Northwoods.Go.DiagramEvent"/>.
             Call <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/>, which calls this method,
             if you want to copy all selected Parts into the clipboard.
             The <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> command may also copy additional Parts as well, depending on <see cref="P:Northwoods.Go.CommandHandler.CopiesTree"/>.
             </remarks>
             <param name="coll">A collection of <see cref="T:Northwoods.Go.Part"/>s.</param>
             <param name="diagram">The destination diagram; if null, the copied parts are not added to this diagram.</param>
             <param name="check">Whether to check <see cref="M:Northwoods.Go.Part.CanCopy"/> on each part; default value is false.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.MoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Point,System.Boolean,Northwoods.Go.DraggingOptions)">
             <summary>
             Move a collection of <see cref="T:Northwoods.Go.Part"/>s in this Diagram by a given offset.
             </summary>
             <remarks>
             Moving a <see cref="T:Northwoods.Go.Group"/> will also move its member Nodes and Links.
             Moving with a zero X and a zero Y offset is potentially useful in order to snap Parts to the grid if <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/> is true.
            
             This does not perform a transaction nor does it raise a <see cref="T:Northwoods.Go.DiagramEvent"/>.
             </remarks>
             <param name="coll">A collection of <see cref="T:Northwoods.Go.Part"/>s,
             or null to move all of the Parts in this Diagram.</param>
             <param name="offset">the amount to move each Part, in document coordinates.</param>
             <param name="check">Whether to check <see cref="M:Northwoods.Go.Part.CanMove"/> on each part; default value is false.</param>
             <param name="dragOptions">Optional dragging options. By default this uses the settings from the Diagram's DraggingTool.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.GatherMembers(System.Collections.Generic.Dictionary{Northwoods.Go.Part,Northwoods.Go.DraggingInfo},Northwoods.Go.Part,System.Boolean,Northwoods.Go.DraggingOptions,System.Boolean)">
            @hidden @internal
            <param name="map"></param>
            <param name="p"></param>
            <param name="dragging">whether or not the dragging tool is running</param>
            <param name="dragOptions"></param>
            <param name="groupsAlwaysMove"></param>
        </member>
        <member name="M:Northwoods.Go.Diagram.MoveParts2(System.Collections.Generic.IDictionary{Northwoods.Go.Part,Northwoods.Go.DraggingInfo},Northwoods.Go.Point,Northwoods.Go.DraggingOptions,System.Boolean)">
            @hidden @internal
            <summary>
            Called by Diagram.MoveParts, DraggingTool.MoveParts, and CommandHandler.PasteSelection
            This implementation used to be DraggingTool.MoveParts, which now just calls this.
            </summary>
            <param name="parts">a dictionary mapping <see cref="T:Northwoods.Go.Part"/>s to DraggingInfo Objects
            that have a "point" property remembering the original location of that Part.</param>
            <param name="offset"></param>
            <param name="dragOptions"></param>
            <param name="check">Whether to check <see cref="M:Northwoods.Go.Part.CanMove"/> on each part.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.ComputeMove(Northwoods.Go.Part,Northwoods.Go.Point,Northwoods.Go.DraggingOptions)">
             <summary>
             Computes the new location for a <see cref="T:Northwoods.Go.Node"/> or simple <see cref="T:Northwoods.Go.Part"/>,
             given a new desired location.
             </summary>
             <remarks>
             Takes any grid-snapping, any <see cref="P:Northwoods.Go.Part.DragComputation"/> function,
             and any <see cref="P:Northwoods.Go.Part.MinLocation"/> and <see cref="P:Northwoods.Go.Part.MaxLocation"/> into consideration.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="n">the Node or simple Part that is being moved</param>
             <param name="newloc">the proposed new location</param>
             <param name="dragOptions">the dragging options</param>
             <returns>the possibly grid-snapped computed Point that is within the minimum and maximum permitted locations</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.GetDragOptions">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.SnapTo(Northwoods.Go.Part,Northwoods.Go.Point,Northwoods.Go.DraggingOptions)">
            @hidden @internal
            <summary>
            (usually) during a drag: while moving parts, snapping to either nodes or the diagram's grid
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram._SuspendRouting(System.Collections.Generic.IDictionary{Northwoods.Go.Part,Northwoods.Go.DraggingInfo})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram._ResumeRouting(System.Collections.Generic.IDictionary{Northwoods.Go.Part,Northwoods.Go.DraggingInfo})">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Diagram.DraggedLink">
            @hidden @internal
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Link"/> that may be dragged and reconnected
            when <see cref="P:Northwoods.Go.Tools.DraggingTool.DragsLink"/> is true.
            </summary>
            <remarks>
            This property is set during <see cref="M:Northwoods.Go.Tools.DraggingTool.DoActivate"/>.
            The default value is null.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram._FindContainingInfo(Northwoods.Go.Part,System.Collections.Generic.IDictionary{Northwoods.Go.Part,Northwoods.Go.DraggingInfo})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram._NewDraggingInfo(Northwoods.Go.DraggingOptions,Northwoods.Go.Part,System.Nullable{Northwoods.Go.Point})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram._CheckLayer(Northwoods.Go.Layer,Northwoods.Go.Layer)">
            @hidden @internal
            <summary>
            Called when adding/inserting layers
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.AddLayer(Northwoods.Go.Layer)">
            <summary>
            Adds a new <see cref="T:Northwoods.Go.Layer"/> to the list of layers.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.Layer.IsTemporary"/> is false, the layer is added after all existing non-temporary layers.
            If <see cref="P:Northwoods.Go.Layer.IsTemporary"/> is true, the layer is added as the very last layer.
            </remarks>
            <param name="layer">The new Layer to add.  It is an error if the Layer already belongs to a Diagram.</param>
            <returns>this Diagram</returns>
            <seealso cref="M:Northwoods.Go.Diagram.AddLayerBefore(Northwoods.Go.Layer,Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.AddLayerAfter(Northwoods.Go.Layer,Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.RemoveLayer(Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindLayer(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.AddLayerBefore(Northwoods.Go.Layer,Northwoods.Go.Layer)">
            <summary>
            Adds a layer to the list of layers before a specified layer.
            </summary>
            <remarks>
            This method can also re-order layers.
            </remarks>
            <param name="layer">the new Layer to add or existing Layer to move in Z-order.</param>
            <param name="existingLayer">the other Layer in this Diagram which should come just after the new or moved layer.</param>
            <returns>this Diagram</returns>
            <seealso cref="M:Northwoods.Go.Diagram.AddLayer(Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.AddLayerAfter(Northwoods.Go.Layer,Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.RemoveLayer(Northwoods.Go.Layer)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.AddLayerAfter(Northwoods.Go.Layer,Northwoods.Go.Layer)">
            <summary>
            Adds a layer to the list of layers after a specified layer.
            </summary>
            <remarks>
            This method can also re-order layers.
            </remarks>
            <param name="layer">the new Layer to add or existing Layer to move in Z-order.</param>
            <param name="existingLayer">the other Layer in this Diagram which should come just before the new or moved layer.</param>
            <returns>this Diagram</returns>
            <seealso cref="M:Northwoods.Go.Diagram.AddLayer(Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.AddLayerBefore(Northwoods.Go.Layer,Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.RemoveLayer(Northwoods.Go.Layer)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.AddLayerAt(Northwoods.Go.Layer,System.Int32)">
            @hidden @internal
            <summary>
            Adds a layer to the list of layers at a specified index
            only used in undo and redo
            </summary>
            <param name="layer">The Layer to add.</param>
            <param name="index">int index to insert at.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RemoveLayerAt(System.Int32)">
            @hidden @internal
            <summary>
            Only used in undo and redo
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RemoveLayer(Northwoods.Go.Layer)">
             <summary>
             Removes the given layer from the list of layers.
             </summary>
             <remarks>
             Removing a layer does not remove the Parts in the layer. Instead, those Parts are placed into the default layer.
             To remove all Parts in a layer you can call <see cref="M:Northwoods.Go.Diagram.RemoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/> with <see cref="P:Northwoods.Go.Layer.Parts"/> as the argument.
            
             You cannot remove the default layer, the one named with the empty string.
             </remarks>
             <seealso cref="M:Northwoods.Go.Diagram.AddLayer(Northwoods.Go.Layer)"/>
             <seealso cref="M:Northwoods.Go.Diagram.AddLayerBefore(Northwoods.Go.Layer,Northwoods.Go.Layer)"/>
             <seealso cref="M:Northwoods.Go.Diagram.AddLayerAfter(Northwoods.Go.Layer,Northwoods.Go.Layer)"/>
             <seealso cref="M:Northwoods.Go.Diagram.FindLayer(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindLayer(System.String)">
            <summary>
            Finds a layer with a given name.
            </summary>
            <returns>a Layer with the given name, or null if no such layer was found.</returns>
            <seealso cref="M:Northwoods.Go.Diagram.AddLayerBefore(Northwoods.Go.Layer,Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.AddLayerAfter(Northwoods.Go.Layer,Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.RemoveLayer(Northwoods.Go.Layer)"/>
        </member>
        <member name="E:Northwoods.Go.Diagram.ModelChanged">
             <summary>
             Register or remove an event handler on this Diagram's <see cref="P:Northwoods.Go.Diagram.Model"/> that is called when there is a <see cref="T:Northwoods.Go.Models.ChangedEvent"/>
             on the <see cref="T:Northwoods.Go.Models.Model`3"/>, not in this diagram.
             Be sure to remove event handlers when you are done with the diagram.
             </summary>
             <remarks>
             This is convenient when the <see cref="P:Northwoods.Go.Diagram.Model"/> may be replaced.
             Using this method to register a Model Changed listener is more convenient than adding to <see cref="E:Northwoods.Go.Models.Model`3.Changed"/> directly
             because when this diagram's Model is replaced, one does not need to remove handlers on the old Model
             and then add them again on the new Model.
            
             Do not add or remove Changed listeners during the execution of a Changed listener.
             </remarks>
        </member>
        <member name="E:Northwoods.Go.Diagram.Changed">
             <summary>
             Register or remove an event handler that is called when there is a <see cref="T:Northwoods.Go.Models.ChangedEvent"/> because this Diagram
             or one of its Parts has changed, but not because the Model or any model data has changed.
             </summary>
             <remarks>
             It is unusual to listen for Diagram ChangedEvents --
             it is far more common to listen for specific <see cref="T:Northwoods.Go.DiagramEvent"/>s by modifying the Diagram EventHandlers properties,
             or to listen for Model ChangedEvents (i.e. changes to the model) by adding to <see cref="E:Northwoods.Go.Diagram.ModelChanged"/>.
            
             Do not add or remove Changed listeners during the execution of a Changed listener.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.CallChangedListeners(Northwoods.Go.Models.ChangedEvent)">
            @hidden @internal
            <summary>
            Notify any ChangeEvent listeners.
            </summary>
            <remarks>
            This is called by <see cref="M:Northwoods.Go.Diagram.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/>.
            Each listener function registered via <see cref="E:Northwoods.Go.Diagram.Changed"/> is called with the given event.
            Unless <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> is true, this then calls <see cref="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)"/>
            so that the UndoManager gets the opportunity to record the change.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <summary>
            Call this method to notify that the diagram or its objects have changed.
            </summary>
            <remarks>
            This constructs a <see cref="T:Northwoods.Go.Models.ChangedEvent"/> and calls the Diagram listeners.
            </remarks>
            <param name="change">specifies the general nature of the change;
            permissible values include <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>, <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>,
            <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>, and <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.</param>
            <param name="propertyname">names the property that was modified.</param>
            <param name="obj">the object that was modified, typically a <see cref="T:Northwoods.Go.GraphObject"/>, <see cref="T:Northwoods.Go.Diagram"/>, or a <see cref="T:Northwoods.Go.Layer"/>.</param>
            <param name="oldval">the previous or older value.</param>
            <param name="newval">the next or newer value.</param>
            <param name="oldparam">an optional value that helps describe the older value.</param>
            <param name="newparam">an optional value that helps describe the newer value.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseChanged(System.String,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <summary>
            Call this method to notify about a diagram property having changed value.
            </summary>
            <param name="propertyname">the name of the property.</param>
            <param name="oldval">the previous or old value for the property.</param>
            <param name="newval">the next or new value for the property.</param>
            <param name="oldparam">an optional value additionally describing the old value.</param>
            <param name="newparam">an optional value additionally describing the new value.</param>
        </member>
        <member name="P:Northwoods.Go.Diagram.AnimationManager">
            <summary>
            This read-only property returns the <see cref="P:Northwoods.Go.Diagram.AnimationManager"/> for this Diagram.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.UndoManager">
             <summary>
             This read-only property returns the <see cref="T:Northwoods.Go.Models.UndoManager"/> for this Diagram, which actually belongs to the <see cref="T:Northwoods.Go.Models.Model`3"/>.
             </summary>
             <remarks>
             The default UndoManager has its <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> property set to false.
             If you want users to undo and redo, you should set that property to true once you have initialized the Diagram or its Model.
            
             Note that the UndoManager might be shared with other Diagrams that are showing the same Model.
             The UndoManager might also be shared with other Models too.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.SkipsUndoManager">
             <summary>
             Gets or sets whether ChangedEvents are not recorded by the UndoManager.
             </summary>
             <remarks>
             The initial and normal value is false.
             WARNING: while this property is true do not perform any changes that cause any previous transactions
             to become impossible to undo.
            
             While this property is true, changing the Diagram or any GraphObject does not call <see cref="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)"/>.
             Even when this property is true,
             transactions (such as calls to <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/>) and
             undo/redo (such as calls to <see cref="M:Northwoods.Go.CommandHandler.Undo"/>)
             are still delegated to the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
            
             You should set this to true only temporarily, and you should remember its previous value
             before setting this to true.
             When finishing the period for which you want the UndoManager to be disabled,
             you should set this back to the remembered value it had before it was set to true.
            
             For more permanent disabling of the <see cref="T:Northwoods.Go.Models.UndoManager"/>, set <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> to false.
            
             Setting this property also sets <see cref="P:Northwoods.Go.Models.Model`3.SkipsUndoManager"/> to the same value.
             Setting this property does not notify about any changed event.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.DelaysLayout">
            <summary>
            (undocumented)
            When set to true, Diagram layouts will not get invalidated.
            </summary>
            <remarks>
            Used by some tools stop real-time layouts from occuring during their operation.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.ChangeState(Northwoods.Go.Models.ChangedEvent,System.Boolean)">
            @hidden @internal
            <summary>
            This is called during an undo or redo to modify the diagram or its objects.
            </summary>
            <param name="e">This describes the change that needs to be done.</param>
            <param name="undo">If true, this method should restore the older state, otherwise the newer state.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.StartTransaction(System.String)">
            <summary>
            Begin a transaction, where the changes are held by a <see cref="T:Northwoods.Go.Models.Transaction"/> object
            in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>.
            </remarks>
            <param name="tname">a descriptive name for the transaction.</param>
            <returns>the value returned by <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>.</returns>
            <seealso cref="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.CommitTransaction(System.String)">
            <summary>
            Commit the changes of the current transaction.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>.
            </remarks>
            <param name="tname">a descriptive name for the transaction.</param>
            <returns>the value returned by <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.RollbackTransaction">
            <summary>
            Rollback the current transaction, undoing any recorded changes.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>.
            </remarks>
            <returns>the value returned by <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)">
            <summary>
            Starts a new transaction, calls the provided function, and commits the transaction.
            </summary>
            <remarks>
            Code is called within a try-finally statement.
            If the function does not return normally, this rolls back the transaction rather than committing it.
            Example usage:
            <code language="cs">
            myDiagram.Commit(d => d.Remove(somePart), "Remove Part");
            </code>
            Note: passing null as the second argument will temporarily set <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> to true.
            It is commonplace to call this method with no second argument, which would commit a transaction with
            a transaction name that is the empty string.
            </remarks>
            <param name="func">the function to call as the transaction body</param>
            <param name="tname">a descriptive name for the transaction, or null to temporarily set <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> to true;
            if no string transaction name is given, an empty string is used as the transaction name</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateAllTargetBindings(System.String)">
             <summary>
             Update all of the data-bound properties of <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s in this diagram,
             without having to call <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>.
             </summary>
             <remarks>
             This copies/converts model data properties to set properties on <see cref="T:Northwoods.Go.Part"/>s.
             This method does not conduct a transaction, so you need to start and commit one yourself.
            
             It is better to call <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/> to modify data properties,
             because that will both record changes for undo/redo and will update all bindings
             that make depend on that property.
             Simply modifying the data and calling an "Update..." method will not be able to record
             the previous value(s) of properties in the model data to support undo.
            
             If you know which model data objects have been modified,
             it will be more efficient to update only the <see cref="T:Northwoods.Go.Part"/>s that need it
             by calling <see cref="M:Northwoods.Go.Panel.UpdateTargetBindings(System.String)"/>.
            
             To update relationships between nodes, call <see cref="M:Northwoods.Go.Diagram.UpdateAllRelationshipsFromData"/>.
             </remarks>
             <param name="srcprop">An optional source data property name:
               when provided, only evaluates those <see cref="T:Northwoods.Go.Models.Binding"/>s that use that particular property;
               when not provided or when it is the empty string, all bindings are evaluated.</param>
             <seealso cref="M:Northwoods.Go.Diagram.UpdateAllRelationshipsFromData"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateAllRelationshipsFromData">
             <summary>
             Add or remove any nodes or links according to additional or missing data objects in the model
             and update all of the references to nodes, in case they had been modified in the model without
             properly notifying the model by calling <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/> or
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(`3)"/> or
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)"/> or
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)"/> or other similar methods.
             </summary>
             <remarks>
             This method does not conduct a transaction, so you need to start and commit one yourself.
            
             It is better to call <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>, <see cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/>,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>, <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(`3)"/>,
             <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>, and other model methods to add/remove/modify data,
             because those methods will both record changes for undo/redo and will update all bindings
             that make depend on that property.
             Simply modifying the data and calling an "update..." method will not be able to record
             the previous value(s) of properties in the model data to support undo.
            
             This only adds, removes, or updates the relationships between nodes and links,
             to have them reflect what is now declared in the model data.
             If you know which model data objects have been modified,
             it will be more efficient to update only the <see cref="T:Northwoods.Go.Part"/>s that need it
             by calling <see cref="M:Northwoods.Go.Part.UpdateRelationshipsFromData"/>.
            
             To update <see cref="T:Northwoods.Go.GraphObject"/> properties that are data bound, call <see cref="M:Northwoods.Go.Diagram.UpdateAllTargetBindings(System.String)"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Diagram.UpdateAllTargetBindings(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.OnScaleChanged(System.Double,System.Double)">
            @hidden @internal
            <summary>
            This method is called when <see cref="P:Northwoods.Go.Diagram.Scale"/> changes.
            </summary>
            <remarks>
            This may change the <see cref="P:Northwoods.Go.Diagram.Position"/> in order to maintain the desired content alignment.
            This method may be called during initialization even if the old and new scale values are the same.
            This method calls <see cref="M:Northwoods.Go.Diagram.OnViewportBoundsChanged(Northwoods.Go.Rect,Northwoods.Go.Rect,System.Double,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.OnViewportBoundsChanged(Northwoods.Go.Rect,Northwoods.Go.Rect,System.Double,System.Boolean)">
            @hidden @internal
            <summary>
            This method is called when the <see cref="P:Northwoods.Go.Diagram.Position"/> or <see cref="P:Northwoods.Go.Diagram.Scale"/> change, or when update notices the canvas has changed size.
            </summary>
            <param name="oldvbounds">a Rect in document coordinates.</param>
            <param name="newvbounds">a Rect in document coordinates.
            The X or Y may have changed because of a change to <see cref="P:Northwoods.Go.Diagram.Position"/>.
            The Width or Height may have changed either because this Diagram has changed size
            or because the <see cref="P:Northwoods.Go.Diagram.Scale"/> has changed value.</param>
            <param name="oldscale"></param>
            <param name="isScroll">true if the viewport change was only caused by a scrollbar changing size.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram._UpdateBackgroundGrid(System.Nullable{Northwoods.Go.Rect})">
            @hidden @internal
            <param name="viewRect">optional viewportBounds replacement.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.ClearSelection(System.Boolean)">
            <summary>
            Deselect all selected <see cref="T:Northwoods.Go.Part"/>s.
            </summary>
            <remarks>
            This removes all parts from the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection.
            This method raises the "ChangingSelection" and "ChangedSelection" Diagram events.
            </remarks>
            <param name="skipsEvents">if true, do not raise the <see cref="T:Northwoods.Go.DiagramEvent"/>s "ChangingSelection" and "ChangedSelection"; if not supplied the value is assumed to be false.</param>
            <seealso cref="M:Northwoods.Go.Diagram.Select(Northwoods.Go.Part)"/>
            <seealso cref="M:Northwoods.Go.Diagram.Select(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>
            <seealso cref="M:Northwoods.Go.Diagram.ClearHighlighteds"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.Select(Northwoods.Go.Part)">
            <summary>
            Make the given object the only selected object.
            </summary>
            <remarks>
            Afterwards the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection will have only the given part in it.
            This method raises the "ChangingSelection" and "ChangedSelection" Diagram events.
            </remarks>
            <param name="part">a Part that is already in a layer of this Diagram.
            If the value is null, this does nothing.</param>
            <seealso cref="M:Northwoods.Go.Diagram.Select(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>
            <seealso cref="M:Northwoods.Go.Diagram.ClearSelection(System.Boolean)"/>
            <seealso cref="M:Northwoods.Go.Diagram.Highlight(Northwoods.Go.Part)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.Select(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
            <summary>
            Select all of the <see cref="T:Northwoods.Go.Part"/>s supplied in the given collection, and deselect all other Parts.
            </summary>
            <remarks>
            This method raises the "ChangingSelection" and "ChangedSelection" Diagram events.
            </remarks>
            <param name="coll">A collection of <see cref="T:Northwoods.Go.Part"/>s to be selected.</param>
            <seealso cref="M:Northwoods.Go.Diagram.Select(Northwoods.Go.Part)"/>
            <seealso cref="M:Northwoods.Go.Diagram.ClearSelection(System.Boolean)"/>
            <seealso cref="M:Northwoods.Go.Diagram.Highlight(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.ClearHighlighteds">
             <summary>
             Remove highlights from all <see cref="T:Northwoods.Go.Part"/>s.
             </summary>
             <remarks>
             This removes all parts from the <see cref="P:Northwoods.Go.Diagram.Highlighteds"/> collection.
            
             Note that no predefined command or tool operates on the <see cref="P:Northwoods.Go.Diagram.Highlighteds"/> collection,
             and there is no predefined visual rendering when a part becomes <see cref="P:Northwoods.Go.Part.IsHighlighted"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Diagram.Highlight(Northwoods.Go.Part)"/>
             <seealso cref="M:Northwoods.Go.Diagram.Highlight(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>
             <seealso cref="P:Northwoods.Go.Part.IsHighlighted"/>
             <seealso cref="M:Northwoods.Go.Diagram.ClearSelection(System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.Highlight(Northwoods.Go.Part)">
             <summary>
             Make the given part the only highlighted part.
             </summary>
             <remarks>
             Afterwards the <see cref="P:Northwoods.Go.Diagram.Highlighteds"/> collection will have only the given part in it.
            
             Note that no predefined command or tool operates on the <see cref="P:Northwoods.Go.Diagram.Highlighteds"/> collection,
             and there is no predefined visual rendering when a part becomes <see cref="P:Northwoods.Go.Part.IsHighlighted"/>.
             </remarks>
             <param name="part">a Part that is already in a layer of this Diagram.
             If the value is null, this does nothing.</param>
             <seealso cref="P:Northwoods.Go.Part.IsHighlighted"/>
             <seealso cref="M:Northwoods.Go.Diagram.Highlight(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>
             <seealso cref="M:Northwoods.Go.Diagram.ClearHighlighteds"/>
             <seealso cref="M:Northwoods.Go.Diagram.Select(Northwoods.Go.Part)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.Highlight(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
            <summary>
            Highlight all of the <see cref="T:Northwoods.Go.Part"/>s supplied in the given collection, and unhighlight all other highlighted Parts.
            </summary>
            <remarks>
            Note that no predefined command or tool operates on the <see cref="P:Northwoods.Go.Diagram.Highlighteds"/> collection,
            and there is no predefined visual rendering when a part becomes <see cref="P:Northwoods.Go.Part.IsHighlighted"/>.
            </remarks>
            <param name="coll">A collection of <see cref="T:Northwoods.Go.Part"/>s to be highlighted.</param>
            <seealso cref="P:Northwoods.Go.Part.IsHighlighted"/>
            <seealso cref="M:Northwoods.Go.Diagram.Highlight(Northwoods.Go.Part)"/>
            <seealso cref="M:Northwoods.Go.Diagram.ClearHighlighteds"/>
            <seealso cref="M:Northwoods.Go.Diagram.Select(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.Scroll(System.String,System.String,System.Double)">
            <summary>
            Scrolling function used by primarily by <see cref="P:Northwoods.Go.Diagram.CommandHandler"/>'s <see cref="M:Northwoods.Go.CommandHandler.DoKeyDown"/>.
            </summary>
            <param name="unit">A string representing the unit of the scroll operation. Can only be "pixel", "line", "page", or "document".</param>
            <param name="dir">The direction of the scroll operation. Can only be "up", "down", "left", or "right".</param>
            <param name="dist">An optional distance multiplier, for multiple pixels, lines, or pages. The default value is 1.
              This argument is ignored when the unit is "document".</param>
            <seealso cref="M:Northwoods.Go.Diagram.ScrollToRect(Northwoods.Go.Rect)"/>
            <seealso cref="M:Northwoods.Go.Diagram.CenterRect(Northwoods.Go.Rect)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.ScrollToRect(Northwoods.Go.Rect)">
            <summary>
            Modifies the <see cref="P:Northwoods.Go.Diagram.Position"/> to show a given Rect of the Diagram by centering the
            viewport on that Rect. Does nothing if the Rect is already entirely in view.
            </summary>
            <seealso cref="M:Northwoods.Go.Diagram.CenterRect(Northwoods.Go.Rect)"/>
            <seealso cref="M:Northwoods.Go.Diagram.Scroll(System.String,System.String,System.Double)"/>
            <seealso cref="M:Northwoods.Go.CommandHandler.ScrollToPart(Northwoods.Go.Part)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.CenterRect(Northwoods.Go.Rect)">
            <summary>
            Modifies the <see cref="P:Northwoods.Go.Diagram.Position"/> to show a given Rect of the Diagram by centering the
            viewport on that Rect.
            </summary>
            <remarks>
            If the rect is near the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> and if the
            <see cref="P:Northwoods.Go.Diagram.ScrollMargin"/> is small, it might not be possible to scroll far enough to
            actually put the Rect area in the center of the viewport.
            </remarks>
            <seealso cref="M:Northwoods.Go.Diagram.ScrollToRect(Northwoods.Go.Rect)"/>
            <seealso cref="M:Northwoods.Go.Diagram.Scroll(System.String,System.String,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.TransformDocToView(Northwoods.Go.Point)">
            <summary>
            Given a Point in document coordinates, return a new Point in viewport coordinates.
            </summary>
            <returns>a new Point, the given Point converted into view coordinates.</returns>
            <seealso cref="M:Northwoods.Go.Diagram.TransformViewToDoc(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.GraphObject.GetDocumentPoint(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.Diagram.TransformRectDocToView(Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Given a rect[0,1,2,3] in document coordinates, return a new rect in view coordinates.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.TransformViewToDoc(Northwoods.Go.Point)">
            <summary>
            Given a point in viewport coordinates, return a new Point in document coordinates.
            </summary>
            <returns>a new Point, the given point converted into document coordinates.</returns>
            <seealso cref="M:Northwoods.Go.Diagram.TransformDocToView(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.GraphObject.GetDocumentPoint(Northwoods.Go.Point)"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.Opacity">
            <summary>
            Gets or sets the opacity for all parts in this diagram.
            </summary>
            <remarks>
            The value must be between 0.0 (fully transparent) and 1.0 (no additional transparency).
            This value is multiplicative with any existing transparency,
            for instance from a <see cref="T:Northwoods.Go.Brush"/> or image transparency.
            The default value is 1.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layer.Opacity"/>
            <seealso cref="P:Northwoods.Go.GraphObject.Opacity"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.ValidCycle">
            <summary>
            Gets or sets what kinds of graphs this diagram allows the user to draw.
            </summary>
            <remarks>
            By default this property is <see cref="F:Northwoods.Go.CycleMode.All"/> -- all kinds of cycles are permitted.
            Common values include <see cref="F:Northwoods.Go.CycleMode.DestinationTree"/> and <see cref="F:Northwoods.Go.CycleMode.NotDirected"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.Layers">
            <summary>
            This read-only property returns an iterator for this Diagram's Layers.
            </summary>
            <seealso cref="M:Northwoods.Go.Diagram.AddLayer(Northwoods.Go.Layer)"/>
            <seealso cref="M:Northwoods.Go.Diagram.RemoveLayer(Northwoods.Go.Layer)"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.IsModelReadOnly">
            <summary>
            Gets or sets whether the Diagram's <see cref="P:Northwoods.Go.Diagram.Model"/> is <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>.
            </summary>
            <seealso cref="P:Northwoods.Go.Diagram.IsReadOnly"/>
            <seealso cref="P:Northwoods.Go.Diagram.IsEnabled"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.IsReadOnly">
            <summary>
            Gets or sets whether the Diagram may be modified by the user,
            while still allowing the user to scroll, zoom, and select.
            </summary>
            <remarks>
            The initial value is false.
            </remarks>
            <seealso cref="P:Northwoods.Go.Diagram.IsModelReadOnly"/>
            <seealso cref="P:Northwoods.Go.Diagram.IsEnabled"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.IsEnabled">
            <summary>
            Gets or sets whether the user may interact with the Diagram.
            </summary>
            <seealso cref="P:Northwoods.Go.Diagram.IsReadOnly"/>
            <seealso cref="P:Northwoods.Go.Diagram.IsModelReadOnly"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowClipboard">
            <summary>
            Gets or sets whether the user may copy to or paste parts from the internal clipboard.
            </summary>
            <remarks>
            This allows use of <see cref="M:Northwoods.Go.CommandHandler.CutSelection"/>,
            <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> and <see cref="M:Northwoods.Go.CommandHandler.PasteSelection(System.Nullable{Northwoods.Go.Point})"/>.
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowCopy">
            <summary>
            Gets or sets whether the user may copy objects.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowDelete">
            <summary>
            Gets or sets whether the user may delete objects from the Diagram.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowDragOut">
            <summary>
            Gets or sets whether the user may start a drag-and-drop in this Diagram,
            possibly dropping in a different element.
            </summary>
            <remarks>
            The initial value is false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowDrop">
             <summary>
             Gets or sets whether the user may end a drag-and-drop operation in this Diagram.
             </summary>
             <remarks>
             This is typically set to true when a Diagram is used with a Palette.
            
             The initial value is true.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowTextEdit">
            <summary>
            Gets or sets whether the user may do in-place text editing.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowGroup">
            <summary>
            Gets or sets whether the user may group parts together.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowUngroup">
            <summary>
            Gets or sets whether the user may ungroup existing groups.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowInsert">
            <summary>
            Gets or sets whether the user may add parts to the Diagram.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowLink">
            <summary>
            Gets or sets whether the user may draw new links.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowRelink">
            <summary>
            Gets or sets whether the user may reconnect existing links.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowMove">
            <summary>
            Gets or sets whether the user may move objects.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowReshape">
            <summary>
            Gets or sets whether the user may reshape parts.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowResize">
            <summary>
            Gets or sets whether the user may resize parts.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowRotate">
            <summary>
            Gets or sets whether the user may rotate parts.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowSelect">
            <summary>
            Gets or sets whether the user may select objects.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowUndo">
            <summary>
            Gets or sets whether the user may undo or redo any changes.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowZoom">
            <summary>
            Gets or sets whether the user may zoom into or out of the Diagram.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.HasVerticalScrollbar">
             <summary>
             Gets or sets whether the Diagram has a vertical scrollbar.
             </summary>
             <remarks>
             To enable or disable scrolling itself, use <see cref="P:Northwoods.Go.Diagram.AllowHorizontalScroll"/> and <see cref="P:Northwoods.Go.Diagram.AllowVerticalScroll"/>.
            
             Adding or removing a scrollbar modifies the diagram's viewport.
            
             The initial value is true.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.AllowVerticalScroll"/>
             <seealso cref="P:Northwoods.Go.Diagram.HasHorizontalScrollbar"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.HasHorizontalScrollbar">
             <summary>
             Gets or sets whether the Diagram has a horizontal scrollbar.
             </summary>
             <remarks>
             To enable or disable scrolling itself, use <see cref="P:Northwoods.Go.Diagram.AllowHorizontalScroll"/> and <see cref="P:Northwoods.Go.Diagram.AllowVerticalScroll"/>.
            
             Adding or removing a scrollbar modifies the diagram's viewport.
            
             The initial value is true.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.AllowHorizontalScroll"/>
             <seealso cref="P:Northwoods.Go.Diagram.HasVerticalScrollbar"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowHorizontalScroll">
            <summary>
            Gets or sets whether the user is allowed to use the horizontal scrollbar.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
            <seealso cref="P:Northwoods.Go.Diagram.HasHorizontalScrollbar"/>
            <seealso cref="P:Northwoods.Go.Diagram.AllowVerticalScroll"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.AllowVerticalScroll">
            <summary>
            Gets or sets whether the user is allowed to use the vertical scrollbar.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
            <seealso cref="P:Northwoods.Go.Diagram.HasVerticalScrollbar"/>
            <seealso cref="P:Northwoods.Go.Diagram.AllowHorizontalScroll"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.ScrollHorizontalLineChange">
            <summary>
            Gets or sets the distance in screen pixels that the horizontal scrollbar will scroll
            when scrolling by a line.
            </summary>
            <remarks>
            The default value is 16.
            </remarks>
            <seealso cref="P:Northwoods.Go.Diagram.ScrollVerticalLineChange"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.ScrollVerticalLineChange">
            <summary>
            Gets or sets the distance in screen pixels that the vertical scrollbar will scroll
            when scrolling by a line.
            </summary>
            <remarks>
            The default value is 16.
            </remarks>
            <seealso cref="P:Northwoods.Go.Diagram.ScrollHorizontalLineChange"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.LastInput">
             <summary>
             Gets or sets the last <see cref="T:Northwoods.Go.InputEvent"/> that occurred.
             </summary>
             <remarks>
             This property is useful in tools and real-time operations for determining
             where the mouse pointer was most recently located.
            
             Setting this property does not notify about any changed event.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.FirstInput"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.FirstInput">
            <summary>
            Gets or sets the most recent mouse-down <see cref="T:Northwoods.Go.InputEvent"/> that occurred.
            </summary>
            <remarks>
            Setting this property does not notify about any changed event.
            </remarks>
            <seealso cref="P:Northwoods.Go.Diagram.LastInput"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.DefaultCursor">
             <summary>
             Gets or sets the cursor to be used for the Diagram
             when no <see cref="T:Northwoods.Go.GraphObject"/> specifies a different cursor.
             </summary>
             <remarks>
             Valid CSS cursors are accepted,
             such as "auto", "default", "none", "context-menu", "help", "pointer", "progress", "wait", etc.
            
             It is possible to use custom cursors with the syntax "url(path_to_image), default".
             A fallback (like default here) is necessary for a custom cursor to work.
            
             To read more about cursor syntax, go to:
             <a href="https://developer.Mozilla.Org/en-US/docs/Web/CSS/cursor">CSS cursors (mozilla.Org)</a>.
             The default value is "auto".
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.CurrentCursor"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Cursor"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.Click">
             <summary>
             Gets or sets the function to execute when the user single-primary-clicks
             on the background of the Diagram.
             </summary>
             <remarks>
             This typically involves a mouse-down followed by a prompt mouse-up
             at approximately the same position using the left (primary) mouse button.
             This property is used by the <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>
             when the user clicks on no object.
             The function is called in addition to the <see cref="T:Northwoods.Go.DiagramEvent"/>
             that is raised with the name "BackgroundSingleClicked".
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>,
             or call <see cref="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.DoubleClick"/>
             <seealso cref="P:Northwoods.Go.Diagram.ContextClick"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Click"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.DoubleClick">
             <summary>
             Gets or sets the function to execute when the user double-primary-clicks
             on the background of the Diagram.
             </summary>
             <remarks>
             This typically involves a mouse-down/up/down/up in rapid succession
             at approximately the same position using the left (primary) mouse button.
             This property is used by the <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>
             when the user clicks on no object.
             The function is called in addition to the <see cref="T:Northwoods.Go.DiagramEvent"/>
             that is raised with the name "BackgroundDoubleClicked".
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>,
             or call <see cref="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.Click"/>
             <seealso cref="P:Northwoods.Go.Diagram.ContextClick"/>
             <seealso cref="P:Northwoods.Go.GraphObject.DoubleClick"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.ContextClick">
             <summary>
             Gets or sets the function to execute when the user single-secondary-clicks
             on the background of the Diagram.
             </summary>
             <remarks>
             This typically involves a mouse-down followed by a prompt mouse-up
             at approximately the same position using the right (secondary) mouse button.
             This property is used by the <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>
             when the user clicks on no object.
             The function is called in addition to the <see cref="T:Northwoods.Go.DiagramEvent"/>
             that is raised with the name "BackgroundContextClicked".
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>,
             or call <see cref="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.Click"/>
             <seealso cref="P:Northwoods.Go.Diagram.DoubleClick"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ContextClick"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.MouseOver">
             <summary>
             Gets or sets the function to execute when the user moves the mouse (pointer) in
             the background of the Diagram without holding down any buttons,
             not over any <see cref="T:Northwoods.Go.GraphObject"/>s.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             This function is called with <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> temporarily set to true,
             so that any changes to <see cref="T:Northwoods.Go.GraphObject"/>s are not recorded in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             You do not need to start and commit any transaction in this function.
             After calling this function the diagram will be updated immediately.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.MouseHover"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseOver"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.MouseHover">
             <summary>
             Gets or sets the function to execute when the user holds the mouse (pointer) stationary in
             the background of the Diagram without holding down any buttons,
             not over any <see cref="T:Northwoods.Go.GraphObject"/>s.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>,
             or call <see cref="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.MouseOver"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseHover"/>
             <seealso cref="M:Northwoods.Go.Tools.ToolManager.DoMouseHover"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.MouseHold">
             <summary>
             Gets or sets the function to execute when the user holds the mouse (pointer) stationary in
             the background of the Diagram while holding down a button,
             not over any <see cref="T:Northwoods.Go.GraphObject"/>s.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>,
             or call <see cref="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseHold"/>
             <seealso cref="M:Northwoods.Go.Tools.ToolManager.DoMouseHover"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.MouseDragOver">
             <summary>
             Gets or sets the function to execute when the user is dragging the selection in
             the background of the Diagram during a <see cref="T:Northwoods.Go.Tools.DraggingTool"/> drag-and-drop,
             not over any <see cref="T:Northwoods.Go.GraphObject"/>s.
             </summary>
             <remarks>
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             It is called within the transaction performed by the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>.
             By default this property is null.
            
             Note that for a drag-and-drop that originates in a different diagram, the target diagram's
             selection collection will not be the parts that are being dragged.
             Instead the temporary parts being dragged can be found as the source diagram's <see cref="P:Northwoods.Go.Tools.DraggingTool.CopiedParts"/>.
            
             This function is called with <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> temporarily set to true,
             so that any changes to <see cref="T:Northwoods.Go.GraphObject"/>s are not recorded in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             You do not need to start and commit any transaction in this function.
             After calling this function the diagram will be updated immediately.
            
             For example, if you want to prevent the user from dropping Parts into the background of the diagram,
             and want to provide feedback about that during a drag:
             <code language="cs">
               myDiagram.MouseDragOver = (e) => {
                 myDiagram.CurrentCursor = "no-drop";
               }
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.MouseDrop"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragEnter"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragLeave"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.MouseDrop">
             <summary>
             Gets or sets the function to execute when the user drops the selection in
             the background of the Diagram at the end of a <see cref="T:Northwoods.Go.Tools.DraggingTool"/> drag-and-drop,
             not onto any <see cref="T:Northwoods.Go.GraphObject"/>s.
             </summary>
             <remarks>
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             It is called within the transaction performed by the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>.
             By default this property is null.
            
             For example, if you want to prevent the user from dropping Parts into the background of the diagram:
             <code language="cs">
               myDiagram.MouseDrop = (e) => {
                 myDiagram.CurrentTool.DoCancel();
               }
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.MouseDragOver"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDrop"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.HandlesDragDropForTopLevelParts">
             <summary>
             Gets or sets whether drag-and-drop events may be bubbled up to the diagram if not handled by a part.
             </summary>
             <remarks>
             The default value is false -- each Node or Link that in the diagram needs to define
             its own <see cref="P:Northwoods.Go.GraphObject.MouseDragEnter"/>, <see cref="P:Northwoods.Go.GraphObject.MouseDragLeave"/>, and <see cref="P:Northwoods.Go.GraphObject.MouseDrop"/>
             event handlers if you want dragging/dropping on a part to act as if the user were acting on the diagram.
            
             If set to true, this will call <see cref="P:Northwoods.Go.Diagram.MouseDragOver"/> during a drag, even while dragging over top-level parts,
             and <see cref="P:Northwoods.Go.Diagram.MouseDrop"/> will be called even when dropping onto parts.
            
             This property will have no impact while dropping on a Group.
             The Group's mouseDrop and <see cref="P:Northwoods.Go.Group.HandlesDragDropForMembers"/> should be set if desired.
            
             GraphObjects do not have a MouseDragOver property, so if this is set to true, the Diagram's MouseDragOver will
             always be called, even when dragging over a part.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.MouseDragOver"/>
             <seealso cref="P:Northwoods.Go.Diagram.MouseDrop"/>
             <seealso cref="P:Northwoods.Go.Group.HandlesDragDropForMembers"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDrop"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.MouseEnter">
             <summary>
             Gets or sets the function to execute when the mouse (pointer) enters the Diagram.
             </summary>
             <remarks>
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>,
             or call <see cref="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.MouseLeave"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseEnter"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.MouseLeave">
             <summary>
             Gets or sets the function to execute when the mouse (pointer) leaves the Diagram.
             </summary>
             <remarks>
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>,
             or call <see cref="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.MouseEnter"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseLeave"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.ToolTip">
             <summary>
             This tooltip is shown when the mouse (pointer) stays motionless in the background.
             This value is typically an <see cref="T:Northwoods.Go.Adornment"/>, which implements <see cref="T:Northwoods.Go.IShowHidable"/>.
             </summary>
             <remarks>
             The default value is null, which means no tooltip is shown.
            
             Here is a simple example:
             <code language="cs">
              myDiagram.ToolTip =
                new Adornment(PanelLayoutAuto.Instance)
                  .Add(
                    new Shape { Fill = "#CCFFCC" },
                    new TextBlock("This diagram lets you control the world.") { Margin = 4 }
                  );
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ToolTip"/>
             <seealso cref="M:Northwoods.Go.Tools.ToolManager.DoToolTip"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.ContextMenu">
             <summary>
             This context menu is shown when the user context clicks in the background.
             This value is typically an <see cref="T:Northwoods.Go.Adornment"/>, which implements <see cref="T:Northwoods.Go.IShowHidable"/>.
             </summary>
             <remarks>
             The default value is null, which means no context menu is shown.
            
             On touch devices, the <see cref="P:Northwoods.Go.Tools.ContextMenuTool.DefaultTouchContextMenu"/>
             will appear even there is no context menu defined.
            
             <code language="cs">
              myDiagram.ContextMenu =
                Builder.Make&lt;Adornment&gt;("ContextMenu")
                  .Add(
                    Builder.Make&lt;Panel&gt;("ContextMenuButton")
                      .Add(new TextBlock("Undo"))
                      .Set(new { Click = new Action&lt;InputEvent, GraphObject&gt;((e, obj) => { e.Diagram.CommandHandler.Undo(); }) })
                      .Bind(
                        new Binding("Visible", "", (o, _) => {
                          return (o as GraphObject).Diagram?.CommandHandler.CanUndo();
                        }).OfElement()
                      ),
                    Builder.Make&lt;Panel&gt;("ContextMenuButton")
                      .Add(new TextBlock("Redo"))
                      .Set(new { Click = new Action&lt;InputEvent, GraphObject&gt;((e, obj) => { e.Diagram.CommandHandler.Redo(); }) })
                      .Bind(
                        new Binding("Visible", "", (o, _) => {
                          return (o as GraphObject).Diagram?.CommandHandler.CanRedo();
                        }).OfElement()
                      )
                  );
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ContextMenu"/>
             <seealso cref="T:Northwoods.Go.Tools.ContextMenuTool"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.CommandHandler">
             <summary>
             Gets or sets the <see cref="P:Northwoods.Go.Diagram.CommandHandler"/> for this Diagram.
             </summary>
             <remarks>
             This is set to a new instance of <see cref="P:Northwoods.Go.Diagram.CommandHandler"/> on Diagram instantiation.
            
             Setting this property does not notify about any changed event.
             The value cannot be null and must not be shared with other Diagrams.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.ToolManager">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Tools.ToolManager"/> for this Diagram.
             </summary>
             <remarks>
             This tool is used for mode-less operation.
             It is responsible for choosing a particular tool to run as the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>.
            
             This tool is normally also the <see cref="P:Northwoods.Go.Diagram.DefaultTool"/>.
             If you don't want the ToolManager to run at all,
             replace the <see cref="P:Northwoods.Go.Diagram.DefaultTool"/> with your own tool.
            
             Setting this property does not notify about any changed event.
             The value cannot be null and must not be shared with other Diagrams.
             If you set this property, you will probably also want to set <see cref="P:Northwoods.Go.Diagram.DefaultTool"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.DefaultTool"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.DefaultTool">
             <summary>
             Gets or sets the default tool for this Diagram that becomes the current tool when the current tool stops.
             </summary>
             <remarks>
             Initially this value is the same tool as <see cref="T:Northwoods.Go.Tools.ToolManager"/>, which is an instance of <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
            
             Setting this property also sets the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> if the old default tool is the currently running tool.
            
             Setting this property does not notify about any changed event.
             The value cannot be null and must not be shared with other Diagrams.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.CurrentTool"/>
             <seealso cref="P:Northwoods.Go.Diagram.ToolManager"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.CurrentTool">
             <summary>
             Gets or sets the current tool for this Diagram that handles all input events.
             </summary>
             <remarks>
             This value is frequently replaced by the <see cref="T:Northwoods.Go.Tools.ToolManager"/> as different tools run.
            
             Each Diagram has a number of tools that define its behavior when responding to mouse events.
             These include <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>, <see cref="T:Northwoods.Go.Tools.DraggingTool"/>, <see cref="T:Northwoods.Go.Tools.DragSelectingTool"/>,
             <see cref="T:Northwoods.Go.Tools.LinkingTool"/>, and <see cref="T:Northwoods.Go.Tools.ResizingTool"/>, among others.
            
             Initially this is set to the value of <see cref="P:Northwoods.Go.Diagram.DefaultTool"/>.
             Setting this to a null value is treated as if it were set to the <see cref="P:Northwoods.Go.Diagram.DefaultTool"/>,
             because there should always be a currently running tool, except when the diagram is being initialized.
            
             A <see cref="T:Northwoods.Go.Tools.ToolManager"/> is the default tool used by a Diagram - it chooses to run one of the other tools
             depending on the circumstances.
            
             Setting this property to a new tool stops the previous current tool
            
             Setting this property does not notify about any changed event.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.DefaultTool"/>
             <seealso cref="P:Northwoods.Go.Diagram.ToolManager"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.Selection">
             <summary>
             This read-only property returns the read-only collection of selected objects.
             Most commands and many tools operate on this collection.
             </summary>
             <remarks>
             Do not modify this collection.
             If you want to select or deselect a particular object in a Diagram,
             set the <see cref="P:Northwoods.Go.Part.IsSelected"/> property.
             If you want to select a collection of Parts, call <see cref="M:Northwoods.Go.Diagram.Select(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>.
             If you want to deselect all objects, call <see cref="M:Northwoods.Go.Diagram.ClearSelection(System.Boolean)"/>.
             If you want to deselect all objects and select a single object, call <see cref="M:Northwoods.Go.Diagram.Select(Northwoods.Go.Part)"/>.
            
             You can limit how many objects the user can select by setting <see cref="P:Northwoods.Go.Diagram.MaxSelectionCount"/>.
            
             There are also <see cref="T:Northwoods.Go.DiagramEvent"/>s for <see cref="F:Northwoods.Go.DiagramEventName.ChangingSelection"/> and <see cref="F:Northwoods.Go.DiagramEventName.ChangedSelection"/>,
             which are raised by commands and tools before and after changes to this selection collection.
            
             Note that Selection collection and <see cref="P:Northwoods.Go.Part.IsSelected"/> property are completely independent
             of the <see cref="P:Northwoods.Go.Diagram.Highlighteds"/> collection and the <see cref="P:Northwoods.Go.Part.IsHighlighted"/> property.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.MaxSelectionCount">
            <summary>
            Gets or sets the maximum number of selected objects.
            </summary>
            <remarks>
            The default value is a large positive integer.
            Values must be non-negative.
            Decreasing this value may cause objects to be removed from <see cref="P:Northwoods.Go.Diagram.Selection"/>
            in order to meet the new lower limit.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.NodeSelectionAdornmentTemplate">
             <summary>
             Gets or sets the default selection <see cref="T:Northwoods.Go.Adornment"/> template, used to adorn selected Parts other than Groups or Links.
             </summary>
             <remarks>
             Each <see cref="T:Northwoods.Go.Node"/> or simple <see cref="T:Northwoods.Go.Part"/> can have its own <see cref="P:Northwoods.Go.Part.SelectionAdornmentTemplate"/>,
             which if non-null will take precedence over this Diagram property.
            
             This Adornment must not be in the visual tree of any Diagram.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.GroupSelectionAdornmentTemplate">
             <summary>
             Gets or sets the default selection <see cref="T:Northwoods.Go.Adornment"/> template, used to adorn selected Groups.
             </summary>
             <remarks>
             Each <see cref="T:Northwoods.Go.Group"/> can have its own <see cref="P:Northwoods.Go.Part.SelectionAdornmentTemplate"/>, which if non-null will take precedence over this Diagram property.
            
             This Adornment must not be in the visual tree of any Diagram.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.LinkSelectionAdornmentTemplate">
             <summary>
             Gets or sets the default selection <see cref="T:Northwoods.Go.Adornment"/> template, used to adorn selected Links.
             </summary>
             <remarks>
             Each <see cref="T:Northwoods.Go.Link"/> can have its own <see cref="P:Northwoods.Go.Part.SelectionAdornmentTemplate"/>, which if non-null will take precedence over this Diagram property.
            
             This Adornment must not be in the visual tree of any Diagram.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.Highlighteds">
             <summary>
             This read-only property returns the read-only collection of highlighted parts.
             </summary>
             <remarks>
             Do not modify this collection.
             If you want to highlight or remove the highlight for a particular Part in a Diagram,
             set the <see cref="P:Northwoods.Go.Part.IsHighlighted"/> property.
             If you want to highlight a collection of Parts, call <see cref="M:Northwoods.Go.Diagram.Highlight(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>.
             If you want to removal all highlights and highlight a single object, call <see cref="M:Northwoods.Go.Diagram.Highlight(Northwoods.Go.Part)"/>.
             If you want to remove all highlights, call <see cref="M:Northwoods.Go.Diagram.ClearHighlighteds"/>.
            
             Note that Highlighteds collection and <see cref="P:Northwoods.Go.Part.IsHighlighted"/> property are completely independent
             of the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection and the <see cref="P:Northwoods.Go.Part.IsSelected"/> property.
             No predefined command or tool operates on this highlighteds collection.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.IsModified">
             <summary>
             Gets or sets whether this Diagram's state has been modified.
             </summary>
             <remarks>
             Setting this property does not notify about any changed event,
             but it does raise the "Modified" <see cref="T:Northwoods.Go.DiagramEvent"/>,
             although perhaps not immediately.
            
             Returns true if the Diagram has been changed,
             if the <see cref="T:Northwoods.Go.Models.UndoManager"/> has recorded any changes, or
             if an undo has been performed without a corresponding redo.
            
             Replacing the <see cref="T:Northwoods.Go.Models.Model`3"/> automatically sets this property to false after the initial layout has completed.
             The "Modified" DiagramEvent is also raised when an undo or a redo has finished.
             A "Modified" DiagramEvent listener must not modify this Diagram or its Model.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.OnModifiedChanged">
            @hidden @internal
            <summary>
            Called by isModified setter and doModelChanged
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.Model">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Models.Model`3"/> holding data corresponding to the
             data-bound nodes and links of this Diagram.
             </summary>
             <remarks>
             Replacing this value causes all of the bound Nodes and Links to be deleted and re-created
             from the new model data.
            
             Models may be shared by multiple Diagrams. One common approach is to have two
             Diagrams displaying the same Model but using different templates
             (see <see cref="P:Northwoods.Go.Diagram.NodeTemplate"/>, <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/>, and the associated link and group properties) and sometimes even different Layouts.
            
             Setting this property does not notify about any changed event; the new value must not be null.
             Typically a new Model will have its own <see cref="T:Northwoods.Go.Models.UndoManager"/>, thereby replacing the Diagram's
             current UndoManager.
            
             Replacing or re-setting the model will re-initialize the Diagram, taking in to account
             <see cref="P:Northwoods.Go.Diagram.InitialPosition"/>, <see cref="P:Northwoods.Go.Diagram.InitialScale"/>, <see cref="P:Northwoods.Go.Diagram.InitialAutoScale"/>, and <see cref="P:Northwoods.Go.Diagram.InitialContentAlignment"/>.
             It will also set <see cref="P:Northwoods.Go.Diagram.IsModified"/> to false.
            
             The default behavior when replacing the model is to copy a few <see cref="T:Northwoods.Go.Models.UndoManager"/> properties to the
             new UndoManager, including <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> and <see cref="P:Northwoods.Go.Models.UndoManager.MaxHistoryLength"/>.
            
             It is an error to replace the Diagram.Model while a transaction is in progress.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.DoModelChanged(Northwoods.Go.Models.ChangedEvent)">
            @hidden @internal
            <summary>
            This function is called by PartManager when the Diagram's <see cref="P:Northwoods.Go.Diagram.Model"/> has changed.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.SkipsModelSourceBindings">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Diagram.SkipsBoundsUpdates">
            @hidden @internal
            <summary>
            Used in the DraggingTool and AnimationManager to stop real-time updates of the bounds.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RememberPictures(Northwoods.Go.Panel)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.ForgetPictures(Northwoods.Go.Panel)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.RebuildParts">
             <summary>
             Remove all of the <see cref="T:Northwoods.Go.Part"/>s created from model data
             and then create them again.
             </summary>
             <remarks>
             This must be called after modifying or replacing any of the template maps
             such as <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/>.
             This re-selects all of the new Parts that were created from data of the original selected Parts.
            
             If you modify a template Map, there is no notification that the map has changed.
             You will need to call rebuildParts explicitly.
             If you are replacing the <see cref="P:Northwoods.Go.Diagram.NodeTemplate"/> or the <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/> or
             the corresponding properties for Groups or Links,
             the Diagram property setters will automatically call RebuildParts.
            
             It is extremely wasteful to call this method after making some model data changes that you want to
             be reflected in the diagram.  Instead, it is better call <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>,
             <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>, <see cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/>, or other model methods.
             Not only do those methods update efficiently, they also preserve unbound state and support undo/redo.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.AddCollapsedNode(Northwoods.Go.Node,Northwoods.Go.Node)">
            @hidden @internal
            <summary>
            Called only by Node's collapseTree and Group's collapseSubGraph
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.AddExpandedNode(Northwoods.Go.Node,Northwoods.Go.Node)">
            @hidden @internal
            <summary>
            Called only by Node's expandTree and Group's expandSubGraph
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindPartForKey(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Part"/> or <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/> corresponding to a model's data object's unique key.
            </summary>
            <remarks>
            This will find a <see cref="T:Northwoods.Go.Link"/> if the model is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>
            that is maintaining a key on the link data objects.
            </remarks>
            <param name="key">a key.</param>
            <returns>null if a data with that key cannot be found in the model,
            or if a corresponding <see cref="T:Northwoods.Go.Part"/> cannot be found in the Diagram.
            This will not return a <see cref="T:Northwoods.Go.Link"/> unless the model is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/> and
            <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> has been set.
            If the same key is used for both a node data object and a link data object, this will return a Node.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindNodeForKey(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/> corresponding to a model's node data object's unique key.
            </summary>
            <param name="key">a key.</param>
            <returns>null if a node data with that key cannot be found in the model,
            or if a corresponding <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/> cannot be found in the Diagram,
            or if what is found is just a <see cref="T:Northwoods.Go.Part"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindLinkForKey(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Link"/> corresponding to a model's link data object's unique key.
            </summary>
            <param name="key">a key.</param>
            <returns>null if a link data with that key cannot be found in the model,
            or if a corresponding <see cref="T:Northwoods.Go.Link"/> cannot be found in the Diagram,
            or if the model is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>
            without <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> set to a non-empty string.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindPartForData(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Part"/>, <see cref="T:Northwoods.Go.Node"/>, <see cref="T:Northwoods.Go.Group"/>, or <see cref="T:Northwoods.Go.Link"/> corresponding to a <see cref="T:Northwoods.Go.Models.Model`3"/>'s data object.
            </summary>
            <remarks>
            We recommend that you call <see cref="M:Northwoods.Go.Diagram.FindNodeForData(System.Object)"/> or <see cref="M:Northwoods.Go.Diagram.FindLinkForData(System.Object)"/> if you are looking for a <see cref="T:Northwoods.Go.Node"/> or a <see cref="T:Northwoods.Go.Link"/>.
            </remarks>
            @export
            <param name="data">an object matched by reference identity</param>
            <returns>an existing <see cref="T:Northwoods.Go.Part"/> in this Diagram that was
            created because its `Part.Data` was the data in the Diagram's <see cref="T:Northwoods.Go.Models.Model`3"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindNodeForData(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/>  corresponding to a model's node data object.
            </summary>
            <param name="nodedata">an object matched by reference identity</param>
            <returns>an existing <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/> in this Diagram that was
            created because its `Part.Data` was the node data in the Diagram's <see cref="T:Northwoods.Go.Models.Model`3"/>.
            This will be null if there is no such part or if it's just a <see cref="T:Northwoods.Go.Part"/> or <see cref="T:Northwoods.Go.Link"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindLinkForData(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Link"/> corresponding to a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>'s link data object.
            </summary>
            <param name="linkdata">an object matched by reference identity</param>
            <returns>an existing <see cref="T:Northwoods.Go.Link"/> in this Diagram that was
            created because its `Part.Data` was the link data in the Diagram's <see cref="T:Northwoods.Go.Models.Model`3"/>.</returns>
        </member>
        <member name="P:Northwoods.Go.Diagram.NodeTemplate">
             <summary>
             Gets or sets the default <see cref="T:Northwoods.Go.Node"/> template used as the archetype
             for node data that is added to the <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </summary>
             <remarks>
             Setting this property just modifies the <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/>
             by replacing the entry named with the empty string.
            
             The value must not be null.
             The template may be either a <see cref="T:Northwoods.Go.Node"/> or a simple <see cref="T:Northwoods.Go.Part"/>,
             but not a <see cref="T:Northwoods.Go.Link"/> or a <see cref="T:Northwoods.Go.Group"/>.
            
             This Part must not be in the visual tree of any Diagram.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.NodeTemplateMap">
             <summary>
             Gets or sets a dictionary mapping template names to <see cref="T:Northwoods.Go.Part"/>s.
             </summary>
             <remarks>
             These nodes are copied for each node data that is added to the <see cref="P:Northwoods.Go.Diagram.Model"/>.
            
             The new value must not be null and must contain <see cref="T:Northwoods.Go.Node"/>s or simple <see cref="T:Northwoods.Go.Part"/>s.
             These Parts must not be in the visual tree of any Diagram.
             Replacing this Map will automatically call <see cref="M:Northwoods.Go.Diagram.RebuildParts"/>.
            
             If you modify this dictionary, by replacing a <see cref="T:Northwoods.Go.Node"/> or by adding or
             removing a map entry, you need to explicitly call <see cref="M:Northwoods.Go.Diagram.RebuildParts"/> afterwards.
             Any new map values must not be <see cref="T:Northwoods.Go.Link"/>s or <see cref="T:Northwoods.Go.Group"/>s.
            
             If you want to create <see cref="T:Northwoods.Go.Group"/>s, use <see cref="P:Northwoods.Go.Diagram.GroupTemplateMap"/> instead.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.GroupTemplate">
            <summary>
            Gets or sets the default <see cref="T:Northwoods.Go.Group"/> template used as the archetype
            for group data that is added to the <see cref="P:Northwoods.Go.Diagram.Model"/>.
            </summary>
            <remarks>
            Setting this property just modifies the <see cref="P:Northwoods.Go.Diagram.GroupTemplateMap"/>
            by replacing the entry named with the empty string.
            The value must not be null and must be a <see cref="T:Northwoods.Go.Group"/>, not a <see cref="T:Northwoods.Go.Node"/> or simple <see cref="T:Northwoods.Go.Part"/>.
            This Part must not be in the visual tree of any Diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.GroupTemplateMap">
             <summary>
             Gets or sets a dictionary mapping template names to <see cref="T:Northwoods.Go.Group"/>s.
             </summary>
             <remarks>
             These groups are copied for each group data that is added to the <see cref="P:Northwoods.Go.Diagram.Model"/>.
            
             The new value must not be null, nor may it contain a <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Link"/> or simple <see cref="T:Northwoods.Go.Part"/>.
             The Links must not be in the visual tree of any Diagram.
             Replacing this Map will automatically call <see cref="M:Northwoods.Go.Diagram.RebuildParts"/>.
            
             If you modify this dictionary, by replacing a <see cref="T:Northwoods.Go.Group"/> in it or by adding or
             removing a map entry, you need to explicitly call <see cref="M:Northwoods.Go.Diagram.RebuildParts"/> afterwards.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.LinkTemplate">
            <summary>
            Gets or sets the default <see cref="T:Northwoods.Go.Link"/> template used as the archetype
            for link data that is added to the <see cref="P:Northwoods.Go.Diagram.Model"/>.
            </summary>
            <remarks>
            Setting this property just modifies the <see cref="P:Northwoods.Go.Diagram.LinkTemplateMap"/>
            by replacing the entry named with the empty string.
            The value must not be null and must be a <see cref="T:Northwoods.Go.Link"/>, not a <see cref="T:Northwoods.Go.Node"/> or simple <see cref="T:Northwoods.Go.Part"/>.
            This Link must not be in the visual tree of any Diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.LinkTemplateMap">
             <summary>
             Gets or sets a dictionary mapping template names to <see cref="T:Northwoods.Go.Link"/>s.
             </summary>
             <remarks>
             These links are copied for each link data that is added to the <see cref="P:Northwoods.Go.Diagram.Model"/>.
            
             The new value must not be null and must contain only <see cref="T:Northwoods.Go.Link"/>s, not <see cref="T:Northwoods.Go.Node"/>s or simple <see cref="T:Northwoods.Go.Part"/>s.
             The Links must not be in the visual tree of any Diagram.
             Replacing this Map will automatically call <see cref="M:Northwoods.Go.Diagram.RebuildParts"/>.
            
             If you modify this dictionary, by replacing a <see cref="T:Northwoods.Go.Link"/> in it or by adding or
             removing a map entry, you need to explicitly call <see cref="M:Northwoods.Go.Diagram.RebuildParts"/> afterwards.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.Position">
             <summary>
             Gets or sets the coordinates of this Diagram in the viewport.
             </summary>
             <remarks>
             Value must be of type <see cref="T:Northwoods.Go.Point"/> in document coordinates.
             The default is Point(double.NaN, double.NaN), but is typically set to a real value when a Diagram is initialized.
            
             Scrolling and panning the Diagram modify the Diagram's position.
            
             Setting this property does not notify about any changed event.
             However you can listen for a <see cref="T:Northwoods.Go.DiagramEvent"/> by adding to a Diagram EventHandler property.
             with the name "ViewportBoundsChanged".
            
             The <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/> x and y values are always the same as the Diagram's position values.
            
             If you set this property any replacement of the <see cref="P:Northwoods.Go.Diagram.Model"/> will result in a layout
             and a computation of new <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>, which in turn may cause the diagram to be scrolled
             and zoomed, depending on various Diagram properties named "Initial...".
             You may want to set <see cref="P:Northwoods.Go.Diagram.InitialPosition"/> instead of setting this property around the time
             that you are loading a model.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.InitialPosition">
             <summary>
             Gets or sets the initial coordinates of this Diagram in the viewport, eventually setting the <see cref="P:Northwoods.Go.Diagram.Position"/>.
             </summary>
             <remarks>
             This value is relevant on initialization of a <see cref="P:Northwoods.Go.Diagram.Model"/> or if <see cref="M:Northwoods.Go.Diagram.DelayInitialization(System.Action{Northwoods.Go.Diagram})"/> is called.
             Value must be of type Point in document coordinates.
             The default is Point(double.NaN, double.NaN).
            
             Setting this property has the same effect as implementing
             an "InitialLayoutCompleted" DiagramEvent listener that sets <see cref="P:Northwoods.Go.Diagram.Position"/>.
            
             Setting this property does not notify about any changed event.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.InitialDocumentSpot"/>
             <seealso cref="P:Northwoods.Go.Diagram.InitialViewportSpot"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.InitialScale">
             <summary>
             Gets or sets the initial scale of this Diagram in the viewport, eventually setting the <see cref="P:Northwoods.Go.Diagram.Scale"/>.
             </summary>
             <remarks>
             This value is relevant on initialization of a <see cref="P:Northwoods.Go.Diagram.Model"/> or if <see cref="M:Northwoods.Go.Diagram.DelayInitialization(System.Action{Northwoods.Go.Diagram})"/> is called.
             The default is NaN.
            
             Setting this property has the same effect as implementing
             an "InitialLayoutCompleted" DiagramEvent listener that sets <see cref="P:Northwoods.Go.Diagram.Scale"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.Grid">
            <summary>
            Gets or sets a <see cref="T:Northwoods.Go.Panel"/> of type <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid"/> acting as the background grid
            extending across the whole viewport of this diagram.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.ViewportBounds">
             <summary>
             This read-only property returns the bounds of the portion of the Diagram in document coordinates that is viewable.
             </summary>
             <remarks>
             Typically when the viewport bounds are smaller than the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>, the user can scroll or pan the view.
            
             The x and y coordinates are equal to the <see cref="P:Northwoods.Go.Diagram.Position"/> of the Diagram,
             and the width and height are equal to the Diagram's canvas width and height,
             divided by the <see cref="P:Northwoods.Go.Diagram.Scale"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.ViewSize">
             <summary>
             Gets or sets a fixed size in document coordinates to be returned by <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/>.
             This is typically only set when the Diagram isn't associated with a visual component.
             </summary>
             <remarks>
             This is typically only set when the Diagram isn't associated with a visual component.
             This property is intended to be used in environments where there is no Diagram component expected, to simulate the size of the component.
             Normally, the <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/> is sized by the component instead.
            
             By default this is Size(double.NaN, double.NaN).
             If this property is set, its size will always be used to compute the <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/>, even if
             a component is being used. It is uncommon to set both this property and use a component.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.ViewportBounds"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.FixedBounds">
            <summary>
            Gets or sets a fixed bounding rectangle to be returned by <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>
            and <see cref="M:Northwoods.Go.Diagram.ComputeBounds"/>.
            </summary>
            <remarks>
            By default this has NaN values, meaning that <see cref="M:Northwoods.Go.Diagram.ComputeBounds"/>
            will compute the union of all of the parts in the Diagram to determine the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>.
            If all x/y/width/height values are real numbers, this value is used as the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.ScrollMargin">
             <summary>
             Gets or sets a scrollable area in document coordinates that surrounds the document bounds, allowing the user to scroll into empty space.
             </summary>
             <remarks>
             The margin is only effective in each direction when the document bounds plus margin is greater than the viewport bounds.
            
             The default value is a margin of 0, all around the edge of the document.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.ScrollMode">
            <summary>
            Gets or sets the scrollMode of the Diagram, allowing the user to either
            scroll to document bound borders with <see cref="F:Northwoods.Go.ScrollMode.Document"/>,
            or scroll endlessly with <see cref="F:Northwoods.Go.ScrollMode.Infinite"/>.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.ScrollMode.Document"/>.
            Changing this property value does not raise a Changed event.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.ScrollsPageOnFocus">
             <summary>
             Gets or sets whether the page may be scrolled when the diagram receives focus.
             </summary>
             <remarks>
             This happens in some environments when the top-left corner of the diagram's element
             is scrolled out of view, the diagram does not have focus, and the user clicks in the diagram.
            
             The default value is false.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.PositionComputation">
             <summary>
             Gets or sets the function used to determine the position that this Diagram can be scrolled or moved to.
             </summary>
             <remarks>
             By default this function is null and the Diagram's position is bound only by the document bounds.
            
             When this property is set the function is given a reference to the diagram and the proposed new position Point.
             The function must return a new point.
            
             An example that disallows decimal position values:
             <code language="cs">
               Point ComputeIntegralPosition(diagram, pt) {
                 return new Point(Math.Floor(pt.X), Math.Floor(pt.Y));
               }
             </code>
            
             The function, if supplied, must not have any side-effects.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.ScaleComputation">
            <summary>
            Gets or sets the function used to determine valid scale values for this Diagram.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.DocumentBounds">
             <summary>
             This read-only property returns the bounds of the diagram's contents, in document coordinates.
             </summary>
             <remarks>
             This is normally computed and set by <see cref="M:Northwoods.Go.Diagram.ComputeBounds"/> during Diagram updates
             that can occur for any number of relevant reasons, such as a <see cref="T:Northwoods.Go.Part"/> changing size.
            
             The Diagram's DocumentBounds can have an unvarying specific value
             by setting the <see cref="P:Northwoods.Go.Diagram.FixedBounds"/> property.
            
             If the DocumentBounds are larger than the <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/>,
             scrollbars will appear on desktop browsers. You can disable scrolling with the
             <see cref="P:Northwoods.Go.Diagram.AllowHorizontalScroll"/> and <see cref="P:Northwoods.Go.Diagram.AllowVerticalScroll"/> properties, and
             you can disable scrollbars themselves with the <see cref="P:Northwoods.Go.Diagram.HasHorizontalScrollbar"/>
             and <see cref="P:Northwoods.Go.Diagram.HasVerticalScrollbar"/> properties.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.EnsureBounds">
             <summary>
             Ensures that the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> are up to date.
             </summary>
             <remarks>
             This is sometimes necessary when operations need updated document bounds immediately.
            
             It is uncommon to call this method outside of customization.
             For efficiency, do not call this method unnecessarily.
             </remarks>
             <seealso cref="M:Northwoods.Go.Part.EnsureBounds"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.IsVirtualized">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.Scale">
             <summary>
             Gets or sets the scale transform of this Diagram.
             </summary>
             <remarks>
             Value must be a positive number.
             The default value is 1.
             Any new value will be coerced to be between <see cref="P:Northwoods.Go.Diagram.MinScale"/> and <see cref="P:Northwoods.Go.Diagram.MaxScale"/>.
            
             Scale can automatically be set by the <see cref="P:Northwoods.Go.Diagram.AutoScale"/> property.
             There are also <see cref="P:Northwoods.Go.Diagram.InitialScale"/> and <see cref="P:Northwoods.Go.Diagram.InitialAutoScale"/> for
             setting the scale on (re)initialization of a Diagram.
            
             Setting this property does not notify about any changed event.
             However you can listen for a <see cref="T:Northwoods.Go.DiagramEvent"/> by adding to a Diagram EventHandler property.
             with the name "ViewportBoundsChanged".
            
             If you set this property any replacement of the <see cref="P:Northwoods.Go.Diagram.Model"/> will result in a layout
             and a computation of new <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>, which in turn may cause the diagram to be scrolled
             and zoomed, depending on various Diagram properties named "Initial...".
             You may want to set <see cref="P:Northwoods.Go.Diagram.InitialScale"/> instead of setting this property around the time
             that you are loading a model.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.DefaultScale">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.Diagram.Scale"/> set by <see cref="M:Northwoods.Go.CommandHandler.ResetZoom(System.Double)"/>
            and when computing stretch values, such as when <see cref="P:Northwoods.Go.Diagram.AutoScale"/> or
            <see cref="P:Northwoods.Go.Diagram.InitialAutoScale"/> are set, or when <see cref="M:Northwoods.Go.Diagram.ZoomToFit"/> is called.
            </summary>
            <remarks>
            The default value is 1.0.
            The value must be a number larger than 0.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AutoScale">
             <summary>
             Gets or sets the auto scale behavior of the Diagram, controlling whether or not the
             Diagram's bounds automatically scale to fit the view.
             </summary>
             <remarks>
             The only accepted values are <see cref="F:Northwoods.Go.AutoScale.None"/>, <see cref="F:Northwoods.Go.AutoScale.Uniform"/>, or <see cref="F:Northwoods.Go.AutoScale.UniformToFill"/>.
             Setting this will change the Diagram's <see cref="P:Northwoods.Go.Diagram.Scale"/> and <see cref="P:Northwoods.Go.Diagram.Position"/>, if appropriate.
            
             The default value is <see cref="F:Northwoods.Go.AutoScale.None"/> - the scale and position are not automatically adjusted
             according to the area covered by the document.
             When the value is not None, any value for <see cref="P:Northwoods.Go.Diagram.InitialAutoScale"/> or <see cref="P:Northwoods.Go.Diagram.InitialScale"/> is ignored.
            
             <p class="box">
             When AutoScale is set to a non-<see cref="F:Northwoods.Go.AutoScale.None"/> value,
             the user will not be able to zoom, and setting <see cref="P:Northwoods.Go.Diagram.Scale"/> will do nothing.
             If you only want to scale automatically on initialization, use <see cref="P:Northwoods.Go.Diagram.InitialAutoScale"/>.
             </p>
            
             Setting this property to <see cref="F:Northwoods.Go.AutoScale.Uniform"/> is basically the same as calling <see cref="M:Northwoods.Go.Diagram.ZoomToFit"/>
             all the time, or just disabling interactive zooming.
            
             Note that depending on the values of <see cref="P:Northwoods.Go.Diagram.MaxScale"/> and <see cref="P:Northwoods.Go.Diagram.MinScale"/>, the actual value for <see cref="P:Northwoods.Go.Diagram.Scale"/>
             might be limited.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.InitialAutoScale">
             <summary>
             Gets or sets how the scale of the diagram is automatically
             set at the time of the "InitialLayoutCompleted" DiagramEvent, after the model has been replaced.
             </summary>
             <remarks>
             The only accepted values are <see cref="F:Northwoods.Go.AutoScale.None"/>, <see cref="F:Northwoods.Go.AutoScale.Uniform"/>, or <see cref="F:Northwoods.Go.AutoScale.UniformToFill"/>.
             Setting this will change the Diagram's <see cref="P:Northwoods.Go.Diagram.Scale"/> and <see cref="P:Northwoods.Go.Diagram.Position"/>, if appropriate.
            
             If you want to always automatically scale the Diagram, set <see cref="P:Northwoods.Go.Diagram.AutoScale"/> instead.
             If you want to set the scale to a specific value on initialization (each time the model is replaced),
             set <see cref="P:Northwoods.Go.Diagram.InitialScale"/>.
            
             The default value is <see cref="F:Northwoods.Go.AutoScale.None"/> -- the scale and position are not automatically adjusted
             according to the area covered by the document.
            
             Setting this property to <see cref="F:Northwoods.Go.AutoScale.Uniform"/> is basically the same as calling <see cref="M:Northwoods.Go.Diagram.ZoomToFit"/>
             in an "InitialLayoutCompleted" <see cref="T:Northwoods.Go.DiagramEvent"/> listener.
            
             Note that depending on the values of <see cref="P:Northwoods.Go.Diagram.MaxScale"/> and <see cref="P:Northwoods.Go.Diagram.MinScale"/>, the actual value for <see cref="P:Northwoods.Go.Diagram.Scale"/>
             might be limited.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.InitialViewportSpot">
             <summary>
             Gets or sets the spot in the viewport that should be coincident with the
             <see cref="P:Northwoods.Go.Diagram.InitialDocumentSpot"/> of the document when the document is first initialized.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Spot.TopLeft"/>.
            
             If you set this, often you will also want to set <see cref="P:Northwoods.Go.Diagram.InitialDocumentSpot"/>.
             If you set <see cref="P:Northwoods.Go.Diagram.InitialPosition"/>, it will take precedence over this property.
            
             Setting this property and <see cref="P:Northwoods.Go.Diagram.InitialDocumentSpot"/> has the same effect as implementing
             an "InitialLayoutCompleted" DiagramEvent listener that calls <see cref="M:Northwoods.Go.Diagram.AlignDocument(Northwoods.Go.Spot,Northwoods.Go.Spot)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.InitialDocumentSpot"/>
             <seealso cref="P:Northwoods.Go.Diagram.InitialContentAlignment"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.InitialDocumentSpot">
             <summary>
             Gets or sets the spot in the document's area that should be coincident with the
             <see cref="P:Northwoods.Go.Diagram.InitialViewportSpot"/> of the viewport when the document is first initialized.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Spot.TopLeft"/>.
            
             If you set this, often you will also want to set <see cref="P:Northwoods.Go.Diagram.InitialViewportSpot"/>.
             If you set <see cref="P:Northwoods.Go.Diagram.InitialPosition"/>, it will take precedence over this property.
            
             Setting this property and <see cref="P:Northwoods.Go.Diagram.InitialViewportSpot"/> has the same effect as implementing
             an "InitialLayoutCompleted" DiagramEvent listener that calls <see cref="M:Northwoods.Go.Diagram.AlignDocument(Northwoods.Go.Spot,Northwoods.Go.Spot)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.InitialViewportSpot"/>
             <seealso cref="P:Northwoods.Go.Diagram.InitialPosition"/>
             <seealso cref="P:Northwoods.Go.Diagram.InitialContentAlignment"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.MinScale">
             <summary>
             Gets or sets the smallest value greater than zero that <see cref="P:Northwoods.Go.Diagram.Scale"/> may take.
             </summary>
             <remarks>
             This property is only used to limit the range of new values of <see cref="P:Northwoods.Go.Diagram.Scale"/>.
            
             The default value is 0.0001.
             Values must be larger than zero and not greater than one.
             Setting this to a value that is greater than the current <see cref="P:Northwoods.Go.Diagram.Scale"/>
             will cause the current diagram scale to be set to this new value.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.MaxScale">
             <summary>
             Gets or sets the largest value that <see cref="P:Northwoods.Go.Diagram.Scale"/> may take.
             </summary>
             <remarks>
             This property is only used to limit the range of new values of <see cref="P:Northwoods.Go.Diagram.Scale"/>.
            
             The default value is 100.0.
             Values must be no less than one.
             Setting this to a value that is less than the current <see cref="P:Northwoods.Go.Diagram.Scale"/>
             will cause the current diagram scale to be set to this new value.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.ZoomPoint">
             <summary>
             Gets or sets the zoom point of this Diagram, in viewport coordinates.
             </summary>
             <remarks>
             This is used by <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseWheel"/> and scale-setting commands to control where to zoom in or out.
            
             Typical usage is to remember the value of this property and
             to set this property to some point within the viewport (between zero and the canvas width and height).
             This is commonly accomplished by using the <see cref="P:Northwoods.Go.InputEvent.ViewPoint"/> of <see cref="P:Northwoods.Go.Diagram.LastInput"/>.
             Then one changes the <see cref="P:Northwoods.Go.Diagram.Scale"/> somehow, perhaps by executing one of the <see cref="P:Northwoods.Go.Diagram.CommandHandler"/> commands,
             or by rotating the mouse wheel, or just by setting the <see cref="P:Northwoods.Go.Diagram.Scale"/> property.
             Finally one restores the original value of this property.
            
             The default value is Point(double.NaN, double.NaN).
             Value must be of type <see cref="T:Northwoods.Go.Point"/>, in element coordinates, not in document coordinates.
             Setting this property does not notify about any changed event.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.ContentAlignment">
             <summary>
             Gets or sets the content alignment <see cref="T:Northwoods.Go.Spot"/> of this Diagram, to be used in determining
             how parts are positioned when the <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/> width or height is larger than the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>.
             </summary>
             <remarks>
             For instance a spot of <see cref="F:Northwoods.Go.Spot.Center"/> would ensure that the Diagram's
             contents are always centered in the viewport.
            
             If you want the content to be aligned only initially, use <see cref="P:Northwoods.Go.Diagram.InitialContentAlignment"/> instead.
            
             The default value is <see cref="F:Northwoods.Go.Spot.Default"/>, which causes no automatic scrolling or positioning.
             When the value is not Default, any value for <see cref="P:Northwoods.Go.Diagram.InitialContentAlignment"/> or <see cref="P:Northwoods.Go.Diagram.InitialPosition"/> is ignored.
            
             Setting this property has the same effect as implementing
             a "LayoutCompleted" DiagramEvent listener that scrolls the viewport to align the content.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.InitialContentAlignment">
             <summary>
             Gets or sets the initial content alignment <see cref="T:Northwoods.Go.Spot"/> of this Diagram, to be used in determining
             how parts are positioned initially relative to the viewport, when the <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/> width or height is smaller than the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>.
             </summary>
             <remarks>
             For instance a spot of <see cref="F:Northwoods.Go.Spot.Center"/> would ensure that the Diagram's contents are initially centered in the viewport.
            
             To initially align the document when the documentBounds are larger than the viewport, use <see cref="P:Northwoods.Go.Diagram.InitialDocumentSpot"/> and <see cref="P:Northwoods.Go.Diagram.InitialViewportSpot"/>.
            
             If you want the content to be constantly aligned with a spot, use <see cref="P:Northwoods.Go.Diagram.ContentAlignment"/> instead.
            
             The default value is <see cref="F:Northwoods.Go.Spot.Default"/>, which causes no automatic scrolling or positioning.
            
             Setting this property has the same effect as implementing
             an "InitialLayoutCompleted" DiagramEvent listener that scrolls the viewport to align the content.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.InitialDocumentSpot"/>
             <seealso cref="P:Northwoods.Go.Diagram.InitialViewportSpot"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.Padding">
             <summary>
             Gets or sets the Margin that describes the Diagram's padding,
             which controls how much extra space in document coordinates there is around the area occupied by the document.
             </summary>
             <remarks>
             This keeps nodes from butting up against the side of the diagram (unless scrolled).
            
             The default value is a margin of 5, all around the edge of the document.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.PartManager">
            @hidden @internal
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.Diagram.PartManager"/> responsible for creating and updating
            <see cref="T:Northwoods.Go.Part"/>s for all of the data managed by the <see cref="P:Northwoods.Go.Diagram.Model"/>.
            </summary>
            <remarks>
            The default value is an instance of <see cref="P:Northwoods.Go.Diagram.PartManager"/>.
            There must always be a non-null value for this property.
            <see cref="P:Northwoods.Go.Diagram.PartManager"/>s cannot be shared by Diagrams.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.Nodes">
            <summary>
            This read-only property returns a read-only collection of all <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Group"/>s in the Diagram.
            </summary>
            <remarks>
            This includes both data-bound and unbound nodes,
            and both top-level nodes and nodes inside <see cref="T:Northwoods.Go.Group"/>s.
            All of the simple <see cref="T:Northwoods.Go.Part"/>s are accessible via the <see cref="P:Northwoods.Go.Diagram.Parts"/> property.
            </remarks>
            <seealso cref="M:Northwoods.Go.Diagram.FindTopLevelGroups"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindTreeRoots"/>
        </member>
        <member name="P:Northwoods.Go.Diagram.Links">
             <summary>
             This read-only property returns a read-only collection of all <see cref="T:Northwoods.Go.Link"/>s in the Diagram.
            
             This includes both data-bound and unbound links,
             and both top-level links and links inside <see cref="T:Northwoods.Go.Group"/>s.
             </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.Parts">
            <summary>
            This read-only property returns a read-only collection of all <see cref="T:Northwoods.Go.Part"/>s in the Diagram
            that are not <see cref="T:Northwoods.Go.Node"/>s or <see cref="T:Northwoods.Go.Link"/>s or <see cref="T:Northwoods.Go.Adornment"/>s.
            </summary>
            <remarks>
            This includes both data-bound and unbound parts,
            and both top-level parts and parts inside <see cref="T:Northwoods.Go.Group"/>s.
            Use the <see cref="P:Northwoods.Go.Diagram.Nodes"/> or <see cref="P:Northwoods.Go.Diagram.Links"/> properties for getting the
            collection of all <see cref="T:Northwoods.Go.Node"/>s or <see cref="T:Northwoods.Go.Link"/>s in the diagram.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindTopLevelNodesAndLinks">
            @hidden @internal
            <summary>
            Returns an iterator of all <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s that are top-level,
            including top-level <see cref="T:Northwoods.Go.Group"/>s, but not including any simple <see cref="T:Northwoods.Go.Part"/>s or <see cref="T:Northwoods.Go.Adornment"/>s.
            </summary>
            <remarks>
            This is useful for operations on the diagram's top-level graph, such as in implementations of <see cref="M:Northwoods.Go.Layouts.Layout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindTopLevelGroups">
            <summary>
            Returns an iterator of all <see cref="T:Northwoods.Go.Group"/>s that are at top-level,
            in other words that are not themselves inside other Groups.
            </summary>
            <remarks>
            This is useful for when you want to traverse the diagram's graph by recursing into Groups.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.Layout">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.Diagram.Layout"/> used to position all of the top-level nodes and links in this Diagram.
            </summary>
            <remarks>
            By default this property is an instance of a simple <see cref="T:Northwoods.Go.Layouts.Layout"/>
            that assigns positions to all parts that need it.
            The value cannot be null and must not be shared with other Diagrams.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.LayoutDiagram(System.Boolean)">
             <summary>
             Perform all invalid layouts.
             </summary>
             <remarks>
             If the optional argument is true,
             this will perform all of the layouts (<see cref="P:Northwoods.Go.Diagram.Layout"/> and all <see cref="P:Northwoods.Go.Group.Layout"/>s),
             not just the invalid ones.
            
             Under normal circumstances you should not need to call this method,
             because layouts will be performed automatically after they become invalid.
             However you may have disabled automatic layouts by setting <see cref="P:Northwoods.Go.Layouts.Layout.IsInitial"/>
             and/or <see cref="P:Northwoods.Go.Layouts.Layout.IsOngoing"/> to false, or by restricting a Part's <see cref="P:Northwoods.Go.Part.LayoutConditions"/>.
             If that is the case you might call this method
             (perhaps due to a user command) to perform the layout at a time of your choosing.
             </remarks>
             <param name="invalidateAll">If true, this will explicitly set <see cref="P:Northwoods.Go.Layouts.Layout.IsValidLayout"/> to false on each <see cref="T:Northwoods.Go.Layouts.Layout"/> in the diagram.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.InvalidateAllLayouts(System.Boolean)">
            @hidden @internal
            <summary>
            Called by layoutDiagram, addModeledParts, addModeledLinks
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.InvalidateGroupLayouts(Northwoods.Go.Group,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateAllLayouts(System.Boolean)">
            @hidden @internal
            <summary>
            Layout all invalid layouts in this Diagram. Should only be called within doUpdate, since it resets _anyLayoutInvalid.
            </summary>
            <param name="checkRealtime">if true, only do layouts with isRealtime = true</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.UpdateGroupLayouts(Northwoods.Go.Group,System.Boolean,System.Double)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Diagram.IsTreePathToChildren">
            <summary>
            Gets or sets whether the Diagram tree structure is defined by
            links going from the parent node to their children, or vice-versa.
            </summary>
            <remarks>
            By default this property is true: links go from the parent node to the child node.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.FindTreeRoots">
            <summary>
            Returns an iterator of all top-level <see cref="T:Northwoods.Go.Node"/>s that have no tree parents.
            </summary>
            <remarks>
            This is useful for when you want to traverse the diagram's graph by starting at the root of each tree,
            assuming that the diagram consists of one tree or a forest of trees.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.TreeCollapsePolicy">
             @hidden @internal
             <summary>
             Gets or sets the conditions under which "child" nodes become not visible.
             </summary>
             <remarks>
             By default this property is <see cref="F:Northwoods.Go.CollapsePolicy.TreeParent"/>: only the true tree parent node's
             <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/> property controls the visibility of a child node.
            
             You can set this to <see cref="F:Northwoods.Go.CollapsePolicy.AllParents"/>, to require all of a node's
             "parents" to be collapsed in order for the node to become hidden.
             Caution: cycles in the graph structure may cause all of the nodes in the cycle to become hidden.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.IsCollapsingExpanding">
            @hidden @internal
        </member>
        <member name="E:Northwoods.Go.Diagram.InitialAnimationStarting">
            <summary>
            Register or unregister an event handler that is called when the initial default animation is about to start.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.AnimationStarting">
            <summary>
            Register or unregister an event handler that is called when a default animation is about to start.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.AnimationFinished">
            <summary>
            Register or unregister an event handler that is called when a default animation just completed.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.BackgroundSingleClicked">
            <summary>
            Register or unregister an event handler that is called when a mouse left-button single-click happened in the background of the Diagram, not on a Part.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.BackgroundDoubleClicked">
            <summary>
            Register or unregister an event handler that is called when a mouse left-button double-click happened in the background of the Diagram, not on a Part.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.BackgroundContextClicked">
            <summary>
            Register or unregister an event handler that is called when a mouse right-button single-click happened in the background of the Diagram, not on a Part.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.ChangingSelection">
            <summary>
            Register or unregister an event handler that is called when an operation is about to change the Diagram.Selection collection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.ChangedSelection">
            <summary>
            Register or unregister an event handler that is called when an operation has just changed the Diagram.Selection collection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.ClipboardChanged">
            <summary>
            Register or unregister an event handler that is called when Parts have been copied to the clipboard by CommandHandler.CopySelection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.ClipboardPasted">
            <summary>
            Register or unregister an event handler that is called when Parts have been copied from the clipboard into the Diagram by CommandHandler.PasteSelection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.DocumentBoundsChanged">
            <summary>
            Register or unregister an event handler that is called when the area of the diagram's Parts, Diagram.DocumentBounds, has changed.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.ExternalElementsDropped">
            <summary>
            Register or unregister an event handler that is called when Parts have been copied into the Diagram by drag-and-drop from outside of the Diagram.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.GainedFocus">
            <summary>
            Register or unregister an event handler that is called when the diagram has gained keyboard focus, such as after a call to Diagram.Focus.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.InitialLayoutCompleted">
            <summary>
            Register or unregister an event handler that is called when the whole diagram layout has updated for the first time since a major change to the Diagram, such as replacing the Model.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.DrawInvalidated">
            NYI Should this be renamed?
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.LayoutCompleted">
            <summary>
            Register or unregister an event handler that is called when the whole diagram layout has just been updated.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.LinkDrawn">
            <summary>
            Register or unregister an event handler that is called when the user has just created a new Link using LinkingTool.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.LinkRelinked">
            <summary>
            Register or unregister an event handler that is called when the user has just reconnected an existing Link using RelinkingTool or DraggingTool.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.LinkReshaped">
            <summary>
            Register or unregister an event handler that is called when the user has just rerouted an existing Link using LinkReshapingTool.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.LostFocus">
            <summary>
            Register or unregister an event handler that is called when the diagram has lost keyboard focus ("blur").
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.Modified">
            <summary>
            Register or unregister an event handler that is called when the Diagram.IsModified property has been set to a new value.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.ElementSingleClicked">
            <summary>
            Register or unregister an event handler that is called when a click that occurred on a GraphObject.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.ElementDoubleClicked">
            <summary>
            Register or unregister an event handler that is called when a double-click that occurred on a GraphObject.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.ElementContextClicked">
            <summary>
            Register or unregister an event handler that is called when a context-click that occurred on a GraphObject.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.PartCreated">
            <summary>
            Register or unregister an event handler that is called when the user inserted a new Part by ClickCreatingTool.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.PartResized">
            <summary>
            Register or unregister an event handler that is called when the user has changed the size of a GraphObject by ResizingTool.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.PartRotated">
            <summary>
            Register or unregister an event handler that is called when the user has changed the angle of a GraphObject by RotatingTool.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.SelectionMoved">
            <summary>
            Register or unregister an event handler that is called when the user has moved selected Parts by DraggingTool.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.SelectionCopied">
            <summary>
            Register or unregister an event handler that is called when the user has copied selected Parts by DraggingTool.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.SelectionDeleting">
            <summary>
            Register or unregister an event handler that is called when the user is about to delete selected Parts by CommandHandler.DeleteSelection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.SelectionDeleted">
            <summary>
            Register or unregister an event handler that is called when the user has deleted selected Parts by CommandHandler.DeleteSelection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.SelectionGrouped">
            <summary>
            Register or unregister an event handler that is called when the user has made a new Group out of the selected Parts by CommandHandler.GroupSelection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.SelectionUngrouped">
            <summary>
            Register or unregister an event handler that is called when the user has removed a selected Group but kept its members by CommandHandler.UngroupSelection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.SubGraphCollapsed">
            <summary>
            Register or unregister an event handler that is called when the user has collapsed selected Groups by CommandHandler.CollapseSubGraph.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.SubGraphExpanded">
            <summary>
            Register or unregister an event handler that is called when the user has expanded selected Groups by CommandHandler.ExpandSubGraph.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.TextEdited">
            <summary>
            Register or unregister an event handler that is called when the user has changed the string value of a TextBlock by TextEditingTool.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.TreeCollapsed">
            <summary>
            Register or unregister an event handler that is called when the user has collapsed selected Nodes with subtrees by CommandHandler.CollapseTree.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.TreeExpanded">
            <summary>
            Register or unregister an event handler that is called when the user has expanded selected Nodes with subtrees by CommandHandler.ExpandTree.
            </summary>
        </member>
        <member name="E:Northwoods.Go.Diagram.ViewportBoundsChanged">
            <summary>
            Register or unregister an event handler that is called when the visible area of the Diagram, Diagram.ViewportBounds, has changed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseInitialAnimationStarting(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseAnimationStarting(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseAnimationFinished(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseBackgroundSingleClicked(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseBackgroundDoubleClicked(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseBackgroundContextClicked(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseChangingSelection(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="selection">The Diagram.Selection collection, the subject of the event.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseChangedSelection(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="selection">The Diagram.Selection collection, the subject of the event.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseClipboardChanged(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The collection of copied Parts.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseClipboardPasted(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="selection">This is the Diagram.Selection.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseDocumentBoundsChanged(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="selection"></param>
            <param name="param">The old document bounds Rect</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseExternalElementsDropped(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The Parts that were dropped.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseGainedFocus(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="sub"></param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseInitialLayoutCompleted(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseInvalidateDraw(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseLayoutCompleted(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseLinkDrawn(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="link">The new Link.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseLinkRelinked(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="link">The modified Link.</param>
            <param name="param">The GraphObject port that the link was disconnected from.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseLinkReshaped(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="link">The modified Link.</param>
            <param name="param">The List of Points of the link's original route.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseElementContextClicked(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="obj">The context-clicked GraphObject.</param>
            <param name="param"></param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseLostFocus(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="sub"></param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseModified(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseElementDoubleClicked(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="obj">The double-clicked GraphObject.</param>
            <param name="param"></param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseElementSingleClicked(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="obj">The clicked GraphObject.</param>
            <param name="param"></param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaisePartCreated(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="part">The new Part.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaisePartResized(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="part">The modified Part.</param>
            <param name="param">The original Size.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaisePartRotated(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="part">The modified Part.</param>
            <param name="param">The original angle in degrees.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseTextEdited(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The edited TextBlock.</param>
            <param name="param">The original string</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseTreeCollapsed(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The collection of Nodes that were collapsed.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseTreeExpanded(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The collection of Nodes that were expanded.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseSelectionCopied(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The newly copied Parts.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseSelectionDeleting(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The collection of Parts to be deleted.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseSelectionDeleted(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The collection of Parts that were deleted.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseSelectionMoved(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The moved Parts.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseSelectionGrouped(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="group">The new Group.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseSelectionUngrouped(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The collection of Groups that were ungrouped.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseSubGraphCollapsed(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The collection of Groups that were collapsed.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseSubGraphExpanded(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="coll">The collection of Groups that were expanded.</param>
            <param name="param">an optional parameter describing the change to the subject of the event.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RaiseViewportBoundsChanged(System.Object,System.Object)">
            <summary>
            (undocumented)
            </summary>
            <param name="sub">an object whose "scale" property is the old Diagram.scale value, whose "position" property is the old Diagram.position value, and whose "bounds" property is the old Diagram.viewportBounds value</param>
            <param name="param">the old viewportBounds Rect.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.CanAvoidNodes">
            @hidden @internal
            <summary>
            Instead of Link.MaybeAvoidsNodes having to know about diagram state
            like animation manager status or the current tool,
            it calls this instead.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.IsUnoccupied(Northwoods.Go.Rect,Northwoods.Go.Node)">
            @hidden @internal
            <summary>
            Returns true if there are no avoidable nodes within or intersecting the given rectangular area.
            </summary>
            <param name="r">a Rect in document coordinates</param>
            <param name="skip">an optional Node to be skipped</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.ComputeOccupiedArea">
            @hidden @internal
            <returns>in document coordinates</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.GetPositions(System.Boolean,Northwoods.Go.Group,Northwoods.Go.Node)">
            @hidden @internal
            <summary>
            Internal, used by Link.AddOrthoPoints to get and initialize a PositionArray
            representing the occupied areas of this Diagram.
            </summary>
            <param name="clearunoccupied"></param>
            <param name="group">limit avoidable nodes to members of this Group</param>
            <param name="skip">a Node (presumably an avoidable node) whose bounds are not declared "occupied"</param>
        </member>
        <member name="P:Northwoods.Go.Diagram.AvoidanceCellSize">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.AvoidanceLimit">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.GetPositions1(Northwoods.Go.Node,Northwoods.Go.Node)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Diagram.InvalidatePositionArray(Northwoods.Go.Node)">
            @hidden @internal
            <summary>
            Called by Node and Part
            </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.AutoScrollInterval">
            <summary>
            Gets or sets number of milliseconds between autoscroll events.
            </summary>
            <remarks>
            The default value is 250.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Diagram.AutoScrollRegion">
             <summary>
             Gets or sets the Margin that describes the area along the inside edges of the viewport,
             in viewport coordinates, where autoscrolling will occur while the mouse (pointer) is held there
             during dragging or linking or drag-selecting.
             </summary>
             <remarks>
             The default value is a Margin of 16 on all sides.
             Increase this value in order to make it easier for the user to autoscroll by having
             a larger area in which to hold the mouse (pointer) down during a dragging operation.
            
             When the mouse (pointer) drag point is within this region on the left or right sides,
             the view will automatically scroll horizontally in that direction.
             When the point is within the region on the top or bottom, the view will automatically scroll
             vertically in that direction.
             You can specify a Margin side of zero to disable autoscrolling in a particular direction;
             a value of Margin(0,0,0,0) turns off autoscrolling in all four directions.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Diagram.DoAutoScroll(Northwoods.Go.Point)">
            <summary>
            (undocumented)
            Called by DraggingTool and LinkingTool to implement auto-scrolling.
            </summary>
            <param name="viewPt">in viewport coordinates</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.ComputeAutoScrollPosition(Northwoods.Go.Point)">
            <summary>
            (undocumented)
            </summary>
            <param name="viewPnt">in viewport coordinates</param>
            <returns>in document coordinates</returns>
        </member>
        <member name="M:Northwoods.Go.Diagram.AddRenderer(System.String,Northwoods.Go.IDrawingSurface)">
            <summary>
            (undocumented)
            Add a renderer to the Diagram. This property is only used when building GoDiagram from source.
            </summary>
            <param name="name">Name of the renderer</param>
            <param name="surface">Rendering class, an IDrawingSurface.</param>
        </member>
        <member name="M:Northwoods.Go.Diagram.RemoveRenderer(System.String)">
            <summary>
            Remove a renderer.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Diagram.CacheGroupExternalLinks(System.Boolean)">
            <summary>
            (undocumented)
            Start or stop caching <see cref="M:Northwoods.Go.Group.FindExternalLinksConnected"/>.
            </summary>
            <param name="start"></param>
        </member>
        <member name="P:Northwoods.Go.Diagram.Debug">
             <summary>
             Gets or sets whether debug mode is active.
            
             Debug mode does more error checking of property values and method arguments, and it detects more unusual situations.
             Most warnings and errors will be written to the console/output window. Always check it for messages.
             We have tried to make them informative.
             </summary>
        </member>
        <member name="P:Northwoods.Go.Diagram.VersionName">
            <summary>
            Gets the name of the version of GoDiagram being used.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Overview">
             <summary>
             An Overview is a <see cref="T:Northwoods.Go.Diagram"/> that displays all of a different diagram,
             with a rectangular box showing the viewport displayed by that other diagram.
             </summary>
             <remarks>
             <p class="box">
             For more discussion, see <a href="../../intro/overview.html">Introduction to Overviews</a>.
             </p>
            
             All you need to do is set <see cref="P:Northwoods.Go.Overview.Observed"/>:
             <code language="cs">
             myOverview = overviewControl1.Diagram as Overview;
             myOverview.Observed = myDiagram;
             </code>
            
             The Overview draws what the observed Diagram is displaying,
             so setting or modifying any diagram templates or template Maps has no effect.
            
             Animations are not shown in an Overview.
            
             At the current time methods such as <see cref="M:Northwoods.Go.Diagram.MakeImageData(Northwoods.Go.ImageDataProperties)"/> do not work on Overviews.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Overview.Draw(Northwoods.Go.IDrawingContext,System.Collections.Generic.HashSet{Northwoods.Go.Part})">
            <summary>
            Draw a scaled version of the observed diagram
            </summary>
        </member>
        <member name="M:Northwoods.Go.Overview.#ctor">
            <summary>
            Constructs a new Overview. You will not normally call this constructor.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Overview.ComputePixelRatio">
            Overviews use a lame pixel ratio for performance reasons.
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="M:Northwoods.Go.Overview.Redraw">
            Allow explicitly updating the Overview even though updateDelay is >= 1.
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="P:Northwoods.Go.Overview.Observed">
             <summary>
             Gets the <see cref="T:Northwoods.Go.Diagram"/> for which this Overview is
             displaying a model and showing its viewport into that model.
            
             If the corresponding UI component is not ready, this may be null.
             </summary>
        </member>
        <member name="P:Northwoods.Go.Overview.Box">
            <summary>
            Gets or sets the rectangular <see cref="T:Northwoods.Go.Part"/> that represents the
            viewport of the <see cref="P:Northwoods.Go.Overview.Observed"/> <see cref="T:Northwoods.Go.Diagram"/>.
            </summary>
            <remarks>
            By default the part contains only a magenta <see cref="T:Northwoods.Go.Shape"/>.
            The box's <see cref="P:Northwoods.Go.Part.SelectionElement"/> is what is resized by the Overview to the apparent size of the observed diagram's viewport.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Overview.DrawsTemporaryLayers">
             <summary>
             Gets or sets whether this overview draws the temporary layers of the observed Diagram.
             </summary>
             <remarks>
             The default value is true.
             Setting this property to false may improve drawing performance,
             especially if the <see cref="P:Northwoods.Go.Diagram.Grid"/> is visible.
            
             Setting this property does not notify about any changed event.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Overview.DrawsGrid">
             Gets or sets whether this overview draws the <see cref="P:Northwoods.Go.Diagram.Grid"/> of the observed Diagram,
             if it is visible.  The default value is true.
            
             This property is only considered when <see cref="P:Northwoods.Go.Overview.DrawsTemporaryLayers"/> is true.
             Setting this to false may help improve drawing performance.
            
             Setting this property does not notify about any changed event.
             <summary>
             Undocumented.
             </summary>
        </member>
        <member name="P:Northwoods.Go.Overview.UpdateDelay">
             Gets or sets how long it waits before updating, in milliseconds.
             The default value is zero.
             Any new value must be a non-negative number.
            
             Setting this property does not notify about any changed event.
             <summary>
             Undocumented
             </summary>
        </member>
        <member name="M:Northwoods.Go.Overview.UpdateBox">
            <summary>
            Update Box.Location
            </summary>
        </member>
        <member name="M:Northwoods.Go.Overview.ComputeBounds">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Overview.InvalidateViewport(Northwoods.Go.Rect,Northwoods.Go.Rect)">
            <summary>
            Causes the diagram to redraw.
            </summary>
            <param name="oldv">old viewport bounds.</param>
            <param name="newv">new viewport bounds.</param>
        </member>
        <member name="M:Northwoods.Go.Overview.OnViewportBoundsChanged(Northwoods.Go.Rect,Northwoods.Go.Rect,System.Double,System.Boolean)">
            <summary>
            This method is called when the <see cref="P:Northwoods.Go.Diagram.Position"/> or <see cref="P:Northwoods.Go.Diagram.Scale"/> change.
            </summary>
            <param name="oldvbounds">a Rect in document coordinates.</param>
            <param name="newvbounds">a Rect in document coordinates.
            The X or Y may have changed because of a change to <see cref="P:Northwoods.Go.Diagram.Position"/>.
            The Width or Height may have changed either because this Diagram has changed size
            or because the <see cref="P:Northwoods.Go.Diagram.Scale"/> has changed value.</param>
            <param name="oldscale"></param>
            <param name="isScroll">true if the viewport change was only caused by a scrollbar changing size.</param>
        </member>
        <member name="T:Northwoods.Go.EasingFunction">
            <summary>
            An EasingFunction describes how much to modify a scalar value based on
            the current time, the start value, the change in value, and the duration.
            </summary>
            <param name="currentTime"></param>
            <param name="startValue"></param>
            <param name="byValue"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.Go.Animation">
             <summary>
             Animations are used to animate <see cref="T:Northwoods.Go.GraphObject"/> and <see cref="T:Northwoods.Go.Diagram"/> properties.
             </summary>
             <remarks>
             This class is useful for creating manual animations.
             If you wish to animate particular properties on a GraphObject every time their value changes,
             you may want to use <see cref="T:Northwoods.Go.AnimationTrigger"/>s instead, which automatically create and start Animations.
            
             The <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/> is an instance of this class, and carries out the
             default animations in GoDiagram: Model load, layout, expand and collapse, and so on.
             See the <a href="../../intro/animation.html">Introduction Page on Animations</a> for more detail on the different kinds of animations.
            
             Manual animations are set up by creating an instance of this class, and calling <see cref="M:Northwoods.Go.Animation.Add(System.Object,System.String,System.Object,System.Object,System.Boolean)"/> at least once, then calling <see cref="M:Northwoods.Go.Animation.Start"/>.
             The method <see cref="M:Northwoods.Go.Animation.Add(System.Object,System.String,System.Object,System.Object,System.Boolean)"/> specifies which objects and which animation effects/properties to animate, plus start and end values for the property.
             As objects are added to an Animation, the Animation infers which <see cref="T:Northwoods.Go.Diagram"/> and <see cref="T:Northwoods.Go.AnimationManager"/> is relevant.
            
             Animations are started by calling <see cref="M:Northwoods.Go.Animation.Start"/>, and stopped when the <see cref="P:Northwoods.Go.Animation.Duration"/> is reached, or when <see cref="M:Northwoods.Go.Animation.Stop"/> is called,
             or stopped when <see cref="M:Northwoods.Go.AnimationManager.StopAnimation(System.Boolean)"/> is called with `true` as its argument.
            
             Animations can continue indefinitely if <see cref="P:Northwoods.Go.Animation.RunCount"/> is set to `int.MaxValue`.
             Animations can act upon temporary copies of an object that will get destroyed by calling <see cref="M:Northwoods.Go.Animation.AddTemporaryPart(Northwoods.Go.Part,Northwoods.Go.Diagram)"/>.
             This is useful when crafting cosmetic animations of parts that are about to be deleted:
             Since the part will no longer exist, you can instead animate a temporary part disappearing.
            
             A simple example usage is this:
             <code language="cs">
             var node = myDiagram.Nodes.FirstOrDefault();
             var shape = node.FindElement("SHAPE") as Shape;  // assumes this Node contains a Shape with .Name = "SHAPE"
             var animation = new Animation();
             // Animate this Node from its current position to (400, 500)
             animation.Add(node, "Position", node.Position, new Point(400, 500));
             // Animate the fill of the Shape within the Node, from its current color to blue
             animation.Add(shape, "Fill", shape.Fill, "blue");
             // Both of these effects will animate simultaneously when Start() is called:
             animation.Start();
             </code>
            
             See the <a href="../../intro/animation.html">Introduction Page on Animations</a> and the <a href="../../samples/customAnimations.html">Custom Animations sample</a>
             for more example usage of the Animation class.
            
             Unlike the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>, Animations can be started any time,
             and do not stop automatically when a new transaction begins.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Animation.#ctor">
            <summary>
            Constructs an Animation with default property values.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.Suspend">
            <summary>
            (undocumented) Debug only.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.AdvanceTo(System.Int32,System.Boolean)">
            <summary>
            (undocumented) Debug only.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.ClearState(Northwoods.Go.Diagram)">
            <summary>
            Occurs during DoCompletion
            DoCompletion also sets:
             this._IsAnimating = false;
            BeginAnimation also sets, if aborting the IsInitial animation:
             this._ObjectsToAnimate.Clear();
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.IsAnythingAnimating">
            <summary>
            True if an object or the Diagram position or scale are added to this animation.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.Start">
             <summary>
             Start this animation.
             </summary>
             <remarks>
             This adds the Animation to its <see cref="T:Northwoods.Go.AnimationManager"/>'s list of active animations.
             The AnimationManager is inferred from the list of objects to be animated, by inspecting their Diagram.
            
             This does nothing if there are no objects to animate.
             </remarks>
             <returns>this Animation</returns>
        </member>
        <member name="M:Northwoods.Go.Animation.AddTemporaryPart(Northwoods.Go.Part,Northwoods.Go.Diagram)">
             <summary>
             Add a temporary Part to this animation.
             </summary>
             <remarks>
             This part will be added to the Diagram when the animation is started,
             and removed from the Diagram when the animation completes.
             This is intended to be used with <see cref="M:Northwoods.Go.Animation.Add(System.Object,System.String,System.Object,System.Object,System.Boolean)"/>, to animate properties of this Part or its elements.
            
             The temporary part added is typically either a <see cref="M:Northwoods.Go.GraphObject.Copy"/> of an existing Part,
             which is to be deleted and requires a copy for animated effects, or else a wholly new temporary Part,
             constructed in memory for the purpose of creating some effect.
             </remarks>
             <param name="part">A part to add to the Diagram at the start of the animation and remove at the end.
               This is typically either a copied Part already in the Diagram, to animate its deletion,
               or a Part created programmatically to be used for some effect.</param>
             <param name="diagram">The Diagram to add the temporary part to, and remove it from, at the start and end of animation, respectively.</param>
             <returns>this Animation</returns>
        </member>
        <member name="M:Northwoods.Go.Animation.Add(System.Object,System.String,System.Object,System.Object,System.Boolean)">
             <summary>
             Add an object (GraphObject or Diagram) and effect name, with specified start and end values, to this Animation.
             </summary>
             <remarks>
             By default the supported properties are, for GraphObjects:
               - `"Position"`
               - `"Location"` (on Parts)
               - `"Scale"`
               - `"Opacity"`
               - `"Angle"`
               - `"DesiredSize"`
               - `"Width"`
               - `"Height"`
               - `"Background"`
               - `"Fill"` (on Shapes)
               - `"StrokeWidth"` (on Shapes)
               - `"StrokeDashOffset"` (on Shapes)
               - `"Stroke"` (on Shapes, TextBlocks)
            
             For Diagrams:
               - `"Position"`
               - `"Scale"`
               - `"Opacity"`
            
             More properties can be supported by defining new effects with <see cref="M:Northwoods.Go.AnimationManager.DefineAnimationEffect(System.String,Northwoods.Go.AnimationFunction)"/>.
             </remarks>
             <param name="obj">GraphObject or Diagram to animate.</param>
             <param name="effectName">Animation effect name, such as `"Scale"` to change GraphObject.Scale.</param>
             <param name="startValue">The starting value for the animated property. Often this is the current value of the property.</param>
             <param name="endValue">The ending value for the animated property. Even if the animation is just cosmetic, this must be a valid value for the property.
             For instance, for <see cref="P:Northwoods.Go.GraphObject.Scale"/>, you cannot animate to 0, as this is an invalid scale value.
             Instead you would animate to a very small (but still valid) value, such as 0.001.</param>
             <param name="cosmetic">Determines if the animation should revert the property value to the start value at the end of animation.
             Default false. This is commonly used when animating opacity or scale of "disappearing" nodes during collapse.
             Even though the node may appear to go to scale 0.001, the programmer usually wants the scale to reflect its prior value, once hidden.</param>
             <returns>this Animation</returns>
        </member>
        <member name="M:Northwoods.Go.Animation.Add2(System.Object,System.String,System.Object,System.Object,System.Boolean)">
            <summary>
            Used internally to skip checks
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.IsAnimatingPosition(Northwoods.Go.GraphObject)">
            <summary>
            Checks for position or location.
            This is used in Placeholder to determine if the group is being moved by the animation manager.
            If not, it may get moved by other forces, like member parts shifting their ActualBounds.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.ObjectsHaveDiagram">
            <summary>
            True if any of the objects to animate has a non-null diagram
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.ModifyObjects(System.Double)">
            <summary>
            Called during each animation tick, and at the start and end of Animation.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.Stop">
            <summary>
            Stops a running Animation and updates the animating objects to their final state.
            </summary>
            <remarks>
            If an animation was about to begin, it is cancelled.
            </remarks>
            <returns>this Animation</returns>
        </member>
        <member name="M:Northwoods.Go.Animation.DoCompletion(System.Boolean)">
            <summary>
            When animation finishes this calls the finished callback, clears state,
            notifies the AnimationManager to remove this Animation from its list of current animations, and updates the Diagram.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.AddExpandedNode(Northwoods.Go.Node,Northwoods.Go.Node)">
            <summary>
            Called only by Node's ExpandTree and Group's ExpandSubGraph
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.ExpandVisible(Northwoods.Go.Group,Northwoods.Go.Node)">
            <summary>
            When you expand a Tree that contains a group,
            you must animate the expand of that group's soon-to-be-visible members
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.AddCollapsedNode(Northwoods.Go.Node,Northwoods.Go.Node)">
            <summary>
            Called only by Node's CollapseTree and Group's CollapseSubGraph
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.CollapseVisible(Northwoods.Go.Group,Northwoods.Go.Node)">
            <summary>
            When you collapse a Tree that contains a group,
            you must animate the collapse of that group's soon-to-be-invisible members
            </summary>
        </member>
        <member name="P:Northwoods.Go.Animation.Duration">
             <summary>
             Gets or sets the duration for animations, in milliseconds.
             </summary>
             <remarks>
             The default value is -1, which means it inherits the default value from the <see cref="P:Northwoods.Go.AnimationManager.Duration"/>,
             which defaults to 600 milliseconds.
            
             The value must be an int greater than or equal to 1, or -1.
             Setting this property does not raise any events.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Animation.Reversible">
             <summary>
             Gets or sets whether this Animation will repeat its animation in reverse at the end of the duration.
             </summary>
             <remarks>
             The default value is false.
            
             A reversible Animation, if stopped early, will end at its original state.
             Setting this to true doubles the effective <see cref="P:Northwoods.Go.Animation.Duration"/> of the Animation.
            
             This property should not be set on the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Animation.RunCount">
             <summary>
             Gets or sets whether this Animation should be repeat, and how many times.
             </summary>
             <remarks>
             The default is 1, which means the animation does not repeat.
            
             This can be set to any non-zero positive integer, or `int.MaxValue`. Setting this to `int.MaxValue` will repeat an animation forever.
            
             This property should not be set on the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>
             </remarks>
             <seealso cref="P:Northwoods.Go.Animation.Reversible"/>
        </member>
        <member name="P:Northwoods.Go.Animation.Finished">
            <summary>
            Gets or sets the function to execute when the user Animation finishes.
            </summary>
            <remarks>
            By default this property is null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Animation.Easing">
             <summary>
             Gets or sets the easing function this Animation will use to modify default properties.
             </summary>
             <remarks>
             Pre-defined animatable values are processed by passing scalars into this easing function.
            
             The default value is <see cref="M:Northwoods.Go.Animation.EaseInOutQuad(System.Double,System.Double,System.Double,System.Int32)"/>.
            
             The value can be an arbitrary easing function, or one of the six provided:
             <see cref="M:Northwoods.Go.Animation.EaseLinear(System.Double,System.Double,System.Double,System.Int32)"/>, <see cref="M:Northwoods.Go.Animation.EaseInOutQuad(System.Double,System.Double,System.Double,System.Int32)"/>, <see cref="M:Northwoods.Go.Animation.EaseInQuad(System.Double,System.Double,System.Double,System.Int32)"/>,
             <see cref="M:Northwoods.Go.Animation.EaseOutQuad(System.Double,System.Double,System.Double,System.Int32)"/>, <see cref="M:Northwoods.Go.Animation.EaseInExpo(System.Double,System.Double,System.Double,System.Int32)"/>, <see cref="M:Northwoods.Go.Animation.EaseOutExpo(System.Double,System.Double,System.Double,System.Int32)"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Animation.IsViewportUnconstrained">
             <summary>
             Gets or sets whether this Animation should allow an unconstrained viewport during the runtime of the animation.
             </summary>
             <remarks>
             This temporarily sets the <see cref="P:Northwoods.Go.Diagram.ScrollMode"/> to <see cref="F:Northwoods.Go.ScrollMode.Infinite"/>, and restores the value at the end of the animation.
             This is done so that animating objects can move out of the viewport temporarily during the animation and not trigger scrollbars.
            
             This may be useful to set for animations that have objects or the Diagram bounds animate from outside the viewport into the view.
             The default value is true.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Animation.IsAnimating">
            <summary>
            This read-only property is true when the Animation is currently running.
            </summary>
            <remarks>
            This value cannot be set, but Animation can be stopped by calling <see cref="M:Northwoods.Go.Animation.Stop"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Animation.GetTemporaryState(System.Object)">
            <summary>
            Gets the Hashtable associated with this GraphObject or Diagram.
            If no state exists, this creates and returns a new Hashtable.
            </summary>
            <remarks>
            This can be used to store temporary information per animated object during the course of an animation.
            This state is cleared at the end of an animation.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Animation.EaseLinear(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Built-in static function for computing interpolated values. Can be used as a value for <see cref="P:Northwoods.Go.Animation.Easing"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.EaseInOutQuad(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Built-in static function for computing interpolated values. Can be used as a value for <see cref="P:Northwoods.Go.Animation.Easing"/>.
            This is the default value for <see cref="P:Northwoods.Go.Animation.Easing"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.EaseInQuad(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Built-in static function for computing interpolated values. Can be used as a value for <see cref="P:Northwoods.Go.Animation.Easing"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.EaseOutQuad(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Built-in static function for computing interpolated values. Can be used as a value for <see cref="P:Northwoods.Go.Animation.Easing"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.EaseInExpo(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Built-in static function for computing interpolated values. Can be used as a value for <see cref="P:Northwoods.Go.Animation.Easing"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Animation.EaseOutExpo(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Built-in static function for computing interpolated values. Can be used as a value for <see cref="P:Northwoods.Go.Animation.Easing"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.AnimationState">
             <summary>
             AnimationState collects information for each GraphObject or Diagram being animated.
             </summary>
             <remarks>
             The method <see cref="M:Northwoods.Go.Animation.Add(System.Object,System.String,System.Object,System.Object,System.Boolean)"/> specifies which objects and which properties to animate, plus start and end values for this property.
             As objects are added to an Animation, the Animation infers which Diagram and AnimationManager is relevant.
            
             Animations are started by calling <see cref="M:Northwoods.Go.Animation.Start"/>, and stopped when the <see cref="P:Northwoods.Go.Animation.Duration"/> is reached,
             or when <see cref="M:Northwoods.Go.Animation.Stop"/> is called, or stopped when <see cref="M:Northwoods.Go.AnimationManager.StopAnimation(System.Boolean)"/> is called with `true` as its argument.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.AnimationStyle">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.AnimationManager.InitialAnimationStyle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.AnimationStyle.Default">
            <summary>
            Used as the default value for <see cref="P:Northwoods.Go.AnimationManager.InitialAnimationStyle"/>.
            </summary>
            <remarks>
            The default initial animation style will "fade up" and in the Diagram's contents by animating the <see cref="P:Northwoods.Go.Diagram.Position"/> and <see cref="P:Northwoods.Go.Diagram.Opacity"/>.
            To customize the default initial animation, set <see cref="P:Northwoods.Go.AnimationManager.InitialAnimationStyle"/> to <see cref="F:Northwoods.Go.AnimationStyle.None"/>
            and define a <see cref="E:Northwoods.Go.Diagram.InitialAnimationStarting"/> handler.
            See <see cref="P:Northwoods.Go.AnimationManager.InitialAnimationStyle"/> for details and examples.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.AnimationStyle.AnimateLocations">
            <summary>
            Used as the default value for <see cref="P:Northwoods.Go.AnimationManager.InitialAnimationStyle"/>.
            </summary>
            <remarks>
            This value will cause initial animations to capture Part locations and animate them from `(0, 0)` to those location values.
            See <see cref="P:Northwoods.Go.AnimationManager.InitialAnimationStyle"/> for details and examples.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.AnimationStyle.None">
            <summary>
            Used as the default value for <see cref="P:Northwoods.Go.AnimationManager.InitialAnimationStyle"/>.
            </summary>
            <remarks>
            This will turn off the initial animation, but also allows for customizing the initial animation by adding your own properties
            if you define a <see cref="E:Northwoods.Go.Diagram.InitialAnimationStarting"/> handler.
            See <see cref="P:Northwoods.Go.AnimationManager.InitialAnimationStyle"/> for details and examples.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.AnimationFunction">
            <summary>
            Function that transforms the property values. It takes the animated object, start value, end value,
            easing function (the <see cref="P:Northwoods.Go.Animation.Easing"/>), current time, duration, and animation state. It should modify one or more properties on the object.
            </summary>
            <param name="obj">the animated object.</param>
            <param name="startValue">the start value.</param>
            <param name="endValue">the end value.</param>
            <param name="easing">the <see cref="T:Northwoods.Go.EasingFunction"/></param>
            <param name="currentTime">the current time</param>
            <param name="duration">the duration of the animation</param>
            <param name="animation">the animation state</param>
        </member>
        <member name="T:Northwoods.Go.AnimationManager">
             <summary>
             AnimationManager handles animations in a <see cref="P:Northwoods.Go.AnimationManager.Diagram"/>. Each Diagram has one, <see cref="P:Northwoods.Go.Diagram.AnimationManager"/>.
             </summary>
             <remarks>
             Setting the Model, performing a Layout, Group expansion and Tree expansion automatically start animations through
             the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>. Animations can be manually started by creating <see cref="T:Northwoods.Go.Animation"/>s, which are associated with an
             AnimationManager.
            
             Animation is enabled by default, setting the <see cref="P:Northwoods.Go.AnimationManager.IsEnabled"/> property to false will turn off animations for a Diagram.
            
             When the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/> begins it raises <see cref="E:Northwoods.Go.Diagram.AnimationStarting"/>,
             upon completion it raises the <see cref="E:Northwoods.Go.Diagram.AnimationFinished"/>.
            
             The <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>, if running, will stop if a new transaction is started, if an undo or redo is called,
             if a layout is invalidated, or if a model is replaced.
             When an <see cref="T:Northwoods.Go.Animation"/> is stopped, the Diagram immediately finishes the animation and draws the final state.
             Animations can be stopped programatically with the methods <see cref="M:Northwoods.Go.AnimationManager.StopAnimation(System.Boolean)"/> or <see cref="M:Northwoods.Go.Animation.Stop"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.#ctor">
            <summary>
            Constructs an AnimationManager. You should not need to call this.
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.CanStart(System.String)">
             <summary>
             This method is passed the reason a default animation is to begin,
             and must return true or false based on whether or not the animation is to be allowed.
             Returning true means the animation will occur, returning false will stop the animation's setup.
             </summary>
             <remarks>
             By default, this method always returns true.
             Setting this to a function that always returns false will disable all default animations,
             but allow other animations, such as <see cref="T:Northwoods.Go.AnimationTrigger"/>s, to run.
            
             These are the possible reasons GoDiagram will begin an animation:
            
             **Called by CommandHandler:**
               - "Collapse SubGraph"
               - "Expand SubGraph"
               - "Collapse Tree"
               - "Expand Tree"
               - "Scroll To Part"
               - "Zoom To Fit"
             **Called by Diagram:**
               - "Model"
               - "Layout"
             **Called by AnimationTriggers:**
               - "Trigger"
            
             Example usage:
            
             <code language="cs">
             // disallow expand/collapse animations, but allow all other default animations:
             public override bool CanStart(string reason) {
               if (reason === "Expand Tree") return false;
               return true;
             }
            
             // disallow all default animations:
             public override bool CanStart(string reason) {
               return false;
             }
             </code>
             </remarks>
             <param name="reason">Reason for starting the animation</param>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.PrepareAutomaticAnimation(System.String)">
             <summary>
             Begins listening for changes to <see cref="P:Northwoods.Go.Diagram.Position"/>, <see cref="P:Northwoods.Go.Diagram.Scale"/>,
             and Part positions, and animates those automatically in the near-future.
             </summary>
             <remarks>
             This is called after <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and the animation begins when <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/> is called.
            
             Calling this method stops any currently running animation.
             </remarks>
             <param name="reason">The reason the animation is to begin. This is added to a list of reasons, which informs whether or not the animation manager can start.</param>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.BeginAnimation">
            <summary>
            Called by <see cref="M:Northwoods.Go.Diagram.DoModelChanged(Northwoods.Go.Models.ChangedEvent)"/>, or <see cref="M:Northwoods.Go.CommandHandler.ZoomToFit"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager._OnlyTriggerAnimation">
            <summary>
            Trigger automatic animations should not be adding positions.
            This has a similar usage to how AddExpandedNode checks the animation reasons.
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.AddToAnimation(System.Object,Northwoods.Go.Point,Northwoods.Go.Point,System.Boolean)">
            <summary>
            Called by Part for positions only for default animations
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.ObjRemainsVisible(Northwoods.Go.GraphObject)">
            <summary>
            Called by Part and Node isVisible
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.IsAnimatingPosition(Northwoods.Go.GraphObject)">
            <summary>
            Called by Placeholder measure
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.AnimateObjects(Northwoods.Go.Animation)">
            <summary>
            Called by <see cref="M:Northwoods.Go.Animation.Start"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.AddSoon(Northwoods.Go.Animation)">
            <summary>
            You cannot add an animation while iterating through the list, so this defers them
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.ClearSuspendedAnimations">
            <summary>
            Called by Diagram, at the end of a transaction remove the animation suspended flags.
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.SkipState">
            <summary>
            Skip all diagram state so that animation changes do not end up in the undo manager or have other side effects
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.RestoreState">
            <summary>
            Called after skipState
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.StopAnimation(System.Boolean)">
             <summary>
             Stops the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/> and updates the Diagram to its final state.
             </summary>
             <remarks>
             If the argument is true, this stops all running animations.
             If an Animation was about to begin, it will be cancelled.
            
             If the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/> is running, this will raise <see cref="E:Northwoods.Go.Diagram.AnimationFinished"/>.
             </remarks>
             <param name="stopsAllAnimations">Whether to stop all animations, instead of just the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>. Default false.</param>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.DoCompletion(Northwoods.Go.Animation)">
             <summary>
             This is called by Animation's DoCompletion.
            
             This raises AnimationFinished.
             </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.AddExpandedNode(Northwoods.Go.Node,Northwoods.Go.Node)">
            <summary>
            Called only by Node's ExpandTree and Group's ExpandSubGraph
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.AddCollapsedNode(Northwoods.Go.Node,Northwoods.Go.Node)">
            <summary>
            Called only by Node's CollapseTree and Group's CollapseSubGraph
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.AddDiagramPos(Northwoods.Go.Point,Northwoods.Go.Point)">
            <summary>
            Called by Diagram when the position changes during pending animation.
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.AddDiagramScale(System.Double,System.Double)">
            <summary>
            Called by Diagram when the position changes during pending animation.
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationManager._SaveRoute(Northwoods.Go.Link,System.Collections.Generic.List{Northwoods.Go.Point})">
            <summary>
            This method assumes route copying was done.
            </summary>
        </member>
        <member name="P:Northwoods.Go.AnimationManager.IsEnabled">
             <summary>
             Gets or sets whether this AnimationManager operates.
             </summary>
             <remarks>
             The default value is `true`.
             Setting this to `false` does not stop an animation, it only stops future animations.
             To stop any ongoing animation, use <see cref="M:Northwoods.Go.AnimationManager.StopAnimation(System.Boolean)"/>.
             To disable only the default animations, set <see cref="M:Northwoods.Go.AnimationManager.CanStart(System.String)"/> to a function that always returns `false`.
            
             If any indefinite animations (animations with <see cref="P:Northwoods.Go.Animation.RunCount"/> set to `int.MaxValue`) were
             running when this is set to `false`, they will be resumed when this is set to `true`.
            
             Setting this property does not raise any events.
             </remarks>
             <seealso cref="M:Northwoods.Go.AnimationManager.CanStart(System.String)"/>
        </member>
        <member name="P:Northwoods.Go.AnimationManager.Duration">
            <summary>
            Gets or sets the default duration, in milliseconds, used as the duration for the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>
            and for animations that have their <see cref="P:Northwoods.Go.Animation.Duration"/> set to -1.
            </summary>
            <remarks>
            Typically these values are short. The default value is 600 milliseconds.
            The value must be an int greater than or equal to 1.
            Setting this property does not raise any events.
            </remarks>
            <seealso cref="P:Northwoods.Go.Animation.Duration"/>
        </member>
        <member name="P:Northwoods.Go.AnimationManager.IsAnimating">
            <summary>
            This read-only property is true when the animation manager is currently animating any animation,
            including the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>.
            </summary>
            <remarks>
            This value cannot be set, but animation can be stopped by calling <see cref="M:Northwoods.Go.AnimationManager.StopAnimation(System.Boolean)"/>,
            and it can be prevented by setting <see cref="P:Northwoods.Go.AnimationManager.IsEnabled"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.AnimationManager.IsTicking">
             <summary>
             This read-only property is true when the animation manager is in the middle of an animation tick.
             </summary>
             <remarks>
             Animation only operates on GraphObjects during ticks, but code outside of AnimationManager's control may execute between ticks.
            
             `IsTicking` can only be true when <see cref="P:Northwoods.Go.AnimationManager.IsAnimating"/> is also true.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.AnimationManager.IsInitial">
            <summary>
            Gets or sets whether a default animation is performed on an initial layout.
            </summary>
            <remarks>
            The default value is true.
            Changing the value does not affect any ongoing animation.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.AnimationManager.DefaultAnimation">
             <summary>
             This read-only property gets the <see cref="T:Northwoods.Go.Animation"/> that carries out the default built-in GoDiagram animations.
             This animation is usually only referenced to modify default animation properties,
             such as the <see cref="P:Northwoods.Go.Animation.Easing"/> or <see cref="P:Northwoods.Go.Animation.Duration"/>.
             </summary>
             <remarks>
             You should not add anything to or start the default animation, GoDiagram does so automatically, internally.
             When the default animation begins it raises <see cref="E:Northwoods.Go.Diagram.AnimationStarting"/>,
             upon completion it raises <see cref="E:Northwoods.Go.Diagram.AnimationFinished"/>.
             You should not modify the properties <see cref="P:Northwoods.Go.Animation.RunCount"/> or <see cref="P:Northwoods.Go.Animation.Reversible"/> on the default animation.
            
             See the <a href="../../intro/animation.Html">Introduction Page on Animations</a> for more detail.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.AnimationManager.ActiveAnimations">
            <summary>
            Gets the set of currently animating <see cref="T:Northwoods.Go.Animation"/>s being managed by this AnimationManager, including any running <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.AnimationManager.InitialAnimationStyle">
             <summary>
             Gets or sets the initial animation style that is set up by the <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>.
             </summary>
             <remarks>
             This can be <see cref="F:Northwoods.Go.AnimationStyle.Default"/>, <see cref="F:Northwoods.Go.AnimationStyle.AnimateLocations"/>, or <see cref="F:Northwoods.Go.AnimationStyle.None"/>.
             - If set to <see cref="F:Northwoods.Go.AnimationStyle.Default"/>, the initial animation will "fade up"
                the Diagram's contents by animating the <see cref="P:Northwoods.Go.Diagram.Position"/> and <see cref="P:Northwoods.Go.Diagram.Opacity"/>.
             - If set to <see cref="F:Northwoods.Go.AnimationStyle.AnimateLocations"/>, the initial animation will animate Part locations from `(0, 0)` to their values.
             - If set to <see cref="F:Northwoods.Go.AnimationStyle.None"/>, no initial animation will happen by default,
               which this allows you to specify your own initial animation by defining a <see cref="E:Northwoods.Go.Diagram.InitialAnimationStarting"/> handler.
            
             An example custom initial animation, which zooms the Diagram into view:
             <code language="cs">
             myDiagram.AnimationManager.InitialAnimationStyle = AnimationStyle.None;
             myDiagram.InitialAnimationStarting += (s, e) => {
               var animation = e.Subject.DefaultAnimation;
               animation.Easing = Animation.EaseOutExpo;
               animation.Duration = 900;
               animation.Add(e.Diagram, "Scale", 0.1, 1);
               animation.Add(e.Diagram, "Opacity", 0, 1);
             };
             </code>
             </remarks>
        </member>
        <member name="M:Northwoods.Go.AnimationManager.DefineAnimationEffect(System.String,Northwoods.Go.AnimationFunction)">
             <summary>
             Defines a new named effect to be used in animation, along with a function that tells the AnimationManager how to modify that property.
             </summary>
             <remarks>
             Effect names do not need to reflect GraphObject properties, and you can define an effect with a function that modifies several properties for convenience.
            
             For example, one could define an animation effect named `"MoveAndSpin"` which modifies the object's `Position` and `Angle`.
            
             Most commonly, an effect is defined with one GraphObject property in mind to be animated,
             and the function uses the start and end values, an easing function, and the times to determine a new value for each tick of animation.
             Here is an example for animating the fill of GraphObjects:
             <code language="cs">
             // This presumes the object to be animated is a Shape
             AnimationManager.DefineAnimationEffect("Fill", (obj, startValue, endValue, easing, currentTime, duration, animation) => {
               var hueValue = easing(currentTime, (int)startValue, (int)endValue - (int)startValue, duration);
               (obj as Shape).Fill = "hsl(" + hueValue + ", 100%, 80%)";
             });
             </code>
             </remarks>
             <param name="effectName">Named effect to animate</param>
             <param name="animationFunction">Function that transforms the property values. It takes the animated object, start value, end value,
             easing function (the <see cref="P:Northwoods.Go.Animation.Easing"/>), current time, duration, and animation state. It should modify one or more properties on the object.</param>
        </member>
        <member name="T:Northwoods.Go.StartCondition">
            <summary>
            This enumeration specifices how an animation should be triggered.
            Used for <see cref="P:Northwoods.Go.AnimationTrigger.StartCondition"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.StartCondition.Default">
            <summary>
            GoDiagram will attempt to use <see cref="F:Northwoods.Go.StartCondition.Bundled"/> or <see cref="F:Northwoods.Go.StartCondition.Immediate"/> based on the state of the transaction.
            </summary>
            <remarks>
            If no transaction is ongoing, this trigger will be treated as using <see cref="F:Northwoods.Go.StartCondition.Immediate"/>,
            otherwise it will work as <see cref="F:Northwoods.Go.StartCondition.Bundled"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.StartCondition.Immediate">
            <summary>
            A new animation will be created for every instance of the property changed, and started immediately,
            and run until completion.
            </summary>
            <remarks>
            This may be useful for cosmetic changes, such as animating
            the opacity or color of an object on MouseEnter or MouseLeave.
            However, using <see cref="F:Northwoods.Go.StartCondition.Bundled"/> may be more efficient, as it will create fewer.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.StartCondition.Bundled">
            <summary>
            The AnimationManager will use the default animation to prepare a single Animation that begins when the current transaction has ended.
            </summary>
            <remarks>
            This animation may be canceled if a new transaction is started.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.AnimationTrigger">
            <summary>
            An AnimationTrigger describes how to automatically animate a property on a <see cref="T:Northwoods.Go.GraphObject"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.AnimationTrigger.#ctor(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            <summary>
            This constructor creates an AnimationTrigger. These are typically constructed within Part templates.
            </summary>
            <param name="propertyName">A string naming the target property to animate.
              This should not be the empty string.</param>
            <param name="animationSettings">An optional tuple describing properties to set on animations created by this AnimationTrigger.
              See the <see cref="P:Northwoods.Go.AnimationTrigger.AnimationSettings"/> property for detail.
              If specified, this also sets the <see cref="P:Northwoods.Go.AnimationTrigger.StartCondition"/> to <see cref="F:Northwoods.Go.StartCondition.Immediate"/>.</param>
            <param name="startCondition">An optional <see cref="T:Northwoods.Go.StartCondition"/> to set the <see cref="P:Northwoods.Go.AnimationTrigger.StartCondition"/> property.</param>
        </member>
        <member name="M:Northwoods.Go.AnimationTrigger.Copy">
            <summary>
            Create a copy of this AnimationTrigger, with the same property values.
            </summary>
        </member>
        <member name="P:Northwoods.Go.AnimationTrigger.PropertyName">
             <summary>
             Gets or sets the name of the property to animate on the target <see cref="T:Northwoods.Go.GraphObject"/>.
             The default value is set during constructor initialization.
             </summary>
             <remarks>
             You can only specify properties that exist on the GraphObject, and are also registered with <see cref="M:Northwoods.Go.AnimationManager.DefineAnimationEffect(System.String,Northwoods.Go.AnimationFunction)"/>.
             By default these properties are the same as the list of possible Animation effects:
               - `"Position"`
               - `"Location"` (on Parts)
               - `"Scale"`
               - `"Opacity"`
               - `"Angle"`
               - `"DesiredSize"`
               - `"Width"`
               - `"Height"`
               - `"Background"`
               - `"Fill"` (on Shapes)
               - `"StrokeWidth"` (on Shapes)
               - `"StrokeDashOffset"` (on Shapes)
               - `"Stroke"` (on Shapes, TextBlocks)
            
             Examples of defining additional properties by adding animation effects are given in the <a href="../../intro/animation.html">Introduction Page on Animations</a>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.AnimationTrigger.AnimationSettings">
             <summary>
             These settings are only used if the <see cref="P:Northwoods.Go.AnimationTrigger.StartCondition"/> is <see cref="F:Northwoods.Go.StartCondition.Immediate"/>.
             Creating a new AnimationTrigger with animationSettings in the constructor automatically sets <see cref="P:Northwoods.Go.AnimationTrigger.StartCondition"/> to <see cref="F:Northwoods.Go.StartCondition.Immediate"/>.
             </summary>
             <remarks>
             This gets or sets the settings for any <see cref="T:Northwoods.Go.Animation"/>s this trigger creates.
             Immediate triggers create a new Animation with each triggering, and apply these settings to that Animation.
            
             This can be set to a tuple with a subset of possible <see cref="T:Northwoods.Go.Animation"/> settings. The default value is `null`, which keeps default Animation settings.
            
             Since a <see cref="P:Northwoods.Go.AnimationTrigger.StartCondition"/> of <see cref="F:Northwoods.Go.StartCondition.Bundled"/> uses the default animation,
             you must set the properties of <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>, and not this property, to modify the animation settings.
            
             To set default settings for *all* created Animations, you can modify the settings on <see cref="T:Northwoods.Go.AnimationManager"/> instead, such as <see cref="P:Northwoods.Go.AnimationManager.Duration"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.AnimationTrigger.ApplySettings(Northwoods.Go.Animation)">
            <summary>
            Used in GraphObject.RaiseChangedEvent.
            </summary>
            <param name="animation"></param>
        </member>
        <member name="P:Northwoods.Go.AnimationTrigger.StartCondition">
             <summary>
             Gets or sets the starting condition for this trigger.
             </summary>
             <remarks>
             AnimationTriggers can invoke an animation immediately,
             starting a new animation with each property of each GraphObject that has been modified,
             or they can (more efficiently) be bundled together into the default animation (<see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/>)
             and begin only one animation, at the end of the next transaction.
            
             It is useful for the StartCondition to be <see cref="F:Northwoods.Go.StartCondition.Immediate"/> when changing GraphObject properties
             on <see cref="P:Northwoods.Go.GraphObject.MouseEnter"/> or <see cref="P:Northwoods.Go.GraphObject.MouseLeave"/>.
             It is useful for the StartCondition to be <see cref="F:Northwoods.Go.StartCondition.Bundled"/> when changing several GraphObject properties together,
             such as when highlighting multiple parts, on selection changes, and during transactions, or when performance is a consideration.
            
             These behaviors can be set with the values <see cref="F:Northwoods.Go.StartCondition.Immediate"/> and <see cref="F:Northwoods.Go.StartCondition.Bundled"/>, respectively.
             The default value, <see cref="F:Northwoods.Go.StartCondition.Default"/>, attempts to infer which is best:
             It will start immediately if there is no ongoing transaction
             or if <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> is true, and otherwise bundle them.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.ImageDataProperties">
            <summary>
            This class specifies optional properties passed to <see cref="M:Northwoods.Go.Diagram.MakeImageData(Northwoods.Go.ImageDataProperties)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.ImageDataProperties.Size">
            <summary>
            The size of the created image, as a <see cref="T:Northwoods.Go.Size"/>, limited by the <see cref="P:Northwoods.Go.ImageDataProperties.MaxSize"/> property.
            </summary>
            <remarks>
            If no <see cref="P:Northwoods.Go.ImageDataProperties.Scale"/> or <see cref="P:Northwoods.Go.ImageDataProperties.Position"/> is specified then the diagram will be scaled to fit the given size.
            If you set a size, you should also set a <see cref="P:Northwoods.Go.ImageDataProperties.Position"/>. If you are scaling the diagram, you may also want to scale the size.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.ImageDataProperties.Scale">
            <summary>
            The scale of the diagram.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.ImageDataProperties.Scale"/> is specified and <see cref="P:Northwoods.Go.ImageDataProperties.Size"/> is not, the resulting image will be sized to uniformly
            fit the space needed for the given scale.
            Can be constrained by the <see cref="P:Northwoods.Go.ImageDataProperties.MaxSize"/> property. A scale value of `NaN` will
            automatically scale to fit within the MaxSize, but may be smaller, with a maximum computed scale of 1.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.ImageDataProperties.MaxSize">
            <summary>
            The maximum size of the created image, as a <see cref="T:Northwoods.Go.Size"/>.
            </summary>
            <remarks>
            The default value is `(2000, 2000)` for images.
            This is typically used when <see cref="P:Northwoods.Go.ImageDataProperties.Scale"/> is specified and helps prevent accidental excessive memory usage,
            which is especially needed in limited-memory environments.
            You cannot use Infinity when providing a maximum size for an image.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.ImageDataProperties.Position">
            <summary>
            The position of the diagram, as a <see cref="T:Northwoods.Go.Point"/>.
            </summary>
            <remarks>
            By default this is the position of <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> with the <see cref="P:Northwoods.Go.Diagram.Padding"/> removed.
            If a specific parts collection is used, by default this is the top-left diagram position of their collective bounds.
            If you set a position, you should also set a <see cref="P:Northwoods.Go.ImageDataProperties.Size"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.ImageDataProperties.Parts">
            <summary>
            A collection of GraphObjects, typically Parts, such as one from <see cref="P:Northwoods.Go.Diagram.Selection"/> or <see cref="P:Northwoods.Go.Layer.Parts"/>.
            </summary>
            <remarks>
            If GraphObjects are specified their containing Part will be drawn. By default all Parts are drawn except temporary parts (see <see cref="P:Northwoods.Go.ImageDataProperties.ShowTemporary"/>).
            </remarks>
        </member>
        <member name="P:Northwoods.Go.ImageDataProperties.Padding">
            <summary>
            A <see cref="T:Northwoods.Go.Margin"/> (or number) to pad the image with.
            </summary>
            <remarks>
            If a size is specified, the padding will not increase the image size, it will only offset the Diagram contents within the image.
            The default value is a padding of `1`.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.ImageDataProperties.Background">
            <summary>
            A valid color to replace the default (transparent) background.
            </summary>
            <remarks>
            Any padding area is also colored.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.ImageDataProperties.ShowTemporary">
            <summary>
            A boolean value, defaulting to false, that determines whether or not temporary objects such as adornments are included in the image.
            </summary>
        </member>
        <member name="P:Northwoods.Go.ImageDataProperties.ShowGrid">
            <summary>
            A boolean value, defaulting to the value of <see cref="P:Northwoods.Go.ImageDataProperties.ShowTemporary"/>,
            that determines whether or not the Grid Layer (containing <see cref="P:Northwoods.Go.Diagram.Grid"/>) is included in the image
            regardless of the value of <see cref="P:Northwoods.Go.ImageDataProperties.ShowTemporary"/>.
            </summary>
            <remarks>
            This is useful if you want to include the grid but not adornments, or vice versa.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.ScrollMode">
            <summary>
            This enumeration specifices how a Diagram can be scrolled.
            Used for <see cref="P:Northwoods.Go.Diagram.ScrollMode"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ScrollMode.Document">
            <summary>
            This value states that the viewport constrains scrolling to the Diagram document bounds.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ScrollMode.Infinite">
            <summary>
            This value states that the viewport does not constrain scrolling to the Diagram document bounds.
            </summary>
        </member>
        <member name="T:Northwoods.Go.CycleMode">
            <summary>
            This enumeration specifies how the Diagram should handle cycles in graphs.
            Used for <see cref="P:Northwoods.Go.Diagram.ValidCycle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.CycleMode.All">
            <summary>
            This value states that there are no restrictions on making cycles of links.
            </summary>
        </member>
        <member name="F:Northwoods.Go.CycleMode.NotDirected">
            <summary>
            This value states that a valid link from a node will not produce a directed cycle in the graph.
            </summary>
        </member>
        <member name="F:Northwoods.Go.CycleMode.NotDirectedFast">
            <summary>
            (undocumented)
            This value states that a valid link from a node will not produce a directed cycle in the graph,
            assuming there are no directed cycles anywhere accessible from either node.
            </summary>
        </member>
        <member name="F:Northwoods.Go.CycleMode.NotUndirected">
            <summary>
            This value states that a valid link from a node will not produce an undirected cycle in the graph.
            </summary>
        </member>
        <member name="F:Northwoods.Go.CycleMode.DestinationTree">
            <summary>
            This value states that any number of destination links may go out of a node, but at most one
            source link may come into a node, and there are no directed cycles.
            </summary>
            <remarks>
            This value assumes that the graph does not already have any cycles in it,
            or else the behavior may be indeterminate.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.CycleMode.SourceTree">
            <summary>
            This value states that any number of source links may come into a node, but at most one
            destination link may go out of a node, and there are no directed cycles.
            </summary>
            <remarks>
            This value assumes that the graph does not already have any cycles in it,
            or else the behavior may be indeterminate.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.AutoScale">
            <summary>
            This enumeration specifies how the Diagram should attempt to scale its <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> into the view.
            Used for <see cref="P:Northwoods.Go.Diagram.AutoScale"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.AutoScale.None">
            <summary>
            The default auto scale type, does not attempt to scale.
            </summary>
        </member>
        <member name="F:Northwoods.Go.AutoScale.Uniform">
            <summary>
            The whole <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> are scaled uniformly to fit in the view.
            </summary>
        </member>
        <member name="F:Northwoods.Go.AutoScale.UniformToFill">
            <summary>
            The whole <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> are scaled to fit in the view in one direction while a scrollbar is still
            needed in the other direction.
            </summary>
        </member>
        <member name="T:Northwoods.Go.CollapsePolicy">
            This enumeration specifies how the Diagram should handle tree collapsing.
            Used for <see cref="P:Northwoods.Go.Diagram.TreeCollapsePolicy"/>.
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="F:Northwoods.Go.CollapsePolicy.TreeParent">
            <summary>
            This value states that only the <see cref="M:Northwoods.Go.Node.FindTreeParentNode"/>'s
            <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/> property determines whether a "child" node is visible.
            </summary>
        </member>
        <member name="F:Northwoods.Go.CollapsePolicy.AllParents">
            <summary>
            This value states that if all of the <see cref="M:Northwoods.Go.Node.FindNodesInto(System.String)"/>
            or <see cref="M:Northwoods.Go.Node.FindNodesOutOf(System.String)"/>, depending on <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/> being true or false,
            are not <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/>, the "child" node will be not visible.
            </summary>
        </member>
        <member name="F:Northwoods.Go.CollapsePolicy.AnyParents">
            <summary>
            This value states that if any of the <see cref="M:Northwoods.Go.Node.FindNodesInto(System.String)"/>
            or <see cref="M:Northwoods.Go.Node.FindNodesOutOf(System.String)"/>, depending on <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/> being true or false,
            is not <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/>, the "child" node will be not visible.
            </summary>
        </member>
        <member name="T:Northwoods.Go.DraggingInfo">
             <summary>
             This is used in dragging methods to remember initial locations, for relative positioning and for cancellation.
             </summary>
             <remarks>
             You do not typically need to create these unless you are overriding tools.
            
             <see cref="M:Northwoods.Go.CommandHandler.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.DraggingOptions)"/> returns a Map of Parts and DraggingInfo,
             which is used as an argument for methods like <see cref="M:Northwoods.Go.Diagram.ComputeMove(Northwoods.Go.Part,Northwoods.Go.Point,Northwoods.Go.DraggingOptions)"/>.
            
             <see cref="M:Northwoods.Go.Diagram.MoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Point,System.Boolean,Northwoods.Go.DraggingOptions)"/> constructs a dictionary of Parts and DraggingInfo to record each Part's location offset during moves.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.DraggingInfo.#ctor(Northwoods.Go.Point)">
            <summary>
            Optionally takes a Point that sets <see cref="P:Northwoods.Go.DraggingInfo.Point"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.DraggingInfo.Point">
            <summary>
            Gets or sets the initial location for a dragged object.
            </summary>
            <remarks>
            This is most commonly the <see cref="P:Northwoods.Go.Part.Location"/> of the dragged object, or a rounded Part.Location if snapping.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingInfo.Shifted">
            @hidden @internal
            <summary>
            Records the amount shifted during a drag. Initially this value is `Point(0, 0)`.
            </summary>
            <remarks>
            <see cref="M:Northwoods.Go.Diagram.MoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Point,System.Boolean,Northwoods.Go.DraggingOptions)"/> modifies this value to reflect the currently-shifted amount.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.DraggingOptions">
             <summary>
             This class contains options for dragging and moving parts.
             </summary>
             <remarks>
             This is used by <see cref="M:Northwoods.Go.Diagram.MoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Point,System.Boolean,Northwoods.Go.DraggingOptions)"/> and <see cref="M:Northwoods.Go.Diagram.ComputeMove(Northwoods.Go.Part,Northwoods.Go.Point,Northwoods.Go.DraggingOptions)"/>.
            
             Both the <see cref="T:Northwoods.Go.Diagram"/> and its <see cref="T:Northwoods.Go.Tools.DraggingTool"/> have a DraggingOptions instance.
             Typically, only the DraggingTool one is used, unless the Diagram has no DraggingTool defined.
            
             In typical <see cref="T:Northwoods.Go.Tools.DraggingTool"/> operation you do not need to create or modify a DraggingOptions instance.
             Setting properties on the DraggingTool such as <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/>
             sets the value on the <see cref="P:Northwoods.Go.Tools.DraggingTool.DragOptions"/> instance for you.
             </remarks>
             <seealso cref="P:Northwoods.Go.Tools.DraggingTool.DragOptions"/>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.IsGridSnapEnabled">
             <summary>
             Whether or not the dragged parts snap to the <see cref="P:Northwoods.Go.Diagram.Grid"/>.
             </summary>
             <remarks>
             By default this property is false.
            
             In typical <see cref="T:Northwoods.Go.Tools.DraggingTool"/> operation this is set via <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.IsGridSnapRealtime">
             <summary>
             If dragging with the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>, whether or not Parts snap to a grid (if applicable) in real-time,
             or only at the end of the dragging transaction.
             </summary>
             <remarks>
             By default this property is true.
            
             In typical <see cref="T:Northwoods.Go.Tools.DraggingTool"/> operation this is set via <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapRealtime"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.GridSnapCellSize">
             <summary>
             Gets or sets the size of the grid cell used when snapping during a drag.
             </summary>
             <remarks>
             By default this property is the Size(double.NaN, double.NaN), which causes this tool to use the <see cref="P:Northwoods.Go.Panel.GridCellSize"/> value of the <see cref="P:Northwoods.Go.Diagram.Grid"/>.
            
             In typical <see cref="T:Northwoods.Go.Tools.DraggingTool"/> operation this is set via <see cref="P:Northwoods.Go.Tools.DraggingTool.GridSnapCellSize"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.GridSnapCellSpot">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Spot"/> that specifies what point in the grid cell dragged parts snap to,
             if the value of <see cref="P:Northwoods.Go.DraggingOptions.IsGridSnapEnabled"/> is true.
             </summary>
             <remarks>
             By default this property is <see cref="F:Northwoods.Go.Spot.TopLeft"/>.
            
             In typical <see cref="T:Northwoods.Go.Tools.DraggingTool"/> operation this is set via <see cref="P:Northwoods.Go.Tools.DraggingTool.GridSnapCellSpot"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.GridSnapOrigin">
             <summary>
             Gets or sets the snapping grid's origin point, in document coordinates,
             if the value of <see cref="P:Northwoods.Go.DraggingOptions.IsGridSnapEnabled"/> is true.
             </summary>
             <remarks>
             By default this property is the Point(double.NaN, double.NaN).
            
             In typical <see cref="T:Northwoods.Go.Tools.DraggingTool"/> operation this is set via <see cref="P:Northwoods.Go.Tools.DraggingTool.GridSnapOrigin"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.DragsLink">
             <summary>
             Gets or sets whether the user can move a single <see cref="T:Northwoods.Go.Link"/>,
             disconnecting it from connected nodes and possibly connecting it to valid ports.
             </summary>
             <remarks>
             By default this property is false.
            
             In typical <see cref="T:Northwoods.Go.Tools.DraggingTool"/> operation this is set via <see cref="P:Northwoods.Go.Tools.DraggingTool.DragsLink"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.DragsTree">
             <summary>
             Gets or sets whether moving or copying a node also includes all of the
             node's tree children and their descendants, along with the links to those additional nodes.
             </summary>
             <remarks>
             By default this property is false.
            
             In typical <see cref="T:Northwoods.Go.Tools.DraggingTool"/> operation this is set via <see cref="P:Northwoods.Go.Tools.DraggingTool.DragsTree"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.GroupsSnapMembers">
            <summary>
            Determines whether or not Groups will snap their member Parts in addition to themselves when moving.
            </summary>
            <remarks>
            By default this property is false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.GroupsAlwaysMove">
            <summary>
            Determines whether or not Groups will ensure their member Parts always move,
            even if those member parts have <see cref="P:Northwoods.Go.Part.Copyable"/> and <see cref="P:Northwoods.Go.Part.Movable"/> set to false.
            </summary>
            <remarks>
            By default this property is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.DraggingOptions.DragsMembers">
            <summary>
            Determines whether dragging a Group also drags its member Parts if there is no Group.Placeholder.
            </summary>
            <remarks>
            By default this property is true.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.DraggingOptions.#ctor">
            <summary>
            Constructs a DraggingOptions.
            </summary>
        </member>
        <member name="M:Northwoods.Go.DraggingOptions.Reset">
            <summary>
            Resets the properties of a DraggingOptions instance.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Brush">
            <summary>
            A Brush holds color information and describes how to draw the inside
            of a <see cref="T:Northwoods.Go.Shape"/> or the stroke of a shape or a <see cref="T:Northwoods.Go.TextBlock"/> or the
            background of any <see cref="T:Northwoods.Go.GraphObject"/>.
            </summary>
            <remarks>
            A Brush contains a <see cref="T:Northwoods.Go.Paint"/> which describes how the color(s) will be drawn.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Brush.#ctor(System.String)">
            <summary>
            Constructs a Brush with a <see cref="T:Northwoods.Go.SolidPaint"/>.
            </summary>
            <param name="color">a color string</param>
        </member>
        <member name="M:Northwoods.Go.Brush.#ctor(Northwoods.Go.Paint)">
            <summary>
            Constructs a Brush with the given <see cref="T:Northwoods.Go.Paint"/>.
            </summary>
            <param name="paint">the Paint for this Brush</param>
        </member>
        <member name="M:Northwoods.Go.Brush.#ctor(System.String,System.ValueTuple{System.Single,System.String}[])">
            <summary>
            Constructs a Brush with a <see cref="T:Northwoods.Go.GradientPaint"/>.
            </summary>
            <param name="painttype">a gradient paint type, either "linear" or "radial"</param>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
        </member>
        <member name="P:Northwoods.Go.Brush.Paint">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Paint"/> this Brush uses for drawing.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Brush.ToString">
            <summary>
            Returns a string representation of the Brush.
            </summary>
            <returns>A string representation of the current Brush.</returns>
        </member>
        <member name="M:Northwoods.Go.Brush.RandomColor(System.Int32,System.Int32)">
            <summary>
            This static function can be used to generate a random color.
            </summary>
            <param name="min">An int between 0 and 255, defaults to 128.</param>
            <param name="max">An int between 0 and 255, defaults to 255.</param>
            <returns>A color value in # hexadecimal format.</returns>
        </member>
        <member name="M:Northwoods.Go.Brush.IsValidColor(System.String)">
            <summary>
            This static function returns true if a given color string is well-formed for drawing.
            </summary>
            <param name="color">A color string to validate.</param>
        </member>
        <member name="M:Northwoods.Go.Brush.Lighten(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Brush.Lighten(System.String,System.Double,Northwoods.Go.ColorSpace)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.Converter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Brush.Lighten(System.String,System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            This static function takes a color and lightens it.
            </summary>
            <param name="color">A valid color string.</param>
            <param name="fraction">Fraction to lighten the colors by. Defaults to 0.2, must be between 0 and 1 (inclusive).</param>
            <param name="mode">Color space to use for adjusting. Must be <see cref="F:Northwoods.Go.ColorSpace.Lab"/> or <see cref="F:Northwoods.Go.ColorSpace.HSL"/>, defaults to <see cref="F:Northwoods.Go.ColorSpace.Lab"/>.</param>
            <returns>A string for the lightened color in RGBA or HSLA.</returns>
        </member>
        <member name="M:Northwoods.Go.Brush.Lighten(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Modifies all colors within this Brush, lightening them by some fraction.
            </summary>
            <param name="fraction">Fraction to lighten the colors by. Defaults to 0.2, must be between 0 and 1 (inclusive).</param>
            <param name="mode">Color space to use for adjusting. Must be <see cref="F:Northwoods.Go.ColorSpace.Lab"/> or <see cref="F:Northwoods.Go.ColorSpace.HSL"/>, defaults to <see cref="F:Northwoods.Go.ColorSpace.Lab"/>.</param>
            <returns>A new Brush with modified color values.</returns>
        </member>
        <member name="M:Northwoods.Go.Brush.Darken(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Brush.Darken(System.String,System.Double,Northwoods.Go.ColorSpace)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.Converter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Brush.Darken(System.String,System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            This static function takes a color and darkens it.
            </summary>
            <param name="color">A valid color string</param>
            <param name="fraction">Fraction to darken the color by. Defaults to 0.2, must be between 0 and 1 (inclusive).</param>
            <param name="mode">Color space to use for adjusting. Must be <see cref="F:Northwoods.Go.ColorSpace.Lab"/> or <see cref="F:Northwoods.Go.ColorSpace.HSL"/>, defaults to <see cref="F:Northwoods.Go.ColorSpace.Lab"/>.</param>
            <returns>A string for the darkened color in RGBA or HSLA.</returns>
        </member>
        <member name="M:Northwoods.Go.Brush.Darken(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Modifies all colors within this Brush, darkening them by some fraction.
            </summary>
            <param name="fraction">Fraction to darken the colors by. Defaults to 0.2, must be between 0 and 1 (inclusive).</param>
            <param name="mode">Color space to use for adjusting. Must be <see cref="F:Northwoods.Go.ColorSpace.Lab"/> or <see cref="F:Northwoods.Go.ColorSpace.HSL"/>, defaults to <see cref="F:Northwoods.Go.ColorSpace.Lab"/>.</param>
            <returns>A new Brush with modified color values.</returns>
        </member>
        <member name="M:Northwoods.Go.Brush.Mix(System.String,System.String,System.Double)">
            <summary>
            This static function takes two colors and mixes them together, using the (optionally) specified amount of the second color.
            </summary>
            <param name="color1">A valid color string.</param>
            <param name="color2">Another valid color string to mix.</param>
            <param name="fraction">Fraction specifying how much color2 to mix into color1. Defaults to .5, must be between 0 and 1 (inclusive).</param>
        </member>
        <member name="M:Northwoods.Go.Brush.IsDark">
            <summary>
            Determines whether this Brush is "dark."
            </summary>
        </member>
        <member name="M:Northwoods.Go.Brush.IsDark(System.String)">
            <summary>
            This static function takes a color and determines whether it is "dark." Does not account for transparency.
            </summary>
            <example>
            <code language="cs">
            myDiagram.NodeTemplate =
              new Node("Auto")
                .Add(
                  new Shape { Figure = "RoundedRectangle", StrokeWidth = 0 }
                    .Bind("Fill", "Color"),
                  new TextBlock { Margin = 8 }
                    .Bind("Stroke", "ColorStr", (c, _) => {
                      // Dark nodes use white text, light nodes use black text
                      return Brush.IsDark((string)c) ? "white" : "black";
                    })
                    .Bind("Text", "Key")
                );
            </code>
            </example>
            <param name="color">A valid color string</param>
        </member>
        <member name="M:Northwoods.Go.Brush.op_Implicit(System.String)~Northwoods.Go.Brush">
            <summary>
            Implicitly converts a string to a Brush.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Northwoods.Go.Brush.op_Equality(Northwoods.Go.Brush,Northwoods.Go.Brush)">
            <summary>
            Compares if two Brushes are equal by checking their <see cref="P:Northwoods.Go.Brush.Paint"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Brush.op_Inequality(Northwoods.Go.Brush,Northwoods.Go.Brush)">
            <summary>
            Compares if two Brushes are not equal by checking their <see cref="P:Northwoods.Go.Brush.Paint"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Brush.Equals(System.Object)">
            <summary>
            Indicates whether the given Brush is equal to this Brush.
            </summary>
            <param name="obj">The Brush to compare to the current Brush.</param>
            <returns>True if the two Brushes have identical Color and Paint values,
            false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Brush.GetHashCode">
            <summary>
            Creates a hash code for the Brush.
            </summary>
            <returns>A hash code for the current Brush structure.</returns>
        </member>
        <member name="T:Northwoods.Go.Paint">
            <summary>
            This is the abstract base class for all paints.
            A Paint holds color information and describes how a <see cref="T:Northwoods.Go.Brush"/> will draw the inside
            of a <see cref="T:Northwoods.Go.Shape"/> or the stroke of a shape or a <see cref="T:Northwoods.Go.TextBlock"/> or the
            background of any <see cref="T:Northwoods.Go.GraphObject"/>.
            </summary>
            <remarks>
            Paints are immutable and must not be modified after construction.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Paint.Clone">
            <summary>
            Creates a new Paint that's a copy of this Paint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Paint.CloneProtected(Northwoods.Go.Paint)">
            <summary>
            Copies properties from this Paint to the given Paint.
            </summary>
            <param name="p">the Paint to copy properties to</param>
        </member>
        <member name="M:Northwoods.Go.Paint.ToString">
            <summary>
            Returns a string that represents the current Paint.
            </summary>
            <returns>A string that represents the current Paint.</returns>
        </member>
        <member name="M:Northwoods.Go.Paint.Lighten(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Lightens colors, called by <see cref="M:Northwoods.Go.Brush.Lighten(System.Double,Northwoods.Go.ColorSpace)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Paint.Darken(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Darkens colors, called by <see cref="M:Northwoods.Go.Brush.Darken(System.Double,Northwoods.Go.ColorSpace)"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.SolidPaint">
            <summary>
            A SolidPaint holds information describing how to draw a solid color.
            </summary>
            <remarks>
            SolidPaints are created automatically by the <see cref="T:Northwoods.Go.Brush"/> constructors.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.SolidPaint.Color">
            <summary>
            This read-only property returns the color of a solid paint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.SolidPaint.Lighten(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Lightens the solid color, called by <see cref="M:Northwoods.Go.Brush.Lighten(System.Double,Northwoods.Go.ColorSpace)"/>.
            </summary>
            <returns>a SolidPaint with a lightened color</returns>
        </member>
        <member name="M:Northwoods.Go.SolidPaint.Darken(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Darkens the solid color, called by <see cref="M:Northwoods.Go.Brush.Darken(System.Double,Northwoods.Go.ColorSpace)"/>.
            </summary>
            <returns>a SolidPaint with a darkened color</returns>
        </member>
        <member name="M:Northwoods.Go.SolidPaint.CloneProtected(Northwoods.Go.Paint)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.SolidPaint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.SolidPaint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.SolidPaint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Northwoods.Go.GradientPaint">
            <summary>
            A GradientPaint holds information describing how to draw a linear or radial gradient.
            GradientPaints are immutable.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String})">
            <summary>
            Constructs a GradientPaint with the given stops.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
        </member>
        <member name="M:Northwoods.Go.GradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String},Northwoods.Go.Spot,Northwoods.Go.Spot)">
            <summary>
            Constructs a GradientPaint with the given stops and start and end Spots.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="end">the ending spot for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.GradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[])">
            <summary>
            Constructs a GradientPaint with the given stops.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
        </member>
        <member name="M:Northwoods.Go.GradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[],Northwoods.Go.Spot,Northwoods.Go.Spot)">
            <summary>
            Constructs a GradientPaint with the given stops and start and end Spots.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="end">the ending spot for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.GradientPaint.#ctor(Northwoods.Go.GradientPaint)">
            <summary>
            Costructs a copy of the given GradientPaint.
            </summary>
            <param name="p">the GradientPaint to copy from</param>
        </member>
        <member name="P:Northwoods.Go.GradientPaint.Start">
            <summary>
            This read-only property returns the starting location for a gradient.
            </summary>
            <remarks>
            A <see cref="T:Northwoods.Go.Spot"/> value specifies a relative point in the object's <see cref="P:Northwoods.Go.GraphObject.NaturalBounds"/>.
            The default value is <see cref="F:Northwoods.Go.Spot.Top"/> for linear gradients and <see cref="F:Northwoods.Go.Spot.Center"/> for radial gradients.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GradientPaint.End">
             <summary>
             This read-only property returns the ending location for a linear or radial gradient.
             </summary>
             <remarks>
             A <see cref="T:Northwoods.Go.Spot"/> value specifies a relative point in the object's <see cref="P:Northwoods.Go.GraphObject.NaturalBounds"/>.
             The default value is <see cref="F:Northwoods.Go.Spot.Bottom"/> for linear gradients and <see cref="F:Northwoods.Go.Spot.Center"/> for radial gradients.
            
             This field is ignored in WinForms.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.GradientPaint.ColorStops">
            <summary>
            This read-only property returns an immutable dictionary holding all of the color stops used in this gradient,
            where the key is a number, the fractional distance between 0 and 1 (inclusive),
            and where the corresponding value is a color string.
            </summary>
            <remarks>
            If you need to add a color stop, you should construct a new gradient.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GradientPaint.LightenedStops(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Returns a new collection of lightened color stops.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GradientPaint.DarkenedStops(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Returns a new collection of darkened color stops.
            </summary>
        </member>
        <member name="T:Northwoods.Go.LinearGradientPaint">
            <summary>
            A LinearGradientPaint describes how to draw a linear gradient.
            </summary>
        </member>
        <member name="M:Northwoods.Go.LinearGradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String})">
            <summary>
            Constructs a LinearGradientPaint with the given stops.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
        </member>
        <member name="M:Northwoods.Go.LinearGradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String},Northwoods.Go.Spot,Northwoods.Go.Spot)">
            <summary>
            Constructs a GradientPaint with the given stops and start and end Spots.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="end">the ending spot for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.LinearGradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[])">
            <summary>
            Constructs a GradientPaint with the given stops.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
        </member>
        <member name="M:Northwoods.Go.LinearGradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[],Northwoods.Go.Spot,Northwoods.Go.Spot)">
            <summary>
            Constructs a GradientPaint with the given stops and start and end Spots.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="end">the ending spot for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.LinearGradientPaint.#ctor(Northwoods.Go.LinearGradientPaint)">
            <summary>
            Costructs a copy of the given LinearGradientPaint.
            </summary>
            <param name="p">the LinearGradientPaint to copy from</param>
        </member>
        <member name="M:Northwoods.Go.LinearGradientPaint.Lighten(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Lightens each color stop, called by <see cref="M:Northwoods.Go.Brush.Lighten(System.Double,Northwoods.Go.ColorSpace)"/>.
            </summary>
            <returns>a new LinearGradientPaint with lightened colors</returns>
        </member>
        <member name="M:Northwoods.Go.LinearGradientPaint.Darken(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Darkens each color stop, called by <see cref="M:Northwoods.Go.Brush.Darken(System.Double,Northwoods.Go.ColorSpace)"/>.
            </summary>
            <returns>a new LinearGradientPaint with darkened colors</returns>
        </member>
        <member name="M:Northwoods.Go.LinearGradientPaint.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Northwoods.Go.RadialGradientPaint">
            <summary>
            A RadialGradientPaint describes how to draw a radial gradient.
            </summary>
            <remarks>
            In WinForms, only the <see cref="P:Northwoods.Go.GradientPaint.Start"/> and <see cref="P:Northwoods.Go.RadialGradientPaint.StartRadius"/> are used to position and size the radial gradient.
            The <see cref="P:Northwoods.Go.GradientPaint.End"/> and <see cref="P:Northwoods.Go.RadialGradientPaint.EndRadius"/> are ignored.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String})">
            <summary>
            Constructs a RadialGradientPaint with the given stops.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String},Northwoods.Go.Spot)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start Spot.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String},Northwoods.Go.Spot,Northwoods.Go.Spot)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start and end Spots.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="end">the ending spot for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String},System.Double)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start radius.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
            <param name="startRadius">the starting radius for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String},System.Double,System.Double)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start and end radius.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
            <param name="startRadius">the starting radius for the gradient</param>
            <param name="endRadius">the ending radius for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String},Northwoods.Go.Spot,System.Double)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start Spot and start radius.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="startRadius">the starting radius for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.Collections.Generic.IDictionary{System.Single,System.String},Northwoods.Go.Spot,Northwoods.Go.Spot,System.Double,System.Double)">
            <summary>
            Constructs a RadialGradientPaint with the given stops, start and end Spots, and start and end radius.
            </summary>
            <param name="stops">a dictionary mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="end">the ending spot for the gradient</param>
            <param name="startRadius">the starting radius for the gradient</param>
            <param name="endRadius">the ending radius for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[])">
            <summary>
            Constructs a RadialGradientPaint with the given stops.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[],Northwoods.Go.Spot)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start Spot.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[],Northwoods.Go.Spot,Northwoods.Go.Spot)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start and end Spots.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="end">the ending spot for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[],System.Double)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start radius.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
            <param name="startRadius">the starting radius for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[],System.Double,System.Double)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start and end radius.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
            <param name="startRadius">the starting radius for the gradient</param>
            <param name="endRadius">the ending radius for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[],Northwoods.Go.Spot,System.Double)">
            <summary>
            Constructs a RadialGradientPaint with the given stops and start Spot and start radius.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="startRadius">the starting radius for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(System.ValueTuple{System.Single,System.String}[],Northwoods.Go.Spot,Northwoods.Go.Spot,System.Double,System.Double)">
            <summary>
            Constructs a RadialGradientPaint with the given stops, start and end Spots, and start and end radius.
            </summary>
            <param name="stops">an array of tuples mapping fractional stops to color strings</param>
            <param name="start">the starting spot for the gradient</param>
            <param name="end">the ending spot for the gradient</param>
            <param name="startRadius">the starting radius for the gradient</param>
            <param name="endRadius">the ending radius for the gradient</param>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.#ctor(Northwoods.Go.RadialGradientPaint)">
            <summary>
            Costructs a copy of the given RadialGradientPaint.
            </summary>
            <param name="p">the RadialGradientPaint to copy from</param>
        </member>
        <member name="P:Northwoods.Go.RadialGradientPaint.StartRadius">
            <summary>
            This read-only property returns the radius of a radial gradient at the start location. The default value is 0.
            </summary>
            <remarks>
            Represents the total radius for the gradient in WinForms.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.RadialGradientPaint.EndRadius">
            <summary>
            This read-only property returns the radius of a radial gradient at the end location. The default value is NaN.
            </summary>
            <remarks>
            This field is ignored in WinForms.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.Lighten(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Lightens each color stop, called by <see cref="M:Northwoods.Go.Brush.Lighten(System.Double,Northwoods.Go.ColorSpace)"/>.
            </summary>
            <returns>a new RadialGradientPaint with lightened colors</returns>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.Darken(System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            Darkens each color stop, called by <see cref="M:Northwoods.Go.Brush.Darken(System.Double,Northwoods.Go.ColorSpace)"/>.
            </summary>
            <returns>a new RadialGradientPaint with darkened colors</returns>
        </member>
        <member name="M:Northwoods.Go.RadialGradientPaint.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Northwoods.Go.ColorSpace">
            <summary>
            This enumeration describes possible values used for lightening and darkening.
            </summary>
            <seealso cref="M:Northwoods.Go.Brush.Lighten(System.String,System.Double,Northwoods.Go.ColorSpace)"/>
            <seealso cref="M:Northwoods.Go.Brush.Darken(System.String,System.Double,Northwoods.Go.ColorSpace)"/>
        </member>
        <member name="F:Northwoods.Go.ColorSpace.Lab">
            <summary>
            The Lab (CIELAB) color space. More closely matches human perception of lightness.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ColorSpace.HSL">
            <summary>
            The HSL (hue, saturation, lightness) color space.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Colors">
            <summary>
            This static class provides various functionality operating on colors.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Colors.RandomColor(System.Int32,System.Int32)">
            <summary>
            This static function can be used to generate a random color.
            </summary>
            <param name="min">An int between 0 and 255, defaults to 128.</param>
            <param name="max">An int between 0 and 255, defaults to 255.</param>
            <returns>A color value in # hexadecimal format.</returns>
        </member>
        <member name="M:Northwoods.Go.Colors.IsValidColor(System.String)">
            <summary>
            This static function returns true if a given color string is well-formed for drawing.
            </summary>
            <param name="color">A color string to validate.</param>
        </member>
        <member name="M:Northwoods.Go.Colors.Lighten(System.String,System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            This static function takes a color and lightens it.
            </summary>
            <param name="color">A valid CSS color string.</param>
            <param name="fraction">Fraction to lighten the color by. Defaults to 0.2, must be between 0 and 1 (inclusive).</param>
            <param name="mode">Color space to use for adjusting. Must be <see cref="F:Northwoods.Go.ColorSpace.Lab"/> or <see cref="F:Northwoods.Go.ColorSpace.HSL"/>, defaults to <see cref="F:Northwoods.Go.ColorSpace.Lab"/>.</param>
            <returns>A CSS string for the lightened color in RGBA or HSLA.</returns>
        </member>
        <member name="M:Northwoods.Go.Colors.Darken(System.String,System.Double,Northwoods.Go.ColorSpace)">
            <summary>
            This static function takes a color and darkens it.
            </summary>
            <param name="color">A valid CSS color string</param>
            <param name="fraction">Fraction to darken the color by. Defaults to 0.2, must be between 0 and 1 (inclusive).</param>
            <param name="mode">Color space to use for adjusting. Must be <see cref="F:Northwoods.Go.ColorSpace.Lab"/> or <see cref="F:Northwoods.Go.ColorSpace.HSL"/>, defaults to <see cref="F:Northwoods.Go.ColorSpace.Lab"/>.</param>
            <returns>A CSS string for the darkened color in RGBA or HSLA.</returns>
        </member>
        <member name="M:Northwoods.Go.Colors.Mix(System.String,System.String,System.Double)">
            <summary>
            This static function takes two colors and mixes them together, using the (optionally) specified amount of the second color.
            </summary>
            <param name="color1">A valid CSS color string.</param>
            <param name="color2">Another valid CSS color string to mix.</param>
            <param name="fraction">Fraction specifying how much color2 to mix into color1. Defaults to .5, must be between 0 and 1 (inclusive).</param>
        </member>
        <member name="M:Northwoods.Go.Colors.IsDark(System.String)">
             <summary>
             This static function takes a color and determines whether it is "dark." Does not account for transparency.
            
             Example usage:
             <code language="cs">
             myDiagram.NodeTemplate =
               new Node(PanelLayoutAuto.Instance)
                 .Add(
                   new Shape { Figure = "RoundedRectangle", StrokeWidth = 0 }
                     .Bind("Fill", "Color"),
                   new TextBlock { Margin = 8 }
                     .Bind("Stroke", "ColorStr", (c, _) => {
                       // Dark nodes use white text, light nodes use black text
                       return Brush.IsDark((string)c) ? "white" : "black";
                     })
                     .Bind("Text", "Key")
                 );
             </code>
             </summary>
             <param name="color">A valid CSS color string</param>
        </member>
        <member name="M:Northwoods.Go.Colors._ShadeRgba(System.Double,Northwoods.Go.ColorSpace)">
            @hidden @internal
            <param name="fraction"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Colors._ColorToRgba(System.String)">
            @hidden @internal
            <summary>
            This static function converts a CSS color string to an RGBA array.
            </summary>
            <param name="color">The CSS color string</param>
        </member>
        <member name="M:Northwoods.Go.Colors._RgbaToHsla">
            @hidden @internal
            <summary>
            This static function converts an RGBA color value to HSLA.
            Assumes r, g, and b are contained in the set [0, 255] and a is in [0, 1].
            Returns h [0, 360], s [0, 100], l [0, 100], and a [0, 1].
            </summary>
        </member>
        <member name="M:Northwoods.Go.Colors._HslaToRgba">
            @hidden @internal
            <summary>
            This static function converts an HSLA color value to RGBA.
            Assumes h [0, 360], s [0, 100], l [0, 100], and a [0, 1].
            Returns r, g, and b in the set [0, 255] and a in the set [0, 1].
            </summary>
        </member>
        <member name="M:Northwoods.Go.Colors._RgbToLab">
            @hidden @internal
            <summary>
            This static function converts an RGBA color to Lab.
            Assumes r, g, and b are contained in the set [0, 255].
            </summary>
        </member>
        <member name="M:Northwoods.Go.Colors._LabToRgb">
            @hidden @internal
            <summary>
            This static function converts a Lab color to RGB.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Colors._RgbXyzInverseCompanding(System.Double)">
            @hidden @internal
            <summary>
            This static function performs inverse sRGB companding.
            </summary>
            <param name="rgbVal">An R, G, or B value in the set [0, 255]</param>
            <returns>Inverse companded RGB value</returns>
        </member>
        <member name="M:Northwoods.Go.Colors._XyzRgbCompanding(System.Double)">
            @hidden @internal
            <summary>
            This static function performs sRGB companding.
            </summary>
            <param name="xyzVal">An X, Y, or Z value</param>
            <returns>Companded XYZ value</returns>
        </member>
        <member name="M:Northwoods.Go.Colors._RgbToXyz">
            @hidden @internal
            <summary>
            This static function converts an RGB color to XYZ.
            This is an intermediate step in the RGB to Lab conversion.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Colors._XyzToRgb">
            @hidden @internal
            <summary>
            This static function converts an XYZ color to RGB.
            This is an intermediate step in the Lab to RGB conversion.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Colors._XyzLabHelperFunction(System.Double)">
            @hidden @internal
            <param name="inputXyz"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Colors._XyzToLab">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Colors._LabXyzHelperFunction(System.Double)">
            @hidden @internal
            <param name="inputLab"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Colors._LabToXyz">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.StreamGeometryContext">
            <summary>
            Used in many figure generators, for source compatibility with GoXam and GoDiagram.
            Also used in Geometry.parse and in Link.makeGeometry.
            </summary>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.Reset(Northwoods.Go.Geometry)">
            @hidden @internal
            <param name="geo"></param>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.BeginFigure(System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            @hidden @internal
            <param name="sx"></param>
            <param name="sy"></param>
            <param name="isFilled"></param>
            <param name="isSubPath"></param>
            <param name="isShadowed">true if shadowed, false if not shadowed. Figures are shadowed by default.</param>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.CloseLast">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.FillLast">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.SetShadow(System.Boolean)">
            @hidden @internal
            <param name="shadow">whether or not the figure should be shadowed.</param>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.MoveTo(System.Double,System.Double,System.Boolean)">
            @hidden @internal
            <param name="px"></param>
            <param name="py"></param>
            <param name="close"></param>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.LineTo(System.Double,System.Double,System.Boolean)">
            @hidden @internal
            <param name="px"></param>
            <param name="py"></param>
            <param name="close"></param>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.BezierTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            @hidden @internal
            <param name="p1x"></param>
            <param name="p1y"></param>
            <param name="p2x"></param>
            <param name="p2y"></param>
            <param name="ex"></param>
            <param name="ey"></param>
            <param name="close"></param>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.QuadraticBezierTo(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            @hidden @internal
            <param name="px"></param>
            <param name="py"></param>
            <param name="ex"></param>
            <param name="ey"></param>
            <param name="close"></param>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.ArcTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            @hidden @internal
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="radiusX"></param>
            <param name="radiusY"></param>
            <param name="close"></param>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.SvgArcTo(System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Boolean)">
            @hidden @internal
            <param name="rx"></param>
            <param name="ry"></param>
            <param name="xAxisRotation"></param>
            <param name="largeArcFlag"></param>
            <param name="sweepFlag"></param>
            <param name="cpx"></param>
            <param name="cpy"></param>
            <param name="close"></param>
        </member>
        <member name="F:Northwoods.Go.StreamGeometryContext._CachedStreamGeometryContext">
            @hidden @internal 
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.TempStreamGeometryContext(Northwoods.Go.Geometry)">
            @hidden @internal
            <returns></returns>
            <param name="geo"></param>
        </member>
        <member name="M:Northwoods.Go.StreamGeometryContext.FreeStreamGeometryContext(Northwoods.Go.StreamGeometryContext)">
            @hidden @internal
            <param name="temp"></param>
        </member>
        <member name="T:Northwoods.Go.FontUnit">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Font.Unit"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.FontUnit.Pixel">
            <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:Northwoods.Go.FontUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="T:Northwoods.Go.FontStyle">
             <summary>
             This enumeration specifies possible values for <see cref="P:Northwoods.Go.Font.Style"/>.
            
             This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:Northwoods.Go.FontStyle.Regular">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.FontStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="T:Northwoods.Go.FontWeight">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Font.Weight"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.FontWeight.Light">
            <summary>
            Light text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.FontWeight.Regular">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.FontWeight.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geo.IsApprox(System.Double,System.Double)">
            <summary>True if the difference between X and Y is less than 0.5.</summary>
        </member>
        <member name="M:Northwoods.Go.Geo.IsApproxEqual(System.Double,System.Double)">
            <summary>True if the difference between X and Y is less than 0.00000005.</summary>
        </member>
        <member name="M:Northwoods.Go.Geo.LineContainsPoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            See if P is near the line A - B.
            </summary>
            <param name="ax"></param>
            <param name="ay"></param>
            <param name="bx"></param>
            <param name="by"></param>
            <param name="fuzz">A double describing the resolution, with a minimum of 0.000001.</param>
            <param name="px"></param>
            <param name="py"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.BezierBounds(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Rect@)">
            <param name="sx"></param>
            <param name="sy"></param>
            <param name="c1x"></param>
            <param name="c1y"></param>
            <param name="c2x"></param>
            <param name="c2y"></param>
            <param name="ex"></param>
            <param name="ey"></param>
            <param name="epsilon">too slow at 0.1, places that call bumped values to 0.5</param>
            <param name="result">a Rect that is modified to hold the union of the points on the line.</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.BezierLines(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Double}@)">
            <summary>
            Return a bunch of line segments describing the bezier curve.
            </summary>
            <param name="sx"></param>
            <param name="sy"></param>
            <param name="c1x"></param>
            <param name="c1y"></param>
            <param name="c2x"></param>
            <param name="c2y"></param>
            <param name="ex"></param>
            <param name="ey"></param>
            <param name="epsilon"></param>
            <param name="result">a List that holds line segments, alternating X and Y, roughly describing the bezier.</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.NearestPointOnLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Point@)">
            <summary>
            Return a point on a straight line segment that is closest to a given point.
            </summary>
            <param name="Ax">One end of the line.</param>
            <param name="Ay"></param>
            <param name="Bx">The other end of the line.</param>
            <param name="By"></param>
            <param name="Px">The point to be closest to.</param>
            <param name="Py"></param>
            <param name="result">Modified to be a point that is on the finite length straight line segment from A-B.</param>
            <returns>true if the point P is on on a perpendicular line to the line segment;
            false if the point P is beyond either end of the line segment.
            When this returns false, the RESULT will be either A or B.</returns>
        </member>
        <member name="M:Northwoods.Go.Geo.NearestIntersectionOnLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Point@)">
            <summary>
            Find the intersection point of the finite line segment A-B and the
            infinite line P-Q
            that is closest to point P.
            result is out variable fixed
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geo.LineIntersectsWithSegment(Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point@)">
            <summary>
            Returns true if line(line1, line2) intersects with line
            segment(seg1, seg2) and modifies the intersection argument with the result
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <param name="intersection">modified to hold result.</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.GetNearestLineEllipseIntersection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Point@,System.Double)">
            <summary>
            Returns the closest intersection between the infinite line L1-L2
            and the ellipse in the rectangle S-E, and accounting for a strokeWidth SW.
            </summary>
            <param name="l1x"></param>
            <param name="l1y"></param>
            <param name="l2x"></param>
            <param name="l2y"></param>
            <param name="sx"></param>
            <param name="sy"></param>
            <param name="ex"></param>
            <param name="ey"></param>
            <param name="result"></param>
            <param name="sw"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.GetNearestLineRectIntersection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Point@)">
            <summary>
            Find the closest point of a rectangle to a given point that is on a line from that point.
            </summary>
            <param name="l"></param>
            <param name="t"></param>
            <param name="r"></param>
            <param name="b"></param>
            <param name="Cx"></param>
            <param name="Cy"></param>
            <param name="Dx"></param>
            <param name="Dy"></param>
            <param name="result"></param>
            <returns>true if the infinite line does intersect with the rectangle; false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Geo.IntersectsLineSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines whether a rectangle intersects a line segment.
            </summary>
            <param name="x">The X coordinate of the rectangle to check for intersection with the line segment.</param>
            <param name="y">The Y coordinate of the rectangle to check for intersection with the line segment.</param>
            <param name="w">The Width of the rectangle to check for intersection with the line segment.</param>
            <param name="h">The Height of the rectangle to check for intersection with the line segment.</param>
            <param name="p1x">The X coordinate of one end of the line segment.</param>
            <param name="p1y">The Y coordinate of one end of the line segment.</param>
            <param name="p2x">The X coordinate of other end of the line segment.</param>
            <param name="p2y">The Y coordinate of other end of the line segment.</param>
        </member>
        <member name="M:Northwoods.Go.Geo.IntersectingLineSegments(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This predicate returns true if two finite straight line segments intersect.
            </summary>
            <param name="a1x"></param>
            <param name="a1y"></param>
            <param name="a2x"></param>
            <param name="a2y"></param>
            <param name="b1x"></param>
            <param name="b1y"></param>
            <param name="b2x"></param>
            <param name="b2y"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.CreateArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns a List that represents the bezier curves needed to draw or hit-test an arc
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radius"></param>
            <param name="startAngle"></param>
            <param name="endAngle"></param>
            <param name="anglesInRadians"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.CreateSmallArc(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cubic bezier approximation of a circular arc centered at the origin,
            from (radians) a1 to a2, where a2-a1 &lt; pi/2. The arc's radius is r.
            </summary>
            <param name="r"></param>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.FindNearestInfiniteGridPoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This static function finds the nearest point on an infinite grid given the grids origin
            and the size of the cells.
            </summary>
            <param name="x">The X point to look near.</param>
            <param name="y">The Y point to look near.</param>
            <param name="originX">The X-coordinate of the origin of the grid.</param>
            <param name="originY">The Y-coordinate of the origin of the grid.</param>
            <param name="cellwidth">The width of the grid cell.</param>
            <param name="cellheight">The height of the grid cell.</param>
            <returns>The nearest grid point.</returns>
        </member>
        <member name="M:Northwoods.Go.Geo.Gcd(System.Int32,System.Int32)">
            <summary>
            Compute the greatest common divisor of two positive integers
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.DistancePointEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The ellipse is (x0/e0)^2 + (x1/e1)^2 = 1.  The query point is (y0,y1).
            The function returns the distance from the query point to the ellipse.
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.DistancePointEllipseHelper(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The ellipse is (x0/e0)^2 + (x1/e1)^2 = 1 with e0 >= e1.  The query point is
            (y0,y1) with y0 >= 0 and y1 >= 0.  The function returns the distance from
            the query point to the ellipse.  It also computes the ellipse point (x0,x1)
            in the first quadrant that is closest to (y0,y1).
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
            <param name="y0"></param>
            <param name="y1"></param>
            <param name="x0"></param>
            <param name="x1"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geo.DefineFigureGeneratorSimple(System.String,System.Func{Northwoods.Go.Shape,System.Double,System.Double,Northwoods.Go.Geometry})">
            @hidden @internal
            <param name="name">a figure name ("RoundedRectangle"); must not be "" or "None"</param>
            <param name="func">A function that takes (Shape,width,height) and returns a Geometry</param>
        </member>
        <member name="T:Northwoods.Go.GeometryType">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Geometry.Type"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GeometryType.Line">
            <summary>
            For drawing a simple straight line.
            The line goes from the point
            (<see cref="P:Northwoods.Go.Geometry.StartX"/>, <see cref="P:Northwoods.Go.Geometry.StartY"/>) to the point (<see cref="P:Northwoods.Go.Geometry.EndX"/>, <see cref="P:Northwoods.Go.Geometry.EndY"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.GeometryType.Ellipse">
            <summary>
            For drawing a rectangle.
            The rectangle goes from the point
            (<see cref="P:Northwoods.Go.Geometry.StartX"/>, <see cref="P:Northwoods.Go.Geometry.StartY"/>) to the point (<see cref="P:Northwoods.Go.Geometry.EndX"/>, <see cref="P:Northwoods.Go.Geometry.EndY"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.GeometryType.Rectangle">
            <summary>
            For drawing an ellipse fitting within a rectangle.
            The ellipse fits within the rectangle that goes from the point
            (<see cref="P:Northwoods.Go.Geometry.StartX"/>, <see cref="P:Northwoods.Go.Geometry.StartY"/>) to the point (<see cref="P:Northwoods.Go.Geometry.EndX"/>, <see cref="P:Northwoods.Go.Geometry.EndY"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.GeometryType.Path">
            <summary>
            For drawing a complex path made of a list of <see cref="T:Northwoods.Go.PathFigure"/>s.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GeometryStretch">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Shape.GeometryStretch"/> and <see cref="P:Northwoods.Go.Geometry.DefaultStretch"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GeometryStretch.Default">
            <summary>
            Scale the geometry depending on context, for instance uniformly for a "Circle" figure and non-uniformly for an "Ellipse" figure.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GeometryStretch.None">
            <summary>
            Do not scale the geometry; there may be clipping in one or both directions if the available dimensions are too small.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GeometryStretch.Fill">
            <summary>
            Scale the geometry in both directions so as to fit exactly in the given bounds;
            there is no clipping, but the aspect ratio may change, causing the geometry to appear stretched.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GeometryStretch.Uniform">
            <summary>
            Scale the geometry equally in both directions to fit the given bounds.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Geometry">
             <summary>
             The Geometry class is used to define the "shape" of a <see cref="T:Northwoods.Go.Shape"/>.
             </summary>
             <remarks>
             A Geometry can be simple straight lines, rectangles, or ellipses.
             A Geometry can also be an arbitrarily complex path, consisting of a list of <see cref="T:Northwoods.Go.PathFigure"/>s.
            
             A Geometry must not be modified once it has been used by a <see cref="T:Northwoods.Go.Shape"/>.
             However, a Geometry may be shared by multiple Shapes.
            
             It is commonplace to create Geometries using geometry path string syntax:
             <a href="../../intro/geometry.html">Geometry Path Strings</a>.
             However it is much more efficient to create Geometries programmatically.
             One way to do that is illustrated by several of the samples that evaluate JavaScript such as:
             <code language="cs">
             new Geometry()
                 .Add(new PathFigure(p.X, p.Y)
                      .Add(new PathSegment(SegmentType.Arc, -sweep/2, sweep, 0, 0, radius+layerThickness, radius+layerThickness))
                      .Add(new PathSegment(SegmentType.Line, q.X, q.Y))
                      .Add(new PathSegment(SegmentType.Arc, sweep/2, -sweep, 0, 0, radius, radius).close()));
             </code>
             See samples that make use of Geometries in the <a href="../../samples/index.Html#geometries">samples index</a>.
             </remarks>
             @category Geometry
        </member>
        <member name="M:Northwoods.Go.Geometry.#ctor(Northwoods.Go.GeometryType)">
            <summary>
            Construct an empty Geometry of the given <see cref="T:Northwoods.Go.GeometryType"/>.
            </summary>
            <remarks>
            The default type is <see cref="F:Northwoods.Go.GeometryType.Path"/>.
            </remarks>
            <param name="type"></param>
        </member>
        <member name="M:Northwoods.Go.Geometry.Copy">
            <summary>
            Create a copy of this Geometry, with the same values and figures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Geometry.Freeze">
            <summary>
            Make this object "frozen" or immutable.
            Future attempts to change its state, for example by setting any of its properties,
            may result in an exception, until it is thaw()'ed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.Thaw">
            <summary>
            Make this object "thawed" or mutable.
            Caution: this object might be shared, which would mean that any changes
            to this object would need to update all users of this object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.EqualsApprox(Northwoods.Go.Geometry)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.Stringify(Northwoods.Go.Geometry)">
            <summary>
            This static function can be used to write out a <see cref="T:Northwoods.Go.Geometry"/> as a string
            that can be read by <see cref="M:Northwoods.Go.Geometry.Parse(System.String,System.Boolean)"/>.
            </summary>
            <remarks>
            The string produced by this method is a superset of the SVG path
            string rules that contains some additional GoDiagram-specific tokens.
            See the <a href="../../intro/pictures.Html">Introduction page on Geometry Parsing</a> for more details.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Geometry.Stringify(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Geometry.Stringify(Northwoods.Go.Geometry)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.BackConverter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.ToString(System.Int32)">
            <summary>
            Leaves number unchanged by default.
            </summary>
            <param name="precision">Optional: the amount of decimal places to round numbers to for debugging purposes</param>
        </member>
        <member name="M:Northwoods.Go.Geometry.FillPath(System.String)">
            <summary>
            Given a SVG or GoDiagram path string, returns a congruent path string with each pathfigure filled.
            For instance, "M0 0 L22 22 L33 0" would become "F M0 0 L22 22 L33 0".
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.Parse(System.String,System.Boolean)">
             <summary>
             Produce a <see cref="T:Northwoods.Go.Geometry"/> from a string that uses an SVG-like compact path geometry syntax.
             The syntax accepts all SVG Path Syntax (<a href="https://www.w3.org/TR/SVG/paths.html" target="_blank">SVG Path Syntax (w3.org)</a>),
             as well as three GoDiagram-specific tokens.
             </summary>
             <remarks>
             Specifically, the following tokens are allowed:
               - `M (x,y)+ ` - Move commands
               - `L (x,y)+, H (x)+, V (y)+` Lines commands, including horizontal and vertical lines
               - `C (x1 y1 x2 y2 x y)+, S (x2 y2 x y)+` Cubic bezier curves
               - `Q (x1 y1 x y)+, T (x y)+` Quadratic bezier curves
               - `A (rx ry x-axis-rotation large-arc-flag clockwise-flag x y)+` Arcs (following SVG arc conventions)
               - `Z` Denotes that the previous subpath is closed
            
             Additionally there are some tokens specific to GoDiagram:
               - `B (startAngle, sweepAngle, centerX, centerY, radius)+` Arcs following GoDiagram canvas arc conventions
               - `X` Used before M-commands to denote separate PathFigures instead of a subpath
               - `F` Denotes whether the current PathFigure is filled (true if F is present)
               - `U` Denotes that the PathFigure is not shadowed
            
             See the <a href="../../intro/geometry.html">Introduction page on Geometry Parsing</a> for more details.
             </remarks>
             <param name="str"></param>
             <param name="filled">whether figures should be filled.
             If true, all PathFigures in the string will be filled regardless of the presence
             of an "F" command or not.
             If false, all PathFigures will determine their own filled state by the presence of an "F" command or not.
             Default is false.</param>
        </member>
        <member name="M:Northwoods.Go.Geometry.Parse(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Geometry.Parse(System.String,System.Boolean)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.Converter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.ComputeBoundsWithoutOrigin">
            <summary>
            Computes the Geometry's bounds without adding an origin point, and returns those bounds as a rect.
            This method does not modify the Geometry or its bounds.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.ComputeBoundsInternal(Northwoods.Go.Rect,System.Boolean)">
            <summary>
            Modifies a given rectangle to be the bounds
            </summary>
            <param name="b">the rectangle to modify.</param>
            <param name="set">whether or not the first point is set or unioned.
            Use true only if you don't want the existing rectangle (ie 0,0,0,0) to be included.</param>
        </member>
        <member name="M:Northwoods.Go.Geometry.ComputeScaledGeometry(System.Double,System.Double)">
            <summary>
            Returns a copy of this Geometry that has been scaled by an x and y value
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.Normalize">
            <summary>
            Normalizes the Geometry points in place by ensuring the top-left bounds of the geometry lines up with (0, 0),
            returning the <see cref="T:Northwoods.Go.Point"/> (x, y) amount it was shifted.
            After this method is called there will be no negative X or Y value for the Geometry's bounds,
            and no empty space at the top-left of the Geometry.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.Offset(System.Double,System.Double)">
            <summary>
            Offsets the Geometry in place by a given (x, y) amount.
            </summary>
            <param name="x">The x-axis offset factor.</param>
            <param name="y">The y-axis offset factor.</param>
            <returns>this</returns>
        </member>
        <member name="M:Northwoods.Go.Geometry.Scale(System.Double,System.Double)">
             <summary>
             Scales the Geometry in place by a given (x, y) scale factor.
            
             If you want to flip a Geometry horizontally, call <c>geo.Scale(-1, 1)</c>.
             If you want to flip a Geometry vertically, call <c>geo.Scale(1, -1)</c>.
             </summary>
             <param name="x">The x-axis scale factor.</param>
             <param name="y">The y-axis scale factor.</param>
             <returns>this</returns>
        </member>
        <member name="M:Northwoods.Go.Geometry.Rotate(System.Double,System.Double,System.Double)">
            <summary>
            Rotates the Geometry in place by a given angle, with optional x and y values to rotate the geometry about.
            If no x and y value are given, (0, 0) is used as the rotation point.
            </summary>
            <param name="angle">The angle to rotate by.</param>
            <param name="x">The optional X point to rotate the geometry about. If no point is given, this value is 0.</param>
            <param name="y">The optional Y point to rotate the geometry about. If no point is given, this value is 0.</param>
            <returns>this</returns>
        </member>
        <member name="M:Northwoods.Go.Geometry.Transform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Transforms the Geometry in place by a given transform
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Northwoods.Go.Geometry.ContainsPoint(Northwoods.Go.Point,System.Double)">
            <summary>
            Returns true if the Geometry contains the point.
            </summary>
            <param name="p">in local geometry coordinates</param>
            <param name="sw">half the stroke width that a Shape has or that you want to pretend it has</param>
        </member>
        <member name="M:Northwoods.Go.Geometry.ContainsPoint(Northwoods.Go.Point,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the Geometry (must be a Path Geometry) contains the point,
            respecting whether a figure isFilled or not.
            </summary>
            <param name="p">in local geometry coordinates</param>
            <param name="sw">the stroke width that the Shape has or that you want to pretend it has</param>
            <param name="swOnFilled">if true, pretend a filled figure has a larger area due to the SW stroke width than the ideal geometry.  Normally true if Shape.strokeWidth > 1.</param>
            <param name="precise">if false, pretend an unfilled figure's path is wider/broader than the given SW stroke width.</param>
        </member>
        <member name="M:Northwoods.Go.Geometry._LineWind(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns null if the geometry's unfilled path contains the point.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.PathContainsPoint(System.Double,System.Double,System.Double)">
            <summary>
            Returns true if the geometry's unfilled path contains the point.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.GetPointAlongPath(System.Double)">
            <summary>
            Returns the point at the fractional distance (0-1) along this Geometry's path.
            </summary>
            <param name="fraction">A fractional amount between 0 and 1, inclusive.</param>
            <returns>the Point, in local coordinates, of the fractional distance along the path.</returns>
        </member>
        <member name="M:Northwoods.Go.Geometry.GetAngleAlongPath(System.Double)">
            <summary>
            Returns the slope expressed as an angle at the fractional distance (0-1) along this Geometry's path, in local coordinates.
            </summary>
            <param name="fraction">A fractional amount between 0 and 1, inclusive.</param>
        </member>
        <member name="M:Northwoods.Go.Geometry.GetPointAndAngleAlongPath(System.Double)">
            <summary>
            Returns the point and angle at the fractional distance (0-1) along the path.
            This just combines tha above two methods for efficiency in internal usage.
            </summary>
            <param name="fraction">A fractional amount between 0 and 1, inclusive.</param>
        </member>
        <member name="M:Northwoods.Go.Geometry.GetFractionForPoint(Northwoods.Go.Point)">
            <summary>
            Returns the fractional distance (0-1) along this Geometry's path for a nearby point.
            </summary>
            <param name="pt">A Point, in local coordinates, near this Geometry.</param>
            <returns>A fractional amount between 0 and 1, inclusive.</returns>
        </member>
        <member name="P:Northwoods.Go.Geometry.FlattenedSegments">
            <summary>
            (undocumented)
            Flattened segments represents a series of points making up a Geometry.
            The inner arrays consist of a sequence of PathSegment coordinates making up a PathFigure,
            while the outer array represents the whole Geometry of these PathFigures.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.FlattenedLengths">
            <summary>
            (undocumented)
            Flattened lengths represents a series of lengths of the paths making up a Geometry.
            The inner arrays consist of a sequence of PathSegment lengths making up a PathFigure,
            while the outer array represents the whole Geometry of these PathFigures.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.FlattenedTotalLength">
            <summary>
            (undocumented)
            This read-only property returns the approximate length of the path.
            This is the overall distance of all the PathSegments that make up the geometry.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry._BuildAllPaths(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})">
            <summary>
            Builds an array of segments that make up the geometry.
            </summary>
            <param name="allPaths">an array to modify, holding Arrays of numbers</param>
            <param name="allDists">an array to modify, holding Arrays of numbers</param>
        </member>
        <member name="P:Northwoods.Go.Geometry.Type">
            <summary>
            Gets or sets the type of the Geometry.
            The default type is <see cref="F:Northwoods.Go.GeometryType.Path"/>.
            Other permissible values are <see cref="F:Northwoods.Go.GeometryType.Line"/>, <see cref="F:Northwoods.Go.GeometryType.Ellipse"/>,
            or <see cref="F:Northwoods.Go.GeometryType.Rectangle"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.StartX">
            <summary>
            Gets or sets the starting X coordinate of the Geometry if it is of type
            <see cref="F:Northwoods.Go.GeometryType.Line">Line</see>, <see cref="F:Northwoods.Go.GeometryType.Rectangle">Rectangle</see>, or <see cref="F:Northwoods.Go.GeometryType.Ellipse">Ellipse</see>.
            The initial value is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.StartY">
            <summary>
            Gets or sets the starting Y coordinate of the Geometry if it is of type
            <see cref="F:Northwoods.Go.GeometryType.Line">Line</see>, <see cref="F:Northwoods.Go.GeometryType.Rectangle">Rectangle</see>, or <see cref="F:Northwoods.Go.GeometryType.Ellipse">Ellipse</see>.
            The initial value is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.EndX">
            <summary>
            Gets or sets the ending X coordinate of the Geometry if it is of type
            <see cref="F:Northwoods.Go.GeometryType.Line">Line</see>, <see cref="F:Northwoods.Go.GeometryType.Rectangle">Rectangle</see>, or <see cref="F:Northwoods.Go.GeometryType.Ellipse">Ellipse</see>.
            The initial value is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.EndY">
            <summary>
            Gets or sets the ending Y coordinate of the Geometry if it is of type
            <see cref="F:Northwoods.Go.GeometryType.Line">Line</see>, <see cref="F:Northwoods.Go.GeometryType.Rectangle">Rectangle</see>, or <see cref="F:Northwoods.Go.GeometryType.Ellipse">Ellipse</see>.
            The initial value is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.Figures">
            <summary>
            Gets or sets the List of <see cref="T:Northwoods.Go.PathFigure"/>s
            that describes the content of the
            path for Geometries of type <see cref="F:Northwoods.Go.GeometryType.Path">Path</see>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Geometry.Add(Northwoods.Go.PathFigure)">
            <summary>
            Add a <see cref="T:Northwoods.Go.PathFigure"/> to the <see cref="P:Northwoods.Go.Geometry.Figures"/> list.
            </summary>
            <param name="figure">a newly allocated unshared PathFigure that will become owned by this Geometry</param>
            <returns>this</returns>
        </member>
        <member name="M:Northwoods.Go.Geometry.SetSpots(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            (undocumented)
            Set <see cref="P:Northwoods.Go.Geometry.Spot1"/> and <see cref="P:Northwoods.Go.Geometry.Spot2"/> without allocating new <see cref="T:Northwoods.Go.Spot"/>s.
            </summary>
            <param name="f1x">spot1.X</param>
            <param name="f1y">spot1.Y</param>
            <param name="f2x">spot2.X</param>
            <param name="f2y">spot2.Y</param>
            <param name="o1x">offset1.X, default is zero</param>
            <param name="o1y">offset1.Y, default is zero</param>
            <param name="o2x">offset2.X, default is zero</param>
            <param name="o2y">offset2.Y, default is zero</param>
            <returns>this</returns>
        </member>
        <member name="P:Northwoods.Go.Geometry.Spot1">
            <summary>
            Gets or sets the spot an "Auto" <see cref="T:Northwoods.Go.Panel"/> will use for the top-left corner of any panel content
            when the <see cref="P:Northwoods.Go.Shape.Spot1"/> value is <see cref="F:Northwoods.Go.Spot.Default"/>.
            The default value is <see cref="F:Northwoods.Go.Spot.TopLeft"/>, at the top-left point of the bounds of the Shape.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.Spot2">
            <summary>
            Gets or sets the spot an "Auto" <see cref="T:Northwoods.Go.Panel"/> will use for the bottom-right corner of any panel content
            when the <see cref="P:Northwoods.Go.Shape.Spot2"/> value is <see cref="F:Northwoods.Go.Spot.Default"/>.
            The default value is <see cref="F:Northwoods.Go.Spot.BottomRight"/>, at the bottom-right point of the bounds of the Shape.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.DefaultStretch">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.Shape.GeometryStretch"/> value the <see cref="T:Northwoods.Go.Shape"/> should use by default
            when the <see cref="P:Northwoods.Go.Shape.GeometryStretch"/> value is <see cref="F:Northwoods.Go.GeometryStretch.None"/>.
            The default value is <see cref="F:Northwoods.Go.GeometryStretch.Fill"/>.
            Some figure generators return a Geometry with this property set to <see cref="F:Northwoods.Go.GeometryStretch.Uniform"/>,
            in order to preserve its aspect ratio when used by a Shape that may have different sizes.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Geometry.Bounds">
            <summary>
            This read-only property returns a rectangle that contains all points within the Geometry.
            The result will always contain the origin (0, 0).
            </summary>
        </member>
        <member name="T:Northwoods.Go.GeometryJsonConverter">
            <summary>
            A JsonConverter which converts a Geometry into a JSON representation.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Margin">
             <summary>
             A Margin represents a band of space outside or inside a rectangular area,
             with possibly different values on each of the four sides.
             </summary>
             <remarks>
             Example uses include <see cref="P:Northwoods.Go.GraphObject.Margin"/>, <see cref="P:Northwoods.Go.Panel.Padding"/>, and <see cref="P:Northwoods.Go.Diagram.Padding"/>.
            
             Use the static functions <see cref="M:Northwoods.Go.Margin.Parse(System.String)"/> and <see cref="M:Northwoods.Go.Margin.Stringify(Northwoods.Go.Margin)"/> to convert to and from
             a standard string representation that is independent of the current locale.
             </remarks>
             <category>Geometry</category>
        </member>
        <member name="M:Northwoods.Go.Margin.#ctor(System.Double)">
            <summary>
            Create a Margin with all four sides using the same number.
            </summary>
            <param name="s">the margin for all four sides, defaults to 0</param>
        </member>
        <member name="M:Northwoods.Go.Margin.#ctor(System.Double,System.Double)">
            <summary>
            Create a Margin with the top and bottom getting the first parameter and the left and right getting the second.
            </summary>
            <param name="tb">the margin for the top and bottom sides</param>
            <param name="rl">the margin for the right and left sides</param>
        </member>
        <member name="M:Northwoods.Go.Margin.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a Margin with each side getting the corresponding parameter in the order top, right, bottom, left.
            </summary>
            <param name="t">the margin for the top side</param>
            <param name="r">the margin for the right side</param>
            <param name="b">the margin for the bottom side</param>
            <param name="l">the margin for the left side</param>
        </member>
        <member name="P:Northwoods.Go.Margin.Top">
            <summary>Gets or sets the top value of this margin. Default is 0.</summary>
        </member>
        <member name="P:Northwoods.Go.Margin.Right">
            <summary>Gets or sets the right value of this margin. Default is 0.</summary>
        </member>
        <member name="P:Northwoods.Go.Margin.Bottom">
            <summary>Gets or sets the bottom value of this margin. Default is 0.</summary>
        </member>
        <member name="P:Northwoods.Go.Margin.Left">
            <summary>Gets or sets the left value of this margin. Default is 0.</summary>
        </member>
        <member name="M:Northwoods.Go.Margin.Parse(System.String)">
            <summary>
            This static method can be used to read in a Margin from a string that was produced by <see cref="M:Northwoods.Go.Margin.Stringify(Northwoods.Go.Margin)"/>.
            </summary>
            <remarks>
            `Margin.Parse("1 2 3 4")` produces the Margin `new Margin(1, 2, 3, 4)`. This function will throw an error on invalid strings.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Margin.Parse(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Margin.Parse(System.String)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.Converter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Margin.Stringify(Northwoods.Go.Margin)">
            <summary>
            This static method can be used to write out a Margin as a string that can be read by <see cref="M:Northwoods.Go.Margin.Parse(System.String)"/>.
            </summary>
            <remarks>
            `Margin.Stringify(new Margin(1, 2, 3, 4))` produces the string "1 2 3 4".
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Margin.Stringify(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Margin.Stringify(Northwoods.Go.Margin)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.BackConverter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Margin.ToString">
            <summary>
            Returns a string representation of the margin.
            </summary>
            <returns>A string representation of the current margin.</returns>
        </member>
        <member name="M:Northwoods.Go.Margin.op_Equality(Northwoods.Go.Margin,Northwoods.Go.Margin)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Margin.op_Inequality(Northwoods.Go.Margin,Northwoods.Go.Margin)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Margin.Equals(System.Object)">
            <summary>
            Indicates whether the given Margin is equal to this Margin.
            </summary>
            <param name="obj">The Margin to compare to the current Margin.</param>
            <returns>True if the two Margins have identical Top and Right and Bottom and Left values,
            false otherwise.</returns>
            <seealso cref="M:Northwoods.Go.Margin.Equals(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Margin.Equals(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Indicates whether the given Margin is equal to this Margin.
            </summary>
            <param name="t">top.</param>
            <param name="r">right.</param>
            <param name="b">bottom.</param>
            <param name="l">left.</param>
            <returns>True if the two Margins have identical Top and Right and Bottom and Left values,
            false otherwise.</returns>
            <seealso cref="M:Northwoods.Go.Margin.Equals(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Margin.EqualsApprox(Northwoods.Go.Margin)">
            <summary>
            Indicates whether the given Margin is nearly equal to this Margin.
            </summary>
            <param name="m">The Margin to compare to the current Margin.</param>
            <returns>True if the two Margins have Top, Right,
            Bottom and Left values within 0.5, false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Margin.IsReal">
            <summary>True if this Margin has values that are real numbers and not infinity.</summary>
        </member>
        <member name="M:Northwoods.Go.Margin.op_Implicit(System.Double)~Northwoods.Go.Margin">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Margin.op_Implicit(System.Int32)~Northwoods.Go.Margin">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Margin.GetHashCode">
            <summary>
            Creates a hash code for the margin.
            </summary>
            <returns>A hash code for the current margin structure.</returns>
        </member>
        <member name="T:Northwoods.Go.PathFigure">
             <summary>
             A PathFigure represents a section of a <see cref="T:Northwoods.Go.Geometry"/>.
             It is a single connected series of
             two-dimensional geometric <see cref="T:Northwoods.Go.PathSegment"/>s.
             </summary>
             <remarks>
             The <see cref="P:Northwoods.Go.Geometry.Figures"/> property is a list of PathFigures.
            
             PathFigures are drawn with the <see cref="P:Northwoods.Go.Shape.Stroke"/> and other stroke properties.
             Filled PathFigures are painted with the <see cref="P:Northwoods.Go.Shape.Fill"/>.
            
             A PathFigure must not be modified once its containing <see cref="T:Northwoods.Go.Geometry"/>
             has been assigned to a <see cref="T:Northwoods.Go.Shape"/>.
             </remarks>
             @category Geometry
        </member>
        <member name="M:Northwoods.Go.PathFigure.#ctor(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Constructs an empty figure.
            The optional arguments specify the starting point of the figure.
            You'll want to add a new instance of a PathFigure to the
            <see cref="P:Northwoods.Go.Geometry.Figures"/> list of a <see cref="T:Northwoods.Go.Geometry"/>.
            </summary>
            <param name="sx">optional: the X coordinate of the start point (default is zero).</param>
            <param name="sy">optional: the Y coordinate of the start point (default is zero).</param>
            <param name="filled">optional: whether the figure is filled (default is true).</param>
            <param name="shadowed">optional: whether the figure may be drawn with a shadow (default is true).</param>
        </member>
        <member name="M:Northwoods.Go.PathFigure.Copy">
            <summary>
            Create a copy of this PathFigure, with the same values and segments.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PathFigure.EqualsApprox(Northwoods.Go.PathFigure)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.PathFigure.ToString(System.Int32)">
            <summary>
            Leaves number unchanged by default.
            </summary>
            <param name="precision">Optional: the amount of decimal places to round numbers to for debugging purposes</param>
        </member>
        <member name="M:Northwoods.Go.PathFigure.Freeze">
            <summary>
            Make this object "frozen" or immutable.
            Future attempts to change its state, for example by setting any of its properties,
            may result in an exception, until it is thaw()"ed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PathFigure.Thaw">
            <summary>
            Make this object "thawed" or mutable.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathFigure.IsFilled">
            <summary>
            Gets or sets whether this PathFigure is drawn filled.
            The default value is true.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathFigure.IsShadowed">
            <summary>
            Gets or sets whether this PathFigure will render a shadow if one is defined.
            This is used for turning off shadows on specific subpaths.
            The default value is true.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathFigure.StartX">
            <summary>
            Gets or sets the starting point X coordinate of the PathFigure.
            The default value is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathFigure.StartY">
            <summary>
            Gets or sets the starting point Y coordinate of the PathFigure.
            The default value is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathFigure.Segments">
            <summary>
            Gets or sets the List of <see cref="T:Northwoods.Go.PathSegment"/>s that define this PathFigure.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PathFigure.Add(Northwoods.Go.PathSegment)">
            <summary>
            Add a <see cref="T:Northwoods.Go.PathSegment"/> to the <see cref="P:Northwoods.Go.PathFigure.Segments"/> list.
            </summary>
            <param name="segment">a newly allocated unshared PathSegment that will become owned by this PathFigure</param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.Go.SegmentType">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.PathSegment.Type"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.SegmentType.Move">
            <summary>
            For beginning a new subpath.
            </summary>
        </member>
        <member name="F:Northwoods.Go.SegmentType.Line">
            <summary>
            For drawing a straight line segment.
            </summary>
        </member>
        <member name="F:Northwoods.Go.SegmentType.Bezier">
            <summary>
            For drawing a cubic bezier segment.
            </summary>
        </member>
        <member name="F:Northwoods.Go.SegmentType.QuadraticBezier">
            <summary>
            For drawing a quadratic bezier segment.
            </summary>
        </member>
        <member name="F:Northwoods.Go.SegmentType.Arc">
            <summary>
            For drawing an arc segment.
            </summary>
        </member>
        <member name="F:Northwoods.Go.SegmentType.SvgArc">
             <summary>
             For drawing an SVG arc segment.
            
             See: <a href="https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands">SVG Arc specification (w3.org)</a>
             </summary>
        </member>
        <member name="T:Northwoods.Go.PathSegment">
             <summary>
             A PathSegment represents a straight line or curved segment of a path between
             two or more points that are part of a <see cref="T:Northwoods.Go.PathFigure"/>.
             </summary>
             <remarks>
             The very first point is given by the <see cref="P:Northwoods.Go.PathFigure.StartX"/> and <see cref="P:Northwoods.Go.PathFigure.StartY"/> properties.
             After the first segment the beginning point of the next segment is the same as the end point of the previous segment.
             For most types of PathSegments the end point of the segment is given by <see cref="P:Northwoods.Go.PathSegment.EndX"/> and <see cref="P:Northwoods.Go.PathSegment.EndY"/>.
            
             A PathSegment must not be modified once its containing <see cref="T:Northwoods.Go.PathFigure"/>'s
             <see cref="T:Northwoods.Go.Geometry"/> has been assigned to a <see cref="T:Northwoods.Go.Shape"/>.
             </remarks>
             @category Geometry
        </member>
        <member name="M:Northwoods.Go.PathSegment.#ctor(Northwoods.Go.SegmentType,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
             <summary>
             Constructs a segment that goes nowhere unless you specify some Points.
            
             The very first point of a path is specified in the containing <see cref="T:Northwoods.Go.PathFigure"/> by
             its <see cref="P:Northwoods.Go.PathFigure.StartX"/> and <see cref="P:Northwoods.Go.PathFigure.StartY"/> properties.
             </summary>
             <remarks>
             The segment type must be one of the following values:
             <see cref="F:Northwoods.Go.SegmentType.Line"/>, <see cref="F:Northwoods.Go.SegmentType.Bezier"/>,
             <see cref="F:Northwoods.Go.SegmentType.QuadraticBezier"/>, <see cref="F:Northwoods.Go.SegmentType.Arc"/>, <see cref="F:Northwoods.Go.SegmentType.SvgArc"/>.
             You will want to add a new instance of a PathSegment to the
             <see cref="P:Northwoods.Go.PathFigure.Segments"/> list of a <see cref="T:Northwoods.Go.PathFigure"/>.
             </remarks>
             <param name="type">if not supplied, the default PathSegment type is <see cref="F:Northwoods.Go.SegmentType.Line"/>.
               But if the type is supplied, one must also provide the endpoint X and Y values,
               either as arguments in this constructor or by setting the <see cref="P:Northwoods.Go.PathSegment.EndX"/> and <see cref="P:Northwoods.Go.PathSegment.EndY"/> properties.
               If the type is QuadraticBezier, the X1 and Y1 control point values must both be supplied.
               If the type is Bezier, X1, Y1, X2, and Y2 control point values must all be supplied.
            
             If the type is <see cref="F:Northwoods.Go.SegmentType.Line">Line</see> it needs the following arguments:
            
             `(SegmentType.Line, ex, ey)`
               - **ex, ey** describe the end point
            
             If the type is <see cref="F:Northwoods.Go.SegmentType.QuadraticBezier">QuadraticBezier</see> it needs the following arguments:
            
             `(SegmentType.QuadraticBezier, ex, ey, x1, y1)`
               - **ex, ey** describe the end point
               - **x1, y1** describe the only control point
            
             If the type is <see cref="F:Northwoods.Go.SegmentType.Bezier">Bezier</see> it needs the following arguments:
            
             `(SegmentType.Bezier, ex, ey, x1, y1, x2, y2)`
               - **ex, ey** describe the end point
               - **x1, y1** describe the first control point
               - **x2, y2** describe the second control point
            
             If the type is <see cref="F:Northwoods.Go.SegmentType.Arc">Arc</see> it needs the following arguments:
            
             `(SegmentType.Arc, startAngle, sweepAngle, centerX, centerY, radiusX, radiusY)`
               - **startAngle** describes the start angle, in degrees
               - **sweepAngle** describes the sweep angle, in degrees
               - **centerX, centerY** describe the center point
               - **radiusX, radiusY** describe the radiusX and radiusY
            
             If the type is <see cref="F:Northwoods.Go.SegmentType.SvgArc">SvgArc</see> it needs the following arguments:
            
             `(SegmentType.SvgArc, ex, ey, radiusX, radiusY, xAxisRotation, largeArcFlag, clockwiseFlag)`
            
             They are in the same order as arcs in SVG path strings, except the endpoint x and y values come first, not last.
               - **ex, ey** describe the endpoint
               - **radiusX, radiusY** describe the radius
               - **xAxisRotation** describes the <see cref="P:Northwoods.Go.PathSegment.XAxisRotation"/> (number in degrees)
               - **largeArcFlag** describes the <see cref="P:Northwoods.Go.PathSegment.IsLargeArc"/> (true or false)
               - **clockwiseFlag** describes the <see cref="P:Northwoods.Go.PathSegment.IsClockwiseArc"/> (true or false).
            
             If the type is <see cref="F:Northwoods.Go.SegmentType.Move">Move</see> it needs the following arguments:
            
             `(SegmentType.Move, ex, ey)`
               - **ex, ey** describe the next starting point
             </param>
             <param name="ex">optional: the X coordinate of the end point, or the startAngle of an Arc.</param>
             <param name="ey">optional: the Y coordinate of the end point, or the sweepAngle of an Arc.</param>
             <param name="x1">optional: the X coordinate of the first bezier control point, or the centerX of an Arc, or the radiusX of an SvgArc.</param>
             <param name="y1">optional: the Y coordinate of the first bezier control point, or the centerY of an Arc, or the radiusY of an SvgArc.</param>
             <param name="x2">optional: the X coordinate of the second cubic bezier control point, or the radiusX of an Arc, or the xAxisRotation of an SvgArc.</param>
             <param name="y2">optional: the Y coordinate of the second cubic bezier control point, or the radiusY of an Arc, or whether this is the larger arc of an SvgArc.</param>
             <param name="clockwise">optional: whether an SvgArc goes clockwise or counterclockwise.</param>
        </member>
        <member name="M:Northwoods.Go.PathSegment.Copy">
            <summary>
            Create a copy of this PathSegment, of the same type and with the same point values.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PathSegment.EqualsApprox(Northwoods.Go.PathSegment)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.PathSegment.ToString(System.Int32)">
            <summary>
            Leaves number unchanged by default.
            </summary>
            <param name="precision">Optional: the amount of decimal places to round numbers to for debugging purposes</param>
        </member>
        <member name="M:Northwoods.Go.PathSegment.Freeze">
            <summary>
            Make this object "frozen" or immutable.
            Future attempts to change its state, for example by setting any of its properties,
            may result in an exception, until it is thaw()"ed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PathSegment.Thaw">
            <summary>
            Make this object "thawed" or mutable.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PathSegment.Close">
            <summary>
            Closes the path after this PathSegment
            </summary>
            <returns>returns this PathSegment.</returns>
        </member>
        <member name="M:Northwoods.Go.PathSegment.BuildBeziers(Northwoods.Go.PathFigure)">
            <summary>
            Constructs an array of bezier curves that represent an Arc
            </summary>
            <returns>of arc descriptor objects.</returns>
        </member>
        <member name="M:Northwoods.Go.PathSegment.BuildSvgBeziers(Northwoods.Go.PathFigure,System.Double,System.Double)">
            <summary>
            Constructs an array of bezier curves that represent an Arc
            </summary>
            <returns>of arc descriptor objects.</returns>
        </member>
        <member name="P:Northwoods.Go.PathSegment.IsClosed">
            <summary>
            Gets or sets whether the path is closed after this PathSegment.
            Default value is false.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.Type">
            <summary>
            Gets or sets the type of the PathSegment.
            The value must be one of the following:
            <see cref="F:Northwoods.Go.SegmentType.Line"/>, <see cref="F:Northwoods.Go.SegmentType.Bezier"/>,
            <see cref="F:Northwoods.Go.SegmentType.QuadraticBezier"/>, <see cref="F:Northwoods.Go.SegmentType.Arc"/>,
            <see cref="F:Northwoods.Go.SegmentType.Move"/>, <see cref="F:Northwoods.Go.SegmentType.Arc"/>, and <see cref="F:Northwoods.Go.SegmentType.SvgArc"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.EndX">
            <summary>
            Gets or sets the X coordinate of the end point for all types of PathSegment except <see cref="F:Northwoods.Go.SegmentType.Arc">Arc</see>.
            The default value is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.EndY">
            <summary>
            Gets or sets the Y coordinate of the end point for all types of PathSegment except <see cref="F:Northwoods.Go.SegmentType.Arc">Arc</see>.
            The default value is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.Point1X">
            <summary>
            Gets or sets the X value of the first control point for a PathSegment
            of type <see cref="F:Northwoods.Go.SegmentType.Bezier">Bezier</see> or <see cref="F:Northwoods.Go.SegmentType.QuadraticBezier">QuadraticBezier</see>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.Point1Y">
            <summary>
            Gets or sets the Y value of the first control point for a PathSegment
            of type <see cref="F:Northwoods.Go.SegmentType.Bezier">Bezier</see> or <see cref="F:Northwoods.Go.SegmentType.QuadraticBezier">QuadraticBezier</see>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.Point2X">
            <summary>
            Gets or sets the X value of the second control point for a PathSegment
            of type cubic <see cref="F:Northwoods.Go.SegmentType.Bezier">Bezier</see>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.Point2Y">
            <summary>
            Gets or sets the Y value of the second control point for a PathSegment
            of type cubic <see cref="F:Northwoods.Go.SegmentType.Bezier">Bezier</see>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.CenterX">
            <summary>
            Gets or sets the center X value of the Arc for a PathSegment of type <see cref="F:Northwoods.Go.SegmentType.Arc">Arc</see>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.CenterY">
            <summary>
            Gets or sets the center Y value of the Arc for a PathSegment of type <see cref="F:Northwoods.Go.SegmentType.Arc">Arc</see>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.RadiusX">
            <summary>
            Gets or sets the X value of the radius for a PathSegment of type <see cref="F:Northwoods.Go.SegmentType.Arc">Arc</see> or <see cref="F:Northwoods.Go.SegmentType.SvgArc">SvgArc</see>.
            Value must be a positive number.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.RadiusY">
            <summary>
            Gets or sets the Y value of the radius for a PathSegment of type <see cref="F:Northwoods.Go.SegmentType.Arc">Arc</see> or <see cref="F:Northwoods.Go.SegmentType.SvgArc">SvgArc</see>.
            Value must be a positive number.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.StartAngle">
            <summary>
            Gets or sets the starting angle for a PathSegment of type <see cref="F:Northwoods.Go.SegmentType.Arc">Arc</see>.
            Value must be within the range: (0 &lt;= value &lt; 360).
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.SweepAngle">
            <summary>
            Gets or sets the length of angle in degrees, or amount of arc to "sweep" for a PathSegment of type <see cref="F:Northwoods.Go.SegmentType.Arc">Arc</see>.
            Must be between -360 and 360, inclusive.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PathSegment.IsClockwiseArc">
            <summary>
            Gets or sets the clockwise-flag for a PathSegment of type <see cref="F:Northwoods.Go.SegmentType.SvgArc">SvgArc</see>.
            SVG Arcs specify a radius and an endpoint, and are always a portion of an ellipse.
            </summary>
            <remarks>
            The parameters allow for two potential ellipses and four potential arcs.
            A clockwise-flag set to true will use one of the two possible positive-angle arcs,
            and false will use one of the two negative-angle arcs. Which arc is chosen (small or large)
            depends on the value of <see cref="P:Northwoods.Go.PathSegment.IsLargeArc"/>.
            For more information see the visual examples in the
            <a href="https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands">SVG Arc specification (w3.org)</a>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.PathSegment.IsLargeArc">
            <summary>
            Gets or sets the large-arc-flag for a PathSegment of type <see cref="F:Northwoods.Go.SegmentType.SvgArc">SvgArc</see>.
            SVG Arcs specify a radius and an endpoint, and are always a portion of an ellipse.
            </summary>
            <remarks>
            The parameters allow for two potential ellipses and four potential arcs.
            A large-arc-flag set to true will choose the larger of the two arc sweeps.
            Which way the arc sweeps (positive angle or negative angle) depends on the value of <see cref="P:Northwoods.Go.PathSegment.IsClockwiseArc"/>
            For more information see the visual examples in the
            <a href="https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands">SVG Arc specification (w3.org)</a>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.PathSegment.XAxisRotation">
            <summary>
            Gets or sets the X-axis rotation for a PathSegment of type <see cref="F:Northwoods.Go.SegmentType.SvgArc">SvgArc</see>.
            X-axis rotation is used to rotate the ellipse that the arc is created from,
            and must be between 0 and 360 degrees.
            Default is 0.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Point">
            <summary>
            A Point represents an x- and y-coordinate pair in two-dimensional space.
            </summary>
            <remarks>
            Use the static functions <see cref="M:Northwoods.Go.Point.Parse(System.String)"/> and <see cref="M:Northwoods.Go.Point.Stringify(Northwoods.Go.Point)"/> to convert to and from
            a standard string representation that is independent of the current locale.
            </remarks>
            @category Geometry
        </member>
        <member name="M:Northwoods.Go.Point.#ctor(System.Double,System.Double)">
            <summary>
            The default constructor produces the Point(0,0).
            This constructor may take either zero arguments or two arguments.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="P:Northwoods.Go.Point.X">
            <summary>Gets or sets the x value of the Point.</summary>
        </member>
        <member name="P:Northwoods.Go.Point.Y">
            <summary>Gets or sets the y value of the Point.</summary>
        </member>
        <member name="M:Northwoods.Go.Point.Parse(System.String)">
            <summary>
            This static method can be used to read in a <see cref="T:Northwoods.Go.Point"/> from a string that was produced by <see cref="M:Northwoods.Go.Point.Stringify(Northwoods.Go.Point)"/>.
            </summary>
            <remarks>
            `Point.Parse("1 2")` produces the Point `new Point(1, 2)`.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Point.Parse(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Point.Parse(System.String)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.Converter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Point.Stringify(Northwoods.Go.Point)">
            <summary>
            This static method can be used to write out a <see cref="T:Northwoods.Go.Point"/> as a string that can be read by <see cref="M:Northwoods.Go.Point.Parse(System.String)"/>.
            </summary>
            <remarks>
            `Point.Stringify(new Point(1, 2))` produces the string "1 2".
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Point.Stringify(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Point.Stringify(Northwoods.Go.Point)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.BackConverter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Point.ToString">
            <summary>
            Returns a string representation of the point.
            </summary>
            <returns>A string representation of the current point.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.op_Equality(Northwoods.Go.Point,Northwoods.Go.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Point.op_Inequality(Northwoods.Go.Point,Northwoods.Go.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Point.Equals(System.Object)">
            <summary>
            Indicates whether the given Point is equal to this Point.
            </summary>
            <param name="obj">The Point to compare to the current Point.</param>
            <returns>True if the two Points have identical X and Y values,
            false otherwise.</returns>
            <seealso cref="M:Northwoods.Go.Point.Equals(System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Point.Equals(System.Double,System.Double)">
            <summary>
            Indicates whether the given point (x, y) is equal to this Point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>True if the two Points have identical X and Y values,
            false otherwise.</returns>
            <seealso cref="M:Northwoods.Go.Point.Equals(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Point.EqualsApprox(Northwoods.Go.Point)">
            <summary>
            Indicates whether the given Point is nearly equal to this Point.
            </summary>
            <param name="p">The Point to compare to the current Point.</param>
            <returns>True if the two Points have x and y values that
            are equal with a tolerance of 0.5, false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.Add(Northwoods.Go.Point)">
            <summary>
            Returns a new Point that is the sum of this Point and the
            x and y coordinates of the given Point.
            </summary>
            <param name="p">The Point to add to this Point.</param>
            <returns>A new Point.</returns>
            <seealso cref="M:Northwoods.Go.Point.Offset(System.Double,System.Double)"/>
            <seealso cref="M:Northwoods.Go.Point.Subtract(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.Point.Subtract(Northwoods.Go.Point)">
            <summary>
            Returns a new Point that is the difference of this Point and the
            x and y coordinates of the given Point.
            </summary>
            <param name="p">The Point to subtract from the current Point.</param>
            <returns>A new Point.</returns>
            <seealso cref="M:Northwoods.Go.Point.Offset(System.Double,System.Double)"/>
            <seealso cref="M:Northwoods.Go.Point.Add(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.Point.Offset(System.Double,System.Double)">
            <summary>
            Returns a new point by shifting this Point's values with the given DX and DY offsets.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns>A new Point.</returns>
            <seealso cref="M:Northwoods.Go.Point.Add(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Point.Subtract(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.Point.Rotate(System.Double)">
            <summary>
            Returns a new Point that is this Point rotated about the origin by the given angle.
            </summary>
            <param name="angle">an angle in degrees.</param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.Scale(System.Double,System.Double)">
            <summary>
            Returns a new Point that is this Point scaled by given factors along the X and Y axes.
            </summary>
            <param name="sx"></param>
            <param name="sy"></param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.DistanceSquared(Northwoods.Go.Point)">
            <summary>
            Returns the square of the distance from this Point to a given Point.
            </summary>
            <param name="p">the other Point to measure to.</param>
            <returns>The square of the euclidean distance.</returns>
            <seealso cref="M:Northwoods.Go.Point.DistanceSquared(System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Point.DistanceSquared(System.Double,System.Double)">
            <summary>
            Returns the square of the distance from this point to a given point (px, py).
            </summary>
            <param name="px"></param>
            <param name="py"></param>
            <returns>The square of the euclidean distance.</returns>
            <seealso cref="M:Northwoods.Go.Point.DistanceSquared(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.Point.Normalize">
            <summary>
            Returns a new Point that is this Point normalized to a unit length.
            However, if this Point is the origin (zero, zero), its length remains zero.
            </summary>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.Direction(Northwoods.Go.Point)">
            <summary>
            Compute the angle from this Point to a given Point.
            However, if the given Point is the same as this Point, the direction is zero.
            </summary>
            <param name="p">the other Point to which to measure the relative angle.</param>
            <returns>The angle, in degrees, of the line from this Point to the given point.</returns>
            <seealso cref="M:Northwoods.Go.Point.Direction(System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Point.Direction(System.Double,System.Double)">
            <summary>
            Compute the angle from this Point to a given (px, py) point.
            However, if the point is the same as this Point, the direction is zero.
            </summary>
            <param name="px"></param>
            <param name="py"></param>
            <returns>The angle, in degrees, of the line from this Point to the given point.</returns>
            <seealso cref="M:Northwoods.Go.Point.Direction(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.Point.CompareWithLineSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This static function compares a point with a finite line segment.
            If the point is on the finite line segment, this returns zero.
            If the point is on the left side of the segment, this returns a positive number.
            If the point is on the right side of the segment, this returns a negative number.
            If the point is on the infinitely extended line but not within the segment,
            then this returns a positive number if the point is beyond the end of the segment when going from A1 to A2,
            or this returns a negative number if the point comes before the segment's start at A1.
            </summary>
            <param name="a1x">start of line segment A1</param>
            <param name="a1y">start of line segment A1</param>
            <param name="a2x">end of line segment A2</param>
            <param name="a2y">end of line segment A2</param>
            <param name="px">point to be compared with the line segment A1-A2</param>
            <param name="py">point to be compared with the line segment A1-A2</param>
            <returns>&lt;0 if on the left side, or &gt;0 if on the right side, or zero if exactly on the finite line segment</returns>
        </member>
        <member name="M:Northwoods.Go.Point.CompareWithLineSegment(Northwoods.Go.Point,Northwoods.Go.Point)">
            <summary>
            Compare this point with a finite line segment given by two Points.
            </summary>
            <remarks>
            This method compares this point with a finite line segment determined by the given two Points.
            If the point is on the finite line segment, this returns zero.
            If the point is on the left side of the segment, this returns a positive number.
            If the point is on the right side of the segment, this returns a negative number.
            If the point is on the infinitely extended line but not within the segment,
            then this returns a positive number if the point is beyond the end of the segment when going from A1 to A2,
            or this returns a negative number if the point comes before the segment's start at A1.
            </remarks>
            <param name="p">one end of the finite line segment</param>
            <param name="q">the other end of the finite line segment</param>
            <returns>&lt;0 if on the left side, or &gt;0 if on the right side, or zero if exactly on the finite line segment</returns>
        </member>
        <member name="M:Northwoods.Go.Point.IntersectingLineSegments(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This static function is true if two finite straight line segments intersect each other.
            </summary>
            <param name="a1x"></param>
            <param name="a1y"></param>
            <param name="a2x"></param>
            <param name="a2y"></param>
            <param name="b1x"></param>
            <param name="b1y"></param>
            <param name="b2x"></param>
            <param name="b2y"></param>
            <returns>True if the two given finite line segments intersect with each other, false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.ProjectOntoLineSegment(Northwoods.Go.Point,Northwoods.Go.Point)">
            <summary>
            Returns the closest Point to this Point that is on a finite line segment.
            </summary>
            <param name="p">one end of the finite line segment</param>
            <param name="q">the other end of the finite line segment</param>
            <returns>A new Point.</returns>
            <seealso cref="M:Northwoods.Go.Point.ProjectOntoLineSegment(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Point.ProjectOntoLineSegment(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the closest Point to this Point that is on a finite line segment.
            </summary>
            <param name="px">one end of the finite line segment</param>
            <param name="py">one end of the finite line segment</param>
            <param name="qx">the other end of the finite line segment</param>
            <param name="qy">the other end of the finite line segment</param>
            <returns>A new Point.</returns>
            <seealso cref="M:Northwoods.Go.Point.ProjectOntoLineSegment(Northwoods.Go.Point,Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.Point.SnapToGrid(Northwoods.Go.Point,Northwoods.Go.Size)">
            <summary>
            Returns the closest Point to this Point on an infinite grid,
            given the grid's origin and size of each grid cell.
            </summary>
            <param name="origin">the top-left point of the grid</param>
            <param name="cellsize">the size of each grid cell</param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.SnapToGrid(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the closest Point to this Point on an infinite grid,
            given the grid's x and y origin and the width and height of its cells.
            </summary>
            <param name="originx">the x value of the top-left point of the grid</param>
            <param name="originy">the y value of the top-left point of the grid</param>
            <param name="cellwidth">the width of each grid cell -- must be a real number larger than zero</param>
            <param name="cellheight">the height of each grid cell -- must be a real number larger than zero</param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.SetSpot(Northwoods.Go.Rect,Northwoods.Go.Spot)">
            <summary>
            Returns a new Point that's X and Y values correspond to a particular <see cref="T:Northwoods.Go.Spot"/>
            in a given Rect.
            </summary>
            <remarks>
            The result is meaningless if <see cref="M:Northwoods.Go.Spot.IsNoSpot"/> is true for the given Spot.
            </remarks>
            <param name="r">the Rect for which we are finding the point.</param>
            <param name="spot">the Spot; <see cref="M:Northwoods.Go.Spot.IsSpot"/> must be true for this Spot.</param>
            <returns>A new Point.</returns>
            <seealso cref="M:Northwoods.Go.Point.SetSpot(System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Spot)"/>
        </member>
        <member name="M:Northwoods.Go.Point.SetSpot(System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Spot)">
            <summary>
            Returns a new Point that's X and Y values correspond to a particular <see cref="T:Northwoods.Go.Spot"/>
            in a given rectangle.
            </summary>
            <remarks>
            The result is meaningless if <see cref="M:Northwoods.Go.Spot.IsNoSpot"/> is true for the given Spot.
            </remarks>
            <param name="x">The X coordinate of the Rect for which we are finding the point.</param>
            <param name="y">The Y coordinate of the Rect for which we are finding the point.</param>
            <param name="w">The Width of the Rect for which we are finding the point.</param>
            <param name="h">The Height of the Rect for which we are finding the point.</param>
            <param name="spot">the Spot; <see cref="M:Northwoods.Go.Spot.IsSpot"/> must be true for this Spot.</param>
            <returns>A new Point, the spot in the rectangle.</returns>
            <seealso cref="M:Northwoods.Go.Point.SetSpot(Northwoods.Go.Rect,Northwoods.Go.Spot)"/>
        </member>
        <member name="M:Northwoods.Go.Point.Transform(Northwoods.Go.Transform)">
            <summary>
            Returns a new Point that is this Point multiplied with the given Transform.
            </summary>
            <param name="t">the given Transform.</param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.TransformInverted(Northwoods.Go.Transform)">
            <summary>
            Returns a new Point that is this Point multiplied with the inverse of the given Transform.
            </summary>
            <param name="t">the given Transform, which is not modified.</param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.DistanceLineSegmentSquared(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This static function returns the square of the distance from the point P
            to the finite line segment from point A to point B.
            </summary>
            <returns>The euclidean distance.</returns>
        </member>
        <member name="M:Northwoods.Go.Point.DistanceSquared(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This static function returns the square of the distance from the point P to the point Q.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Point.Direction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This static function returns the angle in degrees of the line from point P to point Q.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Point.IsReal">
            <summary>True if this Point has X and Y values that are real numbers and not infinity.</summary>
        </member>
        <member name="M:Northwoods.Go.Point.GetHashCode">
            <summary>
            Creates a hash code for the point.
            </summary>
            <returns>A hash code for the current point structure.</returns>
        </member>
        <member name="T:Northwoods.Go.Rect">
            <summary>
            A Rect describes a rectangular two-dimensional area as a top-left point (x and y values)
            and a size (width and height values).
            </summary>
            <remarks>
            Use the static functions <see cref="M:Northwoods.Go.Rect.Parse(System.String)"/> and <see cref="M:Northwoods.Go.Rect.Stringify(Northwoods.Go.Rect)"/> to convert to and from
            a standard string representation that is independent of the current locale.
            </remarks>
            @category Geometry
        </member>
        <member name="M:Northwoods.Go.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a Rect with the given x, y, width, and height values.
            The default constructor produces the Rect(0,0,0,0).
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="w">The width.</param>
            <param name="h">The height.</param>
        </member>
        <member name="M:Northwoods.Go.Rect.#ctor(Northwoods.Go.Point,Northwoods.Go.Point)">
            <summary>
            Initializes a Rect that is exactly large enough to contain the given Points.
            </summary>
            <param name="a">The first Point to be contained.</param>
            <param name="b">The second Point to be contained.</param>
        </member>
        <member name="M:Northwoods.Go.Rect.#ctor(Northwoods.Go.Point,Northwoods.Go.Size)">
            <summary>
            Initializes a Rect that is located and sized by the given Point and Rect.
            </summary>
            <param name="pt">The Point specifying the x-y coordinates.</param>
            <param name="sz">The Size specifying the width and height.</param>
        </member>
        <member name="P:Northwoods.Go.Rect.X">
            <summary>Gets or sets the top-left x coordinate of the Rect.</summary>
        </member>
        <member name="P:Northwoods.Go.Rect.Y">
            <summary>Gets or sets the top-left y coordinate of the Rect.</summary>
        </member>
        <member name="P:Northwoods.Go.Rect.Width">
            <summary>Gets or sets the width of the Rect. The value must not be negative.</summary>
        </member>
        <member name="P:Northwoods.Go.Rect.Height">
            <summary>Gets or sets the height of the Rect. The value must not be negative.</summary>
        </member>
        <member name="M:Northwoods.Go.Rect.Parse(System.String)">
            <summary>
            This static method can be used to read in a <see cref="T:Northwoods.Go.Rect"/> from a string that was produced by <see cref="M:Northwoods.Go.Rect.Stringify(Northwoods.Go.Rect)"/>.
            </summary>
            <remarks>
            `Rect.Parse("1 2 3 4")` produces the Rect `new Rect(1, 2, 3, 4)`.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Rect.Parse(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Rect.Parse(System.String)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.Converter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Rect.Stringify(Northwoods.Go.Rect)">
            <summary>
            This static method can be used to write out a <see cref="T:Northwoods.Go.Rect"/> as a string that can be read by <see cref="M:Northwoods.Go.Rect.Parse(System.String)"/>.
            </summary>
            <remarks>
            `Rect.Stringify(new Rect(1, 2, 3, 4))` produces the string "1 2 3 4".
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Rect.Stringify(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Rect.Stringify(Northwoods.Go.Rect)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.BackConverter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Rect.ToString">
            <summary>
            Returns a string representation of the rectangle.
            </summary>
            <returns>A string representation of the current rectangle.</returns>
        </member>
        <member name="M:Northwoods.Go.Rect.op_Equality(Northwoods.Go.Rect,Northwoods.Go.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Rect.op_Inequality(Northwoods.Go.Rect,Northwoods.Go.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Rect.Equals(System.Object)">
            <summary>
            Indicates whether the given Rect is equal to the current Rect.
            </summary>
            <param name="obj">The rectangle to compare to the current rectangle.</param>
            <returns>True if the Rects are equivalent in x, y, width,
            and height.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Equals(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Equals(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Indicates whether the given Rect is equal to the current Rect.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w">the width.</param>
            <param name="h">the height.</param>
            <returns>True if the Rects are equivalent in x, y, width, and height.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Equals(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.EqualsApprox(Northwoods.Go.Rect)">
            <summary>
            Indicates whether the given Rect is nearly equal to this Rect.
            </summary>
            <param name="r">The Rect to compare to the current Rect.</param>
            <returns>True if the two Rects have respective X, Y, Width,
            and Height values within 0.5, false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Rect.EqualsApproxClose(Northwoods.Go.Rect)">
            <summary>
            Indicates whether the given Rect is very nearly equal to this Rect.
            </summary>
            <param name="r">The Rect to compare to the current Rect.</param>
            <returns>True if the two Rects have respective X, Y, Width,
            and Height values within 0.00000005, false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Rect.Contains(Northwoods.Go.Point)">
            <summary>
            Indicates whether this Rect contains the given Point.
            </summary>
            <param name="p">The Point to check.</param>
            <returns>True if the Point is contained within this Rect,
            false otherwise.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Contains(System.Double,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:Northwoods.Go.Rect.Contains(Northwoods.Go.Rect)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Contains(Northwoods.Go.Rect)">
            <summary>
            Indicates whether this Rect contains the given Rect.
            </summary>
            <param name="r">The Rect to check.</param>
            <returns>True if the Rect is contained within this Rect,
            false otherwise.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Contains(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Rect.Contains(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Indicates whether this Rect contains the given Point/Rect.
            </summary>
            <param name="x">The X coordinate of the Point or Rect to include in the new bounds.</param>
            <param name="y">The Y coordinate of the Point or Rect to include in the new bounds.</param>
            <param name="w">The Width of the Rect to include in the new bounds, defaults to zero.</param>
            <param name="h">The Height of the Rect to include in the new bounds, defaults to zero.</param>
            <returns>True if the Point/Rect is contained within this Rect,
            false otherwise.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Contains(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Rect.Contains(Northwoods.Go.Rect)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Offset(System.Double,System.Double)">
            <summary>
            Returns a new Rect by shifting this Rect's x and y values with the given DX and DY offsets.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns>A new Rect.</returns>
        </member>
        <member name="M:Northwoods.Go.Rect.Inflate(System.Double,System.Double)">
            <summary>
            Returns a new Rect that is this Rect with its width and height changed on all four sides,
            equally on the left and right sides, and equally on the top and bottom sides.
            When the arguments are negative, this operation deflates this Rect, but not beyond zero.
            </summary>
            <param name="w">The additional width on each side, left and right; may be negative.</param>
            <param name="h">The additional height on each side, top and bottom; may be negative.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Deflate(System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Deflate(System.Double,System.Double)">
            <summary>
            Returns a new Rect that is this Rect with its width and height changed on all four sides,
            equally on the left and right sides, and equally on the top and bottom sides.
            This will not deflate the Rect beyond zero.
            This method is the same as calling <see cref="M:Northwoods.Go.Rect.Inflate(System.Double,System.Double)"/> with negative parameters.
            </summary>
            <param name="w">The subtracted width on each side, left and right.</param>
            <param name="h">The subtracted height on each side, top and bottom.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Inflate(System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Inflate(Northwoods.Go.Margin)">
            <summary>
            Returns a new Rect that is this Rect with the given Margin added to each side.
            </summary>
            <param name="m">The Margin to add to the Rect.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Deflate(Northwoods.Go.Margin)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Deflate(Northwoods.Go.Margin)">
            <summary>
            Returns a new Rect that is this Rect with the given Margin subtracted from each side.
            </summary>
            <param name="m">The Margin to subtract from the Rect.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Inflate(Northwoods.Go.Margin)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Inflate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a new Rect that is this Rect with some distance added to each side.
            </summary>
            <param name="t">the amount to move the top side upwards; may be negative.</param>
            <param name="r">the amount to move the right side rightwards; may be negative.</param>
            <param name="b">the amount to move the bottom side downwards; may be negative.</param>
            <param name="l">the amount to move the left side leftwards; may be negative.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Deflate(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Deflate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a new Rect that is this Rect with some distance subtracted from each side.
            This will not deflate the Rect beyond zero.
            This method is the same as calling <see cref="M:Northwoods.Go.Rect.Inflate(System.Double,System.Double,System.Double,System.Double)"/> with negative parameters.
            </summary>
            <param name="t">the amount to move the top side downwards.</param>
            <param name="r">the amount to move the right side leftwards.</param>
            <param name="b">the amount to move the bottom side upwards.</param>
            <param name="l">the amount to move the left side rightwards.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Inflate(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Intersect(Northwoods.Go.Rect)">
            <summary>
            Returns a new Rect that is the intersection of this Rect and the given Rect.
            </summary>
            <param name="r">Rect to intersect with.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Intersect(System.Double,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:Northwoods.Go.Rect.Intersects(Northwoods.Go.Rect)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Intersect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a new Rect that is the intersection of this Rect and the rectangle
            defined by x, y, w, h.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Intersect(Northwoods.Go.Rect)"/>
            <seealso cref="M:Northwoods.Go.Rect.Intersects(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Intersects(Northwoods.Go.Rect)">
            <summary>
            Determine if a given Rect is partly or wholly inside of this Rect.
            </summary>
            <param name="r">Rect to test intersection with.</param>
            <returns>true if there is an intersection.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Intersects(System.Double,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:Northwoods.Go.Rect.Intersect(Northwoods.Go.Rect)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determine if this Rect partly or wholly overlaps the rectangle
            defined by x, y, w, h.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <returns>true if there is any overlap.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Intersects(Northwoods.Go.Rect)"/>
            <seealso cref="M:Northwoods.Go.Rect.Intersect(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.IntersectsRectPlus(Northwoods.Go.Rect,System.Double)">
            <summary>
            Faster with added-in rect expansion
            Assumes no NaN or Infinity values
            </summary>
            <param name="r">Rect to test intersection with.</param>
            <param name="expansion">to expand r on all sides. Can be zero.</param>
            <returns>true if there is an intersection.</returns>
        </member>
        <member name="M:Northwoods.Go.Rect.Union(Northwoods.Go.Point)">
            <summary>
            Returns a new Rect that is exactly big enough to contain this Rect and the given Point.
            </summary>
            <param name="p">The Point to include in the new bounds.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Union(Northwoods.Go.Rect)"/>
            <seealso cref="M:Northwoods.Go.Rect.Union(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Union(Northwoods.Go.Rect)">
            <summary>
            Returns a new Rect that is exactly big enough to contain this Rect and the given Rect.
            </summary>
            <param name="r">The Rect to include in the new bounds.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Union(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Rect.Union(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.Union(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a new Rect that is exactly big enough to contain this Rect and the given rectangular area.
            </summary>
            <param name="x">The X coordinate of the Rect to include in the new bounds.</param>
            <param name="y">The Y coordinate of the Rect to include in the new bounds.</param>
            <param name="w">The Width of the Rect to include in the new bounds, defaults to zero.</param>
            <param name="h">The Height of the Rect to include in the new bounds, defaults to zero.</param>
            <returns>A new Rect.</returns>
            <seealso cref="M:Northwoods.Go.Rect.Union(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Rect.Union(Northwoods.Go.Rect)"/>
        </member>
        <member name="M:Northwoods.Go.Rect.UnionNoCheck(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a new Rect that is exactly big enough to contain this Rect and the given rectangular area.
            </summary>
            <param name="x">The X coordinate of the Point or Rect to include in the new bounds.</param>
            <param name="y">The Y coordinate of the Point or Rect to include in the new bounds.</param>
            <param name="w">The Width of the Rect to include in the new bounds, defaults to zero.</param>
            <param name="h">The Height of the Rect to include in the new bounds, defaults to zero.</param>
            <returns>A new Rect.</returns>
        </member>
        <member name="M:Northwoods.Go.Rect.SetSpot(System.Double,System.Double,Northwoods.Go.Spot)">
            <summary>
            Returns a new Rect so that a given Spot in this Rect is at a given (x, y) point.
            The returned Rect's size will be the same as this Rect.
            </summary>
            <remarks>
            The result is meaningless if <see cref="M:Northwoods.Go.Spot.IsNoSpot"/> is true.
            </remarks>
            <param name="x">the point where the spot should be.</param>
            <param name="y">the point where the spot should be.</param>
            <param name="spot">a Spot; <see cref="M:Northwoods.Go.Spot.IsSpot"/> must be true.</param>
            <returns>A new Rect.</returns>
        </member>
        <member name="M:Northwoods.Go.Rect.Contains(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This static function indicates whether a Rect contains the given Point/Rect.
            </summary>
            <param name="rx">The X coordinate of a Rect.</param>
            <param name="ry">The Y coordinate of a Rect.</param>
            <param name="rw">The Width of a Rect.</param>
            <param name="rh">The Height of a Rect.</param>
            <param name="x">The X coordinate of the Point or Rect that might be in the bounds (RX, RY, RW, RH).</param>
            <param name="y">The Y coordinate of the Point or Rect that might be in the bounds (RX, RY, RW, RH).</param>
            <param name="w">The Width of the Rect to include in the new bounds, defaults to zero.</param>
            <param name="h">The Height of the Rect to include in the new bounds, defaults to zero.</param>
            <returns>True if the Point/Rect is contained within this Rect,
            false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Rect.Intersects(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This static function indicates whether a Rect partly or wholly overlaps the given Rect.
            </summary>
            <param name="rx">The X coordinate of a Rect.</param>
            <param name="ry">The Y coordinate of a Rect.</param>
            <param name="rw">The Width of a Rect.</param>
            <param name="rh">The Height of a Rect.</param>
            <param name="x">The X coordinate of the Point or Rect that might overlap the bounds (RX, RY, RW, RH).</param>
            <param name="y">The Y coordinate of the Point or Rect that might overlap the bounds (RX, RY, RW, RH).</param>
            <param name="w"></param>
            <param name="h"></param>
            <returns>true if there is any overlap.</returns>
        </member>
        <member name="M:Northwoods.Go.Rect.IntersectsLineSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This static function is true if a rectangular area is intersected by a finite straight line segment.
            </summary>
            <param name="x">The X coordinate of the rectangle to check for intersection with the line segment.</param>
            <param name="y">The Y coordinate of the rectangle to check for intersection with the line segment.</param>
            <param name="w">The Width of the rectangle to check for intersection with the line segment.</param>
            <param name="h">The Height of the rectangle to check for intersection with the line segment.</param>
            <param name="p1x">The X coordinate of one end of the line segment.</param>
            <param name="p1y">The Y coordinate of one end of the line segment.</param>
            <param name="p2x">The X coordinate of other end of the line segment.</param>
            <param name="p2y">The Y coordinate of other end of the line segment.</param>
            <returns>True if the given finite line segment intersects with the given rectangular area, false otherwise.</returns>
        </member>
        <member name="P:Northwoods.Go.Rect.Left">
            <summary>
            Gets or sets the leftmost value of the Rect.
            This is the same as the X value.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Rect.Top">
            <summary>
            Gets or sets the topmost value of the Rect.
            This is the same as the Y value.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Rect.Right">
            <summary>
            Gets or sets the x-axis value of the right of the Rect.
            This is equal to the sum of the x value and the width.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Rect.Bottom">
            <summary>
            Gets or sets the y-axis value of the bottom of the Rect.
            This is equal to the sum of the y value and the height.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Rect.Position">
            <summary>
            Gets or sets the x- and y-axis position of the Rect as a Point.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Rect.Size">
            <summary>
            Gets or sets the width and height of the Rect as a Size.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Rect.Center">
            <summary>
            Gets or sets the Point at the center of this Rect.
            Setting this property just shifts the X and Y values.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Rect.CenterX">
            <summary>
            Gets or sets the horizontal center X coordinate of the Rect.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Rect.CenterY">
            <summary>
            Gets or sets the vertical center Y coordinate of the Rect.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Rect.IsReal">
            <summary>True if this Rect has X, Y, Width, and Height values that are real numbers and not infinity.</summary>
        </member>
        <member name="M:Northwoods.Go.Rect.IsEmpty">
            <summary>True if this Rect has a Width and Height of zero.</summary>
        </member>
        <member name="M:Northwoods.Go.Rect.GetHashCode">
            <summary>
            Creates a hash code for the rectangle.
            </summary>
            <returns>A hash code for the current rectangle structure.</returns>
        </member>
        <member name="T:Northwoods.Go.Size">
            <summary>
            A Size describes a width and a height in two-dimensional coordinates.
            The width and height must both be non-negative.
            </summary>
            <remarks>
            Use the static functions <see cref="M:Northwoods.Go.Size.Parse(System.String)"/> and <see cref="M:Northwoods.Go.Size.Stringify(Northwoods.Go.Size)"/> to convert to and from
            a standard string representation that is independent of the current locale.
            </remarks>
            @category Geometry
        </member>
        <member name="M:Northwoods.Go.Size.#ctor(System.Double,System.Double)">
            <summary>
            The default constructor produces the Size(0,0).
            This constructor may take either zero arguments or two arguments.
            </summary>
            <param name="w">The initial width (must be non-negative).</param>
            <param name="h">The initial height (must be non-negative).</param>
        </member>
        <member name="P:Northwoods.Go.Size.Width">
            <summary>Gets or sets the width value of the Size. The value must not be negative.</summary>
        </member>
        <member name="P:Northwoods.Go.Size.Height">
            <summary>Gets or sets the height value of the Size. The value must not be negative.</summary>
        </member>
        <member name="M:Northwoods.Go.Size.Inflate(System.Double,System.Double)">
            <summary>
            Returns a new Size that is this Size with its width and height changed by the given distances.
            When the arguments are negative, this operation deflates this Size, but not beyond zero.
            </summary>
            <param name="w">The additional width, which must be a real number; may be negative.</param>
            <param name="h">The additional height, which must be a real number; may be negative.</param>
            <returns>A new Size.</returns>
        </member>
        <member name="M:Northwoods.Go.Size.Parse(System.String)">
            <summary>
            This static method can be used to read in a <see cref="T:Northwoods.Go.Size"/> from a string that was produced by <see cref="M:Northwoods.Go.Size.Stringify(Northwoods.Go.Size)"/>.
            </summary>
            <remarks>
            `Size.Parse("1 2")` produces the Size `new Size(1, 2)`.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Size.Parse(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Size.Parse(System.String)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.Converter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Size.Stringify(Northwoods.Go.Size)">
            <summary>
            This static method can be used to write out a <see cref="T:Northwoods.Go.Size"/> as a string that can be read by <see cref="M:Northwoods.Go.Size.Parse(System.String)"/>.
            </summary>
            <remarks>
            `Size.Stringify(new Size(1, 2))` produces the string "1 2".
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Size.Stringify(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Size.Stringify(Northwoods.Go.Size)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.BackConverter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Size.ToString">
            <summary>
            Returns a string representation of the size.
            </summary>
            <returns>A string representation of the current size.</returns>
        </member>
        <member name="M:Northwoods.Go.Size.op_Equality(Northwoods.Go.Size,Northwoods.Go.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Size.op_Inequality(Northwoods.Go.Size,Northwoods.Go.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Size.Equals(System.Object)">
            <summary>
            Indicates whether the given Size is equal to the current Size.
            </summary>
            <param name="obj">The Size to compare to the current Size.</param>
            <returns>True if the Sizes have the same width and height,
            false otherwise.</returns>
            <seealso cref="M:Northwoods.Go.Size.Equals(System.Double,System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Size.Equals(System.Double,System.Double)">
            <summary>
            Indicates whether the given size is equal to this Size.
            </summary>
            <param name="w">the width.</param>
            <param name="h">the height.</param>
            <returns>True if the Sizes have the same width and height,
            false otherwise.</returns>
            <seealso cref="M:Northwoods.Go.Size.Equals(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Size.EqualsApprox(Northwoods.Go.Size)">
            <summary>
            Indicates whether the given Size is nearly equal to this Size.
            </summary>
            <param name="s">The Size to compare to the current Size.</param>
            <returns>True if the two Sizes have Width and Height values that
            are equal with a tolerance of 0.5, false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Size.IsReal">
            <summary>True if this Size has Width and Height values that are real numbers and not infinity.</summary>
        </member>
        <member name="M:Northwoods.Go.Size.GetHashCode">
            <summary>
            Creates a hash code for the size.
            </summary>
            <returns>A hash code for the current size structure.</returns>
        </member>
        <member name="T:Northwoods.Go.Spot">
            <summary>
            A Spot represents a relative point from (0,0) to (1,1) within the bounds of
            a rectangular area plus an absolute offset.
            </summary>
            <remarks>
            Use the static functions <see cref="M:Northwoods.Go.Spot.Parse(System.String)"/> and <see cref="M:Northwoods.Go.Spot.Stringify(Northwoods.Go.Spot)"/> to convert to and from
            a standard string representation that is independent of the current locale.
            </remarks>
            @category Geometry
        </member>
        <member name="M:Northwoods.Go.Spot.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The default constructor produces the Spot(0, 0, 0, 0), at the top-left corner.
            </summary>
            <param name="x">The x value of the Spot, a fractional value between zero and one. Default is zero.</param>
            <param name="y">The y value of the Spot, a fractional value between zero and one. Default is zero.</param>
            <param name="offx">(Optional) The absolute x offset. Default is zero.</param>
            <param name="offy">(Optional) The absolute y offset. Default is zero.</param>
        </member>
        <member name="P:Northwoods.Go.Spot.X">
            <summary>
            Gets or sets the x value of the Spot, a fractional value between zero and one.
            </summary>
            <remarks>
            The Spot(0,0) of a rectangle is at the top-left corner.
            This value is commonly available as <see cref="F:Northwoods.Go.Spot.TopLeft"/>.
            The Spot(0.5,1) would be at the middle of the bottom side.
            That value is commonly available as <see cref="F:Northwoods.Go.Spot.Bottom"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Spot.Y">
            <summary>
            Gets or sets the y value of the Spot, a fractional value between zero and one.
            </summary>
            <remarks>
            The Spot(0,1) of a rectangle is at the bottom-left corner.
            This value is commonly available as <see cref="F:Northwoods.Go.Spot.BottomLeft"/>.
            The Spot(1,0.5) would be at the middle of the right side.
            That value is commonly available as <see cref="F:Northwoods.Go.Spot.Right"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Spot.OffsetX">
            <summary>
            Gets or sets the offsetX value of the Spot.
            The value may be negative.
            If this represents a side value instead of a specific spot, this value is meaningless.
            </summary>
            <remarks>
            A Spot(0,0,5,5) of a large rectangle is near the top-left corner, inside the rectangle.
            A Spot(1,1,5,5) would be near the bottom-right corner, outside the rectangle.
            A Spot(1,1,-5,-5) would also be near the bottom-right corner, but inside the rectangle.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Spot.OffsetY">
            <summary>
            Gets or sets the offsetY value of the Spot.
            The value may be negative.
            If this represents a side value instead of a specific spot, this value is meaningless.
            </summary>
            <remarks>
            A Spot(0,0,5,5) of a large rectangle is near the top-left corner, inside the rectangle.
            A Spot(1,1,5,5) would be near the bottom-right corner, outside the rectangle.
            A Spot(1,1,-5,-5) would also be near the bottom-right corner, but inside the rectangle.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Spot.Parse(System.String)">
            <summary>
            This static method can be used to read in a <see cref="T:Northwoods.Go.Spot"/> from a string that was produced by <see cref="M:Northwoods.Go.Spot.Stringify(Northwoods.Go.Spot)"/>.
            </summary>
            <remarks>
            `Spot.Parse("0 1 2 3")` produces the Spot `new Spot(0, 1, 2, 3)`.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Spot.Parse(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Spot.Parse(System.String)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.Converter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Spot.Stringify(Northwoods.Go.Spot)">
            <summary>
            This static method can be used to write out a <see cref="T:Northwoods.Go.Spot"/> as a string that can be read by <see cref="M:Northwoods.Go.Spot.Parse(System.String)"/>.
            </summary>
            <remarks>
            `Spot.Stringify(new Spot(0, 1, 2, 3))` produces the string "0 1 2 3".
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Spot.Stringify(System.Object)">
            <summary>
            This is a convenience method for <see cref="M:Northwoods.Go.Spot.Stringify(Northwoods.Go.Spot)"/> that can be used as a <see cref="P:Northwoods.Go.Models.Binding.BackConverter"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Spot.ToString">
            <summary>
            Returns a string representation of the spot.
            </summary>
            <returns>A string representation of the current spot.</returns>
        </member>
        <member name="M:Northwoods.Go.Spot.op_Equality(Northwoods.Go.Spot,Northwoods.Go.Spot)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Spot.op_Inequality(Northwoods.Go.Spot,Northwoods.Go.Spot)">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Spot.Equals(System.Object)">
            <summary>
            Two spots are equal if all four property values are the same.
            </summary>
            <param name="obj">The Spot to compare to the current Spot.</param>
            <returns>True if the two spots are equal, false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Spot.Opposite">
             <summary>
             Return a new spot that is opposite this spot.
             </summary>
             <remarks>
             The X and Y values will be an equal distance
             away from the center on the other side of the center.
             The OffsetX and OffsetY values are also negated.
            
             The result is meaningless if <see cref="M:Northwoods.Go.Spot.IsNoSpot"/> is true.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Spot.IncludesSide(Northwoods.Go.Spot)">
            <summary>
            This predicate is true if this Spot is a side that
            includes the side(s) given by the argument Spot.
            </summary>
            <param name="side"></param>
            <returns>false if either this Spot or the argument Spot is not a "Side";
            true if the side(s) that this Spot represents are a superset or the same set of
            sides represented by the argument Spot.</returns>
        </member>
        <member name="M:Northwoods.Go.Spot.IsSpot">
            <summary>True if this is a specific spot, not a side nor <see cref="F:Northwoods.Go.Spot.None"/>.</summary>
        </member>
        <member name="M:Northwoods.Go.Spot.IsNoSpot">
            <summary>True if this is an unspecific special spot, such as <see cref="F:Northwoods.Go.Spot.None"/> or one of the sides.</summary>
        </member>
        <member name="M:Northwoods.Go.Spot.IsSide">
            <summary>True if this is a special spot referring to one (or more) of the sides. This is false if the spot is <see cref="F:Northwoods.Go.Spot.None"/>.</summary>
        </member>
        <member name="M:Northwoods.Go.Spot.IsNone">
            <summary>True if this is a special spot referring to no particular spot or side.</summary>
        </member>
        <member name="M:Northwoods.Go.Spot.IsDefault">
            <summary>True if this is a special spot indicating that the real spot value will come from another source.</summary>
        </member>
        <member name="F:Northwoods.Go.Spot.None">
            <summary>
            Use this Spot value to indicate no particular spot --
            code looking for a particular point on an element will need to do their
            own calculations to determine the desired point depending on the
            circumstances.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.Default">
            <summary>
            Use this value to indicate that the real spot value is inherited from elsewhere.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.TopLeft">
            <summary>
            The specific point at the top-left corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.Top">
            <summary>
            The specific point at the center of the top side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.TopRight">
            <summary>
            The specific point at the top-right corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.Left">
            <summary>
            The specific point at the middle of the left side of bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.Center">
            <summary>
            The specific point at the very center of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.Right">
            <summary>
            The specific point at the middle of the right side of bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.BottomLeft">
            <summary>
            The specific point at the bottom-left corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.Bottom">
            <summary>
            The specific point at the middle of the bottom side of bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.BottomRight">
            <summary>
            The specific point at the bottom-right corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.TopSide">
            <summary>
            The set of points at the top side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.LeftSide">
            <summary>
            The set of points at the left side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.RightSide">
            <summary>
            The set of points at the right side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.BottomSide">
            <summary>
            The set of points at the bottom side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.TopBottomSides">
            <summary>
            The set of points at the top or bottom sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.LeftRightSides">
            <summary>
            The set of points at the left or right sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.TopLeftSides">
            <summary>
            The set of points at the top or left sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.TopRightSides">
            <summary>
            The set of points at the top or right sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.BottomLeftSides">
            <summary>
            The set of points at the left or bottom sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.BottomRightSides">
            <summary>
            The set of points at the right or bottom sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.NotTopSide">
            <summary>
            The set of points on all sides of the bounding rectangle except top side.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.NotLeftSide">
            <summary>
            The set of points on all sides of the bounding rectangle except left side.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.NotRightSide">
            <summary>
            The set of points on all sides of the bounding rectangle except right side.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.NotBottomSide">
            <summary>
            The set of points on all sides of bounding rectangle except bottom side.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Spot.AllSides">
            <summary>
            The set of points on all sides of the bounding rectangle.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Spot.GetHashCode">
            <summary>
            Creates a hash code for the spot.
            </summary>
            <returns>A hash code for the current spot structure.</returns>
        </member>
        <member name="T:Northwoods.Go.SpotJsonConverter">
            <summary>
            A JsonConverter which converts a Spot into a JSON representation.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Transform">
            <summary>
            The Transform class holds a transformation matrix.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Transform.Set(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Replace the transformation matrix of this Transform with the given values.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Set(Northwoods.Go.Transform)">
            @hidden @internal
            <summary>
            Replace the transformation matrix of this Transform with those of another Transform.
            </summary>
            <param name="t">the other Transform from which to copy the transformation matrix.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Copy">
            @hidden @internal
            <summary>
            Create a copy of this Transform, with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Equals(System.Object)">
            @hidden @internal
            <summary>
            Indicates whether the given Transform is equal to the current Transform.
            </summary>
            <param name="obj">The Transform to compare to the current Transform.</param>
            <returns>True if the two Transforms have identical matrixes,
            false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.IsIdentity">
            @hidden @internal
            <summary>
            Undocumented.
            </summary>
            <returns>True if this transformation is the identity transformation.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Reset">
            <summary>
            Resets the Transform's matrix to an identity matrix.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Multiply(Northwoods.Go.Transform)">
            @hidden @internal
            <summary>
            Modifies this Transform to be the product of this Transform with a given one.
            </summary>
            <param name="matrix"></param>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.MultiplyInverted(Northwoods.Go.Transform)">
            @hidden @internal
            <summary>
            Modifies this Transform to be the product of this Transform with the inverse of a given one.
            </summary>
            <param name="t"></param>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Invert">
            @hidden @internal
            <summary>
            Inverts this Transform matrix, modifying the matrix.
            </summary>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Rotate(System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Rotates the Transform's matrix clockwise by a given angle.
            This modifies this Transform.
            </summary>
            <param name="angle">The angle to rotate by.</param>
            <param name="rx">The X point to rotate about.</param>
            <param name="ry">The Y point to rotate about.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Translate(System.Double,System.Double)">
            @hidden @internal
            <summary>
            Translates this Transform's matrix by x and y.
            This modifies this Transform.
            </summary>
            <param name="x">The x-axis translation.</param>
            <param name="y">The y-axis translation.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Scale(System.Double)">
            @hidden @internal
            <summary>
            Scales this Transform's matrix by scale.
            This modifies this Transform.
            </summary>
            <param name="scale">A number, that may be negative,
            but probably should not be zero.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.Scale(System.Double,System.Double)">
            @hidden @internal
            <summary>
            Scales this Transform's matrix by sx and sy.
            This modifies this Transform.
            </summary>
            <param name="sx">A number, that may be negative,
            but probably should not be zero.</param>
            <param name="sy">A number, that may be negative,
            but probably should not be zero.</param>
            <returns>this.</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.GetAngle">
            @hidden @internal
            <summary>
            Computes the angle at which this matrix is rotated.
            </summary>
            <returns>angle in degrees, 0 &lt;= a &lt; 360</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.TransformPoint(Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            Returns a new transformed Point.
            </summary>
            <param name="p">The point to transform with this Transform.</param>
            <returns>a new transformed Point</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.InvertedTransformPoint(Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            Inversely transforms the given Point and returns the result.
            </summary>
            <param name="p">The point to transform with the inverse of this Transform.</param>
            <returns>a new transformed Point</returns>
        </member>
        <member name="M:Northwoods.Go.Transform.TransformRect(Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Transforms a rectangle (X, Y, W, H) and returns the result.
            </summary>
            <param name="rect">the Rect to transform with this Transform.</param>
            <returns>a new transformed Rect</returns>
        </member>
        <member name="T:Northwoods.Go.Adornment">
             <summary>
             An Adornment is a special kind of <see cref="T:Northwoods.Go.Part"/> that is associated with another Part,
             the <see cref="P:Northwoods.Go.Adornment.AdornedPart"/>.
             </summary>
             <remarks>
             Adornments are normally associated with a particular <see cref="T:Northwoods.Go.GraphObject"/> in the adorned Part --
             that is the value of <see cref="P:Northwoods.Go.Adornment.AdornedElement"/>.
             However, the <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> may be null, in which case the <see cref="P:Northwoods.Go.Adornment.AdornedPart"/> will also be null.
            
             The area occupied by the adorned element is represented in the Adornment's visual tree by a <see cref="P:Northwoods.Go.Adornment.Placeholder"/>.
             The placeholder is always the <see cref="P:Northwoods.Go.Part.LocationElement"/>,
             although you may specify any <see cref="T:Northwoods.Go.Spot"/> as the <see cref="P:Northwoods.Go.Part.LocationSpot"/>.
             An adornment need not have a placeholder, but it may have at most one.
            
             Adornments can be distinguished by their <see cref="P:Northwoods.Go.Part.Category"/>.
             This property can be an arbitrary string value determined by the code creating the adornment,
             typically a tool that wants to be able to tell various adornments apart from each other.
             Use the <see cref="M:Northwoods.Go.Part.FindAdornment(System.String)"/> method to find an adornment for a part of a given category.
            
             For example, one of the Adornments created by <see cref="M:Northwoods.Go.Part.UpdateAdornments"/> when the part
             <see cref="P:Northwoods.Go.Part.IsSelected"/> has the <see cref="P:Northwoods.Go.Part.Category"/> of "Selection".
             Those created by <see cref="M:Northwoods.Go.Tools.ResizingTool.UpdateAdornments(Northwoods.Go.Part)"/> have a category of "Resize"
             and normally contain eight resize handles.
            
             Besides the selection Adornment and tool Adornments, Adornments are also used for
             context menus and tooltips.
             The <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> in such cases refers to the <see cref="T:Northwoods.Go.GraphObject"/> to which the
             the context menu or tooltip applies.
            
             There cannot be any links connected to an Adornment,
             nor can an Adornment have members or be a member of a group.
            
             An Adornment cannot have its own Adornments.
             An Adornment cannot be selected.
            
             Adornments are not positioned by a <see cref="T:Northwoods.Go.Layouts.Layout"/> because they are normally positioned
             according to the Part that they adorn.
            
             For more discussion and examples, see <a href="../../intro/selection.Html">Selection</a>,
             <a href="../../intro/toolTips.Html">ToolTips</a>,
             <a href="../../intro/contextMenus.Html">Context Menus</a>, and
             <a href="../../intro/tools.Html">Tools</a>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Adornment.#ctor">
            <summary>
            Constructs an empty Adornment.
            </summary>
            <remarks>
            The default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Adornment.#ctor(Northwoods.Go.PanelLayouts.PanelLayout)">
            <summary>
            Constructs an empty Adornment.
            The panel type must be one of the values permitted by <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <param name="type">if null, the default Panel is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Adornment.#ctor(System.String)">
            <summary>
            Constructs an empty Adornment.
            The panel type can be a string describing one of the built <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/> types.
            </summary>
            <param name="type">if the empty string, the default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Adornment.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Copies properties to a cloned Adornment.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Adornment.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Adornment.UpdateRelationshipsFromData">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Adornment.MakeShapeGeometry(System.Boolean)">
            @hidden @internal
            <summary>
            Only for Link Adornments
            </summary>
            <param name="force">true if you want to re-create the geometry even if one exists and the route is valid</param>
        </member>
        <member name="P:Northwoods.Go.Adornment.Placeholder">
            <summary>
            This read-only property returns a <see cref="P:Northwoods.Go.Adornment.Placeholder"/> that this Adornment may contain in its visual tree.
            </summary>
            <remarks>
            This may be null if there is no such placeholder element.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Adornment.AdornedElement">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GraphObject"/> that is adorned.
            </summary>
            <remarks>
            Setting this property updates the adorned element's Part by calling <see cref="M:Northwoods.Go.Part.AddAdornment(System.String,Northwoods.Go.Adornment)"/>.
            This may be null if the Adornment does not adorn a particular element.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Adornment.AdornedPart">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Part"/> that contains the adorned element.
            </summary>
            <remarks>
            This will be null if the <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> is null.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Adornment.IsReadyToMeasureArrange">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Adornment.IsNodeLike">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Adornment.ContainingGroup">
            @hidden @internal
            <summary>
            This read-only property returns always returns null; it cannot be set.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Adornment.RaisePartChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <summary>
            Call this method to notify that the some state has changed.
            This just calls the <see cref="T:Northwoods.Go.Diagram"/>'s <see cref="M:Northwoods.Go.Diagram.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/> method.
            </summary>
            <param name="change">specifies the general nature of the change;
            permissible values include <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>, <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>,
            <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>, and <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.</param>
            <param name="propertyname">names the property that was modified.</param>
            <param name="obj">the object that was modified, typically a <see cref="T:Northwoods.Go.GraphObject"/>.</param>
            <param name="oldval">the previous or older value.</param>
            <param name="newval">the next or newer value.</param>
            <param name="oldparam">an optional value that helps describe the older value.</param>
            <param name="newparam">an optional value that helps describe the newer value.</param>
        </member>
        <member name="M:Northwoods.Go.Adornment.UpdateAdornments">
            @hidden @internal
            <summary>
            Adornments cannot have any of their own Adornments, so this method is always a no-op.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Adornment.DeleteCascade">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Adornment.Show(Northwoods.Go.GraphObject,Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)">
             <summary>
            
             </summary>
             <param name="g"></param>
             <param name="d"></param>
             <param name="t"></param>
        </member>
        <member name="M:Northwoods.Go.Adornment.Hide(Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)">
             <summary>
            
             </summary>
             <param name="d"></param>
             <param name="t"></param>
        </member>
        <member name="M:Northwoods.Go.Adornment.Add(Northwoods.Go.GraphObject[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Add(Northwoods.Go.RowDefinition[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.RowDefinition[])"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Add(Northwoods.Go.ColumnDefinition[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.ColumnDefinition[])"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Set(Northwoods.Go.Adornment)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Apply(System.Action{Northwoods.Go.Adornment})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.Adornment.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="T:Northwoods.Go.Builder">
            <summary>
            This static class allows for the creation of GraphObjects via predefined builders, and for the definition of custom builder functions.
            </summary>
            <remarks>
            Predefined builder names include: <c>"Button"</c>, <c>"TreeExpanderButton"</c>, <c>"SubGraphExpanderButton"</c>, <c>"PanelExpanderButton"</c>, and <c>"ContextMenuButton"</c>.
            The implementation of these builders is provided by Buttons.cs in the Extensions directory.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Builder.DefineBuilder(System.String,System.Func{System.Object[],Northwoods.Go.GraphObject})">
             <summary>
             This static function defines a named function that <see cref="M:Northwoods.Go.Builder.Make``1(System.String,System.Object[])"/> can use to build elements.
             Once this is called one can use the name as the first argument for <see cref="M:Northwoods.Go.Builder.Make``1(System.String,System.Object[])"/>.
             Names are case sensitive.
             </summary>
             <remarks>
             The second argument must be a function that returns a newly created element, typically a <see cref="T:Northwoods.Go.GraphObject"/>.
             It is commonplace for that element to be a <see cref="T:Northwoods.Go.Panel"/> holding a newly created visual tree of GraphObjects.
             The function receives as its only argument an Array that is holds all of the arguments that are being passed to <see cref="M:Northwoods.Go.Builder.Make``1(System.String,System.Object[])"/>,
             which it may modify in order to change the arguments that Make receives.
            
             Predefined builder names include: <c>"Button"</c>, <c>"TreeExpanderButton"</c>, <c>"SubGraphExpanderButton"</c>, <c>"PanelExpanderButton"</c>, and <c>"ContextMenuButton"</c>.
             The implementation of these builders is provided by Buttons.cs in the Extensions directory.
             </remarks>
             <param name="name">a capitalized name; must not be <c>""</c> or <c>"None"</c></param>
             <param name="func">takes an array of arguments and returns a new GraphObject</param>
        </member>
        <member name="M:Northwoods.Go.Builder.TakeBuilderArgument(System.Object[]@)">
            <summary>
            This static method returns the first argument from the arguments passed to <see cref="M:Northwoods.Go.Builder.Make``1(System.String,System.Object[])"/>.
            This requires the first argument to be a string.
            </summary>
            <param name="args">the arguments Array passed to the builder function;
            this may be modified if an acceptable argument is found and returned</param>
            <returns>the first argument</returns>
        </member>
        <member name="M:Northwoods.Go.Builder.TakeBuilderArgument(System.Object[]@,System.String)">
            <summary>
            This static method returns the first argument from the arguments passed to <see cref="M:Northwoods.Go.Builder.Make``1(System.String,System.Object[])"/>.
            The first argument should be a string. If it isn't, the default value will be returned.
            </summary>
            <param name="args">the arguments Array passed to the builder function;
            this may be modified if an acceptable argument is found and returned</param>
            <param name="defval">the default value if the first argument doesn't exist or isn't a string</param>
            <returns>the first argument, if it is a string, or the provided default value</returns>
        </member>
        <member name="M:Northwoods.Go.Builder.TakeBuilderArgument(System.Object[]@,System.Object,System.Predicate{System.Object})">
            <summary>
            This static method returns the first argument from the arguments passed to <see cref="M:Northwoods.Go.Builder.Make``1(System.String,System.Object[])"/>.
            By default this requires the first argument to be a string,
            but you can provide a predicate to determine whether the argument is suitable.
            </summary>
            <param name="args">the arguments Array passed to the builder function;
            this may be modified if an acceptable argument is found and returned</param>
            <param name="defval">the default value to return if the argument is optional and not present as the first argument</param>
            <param name="pred">a predicate to determine the acceptability of the argument;
            the default predicate checks whether the argument is a string</param>
            <returns>the first argument or the provided default value</returns>
        </member>
        <member name="M:Northwoods.Go.Builder.Make``1(System.String,System.Object[])">
            <summary>
            Build a GraphObject from a predefined builder function or from one defined by <see cref="M:Northwoods.Go.Builder.DefineBuilder(System.String,System.Func{System.Object[],Northwoods.Go.GraphObject})"/>.
            </summary>
            <remarks>
            <code language="cs">
            Builder.Make&lt;Panel&gt;("ContextMenuButton")
              .Add(new TextBlock(text))
              .Set(new { Click = action })
              .Bind(visiblePred != null ? new Binding("Visible", "", visiblePred).OfElement() : null);
            </code>
            </remarks>
            <typeparam name="T">the desired return type of the make function</typeparam>
            <param name="name">a capitalized name of a defined builder</param>
            <param name="args">a set of arguments to be passed to the builder function</param>
            <returns>an GraphObject of type T</returns>
        </member>
        <member name="T:Northwoods.Go.Sizing">
            <summary>
            This enumeration specifies how rows and columns deal with extra space.
            Used for <see cref="P:Northwoods.Go.RowDefinition.Sizing"/> and <see cref="P:Northwoods.Go.ColumnDefinition.Sizing"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Sizing.None">
            <summary>
            The default if none is specified on the Table Panel's RowSizing and ColumnSizing.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Sizing.Default">
            <summary>
            The default, which resolves to <see cref="F:Northwoods.Go.Sizing.None"/> or else
            the Table Panel's RowSizing and ColumnSizing if present.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Sizing.ProportionalExtra">
            <summary>
            If a Table Panel is larger than all the rows/columns then this grants this row/column and any others with the same value the extra space,
            apportioned proportionally between them.
            </summary>
        </member>
        <member name="T:Northwoods.Go.ColumnDefinition">
            <summary>
            The ColumnDefinition class describes constraints on a column
            in a <see cref="P:Northwoods.Go.ColumnDefinition.Panel"/> of type <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/>.
            It also provides information about the actual layout after the
            Table Panel has been arranged.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.#ctor">
            <summary>
            You should not use this Constructor, because calls to <see cref="M:Northwoods.Go.Panel.GetColumnDefinition(System.Int32)"/>
            will automatically create and remember a ColumnDefinition for you.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Copy">
            Used by TableLayout, can't be internal...
            <summary>
            Create a copy of this ColumnDefinition, with the same values.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.CopyFrom(Northwoods.Go.ColumnDefinition)">
            Used by TableLayout, can't be internal...
            <summary>
            Modify this ColumnDefinition by copying the settable properties from another ColumnDefinition.
            This is called by Panel.Add and TableLayout.Add.
            </summary>
            <param name="cd">The ColumnDefinition whose properties should be copied into this one.</param>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.ComputeEffectiveSpacing(System.Int32)">
            <summary>
            (undocumented)
            Get the spacing at the left of the column.
            </summary>
            <seealso cref="M:Northwoods.Go.ColumnDefinition.ComputeEffectiveSpacing"/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.ComputeEffectiveSpacing">
            <summary>
            (undocumented)
            Get the total spacing for a column.
            </summary>
            <remarks>
            The value of <see cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorStrokeWidth"/> or <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/>,
            plus the left and right values of <see cref="P:Northwoods.Go.Panel.DefaultSeparatorPadding"/> or <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorPadding"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition._RaiseChanged(System.String,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <param name="pname">names the property that was modified.</param>
            <param name="oldval">the previous or older value.</param>
            <param name="newval">the next or newer value.</param>
            <param name="oldparam">an optional value that helps describe the older value.</param>
            <param name="newparam">an optional value that helps describe the newer value.</param>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.Panel">
            <summary>
            This read-only property returns the <see cref="P:Northwoods.Go.ColumnDefinition.Panel"/> that this column definition is in.
            </summary>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.Alignment">
             <summary>
             Gets or sets a default alignment for elements that are in this column.
             </summary>
             <remarks>
             The value must be a <see cref="T:Northwoods.Go.Spot"/>.
             The default value is <see cref="F:Northwoods.Go.Spot.Default"/>, so that this ColumnDefinition
             does not supply any alignment information for the column.
            
             When an element's <see cref="P:Northwoods.Go.GraphObject.Alignment"/> property is <see cref="F:Northwoods.Go.Spot.Default"/>,
             it gets the horizontal alignment from the element's column's <see cref="P:Northwoods.Go.ColumnDefinition.Alignment"/>
             and the vertical alignment from the element's row's <see cref="P:Northwoods.Go.RowDefinition.Alignment"/>.
             When that property is also Default,
             it takes the value from the table panel's <see cref="P:Northwoods.Go.Panel.DefaultAlignment"/> property.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Alignment"/>
             <seealso cref="P:Northwoods.Go.Panel.DefaultAlignment"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.Stretch">
             <summary>
             Gets or sets the default stretch for elements that are in this column.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Stretch.Default"/>, so that this ColumnDefinition
             does not supply any stretch information for the column.
            
             When an element's <see cref="P:Northwoods.Go.GraphObject.Stretch"/> property is <see cref="F:Northwoods.Go.Stretch.Default"/>,
             it gets the horizontal stretch from the element's column's <see cref="P:Northwoods.Go.ColumnDefinition.Stretch"/>
             and the vertical stretch from the element's row's <see cref="P:Northwoods.Go.RowDefinition.Stretch"/>.
             When that property is also Default,
             it takes the value from the table panel's <see cref="P:Northwoods.Go.Panel.DefaultStretch"/> property.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Stretch"/>
             <seealso cref="P:Northwoods.Go.Panel.DefaultStretch"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Sizing"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Width"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.SeparatorPadding">
             <summary>
             Gets or sets the additional padding for a particular column, in local coordinates.
             </summary>
             <remarks>
             Padding is applied on two sides - before and after a column's contents.
             The <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/> comes before any padding <see cref="P:Northwoods.Go.Margin.Left"/>.
            
             The default value is null, so that this ColumnDefinition
             does not supply any padding information for the column.
             There may still be some padding between columns if <see cref="P:Northwoods.Go.Panel.DefaultSeparatorPadding"/> is non-zero.
             </remarks>
             <seealso cref="P:Northwoods.Go.Panel.DefaultSeparatorPadding"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorStroke"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorDashArray"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Background"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.SeparatorStroke">
             <summary>
             Gets or sets the stroke (color) for the separator line that is drawn before a particular column,
             provided that column has a nonzero <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/>.
             </summary>
             <remarks>
             The default value is null, so that this ColumnDefinition
             does not specify any brush for the separator line to draw before the column.
             The line may still be drawn if the value of <see cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorStroke"/> is non-null.
            
             However, if no stroke color is specified, then no stroke width will be drawn,
             even if the <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/> value is non-zero.
             </remarks>
             <seealso cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorStroke"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorPadding"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorDashArray"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Background"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth">
            <summary>
            Gets or sets the stroke width for a particular column's separator line, in local coordinates.
            </summary>
            <remarks>
            The default value is NaN, so that this ColumnDefinition
            does not supply any stroke width information for what is drawn before the column.
            The separator line may still be drawn if <see cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorStroke"/>
            is a real number (defaults to 1).
            </remarks>
            <seealso cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorStrokeWidth"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorPadding"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorStroke"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorDashArray"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.Background"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.SeparatorDashArray">
             <summary>
             Gets or sets the dash array for dashing the separator line, provided this
             column has a nonzero <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/> and non-null <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStroke"/>.
             </summary>
             <remarks>
             Must be an array of positive numbers and zeroes,
             or else null to indicate a solid line.
            
             For example, the array [5, 10] would create dashes of 5 pixels and spaces of 10 pixels.
            
             Setting an array with all zeroes will set the value to null.
            
             Default is null, so that this ColumnDefinition
             does not supply any stroke dash array information for what is drawn before the column.
             The separator line may still be drawn using dashes if <see cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorDashArray"/> is non-null.
             </remarks>
             <seealso cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorDashArray"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorPadding"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorStroke"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Background"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.Background">
            <summary>
            Gets or sets the background color for a particular column,
            which fills the entire span of the column, including any SeparatorPadding.
            </summary>
            <remarks>
            The default value is null, which means nothing is drawn in the background of the column.
            </remarks>
            <seealso cref="P:Northwoods.Go.GraphObject.Background"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.CoversSeparators">
            <summary>
            Gets or sets whether or not the <see cref="P:Northwoods.Go.ColumnDefinition.Background"/>, if there is one, is in front of or behind the separators.
            </summary>
            <remarks>
            The default value is false -- any background is drawn behind any separator lines.
            </remarks>>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.Sizing">
            <summary>
            Gets or sets how this column deals with a Table Panel's extra space.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.Sizing.Default"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Panel.ColumnSizing"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.ActualWidth"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.TotalWidth"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.Width"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.Column">
            <summary>
            Gets or sets which column this ColumnDefinition describes in the <see cref="P:Northwoods.Go.ColumnDefinition.Panel"/>.
            The value is a zero-based integer.
            </summary>
            <remarks>
            This property can only be set on init.
            </remarks>
            <seealso cref="M:Northwoods.Go.Panel.FindColumnForLocalX(System.Double)"/>
            <seealso cref="P:Northwoods.Go.Panel.LeftIndex"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.ActualX"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.MinWidth">
            <summary>
            Gets or sets the minimum column width, in local coordinates.
            </summary>
            <remarks>
            The value must be non-negative and finite.
            The default value is zero.
            The arranged width of all elements in this column will be no less than this value.
            </remarks>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.Width"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.MaxWidth"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.Sizing"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.MaxWidth">
            <summary>
            Gets or sets the maximum column width, in local coordinates.
            </summary>
            <remarks>
            The value must be non-negative.
            The default value is Infinity.
            The arranged width of all elemnts in this column will be no greater than this value.
            </remarks>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.Width"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.MinWidth"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.Sizing"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.Width">
             <summary>
             Gets or sets the column width, in local coordinates.
             </summary>
             <remarks>
             The value must be non-negative and finite.
            
             The default value is NaN, which means this Column will get a width
             that is just big enough to hold all of the elements in the column.
            
             Setting this Value to a number will mean that all of the elements
             of this <see cref="P:Northwoods.Go.ColumnDefinition.Panel"/> in this Column will be allocated that
             amount of column width.
             Whether an element in the column is actually arranged to have that width
             depends on whether the <see cref="P:Northwoods.Go.GraphObject.Stretch"/> stretches horizontally.
             </remarks>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.MinWidth"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.MaxWidth"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Sizing"/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.GetEffectiveSizing">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.ActualWidth">
             <summary>
             Gets or sets the usable column width, after arrangement, in local coordinates,
             that elements in this column can be arranged within.
             </summary>
             <remarks>
             This does not include <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorPadding"/> or <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/>,
             as <see cref="P:Northwoods.Go.ColumnDefinition.TotalWidth"/> does.
            
             The value is meaningless until after the Table Panel using this
             ColumnDefinition has been arranged.
            
             It is very uncommon to set this property.
             </remarks>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.TotalWidth"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Width"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Sizing"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.MeasuredWidth">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.TotalWidth">
             <summary>
             This read-only property returns the total arranged column width, after arrangement, in local coordinates.
             </summary>
             <remarks>
             This value gives the <see cref="P:Northwoods.Go.ColumnDefinition.ActualWidth"/> size plus the <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorPadding"/>
             and <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/>.
            
             This value gives the horizontal space occupied by the column.
             The value is meaningless until after the Table Panel using this
             ColumnDefinition has been arranged.
             </remarks>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.ActualWidth"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Width"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Sizing"/>
        </member>
        <member name="P:Northwoods.Go.ColumnDefinition.ActualX">
             <summary>
             Gets or sets the actual arranged column starting X position, after arrangement, in local coordinates.
             </summary>
             <remarks>
             The value is meaningless until after the Table Panel using this
             ColumnDefinition has been arranged.
            
             It is very uncommon to set this property.
             </remarks>
             <seealso cref="M:Northwoods.Go.Panel.FindColumnForLocalX(System.Double)"/>
             <seealso cref="P:Northwoods.Go.Panel.LeftIndex"/>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.Column"/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition._Bind(Northwoods.Go.Models.Binding)">
            <summary>
            Add a data-binding of a property on this Object to a property on a data object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(Northwoods.Go.Models.Binding[])">
             <summary>
             Add a number of data-bindings to this ColumnDefinition.
             </summary>
             <remarks>
             Do not add, modify, or remove object Bindings after this object has been copied.
            
             Read more about <see cref="T:Northwoods.Go.Models.Binding"/>s at <a href="../../intro/dataBinding.Html">the Introduction page about Data Bindings</a>.
             </remarks>
             <param name="bindings">the Bindings</param>
             <returns>this ColumnDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
             <summary>
             Add a number of data-bindings to this ColumnDefinition.
             </summary>
             <remarks>
             Do not add, modify, or remove object Bindings after this object has been copied.
            
             Read more about <see cref="T:Northwoods.Go.Models.Binding"/>s at <a href="../../intro/dataBinding.Html">the Introduction page about Data Bindings</a>.
             </remarks>
             <param name="bindings">a collection of Bindings</param>
             <returns>this ColumnDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <summary>
            Add a data-binding to this ColumnDefinition for the given property name and optional conversion functions.
            </summary>
            <param name="prop">the source and target property name</param>
            <param name="conv">an optional conversion function</param>
            <param name="backconv">an optional back-conversion function</param>
            <returns>this ColumnDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.ColumnDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.ColumnDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.ColumnDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <summary>
            Add a data-binding to this ColumnDefinition for the given property names and conversion functions.
            </summary>
            <param name="targetprop">the target property on the ColumnDefinition</param>
            <param name="sourceprop">the source property on the data object</param>
            <param name="conv">an optional conversion function</param>
            <param name="backconv">an optional back-conversion function</param>
            <returns>this ColumnDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.ColumnDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.ColumnDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.ColumnDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Set(System.String,System.Object)">
            <summary>
            Set a property of this ColumnDefinition to a value.
            </summary>
            <remarks>
            <p class="boxread">
            Calling this method is much less efficient than setting properties directly.
            It's acceptable to call when constructing templates, as that will only happen once.
            </p>
            </remarks>
            <param name="propertyname">the name of the property to set</param>
            <param name="value">the value to set the property to</param>
            <returns>this ColumnDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Set(Northwoods.Go.ColumnDefinition)">
             <summary>
             Set properties of this ColumnDefinition to the values of a "partial" ColumnDefinition.
             </summary>
             <remarks>
             Only properties that are different from the default for the ColumnDefinition will be set in this manner.
            
             For example, the following will only set the Alignment and Stretch properties:
             <code language="cs">
             myColDef.Set(new ColumnDefinition {
               Alignment = Spot.Left,
               Stretch = Stretch.Horizontal,
               MinWidth = 0  // won't be set, even if this ColumnDefinition's MinWidth isn't 0
             })
             </code>
            
             <p class="boxread">
             Calling this method is much less efficient than setting properties directly.
             It's acceptable to call when constructing templates, as that will only happen once.
             </p>
             </remarks>
             <param name="obj">the partial ColumnDefinition to use for setting properties</param>
             <returns>this ColumnDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Set(System.Object)">
            <summary>
            Set properties of this ColumnDefinition to the values of a given anonymous object.
            </summary>
            <remarks>
            <p class="boxread">
            Calling this method is much less efficient than setting properties directly.
            It's acceptable to call when constructing templates, as that will only happen once.
            </p>
            </remarks>
            <param name="props">the dynamic object of properties</param>
            <returns>this ColumnDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.ColumnDefinition.Apply(System.Action{Northwoods.Go.ColumnDefinition})">
             <summary>
             Applies the given function to this ColumnDefinition and returns it.
             </summary>
             <remarks>
             This method is often used to apply some common styling to a number of templates.
            
             <code language="cs">
             // define some common property settings
             void tableStyle(ColumnDefinition cd) {
               cd.Bind("SeparatorStroke", "Color");
             }
            
             var template1 =
               new Node("Table") { ... }
                 .Add(
                   new ColumnDefinition().Apply(tableStyle)
                 );
            
             var template2 =
               new Node("Table") { ... }
                 .Add(
                   new ColumnDefinition().Apply(tableStyle)
                 );
             </code>
             </remarks>
             <param name="func">the function to apply to the ColumnDefinition</param>
             <returns>this ColumnDefinition</returns>
        </member>
        <member name="T:Northwoods.Go.Stretch">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.GraphObject.Stretch"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Stretch.Default">
            <summary>
            Scale the object depending on context, for instance uniformly for a "Circle" figure and non-uniformly for an "Ellipse" figure.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Stretch.None">
            <summary>
            Do not scale the object; there may be clipping in one or both directions if the available dimensions are too small.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Stretch.Horizontal">
            <summary>
            Scale the object as much as possible in the x-axis.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Stretch.Vertical">
            <summary>
            Scale the object as much as possible in the y-axis.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Stretch.Fill">
            <summary>
            Scale the object in both directions so as to fit exactly in the given bounds;
            there is no clipping, but the aspect ratio may change, causing the object to appear stretched.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Orientation">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Orientation.None">
            <summary>
            Do not rotate the object along the segment.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Orientation.Along">
            <summary>
            Rotate the object to have the same angle as the segment it is at; use this orientation for arrow heads.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Orientation.Plus90">
            <summary>
            Rotate the object clockwise 90 degrees to be perpendicular to the angle of the segment it is at.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Orientation.Minus90">
            <summary>
            Rotate the object counter-clockwise 90 degrees to be perpendicular to the angle of the segment it is at.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Orientation.Opposite">
            <summary>
            Rotate the object to be 180 degrees opposite from the angle of the segment it is at.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Orientation.Upright">
            <summary>
            Rotate the object to have the same angle as the segment it is at, just like <see cref="F:Northwoods.Go.Orientation.Along"/>, but never upside down;
            this is typically only use for <see cref="T:Northwoods.Go.TextBlock"/>s or <see cref="T:Northwoods.Go.Panel"/>s that contain text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Orientation.Plus90Upright">
            <summary>
            Rotate the object clockwise 90 degrees to be perpendicular to the angle of the segment it is at, just like <see cref="F:Northwoods.Go.Orientation.Plus90"/>,
            but never upside down; this is typically only use for <see cref="T:Northwoods.Go.TextBlock"/>s or <see cref="T:Northwoods.Go.Panel"/>s that contain text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Orientation.Minus90Upright">
            <summary>
            Rotate the object counter-clockwise 90 degrees to be perpendicular to the angle of the segment it is at, just like <see cref="F:Northwoods.Go.Orientation.Minus90"/>,
            but never upside down; this is typically only use for <see cref="T:Northwoods.Go.TextBlock"/>s or <see cref="T:Northwoods.Go.Panel"/>s that contain text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Orientation.Upright45">
            <summary>
            Rotate the object to have the same angle as the segment it is at, but never upside down and never angler more than +/- 45 degrees:
            when the segment's angle is with 45 degrees of vertical (90 or 270 degrees), the object's angle is set to zero;
            this is typically only use for <see cref="T:Northwoods.Go.TextBlock"/>s or <see cref="T:Northwoods.Go.Panel"/>s that contain text.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Flip">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Picture.Flip"/> and <see cref="P:Northwoods.Go.TextBlock.Flip"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Flip.None">
            <summary>
            Draw the object normally.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Flip.Vertical">
            <summary>
            Draw the object upside-down, with Y coordinate points increasing upwards.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Flip.Horizontal">
            <summary>
            Draw the object mirror-image, with X coordinate points increasing towards the left.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Flip.Both">
            <summary>
            Draw the object with both X and Y coordinates reversed.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GraphObject">
             <summary>
             This is the abstract base class for all graphical objects.
             Classes inheriting from GraphObject include:
             <see cref="T:Northwoods.Go.Shape"/>, <see cref="T:Northwoods.Go.TextBlock"/>, <see cref="T:Northwoods.Go.Picture"/>, and <see cref="T:Northwoods.Go.Panel"/>.
             From the Panel class the <see cref="T:Northwoods.Go.Part"/> class is derived, from which the
             <see cref="T:Northwoods.Go.Node"/> and <see cref="T:Northwoods.Go.Link"/> classes derive.
             </summary>
             <remarks>
             It is very common to make use of the functions <see cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/>,
             <see cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>,
             and <see cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/> in order to build up a visual tree of GraphObjects.
             You can see many examples of this throughout the Introduction,
             starting at <a href="../../intro/buildingObjects.Html">Building Objects</a>,
             and the Samples, starting with <a href="../../samples/minimal.Html">Minimal Sample</a>.
            
             Since GraphObject is an abstract class, programmers do not create GraphObjects themselves,
             but this class defines many properties used by all kinds of GraphObjects.
            
             The only visual property on GraphObject is <see cref="P:Northwoods.Go.GraphObject.Background"/>.
             However one can control whether the GraphObject is drawn at all by setting <see cref="P:Northwoods.Go.GraphObject.Visible"/>,
             or by setting <see cref="P:Northwoods.Go.GraphObject.Opacity"/> to zero if you still want the GraphObject to occupy space.
             Call the <see cref="M:Northwoods.Go.GraphObject.IsVisibleElement"/> predicate to determine whether the object is visible and
             all of its containing panels are visible.
             Also, if you want to control whether any mouse or touch events "see" the GraphObject,
             you can set <see cref="P:Northwoods.Go.GraphObject.Pickable"/> to false.
            
             For more information about specifying how things get drawn, see the properties on the
             <see cref="T:Northwoods.Go.Shape"/>, <see cref="T:Northwoods.Go.TextBlock"/>, and <see cref="T:Northwoods.Go.Picture"/> classes.
             <h3>GraphObject Sizing</h3>
            
             GraphObject defines most of the properties that cause objects to size themselves differently.
             The most prominent ones include:
               - The <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>, <see cref="P:Northwoods.Go.GraphObject.MinSize"/>, and <see cref="P:Northwoods.Go.GraphObject.MaxSize"/> properties are used to
                 explicitly set or limit the size of visual elements. <see cref="P:Northwoods.Go.GraphObject.Width"/> and <see cref="P:Northwoods.Go.GraphObject.Height"/> are
                 convenience properties that set the <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> width and height, respectively.
               - The <see cref="P:Northwoods.Go.GraphObject.Angle"/> and <see cref="P:Northwoods.Go.GraphObject.Scale"/> properties are used to transform visual elements.
               - The <see cref="P:Northwoods.Go.GraphObject.Stretch"/> property determines how a GraphObject will fill its visual space,
                 contextually granted to it by its containing <see cref="T:Northwoods.Go.Panel"/>. Top-level (<see cref="T:Northwoods.Go.Part"/>)
                 GraphObjects are not affected by this property because they are always granted infinite space.
            
             All GraphObjects in a Diagram are measured and then arranged by their containing <see cref="T:Northwoods.Go.Panel"/>s in a tree-like fashion.
             After measuring and arranging, a GraphObject will have valid values for the read-only
             properties <see cref="P:Northwoods.Go.GraphObject.NaturalBounds"/>, <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>, and <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
            
               - The <see cref="P:Northwoods.Go.GraphObject.NaturalBounds"/> of a GraphObject describe its local size,
                 without any transformations (<see cref="P:Northwoods.Go.GraphObject.Scale"/>, <see cref="P:Northwoods.Go.GraphObject.Angle"/>) affecting it.
               - The <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> of a GraphObject describe its size within its containing Panel.
               - The <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> of a GraphObject describe its position and given size inside of its panel.
                 This size may be smaller than <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>, for instance if a GraphObject with a large <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
                 is placed in a <see cref="T:Northwoods.Go.Panel"/> of a smaller <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>. Smaller <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> than <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>
                 typically means an object will be cropped.
            
             <p class="boxread">
             See <a href="../../intro/sizing.Html">the Introduction page on sizing</a>
             for usage information and examples.
             </p>
            
             <h3>GraphObject Size and Position within Panel</h3>
             Several GraphObject properties guide the containing <see cref="T:Northwoods.Go.Panel"/> for how to size and position the object within the panel.
            
               - The <see cref="P:Northwoods.Go.GraphObject.Alignment"/> specifies where the object should be relative to some area of the panel.
                 For example, an alignment value of <see cref="F:Northwoods.Go.Spot.BottomRight"/> means that the GraphObject should be at the bottom-right corner of the panel.
               - The <see cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/> specifies precisely which point of the GraphObject should be aligned at the <see cref="P:Northwoods.Go.GraphObject.Alignment"/> spot.
               - The <see cref="P:Northwoods.Go.GraphObject.Column"/> and <see cref="P:Northwoods.Go.GraphObject.Row"/> properties are only used by <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/> panels, to indicate where the GraphObject should be.
               - The <see cref="P:Northwoods.Go.GraphObject.ColumnSpan"/> and <see cref="P:Northwoods.Go.GraphObject.RowSpan"/> properties tell the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/> panel how large the GraphObject should be.
               - The <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> property indicates to some kinds of <see cref="T:Northwoods.Go.Panel"/>s that the GraphObject is the "primary" object
                 that other panel children should be measured with or positioned in.
               - The <see cref="P:Northwoods.Go.GraphObject.Margin"/> property tells the containing <see cref="T:Northwoods.Go.Panel"/> how much extra space to put around this GraphObject.
               - The <see cref="P:Northwoods.Go.GraphObject.Position"/> property is used to determine the relative position of GraphObjects when they are elements of a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/> panel.
            
             <p class="boxread">
             See <a href="../../intro/panels.Html">the Introduction page on Panels</a>
             and <a href="../../intro/tablePanels.Html">Table Panels</a> for an overview of the capabilities.
             </p>
            
             <h3>Top-level GraphObjects are Parts</h3>
            
             A <see cref="T:Northwoods.Go.Part"/> is a derived class of GraphObject representing a top-level object.
             All top-level GraphObjects must be Parts, and Node, Link, Group, and Adornment derive from Part.
             The position of a Part determines the point of the Part's top-left corner in document coordinates.
             See also <see cref="P:Northwoods.Go.Part.Location"/>, which supports an way to specify the position based on a different
             spot of a different element within the Part.
            
             There are several read-only properties that help navigate up the visual tree.
               - <see cref="P:Northwoods.Go.GraphObject.Panel"/> returns the <see cref="T:Northwoods.Go.Panel"/> that directly contains this GraphObject
               - <see cref="P:Northwoods.Go.GraphObject.Part"/> returns the <see cref="T:Northwoods.Go.Part"/> that this GraphObject is in, perhaps via intervening Panels;
                 this is frequently used in order to get to the model data, <see cref="P:Northwoods.Go.Panel.Data"/>
               - <see cref="P:Northwoods.Go.GraphObject.Layer"/> returns the <see cref="T:Northwoods.Go.Layer"/> that this GraphObject's Part is in
               - <see cref="P:Northwoods.Go.GraphObject.Diagram"/> returns the <see cref="T:Northwoods.Go.Diagram"/> that this GraphObject's Part's Layer is in
            
             <p class="boxrun">
             See <a href="../../samples/visualTree.Html">the Visual Tree sample</a>
             for a diagram displaying the visual tree of a simple diagram.
             </p>
            
             <h3>User Interaction</h3>
            
             GraphObjects have several properties enabling dynamic customizable interaction.
             There are several definable functions that execute on input events: <see cref="P:Northwoods.Go.GraphObject.MouseDragEnter"/>,
             <see cref="P:Northwoods.Go.GraphObject.MouseDragLeave"/>, <see cref="P:Northwoods.Go.GraphObject.MouseDrop"/>, <see cref="P:Northwoods.Go.GraphObject.MouseEnter"/>, <see cref="P:Northwoods.Go.GraphObject.MouseHold"/>,
             <see cref="P:Northwoods.Go.GraphObject.MouseHover"/>, <see cref="P:Northwoods.Go.GraphObject.MouseLeave"/>, and <see cref="P:Northwoods.Go.GraphObject.MouseOver"/>.
             For example, you could define mouse enter-and-leave event handlers to modify the appearance of a link
             as the mouse passes over it:
             <code language="cs">
             myDiagram.LinkTemplate =
               new Link()
                 .Add(
                   new Shape {
                     StrokeWidth = 2, Stroke = "gray",  // default color is "gray"
                     MouseEnter = (e, obj, prev) => { var shp = obj as Shape; shp.StrokeWidth = 4; shp.Stroke = "dodgerblue"; },
                     MouseLeave = (e, obj, prev) => { var shp = obj as Shape; shp.StrokeWidth = 2; shp.Stroke = "gray"; }
                   }
                 );
             </code>
            
             There are <see cref="P:Northwoods.Go.GraphObject.Click"/>, <see cref="P:Northwoods.Go.GraphObject.DoubleClick"/>, and <see cref="P:Northwoods.Go.GraphObject.ContextClick"/> functions
             that execute when a user appropriately clicks the GraphObject.
             These click functions are called with the <see cref="T:Northwoods.Go.InputEvent"/> as the first argument
             and this GraphObject as the second argument.
             For example, you could define a click event handler on a Node that goes to another page:
             <code language="cs">
             myDiagram.NodeTemplate =
               new Node(PanelLayoutAuto.Instance) {
                   // second arg will be this GraphObject, which in this case is the Node itself:
                   Click = (e, obj) => {
                     var d = ((Node)obj).Data as MyNodeData;
                     Console.WriteLine("Node key is " + d.Key);
                   }
                 }.Add(
                   new Shape("RoundedRectangle")
                     .Bind("Fill", "Color"),
                   new TextBlock { Name = "TB", Margin = 3 }
                     .Bind("Text", "Key")
                 );
             </code>
            
             Note: you may prefer defining <see cref="T:Northwoods.Go.DiagramEvent"/> listeners on the <see cref="T:Northwoods.Go.Diagram"/>
             rather than on individual GraphObjects.  DiagramEvents also include more general events that
             do not necessarily correspond to input events.
            
             The properties <see cref="P:Northwoods.Go.GraphObject.ActionCancel"/>, <see cref="P:Northwoods.Go.GraphObject.ActionDown"/>, <see cref="P:Northwoods.Go.GraphObject.ActionMove"/>,
             and <see cref="P:Northwoods.Go.GraphObject.ActionUp"/> define functions to execute when the GraphObject's <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> property
             is set to true (default false). See the <see cref="T:Northwoods.Go.Tools.ActionTool"/> for more detail.
            
             <p class="boxread">
             See <a href="../../intro/events.Html">the Introduction page on Events</a> for a more general discussion.
             </p>
            
             <h3>GraphObjects as Ports</h3>
            
             <see cref="T:Northwoods.Go.Link"/>s can only connect to elements within a <see cref="T:Northwoods.Go.Node"/>
             that are specified as "ports", and by default the only port is the Node itself.
             Setting the <see cref="P:Northwoods.Go.GraphObject.PortId"/> of a GraphObject inside a Node allows that object to act as a port.
             Note: the only kind of model that can save which port a link is connected with, i.e. portIds that are not an empty string,
             is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/> whose <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromPortIdProperty"/> and
             <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToPortIdProperty"/> have been set to name properties on the link data objects.
            
             GraphObjects have several properties that are only relevant when they are acting as ports.
             These port-related properties are:
               - <see cref="P:Northwoods.Go.GraphObject.PortId"/>, which must be set to a string that is unique within the <see cref="T:Northwoods.Go.Node"/>,
                 in order for this GraphObject to be treated as a "port", rather than the whole node
               - <see cref="P:Northwoods.Go.GraphObject.FromSpot"/> and <see cref="P:Northwoods.Go.GraphObject.ToSpot"/>, where a link should connect with this port
               - <see cref="P:Northwoods.Go.GraphObject.FromEndSegmentLength"/> and <see cref="P:Northwoods.Go.GraphObject.ToEndSegmentLength"/>, the length of the link segment adjacent to this port
               - <see cref="P:Northwoods.Go.GraphObject.FromShortLength"/> and <see cref="P:Northwoods.Go.GraphObject.ToShortLength"/>, the distance the link should terminate before touching this port
               - <see cref="P:Northwoods.Go.GraphObject.FromLinkable"/> and <see cref="P:Northwoods.Go.GraphObject.ToLinkable"/>, whether the user may draw links connecting with this port
               - <see cref="P:Northwoods.Go.GraphObject.FromLinkableDuplicates"/> and <see cref="P:Northwoods.Go.GraphObject.ToLinkableDuplicates"/>, whether the user may draw multiple links between the same pair of ports
               - <see cref="P:Northwoods.Go.GraphObject.FromLinkableSelfNode"/> and <see cref="P:Northwoods.Go.GraphObject.ToLinkableSelfNode"/>, whether the user may draw a link between ports on the same node
               - <see cref="P:Northwoods.Go.GraphObject.FromMaxLinks"/> and <see cref="P:Northwoods.Go.GraphObject.ToMaxLinks"/>, to limit the double of links connecting with this port in a particular direction
            
             <p class="boxread">
             See <a href="../../intro/ports.Html">the Introduction page on ports</a>
             and <a href="../../intro/links.Html">link routing</a>
             and <a href="../../intro/connectionPoints.Html">link connection points</a>
             for port usage information and examples.
             </p>
            
             <h3>GraphObjects as labels on a Link</h3>
            
             GraphObjects can also be used as "labels" on a <see cref="T:Northwoods.Go.Link"/>.
             In addition to the <see cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/> property, these properties direct a Link Panel
             to position a "label" at a particular point along the route of the link, in a particular manner:
               - <see cref="P:Northwoods.Go.GraphObject.SegmentIndex"/>, which segment the label should be on
               - <see cref="P:Northwoods.Go.GraphObject.SegmentFraction"/>, how far along the segment the label should be
               - <see cref="P:Northwoods.Go.GraphObject.SegmentOffset"/>, where the label should be positioned relative to the segment
               - <see cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/>, how the label should be rotated relative to the angle of the segment
            
             <p class="boxread">
             See <a href="../../intro/linkLabels.Html">the Introduction page on link labels</a>
             for examples of how to make use of labels on Links.
             </p>
            
             <h3>Interactive Behavior</h3>
            
             There are several properties that specify fairly high-level interactive behavior:
               - <see cref="P:Northwoods.Go.GraphObject.Cursor"/>, a CSS string specifying a cursor
               - <see cref="P:Northwoods.Go.GraphObject.ContextMenu"/>, an <see cref="T:Northwoods.Go.Adornment"/>
               - <see cref="P:Northwoods.Go.GraphObject.ToolTip"/>, an <see cref="T:Northwoods.Go.Adornment"/>
            
             <p class="boxread">
             For more information, please read <a href="../../intro/contextMenus.Html">the Introduction page about Context Menus</a>
             and <a href="../../intro/toolTips.Html">the page about ToolTips</a>.
             </p>
            
             <p class="boxrun">
             Also see <a href="../../samples/basic.Html">the Basic sample</a>
             for examples of how to show context menus and tooltips.
             </p>
             </remarks>
        </member>
        <member name="M:Northwoods.Go.GraphObject.#ctor">
            <summary>
            This is an abstract class, so you should not use this constructor.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.CloneProtected(Northwoods.Go.GraphObject)">
             <summary>
             Copies properties from this object to the given object, which must be of the same class.
             This is called by <see cref="M:Northwoods.Go.GraphObject.Copy"/>.
             This method may be overridden.
             </summary>
             <remarks>
             For every property that you add to a subclass of a GraphObject-inheriting class,
             in this method you should consider assigning its value to the copied object.
             By default, the base method will call MemberwiseClone(), so reference properties
             will be shallow copies by default.
            
             For example, let us define a custom <see cref="T:Northwoods.Go.Link"/> class and add two properties:
            
             <code language="cs">
             public class CustomLink : Link {
               public int SomeNewProperty { get; set; } = 17;
               public List&lt;double&gt; SomeNewProperty2 { get; set; } = new List&lt;double&gt;();
            
               protected override void CloneProtected(GraphObject c) {
                 // always call the base method in an override
                 base.CloneProtected(c);
                 var copy = (CustomLink)c;
                 // assign the reference property of the new copy:
                 copy.SomeNewProperty2 = new List&lt;double&gt;(SomeNewProperty2);  // make a copy of the list
               }
             }
             </code>
            
             This ensures that copies of GraphObjects and their subclasses are faithful reproductions.
             Consider for properties that are references to objects whether the reference should be shared (the default via MemberwiseClone)
             or whether that object value should be copied as well, resulting in a less shallow copy.
             This is demonstrated above by making a copy of the property value that is a List,
             so that modifications to the list will not be shared by copies of the CustomLink.
             Further copies of the list items might be warranted, depending on their purpose.
            
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.GraphObject.ApplyProtected(Northwoods.Go.GraphObject)">
            <summary>
            Copy properties from this object to the target object, which must be of the same class.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.DisplaceProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Fix up references in the argument object so that the argument object can displace this object in the visual tree.
            </summary>
            <param name="copy">This might be a copy of this object,
            but more likely is a separately created object of the same class with completely different internals.</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Clone">
            @hidden @internal
            <summary>
            Creates a shallow copy of this GraphObject and returns it.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GraphObject.CloneProtected(Northwoods.Go.GraphObject)"/> with a new object of the same class as this object.
            This is called by <see cref="M:Northwoods.Go.GraphObject.Copy"/>.
            </remarks>
            <returns>the newly copied object.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Copy">
            <summary>
            Creates a deep copy of this GraphObject and returns it.
            </summary>
            <remarks>
            This method is the same as a clone for simple GraphObjects
            such as <see cref="T:Northwoods.Go.Shape"/>, <see cref="T:Northwoods.Go.TextBlock"/>, and <see cref="T:Northwoods.Go.Picture"/>.
            For <see cref="T:Northwoods.Go.Panel"/> this method copies the visual tree of GraphObjects that it contains.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GraphObject.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.InitEventHandlers">
            @hidden @internal
            <summary>
            Set up the GraphObjectEventHandlers subproperty, only if needed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.InitLinkSettings">
            @hidden @internal
            <summary>
            Set up the LinkSettings subproperty for objects acting as ports, only if needed.
            Notice that the default values for general GraphObjects are different than those for Links.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
             @hidden @internal
             <summary>
             Call this method to notify that some state has changed.
             </summary>
             <remarks>
             This just calls the <see cref="T:Northwoods.Go.Part"/>'s <see cref="M:Northwoods.Go.Part.RaisePartChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/> method.
            
             A simpler version of this method is <see cref="M:Northwoods.Go.GraphObject.RaiseChanged(System.String,System.Object,System.Object)"/>.
             </remarks>
             <param name="change">specifies the general nature of the change;
             permissible values include <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>, <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>,
             <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>, and <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.</param>
             <param name="propertyname">names the property that was modified.</param>
             <param name="obj">the object that was modified.</param>
             <param name="oldval">the previous or older value.</param>
             <param name="newval">the next or newer value.</param>
             <param name="oldparam">an optional value that helps describe the older value.</param>
             <param name="newparam">an optional value that helps describe the newer value.</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.RemoveTrigger(Northwoods.Go.AnimationTrigger)">
            <summary>
            Called by Animations triggered by an Immediate AnimationTrigger when they stop
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.UpdateSourceBindings(Northwoods.Go.Part,System.String)">
            @hidden @internal
            <param name="part">provides context</param>
            <param name="propertyname"></param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.FindId(System.Int32)">
            @hidden @internal
            <summary>
            Used by data binding to find the unique object in a visual tree corresponding to a particular object in the template.
            This could cache references to reduce searching overhead.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.RaiseChanged(System.String,System.Object,System.Object)">
            @hidden @internal
            <summary>
            Call this method to notify about a property having changed value.
            This just calls the <see cref="T:Northwoods.Go.Part"/>'s <see cref="M:Northwoods.Go.Part.RaisePartChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/> method.
            </summary>
            <param name="propertyname">the name of the property.</param>
            <param name="oldval">the previous or old value for the property.</param>
            <param name="newval">the next or new value for the property.</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject._MeasureRect(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Shared code among each measureProtected routine. Sets measuredBounds.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.FindElementIn(Northwoods.Go.Rect,System.Boolean,Northwoods.Go.Transform)">
            @hidden @internal
            <param name="r">A Rect in container coordinates.</param>
            <param name="partialInclusion">True if objects are to be included when they intersect.</param>
            <param name="transform"></param>
            <returns>Whether or not this object is included.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.FindElementNear(Northwoods.Go.Point,Northwoods.Go.Point,System.Boolean)">
            @hidden @internal
            <param name="p">A Point in container coordinates.</param>
            <param name="distp">A Point representing the distance from the point p.</param>
            <param name="partialInclusion"></param>
            <returns>Whether or not this object is included.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.TrueTransform">
             @hidden @internal
             <summary>
             Determine if an object's transform should or should not affect its children.
             </summary>
             <remarks>
             This is only meaningful on Panel right now, and only for TableRow/TableColumn
             If this method returns true then the transform should not be applied to children,
             and calculations made with the object in question might need to substitute actual bounds for natural bounds,
             to simulate the transformation that is not occurring
            
             When going up or down the tree of transforms you must skip their transforms for child objects
             In other words in the visual tree: Table Panel -> TableRow -> Child
             The child's transform goes Table Panel -> Child
             TableRows and TableColumns still have their own transforms only for their own hit testing/drawing their own backgrounds
             But otherwise they do not participate in the nested transform tree.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Contains(Northwoods.Go.Point)">
             @hidden @internal
             <summary>
             Determine if a given point is inside and on this GraphObject.
             </summary>
             <remarks>
             This method tries to return true for points near a stroke or near or
             inside a possibly filled object such as an ellipse or a polygon.
             This method ignores any drop shadow, but normally includes the
             width of any line/stroke.
            
             The default behavior of this method is to return true if the
             point p is within this object's Bounds.
             If this object's width or height are zero,
             the given point p has to be exactly on for this predicate to return true.
            
             However, some classes that are inherently somewhat "one dimensional",
             may intentionally be more forgiving by supporting some margin nearby
             where a point can be considered to be "inside" the object.
             </remarks>
             <param name="p">A Point in container coordinates.</param>
             <returns>true if the argument p is considered to be "in" this object.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.ContainsProtected(Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            Determine if a point is within local bounds.
            </summary>
            <remarks>
            The default checks to see if the contained point is within the measured
            bounds. Most classes override this functionality.
            </remarks>
            <param name="p">A Point in local coordinates.</param>
            <returns>true if the argument p is considered to be "in" this object.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Contains(Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Determine if a given Rect is entirely contained within this GraphObject.
            </summary>
            <param name="r">A Rect in container coordinates.</param>
            <returns>true if the argument r is considered to be "in" this object.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.ContainedInRect(Northwoods.Go.Rect,Northwoods.Go.Transform)">
            @hidden @internal
            <summary>
            Determine if a given Rect is large enough to entirely contain this GraphObject.
            </summary>
            <param name="r">A Rect in container coordinates.</param>
            <param name="transform">A transform to use if something other than the GraphObject's own transform is desired.</param>
            <returns>true if rect r contains the entire object.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.IntersectsRect(Northwoods.Go.Rect,Northwoods.Go.Transform)">
            @hidden @internal
            <summary>
            Determines if a given rectangle intersects the GraphObject's drawn bounds.
            </summary>
            <param name="r">a rectangle in container coordinates.</param>
            <param name="transform"></param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetDocumentPoint(Northwoods.Go.Spot)">
            <summary>
            Returns the Point in document coordinates for a given Spot in this object's bounds.
            </summary>
            <remarks>
            For example, for an instance of a Node like this:
            <code language="cs">
              myDiagram.NodeTemplate =
                new Node(PanelLayoutAuto.Instance)
                  .Add(
                    new Shape("RoundedRectangle")
                      .Bind("Fill", "Color),
                    new TextBlock { Name = "TB", Margin = 3 }
                      .Bind("Text", "Key")
                  );
            </code>
            where the Node is positioned at `100, 200`,
            <code language="cs">
              node.FindElement("TB").GetDocumentPoint(Spot.Center);
            </code>
            could return a Point that is approximately at `122, 213`.
            </remarks>
            <param name="local">a real Spot describing a relative location in or near this GraphObject.</param>
            <returns>in document coordinates.</returns>
            <seealso cref="M:Northwoods.Go.GraphObject.GetDocumentBounds"/>
            <seealso cref="M:Northwoods.Go.GraphObject.GetLocalPoint(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetDocumentPoint(Northwoods.Go.Point)">
            <summary>
            Returns the Point in document coordinates for a given Point in local coordinates.
            </summary>
            <param name="local">a real Point in local coordinates.</param>
            <returns>in document coordinates.</returns>
            <seealso cref="M:Northwoods.Go.GraphObject.GetDocumentBounds"/>
            <seealso cref="M:Northwoods.Go.GraphObject.GetLocalPoint(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetDocumentBounds">
            <summary>
            Returns the Rect in document coordinates for this object's bounds.
            </summary>
            <remarks>
            If this GraphObject is a Part, the rect will be identical to its <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
            </remarks>
            <returns>in document coordinates.</returns>
            <seealso cref="M:Northwoods.Go.GraphObject.GetDocumentPoint(Northwoods.Go.Spot)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetDocumentAngle">
            <summary>
            Returns the effective angle that the object is drawn at, in document coordinates, normalized to between 0 and 360.
            </summary>
            <remarks>
            Basically this adds together all of the rotation declared by this <see cref="P:Northwoods.Go.GraphObject.Angle"/> and the angles of all of its containing Panels, including the Part.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetDocumentScale">
            <summary>
            Returns the total scale that the object is drawn at, in document coordinates.
            </summary>
            <remarks>
            Basically this multiplies together this <see cref="P:Northwoods.Go.GraphObject.Scale"/> with the scales of all of its containing Panels, including the Part.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetLocalPoint(Northwoods.Go.Point)">
            <summary>
            Given a Point in document coordinates, returns a new Point in local coordinates.
            </summary>
            <remarks>
            For example, if you have a mouse event whose <see cref="P:Northwoods.Go.InputEvent.DocumentPoint"/> is at `122, 213`,
            and if you have a Node whose <see cref="P:Northwoods.Go.GraphObject.Position"/> is at `100, 200`,
            `node.GetLocalPoint(e.DocumentPoint)` could return a Point that is at `22, 13`.
            For a GraphObject within the Node named "TB",
            <code language="cs">
              node.FindElement("TB").GetLocalPoint(e.DocumentPoint)
            </code>
            could return a Point that is at `15.7, 6.7`,
            if that "TB" object is positioned somewhat inside the bounds of the Node.
            </remarks>
            <param name="p">a real Point in document coordinates.</param>
            <returns>The corresponding Point in local coordinates.</returns>
            <seealso cref="M:Northwoods.Go.GraphObject.GetDocumentPoint(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetNearestIntersectionPoint(Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point@)">
            @hidden @internal
            <summary>
            Find the closest point in this object to the given point p1 that is on the line p1-p2.
            </summary>
            <param name="p1">the point we are looking to be closest to, on the line formed with p2.</param>
            <param name="p2">forms a line with p1.</param>
            <param name="result">(reference) the point of this object that is closest to p1 and that is on the infinite line from p1 to p2.</param>
            <returns>true if the infinite line does intersect with this object; false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetNearestIntersectionPoint2(System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Point@)">
            @hidden @internal
            <summary>
            Find the closest point in this object to the given point p1 that is on the line p1-p2.
            </summary>
            <param name="p1x"></param>
            <param name="p1y"></param>
            <param name="p2x"></param>
            <param name="p2y"></param>
            <param name="result">(reference) the point of this object that is closest to p1 and that is on the infinite line from p1 to p2.</param>
            <returns>true if the infinite line does intersect with this object; false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Measure(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Given the available size and desired size, measure this GraphObject and
            determine its expected drawing size. Sets the measuredBounds of the object.
            This sets <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>.
            </summary>
            <param name="width">The available width in panel coordinates.</param>
            <param name="height">The available height in panel coordinates.</param>
            <param name="minw"></param>
            <param name="minh"></param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.MeasureProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Given the available size and desired size, measure this GraphObject and
            determine its expected drawing size. Sets the measuredBounds of the object.
            This sets <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>.
            </summary>
            <param name="width">The available width in panel coordinates.</param>
            <param name="height">The available height in panel coordinates.</param>
            <param name="minw"></param>
            <param name="minh"></param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Arrange(System.Double,System.Double,System.Double,System.Double,System.Nullable{Northwoods.Go.Rect})">
            @hidden @internal
            <summary>
            Arranges the GraphObject onto its parent.
            The passed-in numbers typically account for <see cref="P:Northwoods.Go.GraphObject.Margin"/> and other offsets.
            This sets <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
            </summary>
            <param name="fx">The final x value of actualBounds that the Panel computes for the GraphObject.</param>
            <param name="fy">The final y value of actualBounds that the Panel computes for the GraphObject.</param>
            <param name="fw">The final width value of actualBounds that the Panel computes for the GraphObject.</param>
            <param name="fh">The final height value of actualBounds that the Panel computes for the GraphObject.</param>
            <param name="clipRect">an optional area to constrain this actualBounds to when hit testing/drawing. Used with Fixed/Table panels
            element, provided as a Rect.</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.ArrangeProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.GraphObject.CommonArrange(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.GraphObject.OnBoundsChanged(Northwoods.Go.Rect,Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Called at the end of GraphObject.Arrange, Part.Arrange, and Part.ValidatePosition (used in lieu of arrange)
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject._NotifyPorts(Northwoods.Go.Part)">
            @hidden @internal
            <summary>
            See also on Panel
            ??? This sorta duplicates functionality of _InvalidatePortLinkRoutes -- need to rearchitect and reimplement
            </summary>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ShadowVisible">
             <summary>
             Gets or sets whether or not this GraphObject will be shadowed inside a Part that has <see cref="P:Northwoods.Go.Part.IsShadowed"/> set to true.
             </summary>
             <remarks>
             The default is null, which means this GraphObject will obey the default shadow rules (see <see cref="P:Northwoods.Go.Part.IsShadowed"/>).
            
             A value of true or false will ensure that this part is shadowed or not regardless of the default shadow rules,
             but this GraphObject's shadowed status will not affect other GraphObjects in the Part.
            
             Typically this property does not need to be set, but you may need to set this value to false
             on GraphObjects inside a Part that you do not wish to be shadowed.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.IsShadowed"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.NotInBounds(Northwoods.Go.Diagram,System.Double)">
            @hidden @internal
            <summary>
            See if something is in bounds before drawing
            </summary>
            <param name="diagram"></param>
            <param name="extraSpace">additional space to add to bounds</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Draw(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
            <summary>
            The draw function. Handles translation and rotation, then calls the
            internal draw for the specific GraphObject.
            </summary>
            <param name="context">a canvas drawing context.</param>
            <param name="diagram"></param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.DrawRowColumn(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.GraphObject.DrawProtected(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.GraphObject.DrawDash(Northwoods.Go.IDrawingContext,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double)">
            @hidden @internal
            <summary>
            Static function for drawing dashed lines on a context
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.SetBrush(Northwoods.Go.IDrawingContext,Northwoods.Go.Brush,System.Boolean,Northwoods.Go.Rect,Northwoods.Go.Rect)">
            @hidden @internal
            <param name="context"></param>
            <param name="brush"></param>
            <param name="fill"></param>
            <param name="nb">naturalBounds</param>
            <param name="ab">actualBounds</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.IsContainedBy(Northwoods.Go.GraphObject)">
            <summary>
            This predicate is true if this object is an element, perhaps indirectly,
            of the given panel.
            </summary>
            <remarks>
            For example, if this GraphObject is inside a Part but is not itself the Part,
            `obj.IsContainedBy(obj.Part)` should be true.
            </remarks>
            <returns>true if this object is contained by the given panel,
            or if it is contained by another panel that is contained by the given panel,
            to any depth; false if the argument is null or is not a <see cref="T:Northwoods.Go.Panel"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject._IsContainedBy(Northwoods.Go.GraphObject,Northwoods.Go.Panel)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.GraphObject.IsVisibleElement">
             <summary>
             This predicate is true if this object is <see cref="P:Northwoods.Go.GraphObject.Visible"/>
             and each of its visual containing panels is also visible.
             </summary>
             <remarks>
             This ignores the actual location or appearance (except visibility)
             of the panel that this object is part of, as well as ignoring all
             properties of the <see cref="T:Northwoods.Go.Layer"/> or <see cref="T:Northwoods.Go.Diagram"/>.
            
             For <see cref="T:Northwoods.Go.Part"/>s, you can call the <see cref="M:Northwoods.Go.Part.IsVisible"/> predicate to determine
             if not only the Part is visible but also any containing <see cref="T:Northwoods.Go.Group"/> or <see cref="T:Northwoods.Go.Link"/> or <see cref="T:Northwoods.Go.Layer"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.GraphObject.IsEnabledElement">
            <summary>
            This predicate is false if this object is inside any Panel that is not <see cref="P:Northwoods.Go.Panel.IsEnabled"/>,
            or if this is itself a disabled panel.
            </summary>
            <remarks>
            This ignores the <see cref="P:Northwoods.Go.GraphObject.Visible"/> and <see cref="P:Northwoods.Go.GraphObject.Pickable"/> properties.
            </remarks>
            <seealso cref="P:Northwoods.Go.GraphObject.EnabledChanged"/>
            <seealso cref="P:Northwoods.Go.Panel.IsEnabled"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.EnabledChanged">
             <summary>
             Gets or sets the function to execute when some containing Panel changes the value of <see cref="P:Northwoods.Go.Panel.IsEnabled"/>.
             </summary>
             <remarks>
             It is typically used to modify the appearance of the object.
             This function must not change the value of any panel <see cref="P:Northwoods.Go.Panel.IsEnabled"/>.
            
             If this property value is a function, it is called with two arguments,
             this <see cref="T:Northwoods.Go.GraphObject"/> and the new value.
             By default this property is null -- no function is called.
             </remarks>
             <seealso cref="M:Northwoods.Go.GraphObject.IsEnabledElement"/>
             <seealso cref="P:Northwoods.Go.Panel.IsEnabled"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject._ValidateTransforms">
            @hidden @internal
            <summary>
            Only called when transform or allTransforms is asked for and invalidTransform is true.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject._SetTransformAngle(Northwoods.Go.Transform,System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Shared code used by measureRect and validateTransforms.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.InvalidateMeasure(System.Boolean)">
            @hidden @internal
            <param name="parent">flag, meaning the parent invalidated a child. Stops the child from trying to invalidate the parent.</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.InvalidateMeasureChildren">
            @hidden @internal
            <summary>
            Special invalidateMeasure for invalidating panels and their children only
            This does not notify the diagram nor any parent panels
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.InvalidateArrange(System.Boolean)">
            @hidden @internal
            <param name="parent">flag, meaning the parent invalidated a child. Stops the child from trying to invalidate the parent.</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject._InvalidateTransform">
            @hidden @internal
            <summary>
            Invalidates an Object's transform and then recurses through the visual tree to invalidate the allTransforms for each object in collection.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.InvalidateAllTransforms">
            @hidden @internal
            <summary>
            Recurses through the visual tree to invalidate the allTransforms for each GraphObject.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.InvalidateDraw">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetEffectiveStretch(System.Boolean)">
            @hidden @internal
            <summary>
            Computes the stretch for a GraphObject based on its stretch value and its containing panel's (default) stretch values
            Auto panels and Table panels have different default rules for their children
            </summary>
            <param name="localcoords">true if the stretch is in the local coordinate space, false if in the parent's coordinate space</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.GetEffectiveTableStretch(Northwoods.Go.RowDefinition,Northwoods.Go.ColumnDefinition,System.Boolean)">
            @hidden @internal
            <summary>
            Only ever called from Table's measure and arrange
            </summary>
            @this {GraphObject}
            <param name="row"></param>
            <param name="col"></param>
            <param name="localcoords">true if the stretch is in the local coordinate space, false if in the parent's coordiante space</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.AmendStretch(Northwoods.Go.Stretch,System.Boolean)">
            @hidden @internal
            <summary>
            Stop stretching in some directions if there is a desired width or height that would block it
            </summary>
        </member>
        <member name="P:Northwoods.Go.GraphObject.SegmentOrientation">
             <summary>
             Gets or sets the orientation of a GraphObject that is in a <see cref="T:Northwoods.Go.Link"/> or <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated"/> Panel.
             This controls the automatic rotation of the object by the Link Panel or Graduated Panel.
             </summary>
             <remarks>
             The only accepted values are the <see cref="T:Northwoods.Go.Link"/> "Orient..." values of Link
             and the default value: <see cref="F:Northwoods.Go.Orientation.None"/>.
            
             When the value is <see cref="F:Northwoods.Go.Orientation.None"/>, the <see cref="P:Northwoods.Go.GraphObject.Angle"/> of this object is unchanged as the link is routed.
             Setting this to a value of <see cref="F:Northwoods.Go.Orientation.Along"/> will cause routing to set the <see cref="P:Northwoods.Go.GraphObject.Angle"/>
             to be the angle of the segment that this object is on.
             Other values compute the angle somewhat differently.
             If the value is changed back to <see cref="F:Northwoods.Go.Orientation.None"/>, the <see cref="P:Northwoods.Go.GraphObject.Angle"/> of this object is set to zero.
            
             Note that when this property is not <see cref="F:Northwoods.Go.Orientation.None"/>, this property takes precedence
             over any setting or binding of the <see cref="P:Northwoods.Go.GraphObject.Angle"/> property.
             Changes to the angle caused by orientation might not result in Changed events,
             and any original value for the angle may be lost.
            
             In the case of Graduated Panels, if this value is <see cref="F:Northwoods.Go.Orientation.None"/>, <see cref="F:Northwoods.Go.Orientation.Along"/>,
             or <see cref="F:Northwoods.Go.Orientation.Upright"/>, any TextBlock label <see cref="P:Northwoods.Go.GraphObject.Angle"/> will be respected.
             Depending on this value, the effective TextBlock angle will be either
             fixed or relative to the slope of the path where it is rendered.
            
             For examples of how to use this property, see <a href="../../intro/linkLabels.Html">Link Labels</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentFraction"/>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentIndex"/>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentOffset"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.SegmentOrientationAlong">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.GraphObject.SegmentIndex">
             <summary>
             Gets or sets the segment index of a GraphObject that is in a <see cref="T:Northwoods.Go.Link"/>.
             </summary>
             <remarks>
             Non-negative numbers count up from zero, which is the first segment, at the "from" end of the Link.
             Negative numbers count segments from the "to" end of the Link, where -1 means the last segment
             and -2 means the next-to-last segment.
             The default value is double.NegativeInfinity. The value should be an integer or double.NaN.
            
             Setting this value to double.NaN means <see cref="P:Northwoods.Go.GraphObject.SegmentFraction"/>'s fractional distance will be calculated along the entire link route.
             A double.NaN value also means the <see cref="P:Northwoods.Go.Link.MidPoint"/> and <see cref="P:Northwoods.Go.Link.MidAngle"/> will not be used when determining label positions.
            
             If you do not set this property, the Link will choose a place that is approximately at the
             mid-point of the link's route.
            
             For examples of how to use this property, see <a href="../../intro/linkLabels.Html">Link Labels</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentFraction"/>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentOffset"/>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.SegmentFraction">
             <summary>
             Gets or sets the fractional distance along a segment of a GraphObject that is in a <see cref="T:Northwoods.Go.Link"/>.
             </summary>
             <remarks>
             The value should be between zero and one, where zero is at the point at the start of the segment,
             and where one is at the point at the end of the segment.
             The default value is zero.
            
             If <see cref="P:Northwoods.Go.GraphObject.SegmentIndex"/> is set to double.NaN, the fractional distance will be calculated along the entire link route.
            
             For examples of how to use this property, see <a href="../../intro/linkLabels.Html">Link Labels</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentIndex"/>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentOffset"/>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.SegmentOffset">
             <summary>
             Gets or sets the offset of a GraphObject that is in a <see cref="T:Northwoods.Go.Link"/> from a point on a segment
             or in a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated"/> from a point along the main element.
             </summary>
             <remarks>
             The X component of the Point indicates the distance along the route,
             with positive values going further toward the "to" end of the link or panel.
             The Y component of the Point indicates the distance away from the route,
             with positive values towards the right as seen when facing further towards the "to" end of the link or panel.
             The value defaults to the Point (0, 0).
             You cannot modify the x or y of the value of this property --
             if you want to change the SegmentOffset you must set this property to a different Point.
            
             For labels that are near either end of a link, it may be convenient to set the segmentOffset
             to Point(double.NaN, double.NaN). This causes the offset to be half the width and half the height of the label object.
            
             For examples of how to use this property, see <a href="../../intro/linkLabels.Html">Link Labels</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentFraction"/>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentIndex"/>
             <seealso cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Stretch">
             <summary>
             Gets or sets the stretch of the GraphObject.
             This controls whether the width and/or height of this object automatically adjusts to fill
             the area allotted by the containing Panel.
             </summary>
             <remarks>
             The only accepted values are listed as constant properties of GraphObject,
             such as <see cref="F:Northwoods.Go.Stretch.None"/>, <see cref="F:Northwoods.Go.Stretch.Fill"/>, <see cref="F:Northwoods.Go.Stretch.Horizontal"/>, or <see cref="F:Northwoods.Go.Stretch.Vertical"/>.
             The default value is <see cref="F:Northwoods.Go.Stretch.Default"/>, which allows the Panel to decide how to treat this object, depending on the type of Panel.
            
             Objects with an <see cref="P:Northwoods.Go.GraphObject.Angle"/> that are stretched may look incorrect unless the angle is a multiple of 90.
            
             Stretch will have have different effects based upon the Panel containing this object. Elements of:
             - Auto panels will not stretch, except the main element growing to fill the panel or being made uniform
             - Horizontal panels will only stretch vertically
             - Vertical panels will only stretch horizontally
             - Spot panels will stretch to the size of the main element
             - Table panels will stretch to the size of their cell, defined by their row and column, which is usually determined by other GraphObjects in that cell that are not stretching
             - Grid panels, Link panels, and Graduated panels will not stretch
             </remarks>
             <seealso cref="P:Northwoods.Go.Panel.DefaultStretch"/>
             <seealso cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MinSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MaxSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActualBounds"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Scale"/>
             <seealso cref="P:Northwoods.Go.Picture.ImageStretch"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Name">
             <summary>
             Gets or sets the name for this object.
             </summary>
             <remarks>
             The default value is the empty string.
             The name should be unique within a <see cref="T:Northwoods.Go.Panel"/>, although if it isn't,
             it reduces the usefulness of methods such as <see cref="M:Northwoods.Go.Panel.FindElement(System.String)"/>.
            
             You must not modify the name of a GraphObject once it is in the visual tree of a Part.
            
             This is frequently needed to identify a particular GraphObject in the visual tree of a Part,
             for example as the value of the <see cref="P:Northwoods.Go.Part.LocationElementName"/> or
             <see cref="P:Northwoods.Go.Part.SelectionElementName"/> properties.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Opacity">
             <summary>
             Gets or sets the multiplicative opacity for this GraphObject and (if a Panel) all elements.
             </summary>
             <remarks>
             The value must be between 0.0 (fully transparent) and 1.0 (no additional transparency).
            
             Unlike <see cref="P:Northwoods.Go.GraphObject.Visible"/>, Opacity only affects drawing, it does not cause objects to be resized or remeasured.
             Opacity settings do not change the shape of the object or exclude it from object-picking
             (does not change whether any objects are found by the "find..." methods).
            
             This value is multiplicative with any existing transparency,
             for instance from <see cref="P:Northwoods.Go.Layer.Opacity"/> or a GraphObject's opacity higher in the visual tree,
             or from a <see cref="T:Northwoods.Go.Brush"/> or image transparency.
             The default value is 1.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Visible"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Pickable"/>
             <seealso cref="P:Northwoods.Go.Layer.Opacity"/>
             <seealso cref="P:Northwoods.Go.Diagram.Opacity"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Visible">
             <summary>
             Gets or sets whether a GraphObject is visible.
             </summary>
             <remarks>
             The default value is true.
             A not visible object takes no space in the Panel that it is in.
             Toggling visibility may cause elements in the visual tree to re-measure and re-arrange.
             Making a Panel not visible causes all of its elements not to be seen or receive input events.
             Changing a Panel to become visible causes all of its elements to be seen and be active,
             unless those elements are themselves not visible.
            
             This object does not get any mouse/touch events if it is not <see cref="P:Northwoods.Go.GraphObject.Visible"/>
             or if it is not <see cref="P:Northwoods.Go.GraphObject.Pickable"/>.
            
             One can have a visible <see cref="T:Northwoods.Go.Shape"/> that is not drawn by setting its <see cref="P:Northwoods.Go.Shape.Fill"/>
             and <see cref="P:Northwoods.Go.Shape.Stroke"/> to null or to `"transparent"`.
             Similarly, one can set <see cref="P:Northwoods.Go.TextBlock.Stroke"/> to null or to `"transparent"`.
             It is also possible make a GraphObjects transparent by setting <see cref="P:Northwoods.Go.GraphObject.Opacity"/> to 0.
             Finally, one can make a whole <see cref="T:Northwoods.Go.Layer"/>-full of Parts invisible by setting <see cref="P:Northwoods.Go.Layer.Visible"/> to false.
            
             Use the <see cref="M:Northwoods.Go.GraphObject.IsVisibleElement"/> predicate to see if this GraphObject is visible and is inside a <see cref="T:Northwoods.Go.Panel"/>
             that is <see cref="M:Northwoods.Go.GraphObject.IsVisibleElement"/>, and so forth up the chain of panels until reaching the <see cref="T:Northwoods.Go.Part"/>.
            
             For <see cref="T:Northwoods.Go.Part"/>s, you can call the <see cref="M:Northwoods.Go.Part.IsVisible"/> predicate to determine
             if not only the Part is visible but also any containing <see cref="T:Northwoods.Go.Group"/> or <see cref="T:Northwoods.Go.Link"/>,
             and whether the <see cref="T:Northwoods.Go.Layer"/> it is in is visible.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Opacity"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Pickable"/>
             <seealso cref="P:Northwoods.Go.Layer.Visible"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Pickable">
             <summary>
             Gets or sets whether or not this GraphObject can be chosen by visual "find" or "hit-test" methods such
             as <see cref="M:Northwoods.Go.Diagram.FindElementAt(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject})"/>.
             </summary>
             <remarks>
             This object does not get any mouse/touch events if it is not <see cref="P:Northwoods.Go.GraphObject.Visible"/>
             or if it is not <see cref="P:Northwoods.Go.GraphObject.Pickable"/>.
            
             The default value is true -- mouse events on this object will be noticed.
             If this value is false and this object is a <see cref="T:Northwoods.Go.Panel"/>, not only is this Panel not "hittable",
             but all of the elements inside the Panel will be ignored.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Visible"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Opacity"/>
             <seealso cref="P:Northwoods.Go.Layer.Pickable"/>
             <seealso cref="P:Northwoods.Go.Panel.IsEnabled"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.FromLinkableDuplicates">
             <summary>
             Gets or sets whether the user may draw duplicate Links from this port.
             </summary>
             <remarks>
             This property is used by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             The default value is false.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.FromLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromLinkableSelfNode"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToLinkableDuplicates"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.FromLinkableSelfNode">
             <summary>
             Gets or sets whether the user may draw Links that connect from this port's Node.
             </summary>
             <remarks>
             This property is used by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             The default value is false.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.FromLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromLinkableDuplicates"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToLinkableSelfNode"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ToLinkableDuplicates">
             <summary>
             Gets or sets whether the user may draw duplicate Links to this port.
             </summary>
             <remarks>
             This property is used by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             The default value is false.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ToLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToLinkableSelfNode"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromLinkableDuplicates"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ToLinkableSelfNode">
             <summary>
             Gets or sets whether the user may draw Links that connect to this port's Node.
             </summary>
             <remarks>
             This property is used by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             The default value is false.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ToLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToLinkableDuplicates"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromLinkableSelfNode"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.IsPanelMain">
             <summary>
             Gets or sets whether a GraphObject is the "main" object for some types of <see cref="T:Northwoods.Go.Panel"/>.
             </summary>
             <remarks>
             Panels that use a "main" object include <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutAuto"/>, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutSpot"/>, and <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutLink"/>.
            
             Panels that use a "main" object will use the first object that has this property set to true,
             or else just the first object, if none have the property set.
            
             Do not modify this property once this object is an element of a panel.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.IsActionable">
             <summary>
             This property determines whether or not this GraphObject's events occur
             before all other events, including selection. This enables the <see cref="P:Northwoods.Go.GraphObject.ActionDown"/>,
             <see cref="P:Northwoods.Go.GraphObject.ActionMove"/>, <see cref="P:Northwoods.Go.GraphObject.ActionUp"/>, and <see cref="P:Northwoods.Go.GraphObject.ActionCancel"/> events,
             which are all handled by the <see cref="T:Northwoods.Go.Tools.ActionTool"/>.
             </summary>
             <remarks>
             This object does not get any mouse/touch events if it is not <see cref="P:Northwoods.Go.GraphObject.Visible"/>
             or if it is not <see cref="P:Northwoods.Go.GraphObject.Pickable"/>.
            
             This property is infrequently used -- typically only when implementing objects
             that act as buttons or knobs or sliders.
             The default value is false.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionDown"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionMove"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionUp"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionCancel"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Pickable"/>
             <seealso cref="P:Northwoods.Go.Panel.IsEnabled"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Background">
             <summary>
             Gets or sets the background Brush of this GraphObject,
             filling the rectangle of this object's local coordinate space.
             </summary>
             <remarks>
             If the object is rotated, the background will rotate with it.
            
             The value may be either a <see cref="T:Northwoods.Go.Brush"/> object or a string that is a CSS color.
             The default value is null -- no background is drawn.
             More information about the syntax of CSS color strings is available at:
             <a href="https://developer.Mozilla.Org/en-US/docs/Web/CSS/color">CSS colors (mozilla.Org)</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Shape.Fill"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Part">
             <summary>
             This read-only property returns the <see cref="T:Northwoods.Go.Part"/> containing this object, if any.
             The Part will be the root GraphObject in this GraphObject's visual tree.
             </summary>
             <remarks>
             It is common to refer to the containing Part of a GraphObject
             in order to refer to the <see cref="P:Northwoods.Go.Panel.Data"/> to which it is bound.
            
             This property is not settable.
             If you want this GraphObject to belong to a Part, you will need to add it to a Part,
             or else add it to some visual tree structure that is added to a Part using <see cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/>.
            
             Note that for objects such as buttons that are in <see cref="T:Northwoods.Go.Adornment"/>s such as tooltips or context menus,
             this property will return that Adornment, not the Node or Link that is adorned.
            
             If you want to find a <see cref="T:Northwoods.Go.Group"/> that contains a Part, use the <see cref="P:Northwoods.Go.Part.ContainingGroup"/> property:
             `someObj.Part.ContainingGroup`
             </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Panel">
             <summary>
             This read-only property returns the GraphObject's containing <see cref="T:Northwoods.Go.Panel"/>, or null if this object is not in a Panel.
             </summary>
             <remarks>
             Although <see cref="T:Northwoods.Go.Part"/> inherits from this class, a Part will never belong to a Panel,
             so this property will always be null for every <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Link"/>.
            
             This property is not settable.
             Instead, call <see cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/> in order to put a GraphObject in a Panel.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Layer">
            <summary>
            This read-only property returns the GraphObject's containing <see cref="T:Northwoods.Go.Layer"/>, if there is any.
            A plain GraphObject cannot belong directly to a Layer -- only a <see cref="T:Northwoods.Go.Part"/> can belong directly to a Layer.
            </summary>
            <remarks>
            This property is not settable.
            Normally one changes which Layer that a GraphObject is in by setting <see cref="P:Northwoods.Go.Part.LayerName"/>.
            Adding a Part to a Diagram will automatically add that Part to a Layer in that Diagram based on the layerName.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Diagram">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Diagram"/> that this GraphObject is in, if it is.
            </summary>
            <remarks>
            This property is not settable.
            Although you cannot add any plain GraphObject to a Diagram, you can call <see cref="M:Northwoods.Go.Diagram.Add(Northwoods.Go.Part)"/>
            to add a <see cref="T:Northwoods.Go.Part"/> to a Diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Position">
             <summary>
             Gets or sets the position of this GraphObject in container coordinates
             (either a <see cref="T:Northwoods.Go.Panel"/> or the document).
             </summary>
             <remarks>
             Value must be of type Point.
             You cannot modify the x or y of the value of this property --
             if you want to change the position you must set this property to a different Point.
             Default is `Point(double.NaN, double.NaN)`.
            
             For <see cref="T:Northwoods.Go.Part"/>s, see also <see cref="P:Northwoods.Go.Part.Location"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.GraphObject.SetPositionFlag">
            @hidden @internal
            <summary>
            Only used in Parts
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.SetPos(Northwoods.Go.Point,System.Double,System.Double)">
            @hidden @internal
            <summary>
            This is not called during animation, instead, it calls setPosInplace
            </summary>
            <returns>true if successful, false if a no-op (only true calls raisechanged, Link always returns false)</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.SetPosInplace(System.Double,System.Double,System.Boolean)">
            <summary>
            (undocumented)
            Used during animation only.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ActualBounds">
             <summary>
             This read-only property returns the bounds of this GraphObject in container coordinates. This means that
             the actualBounds are in the coordinate space of the GraphObject's <see cref="T:Northwoods.Go.Panel"/>,
             unless this is a <see cref="T:Northwoods.Go.Part"/>, in which case they are in
             the <see cref="T:Northwoods.Go.Diagram"/>'s coordinate system.
             </summary>
             <remarks>
             You must not modify any of the properties of the <see cref="T:Northwoods.Go.Rect"/> that is the value of this property.
            
             If this GraphObject is a Part,
             then the x and y values of the actualBounds are identical to that Part's <see cref="P:Northwoods.Go.GraphObject.Position"/>,
             and the width and height values of the actualBounds represent the rectangular space occupied
             by the Part in <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> coordinates.
            
             If this GraphObject is not a top-level object (not a <see cref="T:Northwoods.Go.Part"/>), then the actualBounds
             x and y values represent that GraphObject's position within its Panel. In a Panel of type <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>
             this is identical to the GraphObject's <see cref="P:Northwoods.Go.GraphObject.Position"/>, but in other cases it is dependent on
             the unique workings of each Panel type. The actualBounds width and height
             of a GraphObject are the final size after the <see cref="P:Northwoods.Go.GraphObject.Scale"/> and <see cref="P:Northwoods.Go.GraphObject.Angle"/> are applied.
            
             It is possible for a GraphObject (be it an GraphObject or a Panel containing several more GraphObjects)
             to have no containing Part, in which case these GraphObjects cannot possibly be in a Diagram.
             These GraphObjects are unlikely to have real-double values for their actualBounds, as they may
             never have had the chance to be measured and arranged.
            
             As with all read-only properties, using this property as a binding source is unlikely to be useful.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>
             <seealso cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Scale">
            <summary>
            Gets or sets the scale transform of this GraphObject.
            </summary>
            <remarks>
            Value must be a double; larger values will make this object appear bigger.
            Default is 1.
            </remarks>
            <seealso cref="P:Northwoods.Go.GraphObject.Angle"/>
            <seealso cref="P:Northwoods.Go.GraphObject.Stretch"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Angle">
             <summary>
             Gets or sets the angle transform, in degrees, of this GraphObject.
             </summary>
             <remarks>
             Value must be a double. If the value is not between (0 &lt;= value &lt; 360),
             it will be normalized to be in that range.
             Zero is along the positive X-axis (rightwards); 90 is along the positive Y-axis (downwards).
             Default is 0.
            
             When set on a Graduated Panel's TextBlock label, this value will be be ignored if <see cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/> is not
             <see cref="F:Northwoods.Go.Orientation.None"/>, <see cref="F:Northwoods.Go.Orientation.Along"/>, or <see cref="F:Northwoods.Go.Orientation.Upright"/>. Along and Upright will use this angle
             relative to the slope of the main path.
            
             When set on a Link label, this value will be be ignored if <see cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/> is not <see cref="F:Northwoods.Go.Orientation.None"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Scale"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Stretch"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.DesiredSize">
             <summary>
             Gets or sets the desired size of this GraphObject in local coordinates.
             </summary>
             <remarks>
             Value must be of type <see cref="T:Northwoods.Go.Size"/>.
             Default is Size(double.NaN, double.NaN).
             You cannot modify the width or height of the value of this property --
             if you want to change the desiredSize you must set this property to a different Size.
            
             Getting or setting <see cref="P:Northwoods.Go.GraphObject.Width"/> or <see cref="P:Northwoods.Go.GraphObject.Height"/> is equivalent to getting or setting the
             width or height of this property.
            
             The size does not include any transformation due to <see cref="P:Northwoods.Go.GraphObject.Scale"/> or <see cref="P:Northwoods.Go.GraphObject.Angle"/>,
             nor any pen thickness due to <see cref="P:Northwoods.Go.Shape.StrokeWidth"/> if this is a <see cref="T:Northwoods.Go.Shape"/>.
             If there is a containing <see cref="T:Northwoods.Go.Panel"/> the Panel will determine the actual size.
             If the desiredSize is greater than the allowed size that the GraphObject's Panel determines,
             then the GraphObject may be visually clipped. If the desiredSize does not meet the constraints
             of <see cref="P:Northwoods.Go.GraphObject.MinSize"/> and <see cref="P:Northwoods.Go.GraphObject.MaxSize"/>, the GraphObject will be resized to meet them.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MinSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MaxSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.NaturalBounds"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActualBounds"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Width">
             <summary>
             Gets or sets the desired width of this GraphObject in local coordinates.
             This just gets or sets the width component of the <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>.
             </summary>
             <remarks>
             Default is double.NaN.
            
             Size can also be constrained by setting <see cref="P:Northwoods.Go.GraphObject.MinSize"/> and <see cref="P:Northwoods.Go.GraphObject.MaxSize"/>.
            
             The width does not include any transformation due to <see cref="P:Northwoods.Go.GraphObject.Scale"/> or <see cref="P:Northwoods.Go.GraphObject.Angle"/>,
             nor any pen thickness due to <see cref="P:Northwoods.Go.Shape.StrokeWidth"/> if this is a <see cref="T:Northwoods.Go.Shape"/>.
             If there is a containing <see cref="T:Northwoods.Go.Panel"/> the Panel will determine the actual size.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Height">
             <summary>
             Gets or sets the desired height of this GraphObject in local coordinates.
             This just gets or sets the height component of the <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>.
             </summary>
             <remarks>
             Default is double.NaN.
            
             Size can also be constrained by setting <see cref="P:Northwoods.Go.GraphObject.MinSize"/> and <see cref="P:Northwoods.Go.GraphObject.MaxSize"/>.
            
             The height does not include any transformation due to <see cref="P:Northwoods.Go.GraphObject.Scale"/> or <see cref="P:Northwoods.Go.GraphObject.Angle"/>,
             nor any pen thickness due to <see cref="P:Northwoods.Go.Shape.StrokeWidth"/> if this is a <see cref="T:Northwoods.Go.Shape"/>.
             If there is a containing <see cref="T:Northwoods.Go.Panel"/> the Panel will determine the actual size.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MinSize">
             <summary>
             Gets or sets the minimum size of this GraphObject in container coordinates
             (either a <see cref="T:Northwoods.Go.Panel"/> or the document).
             </summary>
             <remarks>
             Any new value must be of type Size; double.NaN values are treated as 0.
            
             You cannot modify the width or height of the value of this property --
             if you want to change the minSize you must set this property to a different Size.
             The default value is zero by zero.
             A containing Panel will determine the actual size of this object.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MaxSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MaxSize">
             <summary>
             Gets or sets the maximum size of this GraphObject in container coordinates
             (either a <see cref="T:Northwoods.Go.Panel"/> or the document).
             </summary>
             <remarks>
             Any new value must be of type Size; double.NaN values are treated as Infinity. If you want no maximum width or height, use double.NaN or Infinity.
            
             You cannot modify the width or height of the value of this property --
             if you want to change the maxSize you must set this property to a different Size.
             The default value is Infinity by Infinity.
             A containing Panel will determine the actual size of this object.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MinSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MeasuredBounds">
             <summary>
             This read-only property returns the measuredBounds of the GraphObject in container coordinates
             (either a <see cref="T:Northwoods.Go.Panel"/> or the document).
             This describes the transformed bounds with margins excluded.
             </summary>
             <remarks>
             You must not modify any of the properties of the <see cref="T:Northwoods.Go.Rect"/> that is the value of this property.
            
             As with all read-only properties, using this property as a binding source is unlikely to be useful.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.NaturalBounds"/>
             <seealso cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActualBounds"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.NaturalBounds">
             <summary>
             This read-only property returns the natural bounding rectangle of this GraphObject in local coordinates,
             before any transformation by <see cref="P:Northwoods.Go.GraphObject.Scale"/> or <see cref="P:Northwoods.Go.GraphObject.Angle"/>,
             and before any resizing due to <see cref="P:Northwoods.Go.GraphObject.MinSize"/> or <see cref="P:Northwoods.Go.GraphObject.MaxSize"/> or <see cref="P:Northwoods.Go.GraphObject.Stretch"/>.
             </summary>
             <remarks>
             Defaults to unknown (double.NaN,double.NaN).
            
             You must not modify any of the properties of the <see cref="T:Northwoods.Go.Rect"/> that is the value of this property.
            
             The value can only be changed by changing properties of the particular GraphObject,
             such as <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>, <see cref="P:Northwoods.Go.Shape.Geometry"/>, or <see cref="P:Northwoods.Go.TextBlock.Font"/>.
            
             As with all read-only properties, using this property as a binding source is unlikely to be useful.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActualBounds"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject._GetStrokeWidth">
            <summary>
            For internal convenience, Shape adds its StrokeWidth.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Margin">
             <summary>
             Gets or sets the size of empty area around this GraphObject, as a <see cref="P:Northwoods.Go.GraphObject.Margin"/>,
             in the containing <see cref="T:Northwoods.Go.Panel"/> coordinates.
             </summary>
             <remarks>
             Negative values are permitted but may cause overlaps with adjacent
             objects in a <see cref="T:Northwoods.Go.Panel"/>.
             You cannot modify the top or left or right or bottom of the value of this property --
             if you want to change the margin you must set this property to a different Margin.
             Default margin is Margin(0,0,0,0).
            
             The property setter accepts a double instead of a Margin object: providing a
             double N will result in using a Margin(N, N, N, N).
             The property getter will always return a Margin.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActualBounds"/>
             <seealso cref="P:Northwoods.Go.Panel.Padding"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Transform">
            @hidden @internal
            <summary>
            This read-only property returns the GraphObject's transformation matrix
            </summary>
        </member>
        <member name="P:Northwoods.Go.GraphObject.AllTransforms">
            @hidden @internal
            <summary>
            This read-only property returns a transformation matrix with respect to document coordinates describing
            all transforms operated on the object's coordinates, including the
            GraphObject's own transform. Modified by changes to the position, scale,
            and angle properties.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Alignment">
             <summary>
             Gets or sets the alignment <see cref="T:Northwoods.Go.Spot"/> of this GraphObject used in <see cref="T:Northwoods.Go.Panel"/> layouts,
             to determine where in the area allocated by the panel this object should be placed.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Spot.Default"/>, which lets the Panel determine the Spot using
             <see cref="P:Northwoods.Go.Panel.DefaultAlignment"/>. If that property is also <see cref="F:Northwoods.Go.Spot.Default"/>,
             then the alignment spot will be different depending on the Panel type.
            
             The <see cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/> is often used along with this property to specify
             where this object should be positioned in a Panel.
            
             A <see cref="F:Northwoods.Go.Spot.Default"/> is equivalent to Spot.Center in Spot, Auto, Horizontal, and Vertical panels.
             For examples of alignments in different panels, see the <a href="../../intro/panels.Html">Introduction page on Panels</a>.
            
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/>
             <seealso cref="P:Northwoods.Go.Panel.DefaultAlignment"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Column">
            <summary>
            Gets or sets the column of this GraphObject if it is in a Table <see cref="T:Northwoods.Go.Panel"/>.
            </summary>
            <remarks>
            The value must be a small non-negative integer. The default is 0.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ColumnSpan">
            <summary>
            Gets or sets the double of columns spanned by this GraphObject if it is in a Table <see cref="T:Northwoods.Go.Panel"/>.
            </summary>
            <remarks>
            The value must be a small positive integer. The default is 1.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Row">
            <summary>
            Gets or sets the row of this GraphObject if it is in a Table <see cref="T:Northwoods.Go.Panel"/>.
            </summary>
            <remarks>
            The value must be a small non-negative integer. The default is 0.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.RowSpan">
            <summary>
            Gets or sets the double of rows spanned by this GraphObject if it is in a Table <see cref="T:Northwoods.Go.Panel"/>.
            </summary>
            <remarks>
            The value must be a small positive integer. The default is 1.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.RowSpanAllocation">
             Gets or sets the function that determines what a GraphObject with a
             <see cref="P:Northwoods.Go.GraphObject.RowSpan"/> greater than 1 should do with its additional space,
             if it is larger than all rows it spans.
            
             If this property value is a function, the function is called with three arguments:
               - This <see cref="T:Northwoods.Go.GraphObject"/>.
               - The <see cref="T:Northwoods.Go.RowDefinition"/> to consider granting height to.
               - The available height remaining (as a double).
            
             The function must return an amount of space to allocate for the given <see cref="T:Northwoods.Go.RowDefinition"/>.
             For any given GraphObject, it should allocate no greater than the total available space
             divided however the author chooses among all rows spanned.
             <code language="cs">
             RowSpanAllocation = (obj, rowdef, available) => {
               // place all extra span into row 2:
               if (rowdef.Row == 2) {
                 return available;
               }
               // give no extra span to any other row
               return 0;
             }
             </code>
            
             By default this value is null, and by default objects that span multiple rows
             attempt to place any additional height in the last row that they cover.
             <summary>
             (undocumented)
             </summary>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ColumnSpanAllocation">
             Gets or sets the function that determines what a GraphObject with a
             <see cref="P:Northwoods.Go.GraphObject.ColumnSpan"/> greater than 1 should do with its additional space,
             if it is larger than all column it spans.
            
             If this property value is a function, the function is called with three arguments:
               - This <see cref="T:Northwoods.Go.GraphObject"/>.
               - The <see cref="T:Northwoods.Go.ColumnDefinition"/> to consider granting width to.
               - The available width remaining (as a double).
            
             The function must return an amount of space to allocate for the given <see cref="T:Northwoods.Go.ColumnDefinition"/>.
             For any given GraphObject, it should allocate no greater than the total available space
             divided however the author chooses among all columns spanned.
             <code language="cs">
             ColumnSpanAllocation = (obj, coldef, available) => {
               // place all extra span into column 2:
               if (coldef.Column == 2) {
                 return available;
               }
               // give no extra span to any other column
               return 0;
             }
             </code>
            
             By default this value is null, and by default objects that span multiple columns
             attempt to place any additional width in the last column that they cover.
             <summary>
             (undocumented)
             </summary>
        </member>
        <member name="P:Northwoods.Go.GraphObject.AlignmentFocus">
             <summary>
             Gets or sets the spot on this GraphObject to be used as the alignment point
             in Spot and Fixed <see cref="T:Northwoods.Go.Panel"/>s.
             </summary>
             <remarks>
             Value must be of type Spot.
            
             The default value is <see cref="F:Northwoods.Go.Spot.Default"/>, which means that the Panel type can decide the effective alignment spot.
            
             The <see cref="P:Northwoods.Go.GraphObject.Alignment"/> is often used along with this property to specify
             where this object should be positioned in a Panel.
            
             For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated"/>, the alignmentFocus spot determines the spot on a child element to be aligned with some
             point along the main element.
            
             When you want a link label Node to be positioned by its location spot rather than by this alignmentFocus spot,
             you can set this property to <see cref="F:Northwoods.Go.Spot.None"/>, only on <see cref="T:Northwoods.Go.Node"/>s.
            
             For examples of alignments in different panels, see the <a href="../../intro/panels.Html">Introduction page on Panels</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Panel.AlignmentFocusName"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.PortId">
             <summary>
             Gets or sets an identifier for an object acting as a port on a Node.
             </summary>
             <remarks>
             The default value is null -- this object is not a port.
            
             A value that is the empty string is used by convention to mean the primary
             (and usually only) port of the node.
            
             If a Node has no named ports, then the Node itself is the sole port.
            
             Note: the only kind of model that can save port information, i.e. portIds that are not an empty string,
             for links is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/> whose <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromPortIdProperty"/> and
             <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToPortIdProperty"/> have been set to name properties on the link data objects.
            
             The value should be unique within the <see cref="T:Northwoods.Go.Node"/>.
             You must not modify this property once this GraphObject is in the visual tree of a Node.
             <p class="boxread">
             See <a href="../../intro/ports.Html">the Introduction page on ports</a>
             for usage information and examples.
             </p>
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.FromLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromSpot"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToSpot"/>
             <seealso cref="P:Northwoods.Go.Link.FromSpot"/>
             <seealso cref="P:Northwoods.Go.Link.ToSpot"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.InvalidatePortLinkRoutes">
            @hidden @internal
            <summary>
            Called by port-specific property setters
            ??? This sorta duplicates functionality of _NotifyPorts -- need to rearchitect and reimplement
            </summary>
        </member>
        <member name="M:Northwoods.Go.GraphObject.InvalidateLinkRoutesForContainedPorts">
            @hidden @internal
            <summary>
            Invalidate all link routes connected with port elements inside this element, including this itself.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ToSpot">
            for links coming into a port:
             <summary>
             Gets or sets where a link should connect to this port.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Spot.None"/>, meaning that the link routing
             must consider the shape of the port and connect to the closest point.
            
             The value of <see cref="P:Northwoods.Go.Link.ToSpot"/>, if not <see cref="F:Northwoods.Go.Spot.Default"/>, takes precedence over the value at this port
             when determining the route of the link.
             A number of the predefined <see cref="T:Northwoods.Go.Layouts.Layout"/>s automatically set <see cref="P:Northwoods.Go.Link.FromSpot"/> and <see cref="P:Northwoods.Go.Link.ToSpot"/>,
             thereby causing this property and <see cref="P:Northwoods.Go.GraphObject.FromSpot"/> on the port element to be ignored.
             Depending on the layout, you may be able to disable that behavior, such as by setting SetsPortSpot(s) or SetChildPortSpot to false.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.ToSpot"/>
             <seealso cref="M:Northwoods.Go.Link.ComputeSpot(System.Boolean,Northwoods.Go.GraphObject)"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromSpot"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ToEndSegmentLength">
             <summary>
             Gets or sets the length of the last segment of a link going to this port.
             </summary>
             <remarks>
             This value is used when the computed "to spot" is not <see cref="F:Northwoods.Go.Spot.None"/>.
             The default value is 10.
            
             The value of <see cref="P:Northwoods.Go.Link.ToEndSegmentLength"/>, if not double.NaN, takes precedence over the value at this port
             when determining the route of the link.
             This value also limits how short the <see cref="P:Northwoods.Go.Link.ToShortLength"/> may be drawn.
            
             For examples of how to use this property, see <a href="../../intro/links.Html#EndSegmentLengths">Link End Segment Lengths</a>.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.ToEndSegmentLength"/>
             <seealso cref="M:Northwoods.Go.Link.ComputeEndSegmentLength(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot,System.Boolean)"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromEndSegmentLength"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ToShortLength">
             <summary>
             Gets or sets how far the end segment of a link going to this port stops short of the actual port.
             </summary>
             <remarks>
             Positive values are limited by the <see cref="P:Northwoods.Go.GraphObject.ToEndSegmentLength"/> or <see cref="P:Northwoods.Go.Link.ToEndSegmentLength"/>.
             Negative values cause the link to extend into the port.
             The default value is zero.
            
             This property is useful when you have a thick link and a pointy arrowhead.
             Normally the link Shape extends all the way to the end of the arrowhead.
             If the link Shape is wide, its edges will be seen behind the arrowhead.
             By setting this property to a small positive value, the link Shape can end within the
             body of the arrowhead, leaving only the point of the arrowhead visible at the end of the link.
            
             A negative value for this property can also be useful when you want the link Shape to continue
             into the port, perhaps because a portion of the port is transparent and you want the link to
             appear to connect visually with a different point on the node.
            
             The value of <see cref="P:Northwoods.Go.Link.ToShortLength"/>, if not double.NaN, takes precedence over the value at this port
             when determining the route of the link.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.FromShortLength"/>
             <seealso cref="P:Northwoods.Go.Link.ToShortLength"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ToLinkable">
             <summary>
             Gets or sets whether the user may draw Links to this port.
             </summary>
             <remarks>
             This property is used by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidTo(Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             The default value is null, which indicates that the real value is inherited from
             the parent <see cref="T:Northwoods.Go.Panel"/>, or false if there is no containing panel.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node,
             or unless you are disabling the "linkability" of a particular GraphObject
             inside a Panel whose toLinkable has been set or bound to true.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.FromLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToMaxLinks"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Cursor"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ToMaxLinks">
             <summary>
             Gets or sets the maximum number of links that may go into this port.
             </summary>
             <remarks>
             This property is used by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidTo(Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             The value must be non-negative.
             The default value is Infinity.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ToLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromMaxLinks"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.FromSpot">
            for links going out of a port:
             <summary>
             Gets or sets where a link should connect from this port.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Spot.None"/>, meaning that the link routing
             must consider the shape of the port and connect at the closest point.
            
             The value of <see cref="P:Northwoods.Go.Link.FromSpot"/>, if not <see cref="F:Northwoods.Go.Spot.Default"/>, takes precedence over the value at this port
             when determining the route of the link.
             A number of the predefined <see cref="T:Northwoods.Go.Layouts.Layout"/>s automatically set <see cref="P:Northwoods.Go.Link.FromSpot"/> and <see cref="P:Northwoods.Go.Link.ToSpot"/>,
             thereby causing this property and <see cref="P:Northwoods.Go.GraphObject.ToSpot"/> on the port element to be ignored.
             Depending on the layout, you may be able to disable that behavior, such as by setting SetsPortSpot(s) or SetChildPortSpot to false.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.FromSpot"/>
             <seealso cref="M:Northwoods.Go.Link.ComputeSpot(System.Boolean,Northwoods.Go.GraphObject)"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToSpot"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.FromEndSegmentLength">
             <summary>
             Gets or sets the length of the first segment of a link coming from this port.
             </summary>
             <remarks>
             This value is used when the computed "from spot" is not <see cref="F:Northwoods.Go.Spot.None"/>.
             The default value is 10.
             This value also limits how short the <see cref="P:Northwoods.Go.Link.FromShortLength"/> may be drawn.
            
             The value of <see cref="P:Northwoods.Go.Link.FromEndSegmentLength"/>, if not double.NaN, takes precedence over the value at this port
             when determining the route of the link.
            
             For examples of how to use this property, see <a href="../../intro/links.Html#EndSegmentLengths">Link End Segment Lengths</a>.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.FromEndSegmentLength"/>
             <seealso cref="M:Northwoods.Go.Link.ComputeEndSegmentLength(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot,System.Boolean)"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToEndSegmentLength"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.FromShortLength">
             <summary>
             Gets or sets how far the end segment of a link coming from this port stops short of the actual port.
             </summary>
             <remarks>
             Positive values are limited by the <see cref="P:Northwoods.Go.GraphObject.FromEndSegmentLength"/> or <see cref="P:Northwoods.Go.Link.FromEndSegmentLength"/>.
             Negative values cause the link to extend into the port.
             The default value is zero.
            
             This property is useful when you have a thick link and a pointy arrowhead.
             Normally the link Shape extends all the way to the end of the arrowhead.
             If the link Shape is wide, its edges will be seen behind the arrowhead.
             By setting this property to a small positive value, the link Shape can end within the
             body of the arrowhead, leaving only the point of the arrowhead visible at the end of the link.
            
             A negative value for this property can also be useful when you want the link Shape to continue
             into the port, perhaps because a portion of the port is transparent and you want the link to
             appear to connect visually with a different point on the node.
            
             The value of <see cref="P:Northwoods.Go.Link.FromShortLength"/>, if not double.NaN, takes precedence over the value at this port
             when determining the route of the link.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ToShortLength"/>
             <seealso cref="P:Northwoods.Go.Link.FromShortLength"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.FromLinkable">
             <summary>
             Gets or sets whether the user may draw Links from this port.
             </summary>
             <remarks>
             This property is used by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidFrom(Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             The default value is null, which indicates that the real value is inherited from
             the parent <see cref="T:Northwoods.Go.Panel"/>, or false if there is no containing panel.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node,
             or unless you are disabling the "linkability" of a particular GraphObject
             inside a Panel whose fromLinkable has been set or bound to true.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ToLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromMaxLinks"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Cursor"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.FromMaxLinks">
             <summary>
             Gets or sets the maximum double of links that may come out of this port.
             </summary>
             <remarks>
             This property is used by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidFrom(Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             The value must be non-negative.
             The default value is Infinity.
            
             You must set this property on a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is non-null,
             unless the whole <see cref="T:Northwoods.Go.Node"/> is acting as a single port,
             in which case this property should be set on the Node.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.FromLinkable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToMaxLinks"/>
             <seealso cref="P:Northwoods.Go.GraphObject.PortId"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Cursor">
             <summary>
             Gets or sets the mouse cursor to use when the mouse is over this object with no mouse buttons pressed.
             </summary>
             <remarks>
             The value is null when no particular cursor is specified for this object;
             the actual cursor is determined by any containing <see cref="T:Northwoods.Go.Panel"/>.
            
             The default value is the empty string, which means the
             current mouse cursor is determined by the Diagram.
             Other strings should be valid CSS strings that specify a cursor.
             This provides some more information about cursor syntax:
             <a href="https://developer.Mozilla.Org/en-US/docs/Web/CSS/cursor">CSS cursors (mozilla.Org)</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Diagram.DefaultCursor"/>
             <seealso cref="P:Northwoods.Go.Diagram.CurrentCursor"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Click">
             <summary>
             Gets or sets the function to execute when the user single-primary-clicks on this object.
             This typically involves a mouse-down followed by a prompt mouse-up
             at approximately the same position using the left (primary) mouse button.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>
             when the user clicks on a <see cref="T:Northwoods.Go.GraphObject"/>.
             The function is called in addition to the <see cref="E:Northwoods.Go.Diagram.ElementSingleClicked"/> handler.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>
             and this <see cref="T:Northwoods.Go.GraphObject"/>.
             The <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> provides the GraphObject that was found
             at the mouse point before looking up the visual tree of <see cref="P:Northwoods.Go.GraphObject.Panel"/>s
             to get to this object.
            
             From the second argument, *obj*, you can get to the Node or Link via the <see cref="P:Northwoods.Go.GraphObject.Part"/> property.
             From there you can access the bound data via the <see cref="P:Northwoods.Go.Panel.Data"/> property.
             So from an event handler you can get the bound data by `obj.Part.Data`.
            
             By default this property is null.
            
             Objects in Layers that are <see cref="P:Northwoods.Go.Layer.IsTemporary"/> do not receive click events.
             If you do want such objects to respond to clicks, set <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> to true.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and
             <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>.
            
             <p class="boxrun">
             An example of a click event handler is shown in the
             <a href="../../samples/arrowheads.Html">Arrowheads sample</a>.
             </p>
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.DoubleClick"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ContextClick"/>
             <seealso cref="P:Northwoods.Go.Diagram.Click"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.DoubleClick">
             <summary>
             Gets or sets the function to execute when the user double-primary-clicks on this object.
             This typically involves a mouse-down/up/down/up in rapid succession
             at approximately the same position using the left (primary) mouse button.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>
             when the user clicks on a <see cref="T:Northwoods.Go.GraphObject"/>.
             The function is called in addition to the <see cref="E:Northwoods.Go.Diagram.ElementDoubleClicked"/> handler.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>
             and this <see cref="T:Northwoods.Go.GraphObject"/>.
             The <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> provides the GraphObject that was found
             at the mouse point before looking up the visual tree of <see cref="P:Northwoods.Go.GraphObject.Panel"/>s
             to get to this object.
            
             From the second argument, *obj*, you can get to the Node or Link via the <see cref="P:Northwoods.Go.GraphObject.Part"/> property.
             From there you can access the bound data via the <see cref="P:Northwoods.Go.Panel.Data"/> property.
             So from an event handler you can get the bound data by `obj.Part.Data`.
            
             By default this property is null.
            
             Objects in Layers that are <see cref="P:Northwoods.Go.Layer.IsTemporary"/> do not receive click events.
             If you do want such objects to respond to clicks, set <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> to true.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and
             <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>.
            
             <code language="cs">
             myDiagram.NodeTemplate =
               new Node(...) {
                   ...,
                   // second arg will be this GraphObject, which in this case is the Node itself:
                   DoubleClick = (e, obj) => {
                     var d = ((Node)obj).Data as MyNodeData;
                     Console.WriteLine("Node key is " + d.Key);
                   }
                 } ... ;
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Click"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ContextClick"/>
             <seealso cref="P:Northwoods.Go.Diagram.DoubleClick"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ContextClick">
             <summary>
             Gets or sets the function to execute when the user single-secondary-clicks on this object.
             This typically involves a mouse-down followed by a prompt mouse-up
             at approximately the same position using the right (secondary) mouse button.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>
             when the user clicks on a <see cref="T:Northwoods.Go.GraphObject"/>.
             The function is called in addition to the <see cref="E:Northwoods.Go.Diagram.ElementContextClicked"/> handler.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>
             and this <see cref="T:Northwoods.Go.GraphObject"/>.
             The <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> provides the GraphObject that was found
             at the mouse point before looking up the visual tree of <see cref="P:Northwoods.Go.GraphObject.Panel"/>s
             to get to this object.
            
             From the second argument, *obj*, you can get to the Node or Link via the <see cref="P:Northwoods.Go.GraphObject.Part"/> property.
             From there you can access the bound data via the <see cref="P:Northwoods.Go.Panel.Data"/> property.
             So from an event handler you can get the bound data by `obj.Part.Data`.
            
             By default this property is null.
            
             Objects in Layers that are <see cref="P:Northwoods.Go.Layer.IsTemporary"/> do not receive click events.
             If you do want such objects to respond to clicks, set <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> to true.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and
             <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Click"/>
             <seealso cref="P:Northwoods.Go.GraphObject.DoubleClick"/>
             <seealso cref="P:Northwoods.Go.Diagram.ContextClick"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MouseEnter">
             <summary>
             Gets or sets the function to execute when the user moves the mouse
             into this object without holding down any buttons.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>,
             this <see cref="T:Northwoods.Go.GraphObject"/> that the mouse is now in,
             and any previous <see cref="T:Northwoods.Go.GraphObject"/> that the mouse was in.
             The <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> provides the GraphObject that was found
             at the mouse point before looking up the visual tree of <see cref="P:Northwoods.Go.GraphObject.Panel"/>s
             to get to this object.
             By default this property is null.
            
             This function is called with <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> temporarily set to true,
             so that any changes to <see cref="T:Northwoods.Go.GraphObject"/>s are not recorded in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             You do not need to start and commit any transaction in this function.
             After calling this function the diagram will be updated immediately.
            
             For example, consider the situation where one wants to display buttons that the user can click
             whenever the user passes the mouse over a node, and the buttons automatically disappear when the
             mouse leaves the node.  This can be implemented by showing an Adornment holding the buttons.
             <code language="cs">
               var nodeContextMenu =
                 new Adornment("Spot")
                   { Background = "transparent" }
                   .Add(
                     new Placeholder(),
                     new Panel("Vertical")
                       { Alignment = Spot.Right, AlignmentFocus = Spot.Left }
                       .Add(
                         Builder.Make&lt;Panel&gt;("Button")
                           .Add(new TextBlock("Command 1"))
                           .Set(new {
                             Click = new Action&lt;InputEvent, GraphObject&gt;((e, obj) => {
                               var node = ((Adornment)obj.Part).AdornedPart;
                               Console.WriteLine("Command 1 on " + ((MyNodeData)node.Data).Text);
                               node.RemoveAdornment("ContextMenuOver");
                             })
                           }),
                         Builder.Make&lt;Panel&gt;("Button")
                           .Add(new TextBlock("Command 2"))
                           .Set(new {
                             Click = new Action&lt;InputEvent, GraphObject&gt;((e, obj) => {
                               var node = ((Adornment)obj.Part).AdornedPart;
                               Console.WriteLine("Command 2 on " + ((MyNodeData)node.Data).Text);
                               node.RemoveAdornment("ContextMenuOver");
                             })
                           })
                       )
                   );
             </code>
             Then in the definition of the Node we can implement a MouseEnter event handler:
             <code language="cs">
               myDiagram.NodeTemplate =
                 new Node {
                   ...,
                   MouseEnter = (e, obj, _) => {
                     var node = (Node)obj;
                     nodeContextMenu.AdornedElement = node;
                     nodeContextMenu.MouseLeave = (ev, cm, _) => {
                       node.RemoveAdornment("ContextMenuOver");
                     };
                     node.AddAdornment("ContextMenuOver", nodeContextMenu);
                   }
                 } ...;
             </code>
             Note how it automatically defines a <see cref="P:Northwoods.Go.GraphObject.MouseLeave"/> event handler too.
             The context menu Adornment is removed either when the mouse leaves the area of the Adornment
             or when the user executes a button click event handler.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseLeave"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseOver"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseHover"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragEnter"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MouseLeave">
             <summary>
             Gets or sets the function to execute when the user moves the mouse
             out of this object without holding down any buttons.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>,
             this <see cref="T:Northwoods.Go.GraphObject"/> that the mouse has left,
             and any next <see cref="T:Northwoods.Go.GraphObject"/> that the mouse is now in.
             The <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> provides the GraphObject that was found
             at the mouse point before looking up the visual tree of <see cref="P:Northwoods.Go.GraphObject.Panel"/>s
             to get to this object.
             By default this property is null.
            
             This function is called with <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> temporarily set to true,
             so that any changes to <see cref="T:Northwoods.Go.GraphObject"/>s are not recorded in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             You do not need to start and commit any transaction in this function.
             After calling this function the diagram will be updated immediately.
            
             For example, the <a href="../../samples/flowchart.Html">Flow Chart sample</a>
             automatically shows and hides the ports as the mouse passes over a node.
             The node template includes the following settings:
             <code language="cs">
               myDiagram.NodeTemplate =
                 new Node {
                   ...,
                   // handle mouse enter/leave events to show/hide the ports
                   MouseEnter = (e, obj, _) => { showPorts(obj.Part, true); },
                   MouseLeave = (e, obj, _) => { showPorts(obj.Part, false); }
                 } ...;
             </code>
             where the `showPorts` function is defined to set the <see cref="P:Northwoods.Go.GraphObject.Visible"/>
             property of each of the port elements of the node.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseEnter"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseOver"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseHover"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragLeave"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MouseOver">
             <summary>
             Gets or sets the function to execute when the user moves the mouse
             over this object without holding down any buttons.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
             This property is infrequently used -- it is more common to implement <see cref="P:Northwoods.Go.GraphObject.MouseEnter"/>
             and <see cref="P:Northwoods.Go.GraphObject.MouseLeave"/> functions.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>
             and this <see cref="T:Northwoods.Go.GraphObject"/>.
             The <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> provides the GraphObject that was found
             at the mouse point before looking up the visual tree of <see cref="P:Northwoods.Go.GraphObject.Panel"/>s
             to get to this object.
             By default this property is null.
            
             This function is called with <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> temporarily set to true,
             so that any changes to <see cref="T:Northwoods.Go.GraphObject"/>s are not recorded in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             You do not need to start and commit any transaction in this function.
             After calling this function the diagram will be updated immediately.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseHover"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseEnter"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseLeave"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MouseHover">
             <summary>
             Gets or sets the function to execute when the user holds the mouse still for a while
             over this object without holding down any buttons.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and
             <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>.
            
             You can control how long the user must wait with a motionless mouse before
             a "mouse hover" event occurs, by setting <see cref="P:Northwoods.Go.Tools.ToolManager.HoverDelay"/>.
             For example:
             <code language="cs">
               myDiagram.ToolManager.HoverDelay = 500;  // 500 milliseconds
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseOver"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseEnter"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseLeave"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MouseHold">
             <summary>
             Gets or sets the function to execute when the user holds the mouse still for a while
             over this object while holding down a button.
             </summary>
             <remarks>
             This property is used by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
            
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>.
             By default this property is null.
            
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and
             <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>.
            
             You can control how long the user must wait during a drag with a motionless mouse before
             a "mouse hold" event occurs, by setting <see cref="P:Northwoods.Go.Tools.ToolManager.HoldDelay"/>.
             For example:
             <code language="cs">
               myDiagram.ToolManager.HoldDelay = 500;  // 500 milliseconds
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragEnter"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragLeave"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseHover"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MouseDragEnter">
             <summary>
             Gets or sets the function to execute when the user moves the mouse
             into this stationary object during a <see cref="T:Northwoods.Go.Tools.DraggingTool"/> drag;
             this allows you to provide feedback during a drag based on where it might drop.
             </summary>
             <remarks>
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>,
             this <see cref="T:Northwoods.Go.GraphObject"/>, and any previous <see cref="T:Northwoods.Go.GraphObject"/>.
             The <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> provides the GraphObject that was found
             at the mouse point before looking up the visual tree of <see cref="P:Northwoods.Go.GraphObject.Panel"/>s
             to get to this object.
             By default this property is null.
            
             Note that for a drag-and-drop that originates in a different diagram, the target diagram's
             selection collection will not be the parts that are being dragged.
             Instead the temporary parts being dragged can be found as the source diagram's <see cref="P:Northwoods.Go.Tools.DraggingTool.CopiedParts"/>.
            
             This function is called with <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> temporarily set to true,
             so that any changes to <see cref="T:Northwoods.Go.GraphObject"/>s are not recorded in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             You do not need to start and commit any transaction in this function,
             because the <see cref="T:Northwoods.Go.Tools.DraggingTool"/> will be conducting one already.
             After calling this function the diagram will be updated immediately.
            
             For an example of a mouseDragEnter event handler, see the node template in the
             <a href="../../samples/orgChartEditor.Html">Org Chart Editor sample</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragLeave"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseHold"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDrop"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseEnter"/>
             <seealso cref="P:Northwoods.Go.Group.HandlesDragDropForMembers"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MouseDragLeave">
             <summary>
             Gets or sets the function to execute when the user moves the mouse
             out of this stationary object during a <see cref="T:Northwoods.Go.Tools.DraggingTool"/> drag;
             this allows you to provide feedback during a drag based on where it might drop.
             </summary>
             <remarks>
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>,
             this <see cref="T:Northwoods.Go.GraphObject"/>, and any new <see cref="T:Northwoods.Go.GraphObject"/> that the mouse is in.
             The <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> provides the GraphObject that was found
             at the mouse point before looking up the visual tree of <see cref="P:Northwoods.Go.GraphObject.Panel"/>s
             to get to this object.
             By default this property is null.
            
             Note that for a drag-and-drop that originates in a different diagram, the target diagram's
             selection collection will not be the parts that are being dragged.
             Instead the temporary parts being dragged can be found as the source diagram's <see cref="P:Northwoods.Go.Tools.DraggingTool.CopiedParts"/>.
            
             This function is called with <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> temporarily set to true,
             so that any changes to <see cref="T:Northwoods.Go.GraphObject"/>s are not recorded in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             You do not need to start and commit any transaction in this function,
             because the <see cref="T:Northwoods.Go.Tools.DraggingTool"/> will be conducting one already.
             After calling this function the diagram will be updated immediately.
            
             For an example of a mouseDragLeave event handler, see the node template in the
             <a href="../../samples/orgChartEditor.Html">Org Chart Editor sample</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragEnter"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseHold"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDrop"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseLeave"/>
             <seealso cref="P:Northwoods.Go.Group.HandlesDragDropForMembers"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.MouseDrop">
             <summary>
             Gets or sets the function to execute when a user drops the selection on this object
             at the end of a <see cref="T:Northwoods.Go.Tools.DraggingTool"/> drag;
             this allows you to customize the behavior when a drop occurs on an object.
             </summary>
             <remarks>
             If this property value is a function, it is called with an <see cref="T:Northwoods.Go.InputEvent"/>,
             this <see cref="T:Northwoods.Go.GraphObject"/>.
             The <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> provides the GraphObject that was found
             at the mouse point before looking up the visual tree of <see cref="P:Northwoods.Go.GraphObject.Panel"/>s
             to get to this object.
             The function is called within the transaction performed by the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>,
             so you do not need to conduct one.
             By default this property is null.
            
             For an example of a mouseDrop event handler, see the node template in the
             <a href="../../samples/orgChartEditor.Html">Org Chart Editor sample</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragEnter"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseDragLeave"/>
             <seealso cref="P:Northwoods.Go.GraphObject.MouseHold"/>
             <seealso cref="P:Northwoods.Go.Group.HandlesDragDropForMembers"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ActionDown">
             <summary>
             Gets or sets the function to execute on a mouse-down event when this GraphObject's <see cref="P:Northwoods.Go.GraphObject.IsActionable"/>
             is set to true.
             </summary>
             <remarks>
             This property is infrequently set.
             By default this property is null.
            
             This functional property is only set on objects such as buttons, knobs, or sliders that want to handle all events,
             in conjunction with <see cref="T:Northwoods.Go.Tools.ActionTool"/>, pre-empting the normal tool mechanisms.
            
             The <see cref="T:Northwoods.Go.Tools.ActionTool"/> does not conduct any transaction, so if this property has a value,
             the function will not be called within a transaction.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionMove"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionUp"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionCancel"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ActionMove">
             <summary>
             Gets or sets the function to execute on a mouse-move event when this GraphObject's <see cref="P:Northwoods.Go.GraphObject.IsActionable"/>
             is set to true.
             </summary>
             <remarks>
             This property is infrequently set.
             By default this property is null.
            
             This functional property is only set on objects such as buttons, knobs, or sliders that want to handle all events,
             in conjunction with <see cref="T:Northwoods.Go.Tools.ActionTool"/>, pre-empting the normal tool mechanisms.
            
             The <see cref="T:Northwoods.Go.Tools.ActionTool"/> does not conduct any transaction, so if this property has a value,
             the function will not be called within a transaction.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionDown"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionUp"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionCancel"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ActionUp">
             <summary>
             Gets or sets the function to execute on a mouse-up event when this GraphObject's <see cref="P:Northwoods.Go.GraphObject.IsActionable"/>
             is set to true.
             </summary>
             <remarks>
             This property is infrequently set.
             By default this property is null.
            
             This functional property is only set on objects such as buttons, knobs, or sliders that want to handle all events,
             in conjunction with <see cref="T:Northwoods.Go.Tools.ActionTool"/>, pre-empting the normal tool mechanisms.
            
             The <see cref="T:Northwoods.Go.Tools.ActionTool"/> does not conduct any transaction, so if this property has a value,
             the function will not be called within a transaction.
             If you do provide a function that makes changes to the diagram or to its model,
             you should do so within a transaction -- call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> and
             <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionDown"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionMove"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionCancel"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ActionCancel">
             <summary>
             Gets or sets the function to execute when the <see cref="T:Northwoods.Go.Tools.ActionTool"/> is cancelled and this GraphObject's <see cref="P:Northwoods.Go.GraphObject.IsActionable"/>
             is set to true.
             </summary>
             <remarks>
             This property is infrequently set.
             By default this property is null.
            
             This functional property is only set on objects such as buttons, knobs, or sliders that want to handle all events,
             in conjunction with <see cref="T:Northwoods.Go.Tools.ActionTool"/>, pre-empting the normal tool mechanisms.
            
             The <see cref="T:Northwoods.Go.Tools.ActionTool"/> does not conduct any transaction, so if this property has a value,
             the function will not be called within a transaction.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionDown"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionMove"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ActionUp"/>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ToolTip">
             <summary>
             This tooltip is shown when the mouse hovers over this object.
             This value is typically an <see cref="T:Northwoods.Go.Adornment"/>, which implements <see cref="T:Northwoods.Go.IShowHidable"/>.
             </summary>
             <remarks>
             The default value is null, which means no tooltip is shown.
            
             A typical tooltip is defined in the following manner, as taken from
             the <a href="../../samples/kittenMonitor.Html">Kitten Monitor sample</a>:
             <code language="cs">
               myDiagram.NodeTemplate =
                 new Node {
                   ...,
                   // this tooltip shows the name and picture of the kitten
                   ToolTip =
                     Builder.Make&lt;Adornment&gt;("ToolTip")
                       .Add(
                         new Panel(PanelLayoutVertical.Instance)
                           .Add(
                             new Picture()
                               .Bind("Source", "Src", (s, _) => { return "images/" + s + ".png"; }),
                             new TextBlock { Margin = 3 }
                               .Bind("Text", "Key")
                           )
                       )
                 } ...;
             </code>
             Note that this Adornment depends on having the same data binding as the adorned Part
             (i.e. the same value for <see cref="P:Northwoods.Go.Panel.Data"/>).
            
             Tooltips are not copied by <see cref="M:Northwoods.Go.GraphObject.Copy"/>, so that tooltips may be shared by all instances of a template.
            
             Tooltips are shown after a timed delay given by the <see cref="P:Northwoods.Go.Tools.ToolManager.HoverDelay"/>.
             You can change the delay time by:
             <code language="cs">
               myDiagram.ToolManager.HoverDelay = 500;  // 500 milliseconds
             </code>
            
             Tooltips are normally positioned by <see cref="M:Northwoods.Go.Tools.ToolManager.PositionToolTip(Northwoods.Go.Adornment,Northwoods.Go.GraphObject)"/>.
             However, if there is a <see cref="T:Northwoods.Go.Placeholder"/> in the tooltip, the tooltip (i.e. an Adornment)
             will be positioned so that the Placeholder is at the same position as this adorned GraphObject.
            
             Replacing this value will not modify or remove any existing tooltip that is being shown for this object.
            
             Read more about tooltips at <a href="../../intro/toolTips.Html">ToolTips</a>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.ContextMenu">
             <summary>
             This context menu is shown upon a context click on this object.
             This value is typically an <see cref="T:Northwoods.Go.Adornment"/>, which implements <see cref="T:Northwoods.Go.IShowHidable"/>.
             </summary>
             <remarks>
             The default value is null, which means no context menu is shown.
            
             Changing this value will not modify or remove any existing menu that is being shown for this object.
            
             Context menus may also depend on having the same data binding as the adorned Part
             (i.e. the same value for <see cref="P:Northwoods.Go.Panel.Data"/>).
            
             Context menus are not copied by <see cref="M:Northwoods.Go.GraphObject.Copy"/>, so that context menus may be shared by all instances of a template.
            
             A typical context menu is implemented as an Adornment with several buttons in it.
             For example, this context menu is defined in the
             <a href="../../samples/dynamicPorts.Html">Dynamic Port sample</a>:
             <code language="cs">
               var nodeMenu =  // context menu for each Node
                 Builder.Make&lt;Adornment&gt;("ContextMenu")
                   .Add(
                     Builder.Make&lt;Panel&gt;("ContextMenuButton")
                       .Add(new TextBlock("Add top port"))
                       .Set(new { Click = new Action&lt;InputEvent, GraphObject&gt;((e, obj) => { AddPort("top"); }) }),
                     Builder.Make&lt;Panel&gt;("ContextMenuButton")
                       .Add(new TextBlock("Add left port"))
                       .Set(new { Click = new Action&lt;InputEvent, GraphObject&gt;((e, obj) => { AddPort("left"); }) }),
                     Builder.Make&lt;Panel&gt;("ContextMenuButton")
                       .Add(new TextBlock("Add right port"))
                       .Set(new { Click = new Action&lt;InputEvent, GraphObject&gt;((e, obj) => { AddPort("right"); }) }),
                     Builder.Make&lt;Panel&gt;("ContextMenuButton")
                       .Add(new TextBlock("Add bottom port"))
                       .Set(new { Click = new Action&lt;InputEvent, GraphObject&gt;((e, obj) => { AddPort("bottom"); }) })
                   );
             </code>
             and is used in the node template:
             <code language="cs">
               myDiagram.NodeTemplate =
                 new Node(PanelLayoutTable.Instance) { ..., ContextMenu = nodeMenu } ...;
             </code>
            
             Context menus are normally positioned by <see cref="M:Northwoods.Go.Tools.ContextMenuTool.PositionContextMenu(Northwoods.Go.Adornment,Northwoods.Go.GraphObject)"/>.
             However, if there is a <see cref="T:Northwoods.Go.Placeholder"/> in the context menu, the context menu (i.e. an Adornment)
             will be positioned so that the Placeholder is at the same position as this adorned GraphObject.
            
             The <a href="../../samples/basic.Html">Basic sample</a> also shows how
             to make context menu items invisible when the command is disabled.
            
             Replacing this value will not modify or remove any existing context menu that is being shown for this object.
            
             Read more about context menus at <a href="../../intro/contextMenus.Html">Context Menus</a>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])">
             <summary>
             Add a number of data-bindings to this GraphObject.
             </summary>
             <remarks>
             Do not add, modify, or remove object Bindings after this object has been copied.
            
             Read more about <see cref="T:Northwoods.Go.Models.Binding"/>s at <a href="../../intro/dataBinding.Html">the Introduction page about Data Bindings</a>.
             </remarks>
             <param name="bindings">the Bindings</param>
             <returns>this GraphObject</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
             <summary>
             Add a number of data-bindings to this GraphObject.
             </summary>
             <remarks>
             Do not add, modify, or remove object Bindings after this object has been copied.
            
             Read more about <see cref="T:Northwoods.Go.Models.Binding"/>s at <a href="../../intro/dataBinding.Html">the Introduction page about Data Bindings</a>.
             </remarks>
             <param name="bindings">a collection of Bindings</param>
             <returns>this GraphObject</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
             <summary>
             Add a data-binding to this GraphObject for the given property name and optional conversion functions.
             </summary>
             <remarks>
             Do not add, modify, or remove object Bindings after this object has been copied.
            
             Read more about <see cref="T:Northwoods.Go.Models.Binding"/>s at <a href="../../intro/dataBinding.Html">the Introduction page about Data Bindings</a>.
            
             If you need to call <see cref="M:Northwoods.Go.Models.Binding.OfElement(System.String)"/> or <see cref="M:Northwoods.Go.Models.Binding.OfModel"/>, you will have to pass a `new Binding()`
             to <see cref="M:Northwoods.Go.GraphObject.Bind``1(Northwoods.Go.Models.Binding[])"/>.
             </remarks>
             <param name="prop">A string naming the source and target property on the target object.
               This should not be the empty-string.</param>
             <param name="conv">An optional side-effect-free function converting the data property value to the value to set the target property.
               If the function is null or not supplied, no conversion takes place.</param>
             <param name="backconv">An optional conversion function to convert property values back to data values.
               Specifying this modifies the binding to set its <see cref="P:Northwoods.Go.Models.Binding.Mode"/> to be <see cref="F:Northwoods.Go.Models.BindingMode.TwoWay"/>.</param>
             <returns>this GraphObject</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
             <summary>
             Add a data-binding to this GraphObject for the given property names and conversion functions.
             </summary>
             <remarks>
             Do not add, modify, or remove object Bindings after this object has been copied.
            
             Read more about <see cref="T:Northwoods.Go.Models.Binding"/>s at <a href="../../intro/dataBinding.Html">the Introduction page about Data Bindings</a>.
            
             If you need to call <see cref="M:Northwoods.Go.Models.Binding.OfElement(System.String)"/> or <see cref="M:Northwoods.Go.Models.Binding.OfModel"/>, you will have to pass a `new Binding()`
             to <see cref="M:Northwoods.Go.GraphObject.Bind``1(Northwoods.Go.Models.Binding[])"/>.
             </remarks>
             <param name="targetprop">A string naming the target property on the target object.
               This should not be the empty-string.</param>
             <param name="sourceprop">A string name the source property on the bound data object
               If this is the empty string, the whole <see cref="P:Northwoods.Go.Panel.Data"/> object is used.</param>
             <param name="conv">An optional side-effect-free function converting the data property value to the value to set the target property.
               If the function is null or not supplied, no conversion takes place.</param>
             <param name="backconv">An optional conversion function to convert property values back to data values.
               Specifying this modifies the binding to set its <see cref="P:Northwoods.Go.Models.Binding.Mode"/> to be <see cref="F:Northwoods.Go.Models.BindingMode.TwoWay"/>.</param>
             <returns>this GraphObject</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)">
             <summary>
             Set a property of this GraphObject to a value.
             </summary>
             /// <remarks>
             If this is a <see cref="T:Northwoods.Go.Panel"/>, you can set properties on named elements within the panel by using a *Name_Property* syntax for the property name.
             For example, if a <see cref="T:Northwoods.Go.Node"/> has a <see cref="T:Northwoods.Go.TextBlock"/> whose name is "TB",
             one could set properties on the Node and on that named element by:
             <code language="cs">
             aNode.Set("Background", "red");
             aNode.Set("TB_Font", "bold 12pt sans-serif");
             </code>
            
             At the current time only a single underscore is permitted in the property "name".
             Note that the use of all-upper-case object names is simply a convention.
            
             <p class="boxread">
             Calling this method is much less efficient than setting properties directly.
             It's acceptable to call when constructing templates, as that will only happen once.
             </p>
             </remarks>
             <param name="propertyname">the name of the property to set</param>
             <param name="value">the value to set the property to</param>
             <returns>this GraphObject</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)">
             <summary>
             Set properties of this GraphObject to the values of a "partial" GraphObject.
             </summary>
             <remarks>
             Only properties that are different from the default for the GraphObject will be set in this manner.
            
             For example, the following will only set the Angle and Opacity properties:
             <code language="cs">
             myObject.Set(new GraphObject {
               Angle = 90,
               Opacity = 0.5,
               Scale = 1  // won't be set, even if this GraphObject's scale isn't 1
             })
             </code>
            
             You should only call this with a GraphObject subclass as an argument.
            
             <p class="boxread">
             Calling this method is much less efficient than setting properties directly.
             It's acceptable to call when constructing templates, as that will only happen once.
             </p>
             </remarks>
             <param name="obj">the partial GraphObject to use for setting properties</param>
             <returns>this GraphObject</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Set(System.Object)">
             <summary>
             Set properties of this GraphObject to the values of a given anonymous object.
             </summary>
             <remarks>
             If this is a <see cref="T:Northwoods.Go.Panel"/>, you can set properties on named elements within the panel by using a *Name_Property* syntax for the property name.
             For example, if a <see cref="T:Northwoods.Go.Node"/> has a <see cref="T:Northwoods.Go.Picture"/> that is named "ICON" (because its <see cref="P:Northwoods.Go.GraphObject.Name"/> property has been set to "ICON")
             and a <see cref="T:Northwoods.Go.TextBlock"/> whose name is "TB", one could set properties on the Node and on each of those named elements by:
             <code language="cs">
             aNode.Set(new {
               Background = "red",
               ICON_Source = "https://www.Example.Com/images/alert.Jpg",
               TB_Font = "bold 12pt sans-serif"
             });
             </code>
            
             At the current time only a single underscore is permitted in the property "name".
             Note that the use of all-upper-case object names is simply a convention.
            
             <p class="boxread">
             Calling this method is much less efficient than setting properties directly.
             It's acceptable to call when constructing templates, as that will only happen once.
             </p>
             </remarks>
             <param name="props">the dynamic object of properties</param>
             <returns>this GraphObject</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})">
             <summary>
             This method takes a function that can be used to apply multiple settings, bindings,
             or <see cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/> calls, to different GraphObjects. This is common in initialization.
             </summary>
             <remarks>
             If you are just adding settings, bindings, or GraphObjects to a single GraphObject,
             you do not need to use this, you can just chain calls to <see cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>, <see cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>,
             and <see cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/> instead. This method is mostly useful when setting the same values
             across multiple GraphObjects.
            
             <code language="cs">
             // define some common property settings
             void nodeStyle(Node node) {
               node
                 .Bind("Location", "Loc", Point.Parse, Point.Stringify))
                 .Set(new { SelectionAdorned = false, Resizable = true });
             }
            
             var template1 =
               new Node() { ... }
                 .Apply(nodeStyle);
            
             var template2 =
               new Node() { ... }
                 .Apply(nodeStyle);
             </code>
             </remarks>
             <param name="func">the function to apply to this GraphObject</param>
             <returns>this GraphObject</returns>
        </member>
        <member name="P:Northwoods.Go.GraphObject.CustomProperties">
             <summary>
             This write-only property allows for setting multiple programmer-defined properties.
             </summary>
             <remarks>
             The object should be an anonymous type object containing property names, beginning with "_",
             and their corresponding values.
            
             <code language="cs">
             // standalone set
             myNode.CustomProperties =  new {
               _ExtraString = "hello",
               _ExtraPoint = new Point(5, 5)
             };
            
             // more common, within a call to GraphObject.Set
             myNode.Set(new Node {
               LocationSpot = Spot.Center,
               FromSpot = Spot.BottomRightSides,
               ToSpot = Spot.TopLeftSides,
               CustomProperties = new {
                 _ExtraString = "hello",
                 _ExtraPoint = new Point(5, 5)
               }
             });
             </code>
             </remarks>
        </member>
        <member name="P:Northwoods.Go.GraphObject.Item(System.String)">
            <summary>
            This index operator allows for access to programmer-defined properties stored in a Dictionary&lt;string, object&gt;.
            </summary>
            <param name="prop">the property name, which must begin with a _</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])">
            <summary>
            Add a number of <see cref="T:Northwoods.Go.AnimationTrigger"/>s to this GraphObject.
            </summary>
            <param name="triggers">the AnimationTriggers</param>
            <returns>this GraphObject</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <summary>
            Add a number of <see cref="T:Northwoods.Go.AnimationTrigger"/>s to this GraphObject.
            </summary>
            <param name="triggers">a collection of AnimationTriggers</param>
            <returns>this GraphObject</returns>
        </member>
        <member name="M:Northwoods.Go.GraphObject.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            <summary>
            Add an <see cref="T:Northwoods.Go.AnimationTrigger"/> to this GraphObject.
            </summary>
            <param name="propertyName">A string naming the target property to animate.
              This should not be the empty string.</param>
            <param name="animationSettings">An optional tuple describing properties to set on animations created by this AnimationTrigger.
              See the <see cref="P:Northwoods.Go.AnimationTrigger.AnimationSettings"/> property for detail.
              If specified, this also sets the <see cref="T:Northwoods.Go.StartCondition"/> to <see cref="F:Northwoods.Go.StartCondition.Immediate"/>.</param>
            <param name="startCondition">An optional <see cref="T:Northwoods.Go.StartCondition"/> to set the <see cref="P:Northwoods.Go.AnimationTrigger.StartCondition"/> property.</param>
        </member>
        <member name="M:Northwoods.Go.GraphObject.FindBindingPanel">
            <summary>
            Walks up the visual tree and returns the first Panel whose <see cref="P:Northwoods.Go.Panel.Data"/> is bound to data.
            This can be useful when you need to inspect <see cref="P:Northwoods.Go.Panel.Data"/> objects.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GraphObjectEventHandlers">
            @hidden @internal
            @unrestricted
        </member>
        <member name="M:Northwoods.Go.GraphObjectEventHandlers.Copy">
            @hidden @internal
            @this{GraphObjectEventHandlers}
            <returns></returns>
        </member>
        <member name="T:Northwoods.Go.Group">
             <summary>
             A Group is a <see cref="T:Northwoods.Go.Node"/> that can contain a subgraph of <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s,
             which are members of the group.
             </summary>
             <remarks>
             <p class="box">
             For more discussion, see <a href="../../intro/groups.Html">Introduction to Groups</a>.
             See samples that make use of Groups in the <a href="../../samples/index.Html#groups">samples index</a>.
             </p>
            
             Although you can create a Group and <see cref="M:Northwoods.Go.Diagram.Add(Northwoods.Go.Part)"/> it to a Diagram, this does not update the Model.
             It is more common to create a group by adding a node data object to the model
             by calling <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>. For example:
             <code language="cs">
               myDiagram.StartTransaction("make new group");
               myDiagram.Model.AddNodeData(new MyNodeData { Key = "Omega", IsGroup = true });
               myDiagram.CommitTransaction("make new group");
             </code>
            
             This will cause a Group to be created (copying the template found in <see cref="P:Northwoods.Go.Diagram.GroupTemplateMap"/>),
             added to the Diagram in some <see cref="T:Northwoods.Go.Layer"/> (based on <see cref="P:Northwoods.Go.Part.LayerName"/>), and bound to the group data
             (resulting in <see cref="P:Northwoods.Go.Panel.Data"/> referring to that group data object).
             Note that the object includes setting `IsGroup` to true,
             to indicate that the object represents a Group rather than a regular Node or simple Part.
            
             The member Parts of a Group, which you can access as the <see cref="P:Northwoods.Go.Group.MemberParts"/> collection,
             belong to the group but are not in the visual tree of the group.
             All <see cref="T:Northwoods.Go.Part"/>s are directly in <see cref="T:Northwoods.Go.Layer"/>s -- they cannot be inside a <see cref="T:Northwoods.Go.Panel"/>.
             This allows group member parts to be in layers different from the group's layer.
            
             You can change the membership of a <see cref="T:Northwoods.Go.Node"/> or a simple <see cref="T:Northwoods.Go.Part"/> in a Group by setting
             its <see cref="P:Northwoods.Go.Part.ContainingGroup"/> property.
             This is done automatically for you by the diagram if you initialize the `group` property on the node data
             in the model to be the key of the containing group node data.
             Thus you should do something like:
             <code language="cs">
               myDiagram.StartTransaction("add new member");
               myDiagram.Model.AddNodeData(new MyNodeData { Group = someExistingGroupKey, ... });
               myDiagram.CommitTransaction("add new member");
             </code>
            
             where you would make sure the node data object included all of the properties you need.
             You can also change the relationship dynamically by calling <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)"/>.
            
             The membership of <see cref="T:Northwoods.Go.Link"/>s is computed automatically for you by the diagram based on the membership of
             the connected <see cref="T:Northwoods.Go.Node"/>s.
             For example, if the <see cref="P:Northwoods.Go.Link.FromNode"/> is a top-level node but the <see cref="P:Northwoods.Go.Link.ToNode"/> is a member of a group,
             the link is a top-level link.
             If the two connected nodes both belong to the same group, the link is a member of that group.
             If the two connected nodes belong to different groups, the link belongs to the common container group, if there is any.
             Note that if a link connects a member of a group with the group itself, the link is a member of that group.
            
             All of the group-member relationships effectively form a tree structure.
             These properties and methods are useful in navigating these relationships:
               - <see cref="P:Northwoods.Go.Part.ContainingGroup"/>
               - <see cref="P:Northwoods.Go.Part.IsTopLevel"/>
               - <see cref="M:Northwoods.Go.Part.FindTopLevelPart"/>
               - <see cref="M:Northwoods.Go.Part.FindSubGraphLevel"/>
               - <see cref="M:Northwoods.Go.Part.FindCommonContainingGroup(Northwoods.Go.Part)"/>
               - <see cref="P:Northwoods.Go.Group.MemberParts"/>
               - <see cref="M:Northwoods.Go.Group.FindSubGraphParts"/>
               - <see cref="M:Northwoods.Go.Group.FindExternalLinksConnected"/>
               - <see cref="M:Northwoods.Go.Group.FindExternalNodesConnected"/>
            
             As the membership of a group changes, you may want to update the appearance of the group.
             You can set the <see cref="P:Northwoods.Go.Group.MemberAdded"/> property to be an Action that is called.
             These functions must not modify any membership relationships -- these function properties just exist to update the appearance of the Group.
            
             You can control whether certain Nodes are added to a Group by <see cref="M:Northwoods.Go.CommandHandler.GroupSelection"/> or
             <see cref="M:Northwoods.Go.Group.AddMembers(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/> or <see cref="M:Northwoods.Go.CommandHandler.AddTopLevelParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/> by affecting the result of <see cref="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)"/>,
             which is responsible for deciding whether it is OK to add a Node to a Group or to remove a Node from a Group to be a top-level node.
             You can override that predicate on CommandHandler, but it is easier to set the <see cref="P:Northwoods.Go.Group.MemberValidation"/> or
             <see cref="P:Northwoods.Go.CommandHandler.MemberValidation"/> functional property.
            
             <p class="box">
             For a more general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
            
             The area occupied by the subgraph is represented in the group's visual tree by a <see cref="T:Northwoods.Go.Placeholder"/>.
             As the group <see cref="T:Northwoods.Go.Placeholder"/> grows and shrinks based on the sizes and positions of the member nodes and links,
             the group will grow and shrink accordingly.
             The placeholder is always the <see cref="P:Northwoods.Go.Part.LocationElement"/>,
             although you may specify any <see cref="T:Northwoods.Go.Spot"/> as the <see cref="P:Northwoods.Go.Part.LocationSpot"/>.
             A Group need not have a placeholder, but it may have at most one.
            
             A group has its own <see cref="P:Northwoods.Go.Group.Layout"/> property that is used to position the member nodes and route the member links.
            
             The Group class also supports the notion of expanding and collapsing the subgraph,
             causing the member nodes and links to be shown or hidden.
             Principally this is a matter of setting <see cref="P:Northwoods.Go.Group.IsSubGraphExpanded"/>.
             Changes to this property will result in calls to <see cref="M:Northwoods.Go.Group.CollapseSubGraph"/> or <see cref="M:Northwoods.Go.Group.ExpandSubGraph"/>, as appropriate.
            
             If you want to change the appearance of the group you can do so in a function that you assign to
             the <see cref="P:Northwoods.Go.Group.SubGraphExpandedChanged"/> property.
             This function must not modify any member relationships or expand or collapse any groups -- the functional property just exists
             to update the appearance of the Group.
            
             <p class="box">
             For more discussion and examples, see <a href="../../intro/subgraphs.Html">SubGraphs</a>.
             </p>
            
             If you want the user to be able to create a Group out of the currently
             selected Parts using the <see cref="M:Northwoods.Go.CommandHandler.GroupSelection"/> command,
             you need to first set the <see cref="P:Northwoods.Go.CommandHandler.ArchetypeGroupData"/> property
             to a data object with `IsGroup` set to true.
             If you want the user to be able to ungroup a Group,
             using the <see cref="M:Northwoods.Go.CommandHandler.UngroupSelection(Northwoods.Go.Group)"/> command,
             you need to set <see cref="P:Northwoods.Go.Group.Ungroupable"/> to true.
            
             <p class="box">
             For more discussion and examples, see <a href="../../intro/groups.Html">Groups</a>,
             <a href="../../intro/subgraphs.Html">SubGraphs</a>, and
             <a href="../../intro/sizedGroups.Html">Sized Groups</a>.
             </p>
            
             Only Groups that are in Diagrams can have member Parts or connections via Links.
             Templates should not be connected with Links, be labels of Links, be members of Groups, have any member Parts, or have any Adornments.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Group.#ctor">
            <summary>
            Constructs an empty Group with no visual elements and no member parts;
            normally a Group will have some visual elements surrounding a <see cref="T:Northwoods.Go.Placeholder"/>.
            </summary>
            <remarks>
            The default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Group.#ctor(Northwoods.Go.PanelLayouts.PanelLayout)">
            <summary>
            Constructs an empty Group with no visual elements and no member parts;
            normally a Group will have some visual elements surrounding a <see cref="T:Northwoods.Go.Placeholder"/>.
            </summary>
            <param name="type">if null, the default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Group.#ctor(System.String)">
            <summary>
            Constructs an empty Group with no visual elements and no member parts;
            normally a Group will have some visual elements surrounding a <see cref="T:Northwoods.Go.Placeholder"/>.
            </summary>
            <param name="type">if the empty string, the default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Group.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Copies properties to a cloned Group.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Group.DisplaceProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Fix up references in the argument object so that the argument object can get a new visual tree
            </summary>
            <param name="c">The original Part whose category is being changed by displacing its visual tree with this Part's visual tree.</param>
        </member>
        <member name="M:Northwoods.Go.Group.ApplyProtected(Northwoods.Go.GraphObject)">
            <summary>
            Copy properties from this object to the target object, which must be of the same class.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Group.RaisePartChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <summary>
            Call this method to notify that the some state has changed.
            </summary>
            <remarks>
            This just calls the <see cref="T:Northwoods.Go.Diagram"/>'s <see cref="M:Northwoods.Go.Diagram.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/> method.
            </remarks>
            <param name="change">specifies the general nature of the change;
            permissible values include <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>, <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>,
            <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>, and <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.</param>
            <param name="propertyname">names the property that was modified.</param>
            <param name="obj"></param> the object that was modified, typically a <see cref="T:Northwoods.Go.GraphObject"/>.
            <param name="oldval">the previous or older value.</param>
            <param name="newval">the next or newer value.</param>
            <param name="oldparam">an optional value that helps describe the older value.</param>
            <param name="newparam">an optional value that helps describe the newer value.</param>
        </member>
        <member name="M:Northwoods.Go.Group.OnBoundsChanged(Northwoods.Go.Rect,Northwoods.Go.Rect)">
            <summary>
            Called at the end of GraphObject.Arrange, Part.Arrange, and Part.ValidatePosition (used in lieu of arrange)
            </summary>
            <param name="oldb"></param>
            <param name="newb"></param>
        </member>
        <member name="M:Northwoods.Go.Group.ArrangeProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Causes a Group to arrange it's children.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Group.EnsureBounds">
             <summary>
             Measures if needed to make sure the <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> and <see cref="P:Northwoods.Go.GraphObject.NaturalBounds"/> are all real numbers,
             primarily to get the actual width and height.
             </summary>
             <remarks>
             <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> will get a real width and height, but the x and y values may continue to be `NaN`
             if they were that way beforehand.
            
             This is sometimes necessary to call when defining custom layouts or implementing virtualization,
             so that it can work with the actual size of the nodes.
            
             For efficiency, do not call this method unnecessarily.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Group.IsReadyToMeasureArrange">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Group.Placeholder">
            <summary>
            This read-only property returns a <see cref="T:Northwoods.Go.Placeholder"/> that this group may contain in its visual tree.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Group.ComputesBoundsAfterDrag">
             <summary>
             Gets or sets whether the size of the area of the <see cref="T:Northwoods.Go.Group"/>'s <see cref="T:Northwoods.Go.Placeholder"/>
             should remain the same during a <see cref="T:Northwoods.Go.Tools.DraggingTool"/> move until a drop occurs.
             </summary>
             <remarks>
             Groups within temporary layers (such as new Groups during a drag-copy) are unaffected by this property.
            
             In other words, when the value is true, re-computing the bounds of the
             members is suspended until a drop occurs, at which time the border is recomputed,
             perhaps not including some members that had been dragged out and reparented.
             The default value is false.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Group.ComputesBoundsIncludingLinks">
            <summary>
            Gets or sets whether a <see cref="T:Northwoods.Go.Placeholder"/>'s bounds includes the bounds of member Links.
            </summary>
            <remarks>
            The default value is true.
            If this is false, only non-Link member Parts are used to compute the Placeholder's bounds in document coordinates.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Group.ComputesBoundsIncludingLocation">
            <summary>
            Gets or sets whether a <see cref="T:Northwoods.Go.Placeholder"/>'s bounds includes the previous Group.Location.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Group.HandlesDragDropForMembers">
             <summary>
             Gets or sets whether drag-and-drop events may be bubbled up to this Group if not handled by member Parts.
             </summary>
             <remarks>
             The default value is false -- each Node or Link that is a member of the Group needs to define
             its own <see cref="P:Northwoods.Go.GraphObject.MouseDragEnter"/>, <see cref="P:Northwoods.Go.GraphObject.MouseDragLeave"/>, and <see cref="P:Northwoods.Go.GraphObject.MouseDrop"/>
             event handlers if you want dragging/dropping on a member part to act as if the user were acting on the group.
            
             This is currently restricted to only call the mouseDragEnter, mouseDragLeave, and mouseDrop event handlers
             defined on the whole Group, not on any element inside the Group's visual tree.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Group.MemberParts">
             <summary>
             This read-only property returns an iterator over the member <see cref="T:Northwoods.Go.Part"/>s of this Group.
             </summary>
             <remarks>
             Setting <see cref="P:Northwoods.Go.Part.ContainingGroup"/> to refer to this Group
             will add that part to this collection.
             The Parts can be <see cref="T:Northwoods.Go.Node"/>s, <see cref="T:Northwoods.Go.Link"/>s, <see cref="T:Northwoods.Go.Group"/>s, or simple <see cref="T:Northwoods.Go.Part"/>s.
            
             A template should not have any member parts.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Group.AddMemberInternal(Northwoods.Go.Part)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Group.RemoveMemberInternal(Northwoods.Go.Part)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Group.DeleteCascade">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Group.Layout">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Layouts.Layout"/> used to position all of the immediate member nodes and links in this group.
             </summary>
             <remarks>
             By default this property is an instance of <see cref="T:Northwoods.Go.Layouts.Layout"/> -- no special layout is used, which just makes
             sure each member node has a valid location.
            
             A group layout must not be shared with any <see cref="P:Northwoods.Go.Diagram.Layout"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Group.MemberAdded">
             <summary>
             Gets or sets the function that is called after a member <see cref="T:Northwoods.Go.Part"/> has been added to or removed from this Group.
             </summary>
             <remarks>
             It is typically used to modify the appearance of the group.
             The first argument will be this Group.
             The second argument will be a Part, typically a Node, but may be a simple Part or a Link.
             The third argument will be a bool, true if a member was added, and false if it was removed.
            
             If the value is a function, that function must not modify any membership relationships.
             The member Part has already been added -- trying to remove it or adding or removing another member or the Group itself may produce undefined behavior.
            
             The default value is null -- no function is called.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Group.MemberValidation">
             <summary>
             Gets or sets the predicate that determines whether or not a Part may become a member of this group.
             </summary>
             <remarks>
             If this is non-null, the predicate is called in addition to any <see cref="P:Northwoods.Go.CommandHandler.MemberValidation"/> predicate.
            
             The default predicate is null, which is equivalent to simply returning true.
             The first argument will be this Group.
             The second argument will be a Part, typically a Node, but will not be a Link or an Adornment.
            
             The function, if supplied, must not have any side-effects.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Group.CanAddMembers(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
             <summary>
             See if the given collection of <see cref="T:Northwoods.Go.Part"/>s contains non-Links all for which
             <see cref="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)"/> returns true.
             </summary>
             <remarks>
             The CommandHandler predicate will use <see cref="P:Northwoods.Go.CommandHandler.MemberValidation"/>
             and <see cref="P:Northwoods.Go.Group.MemberValidation"/>, if either or both are defined.
            
             This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
             but commands and tools should check those properties.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Group.AddMembers(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)">
             <summary>
             Add the <see cref="T:Northwoods.Go.Part"/>s in the given collection as members of this Group
             for those Parts for which <see cref="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)"/> returns true.
             </summary>
             <remarks>
             If the check argument to this method is not supplied or false,
             this will set <see cref="P:Northwoods.Go.Part.ContainingGroup"/> on each part unconditionally, not calling <see cref="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)"/>.
            
             The CommandHandler predicate will use <see cref="P:Northwoods.Go.CommandHandler.MemberValidation"/>
             and <see cref="P:Northwoods.Go.Group.MemberValidation"/>, if either or both are defined.
            
             At this time there is no "RemoveMembers" method.
             If you want to make a collection of Parts to be top-level parts, not members of any Group but still in the Diagram, call <see cref="M:Northwoods.Go.CommandHandler.AddTopLevelParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/>.
             If you want to remove a collection of Parts not only from a Group but from the whole Diagram, call <see cref="M:Northwoods.Go.Diagram.RemoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/>.
             </remarks>
             <param name="coll"></param>
             <param name="check">whether to call <see cref="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)"/> to confirm that it is valid to add the Part to be a member of this Group.</param>
             <returns>true if all non-Links were added to this Group; false if some Parts or Nodes were not able to be added.</returns>
        </member>
        <member name="P:Northwoods.Go.Group.Ungroupable">
            <summary>
            Gets or sets whether the user may ungroup this group.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
            <seealso cref="M:Northwoods.Go.Group.CanUngroup"/>
        </member>
        <member name="M:Northwoods.Go.Group.CanUngroup">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Group.Ungroupable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowUngroup"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowUngroup"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may ungroup this object.</returns>
        </member>
        <member name="M:Northwoods.Go.Group.InvalidateConnectedLinks(System.Collections.Generic.HashSet{Northwoods.Go.Part})">
            @hidden @internal
            <summary>
            This invalidates all links connected to the node recursively
            </summary>
        </member>
        <member name="M:Northwoods.Go.Group.FindExternalLinksConnected">
            <summary>
            Returns an enumerable of the <see cref="T:Northwoods.Go.Link"/>s that connect with this group or any node contained by this group,
            in either direction, but that are not internal to this group.
            </summary>
            <remarks>
            Links that are contained by this group (even in nested groups) are not included in the result collection.
            </remarks>
            <seealso cref="M:Northwoods.Go.Node.FindLinksConnected(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Group.FindExternalNodesConnected">
            <summary>
            Returns an iterator over all of the <see cref="T:Northwoods.Go.Node"/>s that are connected with this group or any node contained by this group,
            by a link in either direction, but that are not internal to this group.
            </summary>
            <remarks>
            Nodes that are contained by this group (even in nested groups) are not included in the result collection.
            However this group itself might be in the results if there is a reflexive link connected to this group.
            </remarks>
            <seealso cref="M:Northwoods.Go.Node.FindNodesConnected(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Group.FindContainingGroupChain">
            @hidden @internal
            <summary>
            Return a collection of <see cref="T:Northwoods.Go.Group"/>s that are all of the containing groups (<see cref="P:Northwoods.Go.Part.ContainingGroup"/>) of this group.
            </summary>
            <remarks>
            The resulting collection will include this Group itself.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Group.FindSubGraphParts">
             <summary>
             Return a collection of <see cref="T:Northwoods.Go.Part"/>s that are all of the nodes and links
             that are members of this group, including inside nested groups,
             but excluding this group itself.
             </summary>
             <remarks>
             For member nodes that are <see cref="T:Northwoods.Go.Group"/>s, this will include its members recursively.
            
             If you want only the immediate members of this group, use the <see cref="P:Northwoods.Go.Group.MemberParts"/> property.
            
             If you want to find the collection of Nodes and Links that are in the subtree of a given <see cref="T:Northwoods.Go.Node"/>, use <see cref="M:Northwoods.Go.Node.FindTreeParts(System.Int32)"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Group.MadeVisible(System.Boolean)">
            @hidden @internal
            <summary>
            Called when a part's visibility changes, from .visible or other indirect sources (like layer.Visible)
            </summary>
            <param name="val">whether the part was just made visible (true) or just made invisible (false)</param>
        </member>
        <member name="M:Northwoods.Go.Group.CollapseSubGraph">
             <summary>
             Hide each of the member nodes and links of this group,
             and recursively collapse any member groups.
             </summary>
             <remarks>
             This changes the value of <see cref="M:Northwoods.Go.Part.IsVisible"/> of the whole subgraph and the parts owned by
             those member nodes and links.
             However, this group's visibility is unchanged.
            
             This sets <see cref="P:Northwoods.Go.Group.IsSubGraphExpanded"/> to false on this group and on all of the nested <see cref="T:Northwoods.Go.Group"/>s.
             For those nested <see cref="T:Northwoods.Go.Group"/>s that were expanded,
             <see cref="P:Northwoods.Go.Group.WasSubGraphExpanded"/> is set to true.
            
             This method does not perform a transaction or start any animation.
            
             To collapse trees made of <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s, use <see cref="M:Northwoods.Go.Node.CollapseTree(System.Int32)"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Group._CollapseSubGraph1(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Diagram,Northwoods.Go.Group)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Group.ExpandSubGraph">
             <summary>
             Show each member node and link,
             and perhaps recursively expand nested subgraphs.
             </summary>
             <remarks>
             This may change the value of <see cref="M:Northwoods.Go.Part.IsVisible"/> of the whole subgraph and the parts owned by
             those member nodes and links.
             However, this group's visibility is unchanged.
            
             This sets <see cref="P:Northwoods.Go.Group.IsSubGraphExpanded"/> to true on this group and on all of the nested <see cref="T:Northwoods.Go.Group"/>s.
             This will expand a nested group only if its <see cref="P:Northwoods.Go.Group.WasSubGraphExpanded"/> property was true.
            
             This method does not perform a transaction or start any animation.
            
             To expand trees made of <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s, use <see cref="M:Northwoods.Go.Node.ExpandTree(System.Int32)"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Group._ExpandSubGraph1(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Diagram,Northwoods.Go.Group)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Group.IsSubGraphExpanded">
             <summary>
             Gets or sets whether the subgraph contained by this group is expanded.
             </summary>
             <remarks>
             Changing this property's value will call <see cref="M:Northwoods.Go.Group.CollapseSubGraph"/> or <see cref="M:Northwoods.Go.Group.ExpandSubGraph"/>,
             and also will call the value of <see cref="P:Northwoods.Go.Group.SubGraphExpandedChanged"/> if it is a function.
            
             The default value is true -- this group's member parts are shown.
            
             There is an analogous property for expanded/collapsed trees of <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s: <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Group.WasSubGraphExpanded">
            <summary>
            Gets or sets whether the subgraph starting at this group
            had been collapsed by a call to <see cref="M:Northwoods.Go.Group.ExpandSubGraph"/> on the containing <see cref="T:Northwoods.Go.Group"/>.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
            <seealso cref="P:Northwoods.Go.Group.IsSubGraphExpanded"/>
        </member>
        <member name="P:Northwoods.Go.Group.SubGraphExpandedChanged">
             <summary>
             Gets or sets the function that is called when <see cref="P:Northwoods.Go.Group.IsSubGraphExpanded"/> has changed value.
             </summary>
             <remarks>
             The argument to that function will be this Group.
            
             If the value is a function, that function must not expand or collapse any groups.
             The Group has already been expanded or collapsed -- trying to change it again may produce undefined behavior.
            
             The default value is null -- no function is called.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Group.Move(Northwoods.Go.Point,System.Boolean)">
            <summary>
            Move this Group and all of its member parts, recursively.
            </summary>
            <param name="newpos">a new <see cref="T:Northwoods.Go.Point"/> in document coordinates.</param>
            <param name="useLocation">true if you want to set the <see cref="P:Northwoods.Go.Part.Location"/> instead of the position. False by default.</param>
        </member>
        <member name="P:Northwoods.Go.Group.NeedsLocation">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Group.Add(Northwoods.Go.GraphObject[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/>
        </member>
        <member name="M:Northwoods.Go.Group.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Group.Add(Northwoods.Go.RowDefinition[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.RowDefinition[])"/>
        </member>
        <member name="M:Northwoods.Go.Group.Add(Northwoods.Go.ColumnDefinition[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.ColumnDefinition[])"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Set(Northwoods.Go.Group)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Group.Apply(System.Action{Northwoods.Go.Group})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Group.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.Group.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.Group.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="M:Northwoods.Go.Knot.GetSideAngle(Northwoods.Go.Rect,Northwoods.Go.Spot,System.Double,System.Boolean)">
            <param name="rect"></param>
            <param name="spot"></param>
            <param name="generalangle"></param>
            <param name="ortho"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Knot.Invalidate">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Knot.FindLinkInfo(Northwoods.Go.Link)">
            @hidden @internal
            <summary>
            First updates any needed data structures...
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Knot.GetLinkInfos">
            @hidden @internal
            <summary>
            First updates any needed data structures...
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Knot.MyComparer(Northwoods.Go.LinkInfo,Northwoods.Go.LinkInfo)">
            @hidden @internal
            <summary>
            Sorting all of the link's other ports in circular order.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>int</returns>
        </member>
        <member name="M:Northwoods.Go.Knot.SortLinkInfos">
            @hidden @internal
            <summary>
            Sort an array of angle and side information about the links connected to this Port.
            By default this just sorts by <see cref="F:Northwoods.Go.LinkInfo.Side"/> group, and by <see cref="F:Northwoods.Go.LinkInfo.Angle"/> for each side.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Knot.AssignLinkPoints(System.Collections.Generic.List{Northwoods.Go.LinkInfo})">
            @hidden @internal
            <summary>
            Given a sorted array of angle and side information about the links connected to this Port,
            assign the actual <see cref="F:Northwoods.Go.LinkInfo.LinkPoint"/>.
            By default this just spreads the link points evenly along each side.
            </summary>
            <param name="linkinfos">a List of <see cref="T:Northwoods.Go.LinkInfo"/>s that are modified.</param>
        </member>
        <member name="M:Northwoods.Go.Knot.AssignEndSegmentLengths(System.Collections.Generic.List{Northwoods.Go.LinkInfo})">
            @hidden @internal
            <summary>
            Given a sorted array of angle, side, and link-point information about the links
            connected to this Port, assign the actual <see cref="F:Northwoods.Go.LinkInfo.EndSegmentLength"/>.
            By default this just specifies shorter values for links at the ends of each side,
            and longer values for links in the middle of each side.
            </summary>
            <param name="linkinfos">a List of <see cref="T:Northwoods.Go.LinkInfo"/>s that are modified.</param>
        </member>
        <member name="M:Northwoods.Go.Knot.ComputeEndSegmentLength(Northwoods.Go.LinkInfo)">
            @hidden @internal
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.Go.LinkAdjusting">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Link.Adjusting"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkAdjusting.None">
            <summary>
            The link route computation does not depend on any previous route points.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkAdjusting.End">
            <summary>
            The link route computation should keep the intermediate points of the previous route,
            just modifying the first and/or last points;
            if the routing is orthogonal, it will only modify the first two and/or last two points.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkAdjusting.Scale">
            <summary>
            The link route computation should scale and rotate the intermediate points so that the link's shape looks approximately the same;
            if the routing is orthogonal, this value is treated as if it were <see cref="F:Northwoods.Go.LinkAdjusting.End"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkAdjusting.Stretch">
            <summary>
            The link route computation should linearly interpolate the intermediate points so that the link's shape looks stretched;
            if the routing is orthogonal, this value is treated as if it were <see cref="F:Northwoods.Go.LinkAdjusting.End"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.LinkRouting">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Link.Routing"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkRouting.Normal">
            <summary>
            The route goes fairly straight between ports.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkRouting.Orthogonal">
            <summary>
            Each segment is horizontal or vertical.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkRouting.AvoidsNodes">
            <summary>
            Each segment is horizontal or vertical, but the route tries to avoid crossing over nodes.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkRouting.AvoidsNodesStraight">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Northwoods.Go.LinkCurve">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Link.Curve"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkCurve.None">
            <summary>
            The path geometry consists of straight line segments.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkCurve.Bezier">
            <summary>
            The link path uses Bezier curve segments.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkCurve.JumpGap">
            <summary>
            Orthogonal link segments will be discontinuous where they cross over other orthogonal link
            segments that have a <see cref="P:Northwoods.Go.Link.Curve"/> of JumpOver or JumpGap.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LinkCurve.JumpOver">
            <summary>
            Orthogonal link segments will veer around where they cross over other orthogonal link
            segments that have a <see cref="P:Northwoods.Go.Link.Curve"/> of JumpOver or JumpGap.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Link">
             <summary>
             A Link is a <see cref="T:Northwoods.Go.Part"/> that connects <see cref="T:Northwoods.Go.Node"/>s.
             The link relationship is directional, going from <see cref="P:Northwoods.Go.Link.FromNode"/> to <see cref="P:Northwoods.Go.Link.ToNode"/>.
             A link can connect to a specific port element in a node, as named by the <see cref="P:Northwoods.Go.Link.FromPortId"/>
             and <see cref="P:Northwoods.Go.Link.ToPortId"/> properties.
             </summary>
             <remarks>
             <p class="boxread">
             For more discussion, see <a href="../../intro/links.Html">Introduction to Links</a>.
             </p>
            
             To add a Link to a Diagram when using a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/> you should do something like:
             <code language="cs">
               myDiagram.StartTransaction("make new link");
               (myDiagram.Model as MyModel).AddLinkData(new MyLinkData { From = "Alpha", To = "Beta" });
               myDiagram.CommitTransaction("make new link");
             </code>
            
             where you would substitute the keys of the actual nodes that you want to connect with a link.
             This will cause a Link to be created (copying the template found in <see cref="P:Northwoods.Go.Diagram.LinkTemplateMap"/>),
             added to the Diagram in some <see cref="T:Northwoods.Go.Layer"/> (based on <see cref="P:Northwoods.Go.Part.LayerName"/>), and bound to the link data
             (resulting in <see cref="P:Northwoods.Go.Panel.Data"/> referring to that link data object).
            
             If you are using a <see cref="T:Northwoods.Go.Models.TreeModel`3"/>, there are no link data objects, so you just need to call
             <see cref="M:Northwoods.Go.Models.TreeModel`3.SetParentKeyForNodeData(`0,`1)"/> to specify the "parent" node's key for a "child" node data.
            
             To find a <see cref="T:Northwoods.Go.Link"/> given a link data object in the <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>,
             call <see cref="M:Northwoods.Go.Diagram.FindLinkForData(System.Object)"/>.  When using a <see cref="T:Northwoods.Go.Models.TreeModel`3"/>, call either <see cref="M:Northwoods.Go.Diagram.FindNodeForData(System.Object)"/>
             or <see cref="M:Northwoods.Go.Diagram.FindNodeForKey(System.Object)"/> to get a Node, and then call <see cref="M:Northwoods.Go.Node.FindTreeParentLink"/> to get the Link, if any exists.
            
             To find a link that connects two nodes, call <see cref="M:Northwoods.Go.Node.FindLinksTo(Northwoods.Go.Node,System.String,System.String)"/> or <see cref="M:Northwoods.Go.Node.FindLinksBetween(Northwoods.Go.Node,System.String,System.String)"/>.
             With the former method, the direction matters; with the latter method it returns links in either direction.
            
             A link's position and size are determined by the two nodes that it connects.
             Normally there should be a <see cref="T:Northwoods.Go.Shape"/> as the main element in this Link.
             This shape is what users will see as the "line" or "wire" --
             you can set its <see cref="P:Northwoods.Go.Shape.Stroke"/> and other "stroke..." properties to control its appearance.
            
             The link will compute a route (a sequence of points) going from the <see cref="P:Northwoods.Go.Link.FromNode"/>'s port element
             to the <see cref="P:Northwoods.Go.Link.ToNode"/>'s port element.
             That route is used to generate the path of the main shape.
             Properties that affect the nature of the route and the geometry of the path include:
               - <see cref="P:Northwoods.Go.Link.Curve"/>
               - <see cref="P:Northwoods.Go.Link.Curviness"/>
               - <see cref="P:Northwoods.Go.Link.Corner"/>
               - <see cref="P:Northwoods.Go.Link.Routing"/>
               - <see cref="P:Northwoods.Go.Link.Smoothness"/>
               - <see cref="P:Northwoods.Go.Link.Adjusting"/>
            
             <p class="boxread">
             For more discussion and examples, see <a href="../../intro/links.Html">Links</a>.
             </p>
            
             There are additional properties that affect how the end of the link connects to a port element of a node.
             There are duplicate properties, ones for the "to" end and ones for the "from" end:
               - <see cref="P:Northwoods.Go.Link.FromSpot"/>, <see cref="P:Northwoods.Go.Link.ToSpot"/>
               - <see cref="P:Northwoods.Go.Link.FromEndSegmentLength"/>, <see cref="P:Northwoods.Go.Link.ToEndSegmentLength"/>
               - <see cref="P:Northwoods.Go.Link.FromShortLength"/>, <see cref="P:Northwoods.Go.Link.ToShortLength"/>
            
             These properties normally have "default" values, causing the link's routing and path-geometry generating
             to get the corresponding values from the connected port element.
             This scheme permits an individual link to have its own specific connection to a port,
             taking precedence over how the port normally expects links to connect to it.
             For example, several of the <see cref="T:Northwoods.Go.Layouts.Layout"/> classes sets these properties on each Link
             as part of their route computation for links.
            
             <p class="boxread">
             For more discussion and examples, see <a href="../../intro/connectionPoints.Html">Link Points</a>.
             </p>
            
             Elements other than the main <see cref="T:Northwoods.Go.Shape"/> in the Link may act as decorations on the link, including arrowheads and labels.
             You can control where they are located along the link route and how they are oriented.
             Because these decorations may be any <see cref="T:Northwoods.Go.GraphObject"/>, they are all properties of that class.
             The properties include:
               - <see cref="P:Northwoods.Go.GraphObject.SegmentIndex"/>
               - <see cref="P:Northwoods.Go.GraphObject.SegmentFraction"/>
               - <see cref="P:Northwoods.Go.GraphObject.SegmentOffset"/>
               - <see cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/>
            
             If you do not set the <see cref="P:Northwoods.Go.GraphObject.SegmentIndex"/> property, the object is positioned
             to be at the middle of the link.
            
             <p class="boxread">
             For more discussion and examples, see <a href="../../intro/linkLabels.Html">Link Labels</a>.
             </p>
            
             It is easy to add arrowheads to your link template.
             Just add a <see cref="T:Northwoods.Go.Shape"/> with the appearance properties that you want,
             and also set the <see cref="P:Northwoods.Go.Shape.ToArrow"/> or <see cref="P:Northwoods.Go.Shape.FromArrow"/> property
             to the name of the kind of arrowhead that you want.
             Doing so automatically sets the "Segment..." properties that are appropriate for the chosen arrowhead.
            
             More than one shape may automatically get the route geometry.
             This is useful when you want to have multiple link shapes with different thicknesses
             to create a gradient effect across the path of the link or to produce parallel lines along the path.
             Just set <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> to true on each such <see cref="T:Northwoods.Go.Shape"/>.
            
             If you want the user to be able to reconnect a link, using the <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>,
             you need to set one or both of <see cref="P:Northwoods.Go.Link.RelinkableFrom"/> and <see cref="P:Northwoods.Go.Link.RelinkableTo"/> to true.
             The <see cref="T:Northwoods.Go.Tools.RelinkingTool"/> shows a <see cref="P:Northwoods.Go.Tools.RelinkingTool.FromHandleArchetype"/> and/or a
             <see cref="P:Northwoods.Go.Tools.RelinkingTool.ToHandleArchetype"/> when the link is selected.
             Such a relink handle can be dragged by the user to start a relinking operation.
            
             If you want the user to be able to change the path of the link, using the <see cref="T:Northwoods.Go.Tools.LinkReshapingTool"/>,
             set <see cref="P:Northwoods.Go.Part.Reshapable"/> to true.
             The <see cref="T:Northwoods.Go.Tools.LinkReshapingTool"/> shows reshape handles that the user can drag to shift the position
             of a point in the link's route.
             The <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.HandleArchetype"/> is copied for each reshape handle.
            
             Often if a Link is reshapable, you will want to save the route in the model so that it can be restored
             upon load.  To save the route automatically, add a TwoWay Binding on the <see cref="P:Northwoods.Go.Link.Points"/> property:
             `new Binding("Points").MakeTwoWay()`.
            
             If a Link is <see cref="P:Northwoods.Go.Part.Reshapable"/>, it is also possible to allow the user to add and remove segments
             from the link's route by setting <see cref="P:Northwoods.Go.Link.Resegmentable"/> to true.
             This causes the <see cref="T:Northwoods.Go.Tools.LinkReshapingTool"/> to add resegmenting handles at the midpoints of each segment.
             The <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.MidHandleArchetype"/> is copied for each resegment handle.
             When the user drags such a resegmenting handle, a new segment is inserted into the route.
             Also, when the user drags a reshape handle such that two adjacent segments end up in a straight line,
             a segment is removed from the route.
            
             <p class="boxread">
             For more discussion and examples, see <a href="../../intro/links.Html">Links</a>,
             <a href="../../intro/linkLabels.Html">Link Labels</a>, and
             <a href="../../intro/connectionPoints.Html">Link Points</a>.
             </p>
            
             <p class="boxread">
             To control what links a user may draw or reconnect, please read about
             <a href="../../intro/validation.Html">Validation</a>.
             </p>
            
             <p class="boxread">
             To customize linking and relinking behavior, please read
             <a href="../../intro/tools.Html#LinkingToolAndRelinkingTool">Introduction to the Linking Tools</a>
             and <a href="../../intro/tools.Html#RelinkingTool">Introduction to the RelinkingTool</a>.
             For customizing the reshaping of Links,
             see <a href="../../intro/tools.Html#LinkReshapingTool">Introduction to the LinkReshapingTool</a>.
             </p>
            
             Only Links that are in Diagrams can have connections with Nodes.
             Templates should not be connected with Nodes, be members of Groups, or have any Adornments.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.#ctor">
            <summary>
            Constructs an empty link that does not connect any nodes.
            If you want the link to be seen, you must provide a <see cref="T:Northwoods.Go.Shape"/> as an element
            to be used as the visual path for the link.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Copies properties to a cloned Link.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.DisplaceProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Fix up references in the argument object so that the argument object can get a new visual tree
            </summary>
            <param name="c">The original Part whose category is being changed by displacing its visual tree with this Part's visual tree.</param>
        </member>
        <member name="M:Northwoods.Go.Link.ApplyProtected(Northwoods.Go.GraphObject)">
            <summary>
            Copy properties from this object to the target object, which must be of the same class.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Northwoods.Go.Link.InitLinkSettings">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link._ArrangeLabelNode(Northwoods.Go.Node,System.Int32,System.Collections.Generic.IList{Northwoods.Go.Point})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.IsReadyToMeasureArrange">
            @hidden @internal
            <summary>
            A link is ready to be measure/arranged if both of its nodes have been arranged
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.SetPos(Northwoods.Go.Point,System.Double,System.Double)">
            @hidden @internal
            <summary>
            This is not called during animation, instead, it calls setPosInplace
            </summary>
            <returns>true if successful, false if a no-op (only true calls raiseChanged)</returns>
        </member>
        <member name="M:Northwoods.Go.Link.SetPositionFlag">
            @hidden @internal
            <summary>
            Sets the flag for locLastSet, even if the position setter is a no-op
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.IsNodeLike">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.ComputeAngle(Northwoods.Go.Orientation,System.Double)">
            @hidden @internal
            <summary>
            Dynamically compute the desired angle of a GraphObject along a segment of the route.
            </summary>
            <remarks>
            This method is only called when the GraphObject's <see cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/> property value is
            not <see cref="F:Northwoods.Go.Orientation.None"/>.
            </remarks>
            @expose
            <param name="orient">An <see cref="T:Northwoods.Go.Orientation"/> that indicates how the angle should be computed.</param>
            <param name="angle">The angle of the segment of the route where the GraphObject is attached.</param>
            <returns>The intended angle for the GraphObject, in degrees.</returns>
        </member>
        <member name="P:Northwoods.Go.Link.FromNode">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Node"/> that this link comes from.
             </summary>
             <remarks>
             The <see cref="P:Northwoods.Go.Link.FromPortId"/> specifies which port the link comes from.
             The default value is null -- this link is not coming from any node.
            
             A template should not be connected with any node.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.FromPortId">
            <summary>
            Gets or sets the identifier of the port that this link comes from.
            </summary>
            <remarks>
            The default value is the empty string.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.FromPort">
            <summary>
            This read-only property returns a <see cref="T:Northwoods.Go.GraphObject"/> that is the "from" port that this link is connected from.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.Link.FromNode"/> provides the node that the link is coming from.
            The <see cref="P:Northwoods.Go.Link.FromPortId"/> provides the identifier for which port this link is coming from;
            you can set that property in order to change the value of this property.
            This method may return null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.FromPortChanged">
             <summary>
             Gets or sets the function that is called after this Link changes which Node or port it connects from.
             </summary>
             <remarks>
             The first argument will be this Link.
             The second argument will be the old GraphObject port.
             The third argument will be the new GraphObject port.
            
             If the value is a function, that function must not modify which nodes or links this link connects with.
             The "from" node and/or port has already been changed -- trying to change it again may produce undefined behavior.
            
             The default value is null -- no function is called.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.ToNode">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Node"/> that this link goes to.
             </summary>
             <remarks>
             The <see cref="P:Northwoods.Go.Link.ToPortId"/> specifies which port the link goes to.
             The default value is null -- this link is not going to any node.
            
             A template should not be connected with any node.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.ToPortId">
            <summary>
            Gets or sets the identifier of the port that this link goes to.
            </summary>
            <remarks>
            The default value is the empty string.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.ToPort">
            <summary>
            This read-only property returns a <see cref="T:Northwoods.Go.GraphObject"/> that is the "to" port that this link is connected to.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.Link.ToNode"/> provides the node that the link is going to.
            The <see cref="P:Northwoods.Go.Link.ToPortId"/> provides the identifier for which port this link is going to;
            you can set that property in order to change the value of this property.
            This method may return null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.ToPortChanged">
             <summary>
             Gets or sets the function that is called after this Link changes which Node or port it connects to.
             </summary>
             <remarks>
             The first argument will be this Link.
             The second argument will be the old GraphObject port.
             The third argument will be the new GraphObject port.
            
             If the value is a function, that function must not modify which nodes or links this link connects with.
             The "to" node and/or port has already been changed -- trying to change it again may produce undefined behavior.
            
             The default value is null -- no function is called.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.FromSpot">
            Properties describing how this link should connect to the fromPort
             <summary>
             Gets or sets where this link should connect at the <see cref="P:Northwoods.Go.Link.FromPort"/>.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Spot.Default"/>, meaning that the value
             actually comes from the <see cref="P:Northwoods.Go.GraphObject.FromSpot"/> property of the <see cref="P:Northwoods.Go.Link.FromPort"/>.
            
             This property is set by some layouts, if SetsPortSpot(s) or SetsChildPortSpot is true.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.ToSpot"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromSpot"/>
             <seealso cref="M:Northwoods.Go.Link.ComputeSpot(System.Boolean,Northwoods.Go.GraphObject)"/>
        </member>
        <member name="P:Northwoods.Go.Link.FromEndSegmentLength">
             <summary>
             Gets or sets the length of the first segment, when the computed "from spot" at the <see cref="P:Northwoods.Go.Link.FromPort"/> is not <see cref="F:Northwoods.Go.Spot.None"/>.
             </summary>
             <remarks>
             The default value is NaN, meaning that the value
             actually comes from the <see cref="P:Northwoods.Go.GraphObject.FromEndSegmentLength"/> property of the <see cref="P:Northwoods.Go.Link.FromPort"/>.
             This value also limits how short the <see cref="P:Northwoods.Go.Link.FromShortLength"/> may be drawn.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.ToEndSegmentLength"/>
             <seealso cref="M:Northwoods.Go.Link.ComputeEndSegmentLength(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot,System.Boolean)"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromEndSegmentLength"/>
             <seealso cref="P:Northwoods.Go.Link.FromShortLength"/>
        </member>
        <member name="P:Northwoods.Go.Link.FromShortLength">
             <summary>
             Gets or sets how far the end segment stops short of the actual port.
             </summary>
             <remarks>
             Positive values are limited by the <see cref="P:Northwoods.Go.Link.FromEndSegmentLength"/> or <see cref="P:Northwoods.Go.GraphObject.FromEndSegmentLength"/>.
             Negative values cause the link to extend into the port.
             The default value is NaN -- the value actually comes from the
             <see cref="P:Northwoods.Go.GraphObject.FromShortLength"/> property of the <see cref="P:Northwoods.Go.Link.FromPort"/>.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
             If you want to move an arrowhead away from the start of the link route,
             set the arrowhead Shape's <see cref="P:Northwoods.Go.GraphObject.SegmentOffset"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.ToShortLength"/>
             <seealso cref="P:Northwoods.Go.GraphObject.FromShortLength"/>
             <seealso cref="P:Northwoods.Go.Link.FromEndSegmentLength"/>
        </member>
        <member name="P:Northwoods.Go.Link.ToSpot">
            Properties describing how this link should connect to the toPort
             <summary>
             Gets or sets where this link should connect at the <see cref="P:Northwoods.Go.Link.ToPort"/>.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Spot.Default"/>, meaning that the value
             actually comes from the <see cref="P:Northwoods.Go.GraphObject.ToSpot"/> property of the <see cref="P:Northwoods.Go.Link.ToPort"/>.
            
             This property is set by some layouts, if SetsPortSpot(s) or SetsChildPortSpot is true.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.FromSpot"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToSpot"/>
             <seealso cref="M:Northwoods.Go.Link.ComputeSpot(System.Boolean,Northwoods.Go.GraphObject)"/>
        </member>
        <member name="P:Northwoods.Go.Link.ToEndSegmentLength">
             <summary>
             Gets or sets the length of the last segment.
             </summary>
             <remarks>
             The default value is NaN, meaning that the value
             actually comes from the <see cref="P:Northwoods.Go.GraphObject.ToEndSegmentLength"/> property of the <see cref="P:Northwoods.Go.Link.ToPort"/>.
             This value also limits how short the <see cref="P:Northwoods.Go.Link.ToShortLength"/> may be drawn.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.FromEndSegmentLength"/>
             <seealso cref="M:Northwoods.Go.Link.ComputeEndSegmentLength(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot,System.Boolean)"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToEndSegmentLength"/>
             <seealso cref="P:Northwoods.Go.Link.ToShortLength"/>
        </member>
        <member name="P:Northwoods.Go.Link.ToShortLength">
             <summary>
             Gets or sets how far the end segment stops short of the actual port.
             </summary>
             <remarks>
             Positive values are limited by the <see cref="P:Northwoods.Go.Link.ToEndSegmentLength"/> or <see cref="P:Northwoods.Go.GraphObject.ToEndSegmentLength"/>.
             Negative values cause the link to extend into the port.
             The default value is NaN -- the value actually comes from the
             <see cref="P:Northwoods.Go.GraphObject.ToShortLength"/> property of the <see cref="P:Northwoods.Go.Link.ToPort"/>.
            
             For examples of how to use this property, see <a href="../../intro/connectionPoints.Html">Link Connection Points</a>.
             If you want to move an arrowhead away from the end of the link route,
             set the arrowhead Shape's <see cref="P:Northwoods.Go.GraphObject.SegmentOffset"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.FromShortLength"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ToShortLength"/>
             <seealso cref="P:Northwoods.Go.Link.ToEndSegmentLength"/>
        </member>
        <member name="M:Northwoods.Go.Link.UpdateContainingGroup">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.SetContainingGroup(Northwoods.Go.Group)">
            @hidden @internal
            <summary>
            Just used by Link.UpdateContainingGroup(), because Link.ContainingGroup is always computed, never set.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.InvalidateContainingGroup">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.GetOtherNode(Northwoods.Go.Node)">
            <summary>
            Given a <see cref="T:Northwoods.Go.Node"/>, return the node at the other end of this link.
            </summary>
            <returns>This may return the same node, if the link is reflexive.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.GetOtherPort(Northwoods.Go.GraphObject)">
            <summary>
            Given a <see cref="T:Northwoods.Go.GraphObject"/> that is a "port", return the port at the other end of this link.
            </summary>
            <returns>This may return the same object, if the link is reflexive.</returns>
        </member>
        <member name="P:Northwoods.Go.Link.IsLabeledLink">
            <summary>
            This read-only property is true when this Link has any label Nodes, <see cref="T:Northwoods.Go.Node"/>s that are owned by this Link
            and are arranged along its path in the same manner as elements of the Link Panel.
            </summary>
            <seealso cref="P:Northwoods.Go.Link.LabelNodes"/>
        </member>
        <member name="P:Northwoods.Go.Link.LabelNodes">
             <summary>
             This read-only property returns an iterator over the <see cref="T:Northwoods.Go.Node"/>s that act as labels on this Link.
             </summary>
             <remarks>
             Setting <see cref="P:Northwoods.Go.Node.LabeledLink"/> to refer to this Link
             will add that <see cref="T:Northwoods.Go.Node"/> to this collection.
            
             Do not confuse these <see cref="T:Northwoods.Go.Node"/>s with the <see cref="T:Northwoods.Go.GraphObject"/>s that
             are part of this <see cref="T:Northwoods.Go.Link"/> <see cref="T:Northwoods.Go.Panel"/>.
             Those objects can also be used as "labels", but not as objects to which
             there can be link connections, because those panel elements cannot be <see cref="T:Northwoods.Go.Node"/>s.
             Those panel objects can be used for other purposes too, such as arrowheads.
            
             A template should not have any label nodes.
             </remarks>
             <seealso cref="P:Northwoods.Go.Link.IsLabeledLink"/>
        </member>
        <member name="M:Northwoods.Go.Link.AddLabelNodeInternal(Northwoods.Go.Node)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.RemoveLabelNodeInternal(Northwoods.Go.Node)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.InternalAddProtected(System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.InternalRemoveProtected(System.Boolean)">
            @hidden @internal
            <param name="switchingLayers"></param>
        </member>
        <member name="M:Northwoods.Go.Link.DeleteCascade">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.UpdateRelationshipsFromData">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.Move(Northwoods.Go.Point,System.Boolean)">
            <summary>
            Move this link to a new position.
            This also shifts all of the Points in the route accordingly.
            This also moves any <see cref="P:Northwoods.Go.Link.LabelNodes"/>.
            </summary>
            <param name="newpos">a new <see cref="T:Northwoods.Go.Point"/> in document coordinates.</param>
            <param name="useLocation">true if you want to set the <see cref="P:Northwoods.Go.Part.Location"/> instead of the position. False by default.</param>
        </member>
        <member name="P:Northwoods.Go.Link.RelinkableFrom">
             <summary>
             Gets or sets whether the user may reconnect an existing link at the "from" end.
             </summary>
             <remarks>
             This affects the behavior of the <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>.
            
             The initial value is false.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.RelinkableTo">
             <summary>
             Gets or sets whether the user may reconnect an existing link at the "to" end.
             </summary>
             <remarks>
             This affects the behavior of the <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>.
            
             The initial value is false.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.CanRelinkFrom">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Link.RelinkableFrom"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowRelink"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowRelink"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may relink the From end of this link.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.CanRelinkTo">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Link.RelinkableTo"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowRelink"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowRelink"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may relink the To end of this link.</returns>
        </member>
        <member name="P:Northwoods.Go.Link.Resegmentable">
             <summary>
             Gets or sets whether the user may change the number of segments in this Link,
             if the link has straight segments.
             </summary>
             <remarks>
             This affects the behavior of the <see cref="T:Northwoods.Go.Tools.LinkReshapingTool"/> when <see cref="P:Northwoods.Go.Link.Curve"/> is not <see cref="F:Northwoods.Go.LinkCurve.Bezier"/>.
            
             The initial value is false.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.IsTreeLink">
            <summary>
            Gets or sets whether this Link is part of the tree for tree operations
            such as <see cref="M:Northwoods.Go.Node.FindTreeChildrenNodes"/> or <see cref="M:Northwoods.Go.Node.CollapseTree(System.Int32)"/>.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.Path">
             <summary>
             This read-only property returns the main <see cref="T:Northwoods.Go.Shape"/> representing the path of this Link.
             </summary>
             <remarks>
             The value depends on there being an element in this Link that is
             a <see cref="T:Northwoods.Go.Shape"/> and that has <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> set to true.
             This shape is what displays the stroke going from one node to another node.
            
             This path shape's geometry is automatically generated based on the <see cref="P:Northwoods.Go.Link.Points"/>
             of this link's route, depending on other properties such as <see cref="P:Northwoods.Go.Link.Curve"/>.
             Note that the points are in document coordinates, but the path's <see cref="P:Northwoods.Go.Shape.Geometry"/>
             will have points that are in local Shape coordinates.
             This Shape's <see cref="P:Northwoods.Go.GraphObject.Scale"/> should be one and <see cref="P:Northwoods.Go.GraphObject.Angle"/> should be zero.
            
             If there is no Shape with <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> set to true,
             the Link will use the first Shape for its path.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.RouteBounds">
            <summary>
            This read-only property returns the bounds of the link geometry in document coordinates.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeRouteBounds">
            @hidden @internal
            <returns>in document coordinates</returns>
        </member>
        <member name="P:Northwoods.Go.Link.MidPoint">
            <summary>
            This read-only property returns the point at the middle of the path, in document coordinates.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeMidPoint">
            @hidden @internal
            <summary>
            Compute the point at the middle of the route.
            </summary>
            <returns>in document coordinates</returns>
        </member>
        <member name="P:Northwoods.Go.Link.MidAngle">
            <summary>
            This read-only property returns the angle of the path at the <see cref="P:Northwoods.Go.Link.MidPoint"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeMidAngle">
            @hidden @internal
            <summary>
            Compute the angle of the route at the <see cref="P:Northwoods.Go.Link.MidPoint"/>.
            </summary>
            <returns>the angle in degrees.</returns>
        </member>
        <member name="M:Northwoods.Go.Link._MaybeBuildLengths">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Link.FlattenedLengths">
            @hidden @internal
            <summary>
            This read-only property returns an Array segment lengths.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Link.FlattenedTotalLength">
            @hidden @internal
            <summary>
            This read-only property returns the approximate length of the path.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link._BuildLengths(System.Collections.Generic.List{System.Double})">
            @hidden @internal
            <summary>
            Builds an array of segment lengths that make up the link path.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Link.Points">
             <summary>
             Gets or sets the list of <see cref="T:Northwoods.Go.Point"/>s in the route.
             </summary>
             <remarks>
             All of the Points must be <see cref="M:Northwoods.Go.Point.IsReal"/> -- no NaN or infinite values --
             and all of the points are in document coordinates.
             Although this list may be replaced by setting this property,
             one must not modify the contents of the List directly.
            
             The setter also accepts an Array of alternating X,Y point values [1, 2, 3, 4, 5, 6],
             or an Array of Objects each of which has (lowercase) "x" and "y" properties that are numbers
             [{"x":1,"y":2}, {"x":3,"y":4}, {"x":5,"y":6}].
            
             Ownership of the list and all of its <see cref="T:Northwoods.Go.Point"/>s that is provided to the setter
             is transferred to this Link.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.PointsCount">
            <summary>
            This read-only property returns the number of points in the route.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.GetPoint(System.Int32)">
            <summary>
            Gets a particular point of the route.
            </summary>
            <param name="i">The zero-based index of the desired point.</param>
            <returns>in document coordinates</returns>
        </member>
        <member name="M:Northwoods.Go.Link.SetPoint(System.Int32,Northwoods.Go.Point)">
            <summary>
            Sets a particular point of the route; this may only be called within an override of <see cref="M:Northwoods.Go.Link.ComputePoints"/>.
            </summary>
            <param name="i">The zero-based index of the desired point.</param>
            <param name="p">The new point in document coordinates, which should not have infinite or NaN coordinate values, and which must not be modified afterwards.</param>
            <seealso cref="M:Northwoods.Go.Link.GetPoint(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.Link.InsertPoint(System.Int32,Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.AddPoint(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Link.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
            (undocumented)
            Sets a particular point of the route; this may only be called within an override of <see cref="M:Northwoods.Go.Link.ComputePoints"/>.
            </summary>
            <param name="i">The zero-based index of the desired point.</param>
            <param name="x">The new X, which should not be infinite or NaN, in document coordinates.</param>
            <param name="y">The new Y, which should not be infinite or NaN, in document coordinates.</param>
        </member>
        <member name="M:Northwoods.Go.Link.InsertPoint(System.Int32,Northwoods.Go.Point)">
            <summary>
            Insert a point at a particular position in the route, without replacing an existing point; this may only be called within an override of <see cref="M:Northwoods.Go.Link.ComputePoints"/>.
            </summary>
            <param name="i">The zero-based index of the new point.</param>
            <param name="p">The new point in document coordinates, which should not have infinite or NaN coordinate values, and which must not be modified afterwards.</param>
            <seealso cref="M:Northwoods.Go.Link.GetPoint(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.Link.SetPoint(System.Int32,Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.AddPoint(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Link.InsertPoint(System.Int32,System.Double,System.Double)">
            <summary>
            (undocumented)
            Insert a point at a particular position in the route, without replacing an existing point; this may only be called within an override of <see cref="M:Northwoods.Go.Link.ComputePoints"/>.
            </summary>
            <param name="i">The zero-based index of the new point.</param>
            <param name="x">The new X, which should not be infinite or NaN, in document coordinates.</param>
            <param name="y">The new Y, which should not be infinite or NaN, in document coordinates.</param>
        </member>
        <member name="M:Northwoods.Go.Link.AddPoint(Northwoods.Go.Point)">
            <summary>
            Add a point at the end of the route; this may only be called within an override of <see cref="M:Northwoods.Go.Link.ComputePoints"/>.
            </summary>
            <param name="p">The new point in document coordinates, which should not have infinite or NaN coordinate values, and which must not be modified afterwards.</param>
            <seealso cref="M:Northwoods.Go.Link.GetPoint(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.Link.SetPoint(System.Int32,Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.InsertPoint(System.Int32,Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Link.AddPoint(System.Double,System.Double)">
            <summary>
            (undocumented)
            Add a point at the end of the route; this may only be called within an override of <see cref="M:Northwoods.Go.Link.ComputePoints"/>.
            </summary>
            <param name="x">The new X, which should not be infinite or NaN, in document coordinates.</param>
            <param name="y">The new Y, which should not be infinite or NaN, in document coordinates.</param>
        </member>
        <member name="M:Northwoods.Go.Link.RemovePoint(System.Int32)">
            <summary>
            Remove a particular point from the route; this may only be called within an override of <see cref="M:Northwoods.Go.Link.ComputePoints"/>.
            </summary>
            <param name="i">The zero-based index of the point to extract.</param>
            <seealso cref="M:Northwoods.Go.Link.GetPoint(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.Link.SetPoint(System.Int32,Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.InsertPoint(System.Int32,Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.AddPoint(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.ClearPoints"/>
        </member>
        <member name="M:Northwoods.Go.Link.ClearPoints">
            <summary>
            Remove all of the points from this link's route; this may only be called within an override of <see cref="M:Northwoods.Go.Link.ComputePoints"/>.
            </summary>
            <seealso cref="M:Northwoods.Go.Link.GetPoint(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.Link.SetPoint(System.Int32,Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.InsertPoint(System.Int32,Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.AddPoint(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Link.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Link.MovePoints(System.Double,System.Double)">
            @hidden @internal
            <summary>
            Shift all of the <see cref="T:Northwoods.Go.Point"/>s in the <see cref="P:Northwoods.Go.Link.Points"/> list by a given offsets.
            </summary>
            <param name="dx">in document coordinates</param>
            <param name="dy">in document coordinates</param>
        </member>
        <member name="M:Northwoods.Go.Link.StartRoute">
            @hidden
            <summary>
            (undocumented)
            Allow calls to <see cref="M:Northwoods.Go.Link.SetPoint(System.Int32,Northwoods.Go.Point)"/>, <see cref="M:Northwoods.Go.Link.AddPoint(Northwoods.Go.Point)"/>, <see cref="M:Northwoods.Go.Link.InsertPoint(System.Int32,Northwoods.Go.Point)"/>,
            <see cref="M:Northwoods.Go.Link.RemovePoint(System.Int32)"/>, and <see cref="M:Northwoods.Go.Link.ClearPoints"/>.
            You must call <see cref="M:Northwoods.Go.Link.CommitRoute"/> when you are done modifying the route.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.CommitRoute">
            @hidden
            <summary>
            (undocumented)
            Call this method after a call to <see cref="M:Northwoods.Go.Link.StartRoute"/> and calls to methods that modify the route.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.RollbackRoute">
            @hidden
            <summary>
            (undocumented)
            Call this method instead of <see cref="M:Northwoods.Go.Link.CommitRoute"/> if you need to cancel changes to the route.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.RestoreSavedRoute">
             @hidden @internal
             <summary>
             Used by animation to ensure custom link routing is saved
            
             ??? @@@ This is done on ALL links and should only be done on links pertaining to an animation, if efficient
             </summary>
             @this {Link}
        </member>
        <member name="M:Northwoods.Go.Link._ValidateRoute">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.InvalidateRoute">
            <summary>
            Declare that the route (the <see cref="P:Northwoods.Go.Link.Points"/>) of this Link need to be recomputed soon.
            </summary>
            <remarks>
            This causes <see cref="M:Northwoods.Go.Link.UpdateRoute"/> to be called, which will call <see cref="M:Northwoods.Go.Link.ComputePoints"/>
            to perform the actual determination of the route.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.ValidRoute">
            @hidden @internal 
        </member>
        <member name="P:Northwoods.Go.Link.SuspendsRouting">
            @hidden @internal 
        </member>
        <member name="P:Northwoods.Go.Link.ComputingPoints">
            @hidden @internal 
        </member>
        <member name="P:Northwoods.Go.Link.DefaultFromPoint">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="P:Northwoods.Go.Link.DefaultToPoint">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.UpdateRoute">
             <summary>
             This method recomputes the route if the route is invalid,
             to make sure the <see cref="P:Northwoods.Go.Link.Points"/> are up-to-date.
             </summary>
             <remarks>
             This method calls <see cref="M:Northwoods.Go.Link.ComputePoints"/> in order to calculate a new route.
            
             The route may become invalid if either connected node is moved,
             or if various properties are modified, such as <see cref="P:Northwoods.Go.Link.Routing"/>.
             Such changes will call <see cref="M:Northwoods.Go.Link.InvalidateRoute"/>.
            
             It is unusual for you to have to call this method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.ComputePoints">
             <summary>
             Constructs a new route by modifying the <see cref="P:Northwoods.Go.Link.Points"/>.
             </summary>
             <remarks>
             This is only called by <see cref="M:Northwoods.Go.Link.UpdateRoute"/>, when needed.
             All route points are always in document coordinates.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            
             Overrides of this method may call a number of "protected" methods in order to build the route:
             <see cref="M:Northwoods.Go.Link.ClearPoints"/>, <see cref="M:Northwoods.Go.Link.AddPoint(Northwoods.Go.Point)"/>, <see cref="M:Northwoods.Go.Link.InsertPoint(System.Int32,Northwoods.Go.Point)"/>, <see cref="M:Northwoods.Go.Link.RemovePoint(System.Int32)"/>, <see cref="M:Northwoods.Go.Link.SetPoint(System.Int32,Northwoods.Go.Point)"/>.
             Overrides of this method must not set <see cref="P:Northwoods.Go.Link.Points"/>.
            
             Other methods that are commonly called and may be overridden are:
             <see cref="M:Northwoods.Go.Link.ComputeEndSegmentLength(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot,System.Boolean)"/>, <see cref="M:Northwoods.Go.Link.ComputeSpot(System.Boolean,Northwoods.Go.GraphObject)"/>, <see cref="M:Northwoods.Go.Link.ComputeOtherPoint(Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>,
             <see cref="M:Northwoods.Go.Link.ComputeCurve"/>, <see cref="M:Northwoods.Go.Link.ComputeCurviness"/>, <see cref="M:Northwoods.Go.Link.HasCurviness"/>,
             <see cref="M:Northwoods.Go.Link.ComputeThickness"/>,
             <see cref="M:Northwoods.Go.Link.MakeGeometry"/>.
             </remarks>
             <returns>true if it computed a route of points</returns>
        </member>
        <member name="M:Northwoods.Go.Link._OrthoPointToward(Northwoods.Go.Point,Northwoods.Go.Point)">
            @hidden @internal
            <param name="c">the central point.</param>
            <param name="p">the orientation point; this is then modified and returned.</param>
            <returns>this has either X or Y be a huge value.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.GetLinkPointFromPoint(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Point,Northwoods.Go.Point,System.Boolean)">
            <summary>
            Compute the intersection point in document coordinates for the edge of a particular port GraphObject, given a point,
            when no particular spot or side has been specified.
            </summary>
            <param name="node"></param>
            <param name="port">port the <see cref="T:Northwoods.Go.GraphObject"/> representing a port on the node.</param>
            <param name="focus">the point in document coordinates to/from which the link should point,
              normally the center of the port.</param>
            <param name="p">often this point is far away from the node, to give a general direction,
              particularly an orthogonal one.</param>
            <param name="from">true if the link is coming out of the port; false if going to the port.</param>
            <returns>the point in document coordinates of the intersection point on the edge of the port.</returns>
        </member>
        <member name="M:Northwoods.Go.Link._FindExistingLinkInfo(Northwoods.Go.GraphObject,Northwoods.Go.Link)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link._GetLinkInfo(Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.GetLinkPoint(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot,System.Boolean,System.Boolean,Northwoods.Go.Node,Northwoods.Go.GraphObject)">
            <summary>
            Compute the point on a node/port in document coordinates at which the route of a link should end.
            </summary>
            <param name="node"></param>
            <param name="port">port the <see cref="T:Northwoods.Go.GraphObject"/> representing a port on the node.</param>
            <param name="spot">a <see cref="T:Northwoods.Go.Spot"/> value describing where the link should connect.</param>
            <param name="from">true if the link is coming out of the port; false if going to the port.</param>
            <param name="ortho">whether the link should have orthogonal segments.</param>
            <param name="othernode">the node at the other end of the link.</param>
            <param name="otherport">the <see cref="T:Northwoods.Go.GraphObject"/> port at the other end of the link.</param>
            <returns>in document coordinates.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.GetLinkDirection(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Point,Northwoods.Go.Spot,System.Boolean,System.Boolean,Northwoods.Go.Node,Northwoods.Go.GraphObject)">
            <summary>
            Compute the direction in which a link should go from a given connection point.
            </summary>
            <param name="node"></param>
            <param name="port">the <see cref="T:Northwoods.Go.GraphObject"/> representing a port on the node.</param>
            <param name="linkpoint">the connection point, in document coordinates.</param>
            <param name="spot">a <see cref="T:Northwoods.Go.Spot"/> value describing where the link should connect.</param>
            <param name="from">true if the link is coming out of the port; false if going to the port.</param>
            <param name="ortho">whether the link should have orthogonal segments.</param>
            <param name="othernode">the node at the other end of the link.</param>
            <param name="otherport">the <see cref="T:Northwoods.Go.GraphObject"/> port at the other end of the link.</param>
            <returns>the absolute angle, in degrees.</returns>
        </member>
        <member name="M:Northwoods.Go.Link._GetLinkDirection1(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Point,Northwoods.Go.Spot,System.Boolean,System.Boolean,Northwoods.Go.Node,Northwoods.Go.GraphObject)">
            @hidden @internal
            <param name="node"></param>
            <param name="port">the <see cref="T:Northwoods.Go.GraphObject"/> representing a port on the node.</param>
            <param name="linkpoint">the connection point, in document coordinates.</param>
            <param name="spot">a <see cref="T:Northwoods.Go.Spot"/> value describing where the link should connect.</param>
            <param name="from">true if the link is coming out of the port; false if going to the port.</param>
            <param name="ortho">whether the link should have orthogonal segments.</param>
            <param name="othernode">the node at the other end of the link.</param>
            <param name="otherport">the <see cref="T:Northwoods.Go.GraphObject"/> port at the other end of the link.</param>
            <returns>the absolute angle, in degrees.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeEndSegmentLength(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot,System.Boolean)">
             <summary>
             Get the length of the end segment in document coordinates, typically a short distance, in document units.
             </summary>
             <remarks>
             For spot values that are <see cref="M:Northwoods.Go.Spot.IsSide"/>, this returns a computed value.
             Depending on the `from` argument, this will return <see cref="P:Northwoods.Go.Link.FromEndSegmentLength"/> or <see cref="P:Northwoods.Go.Link.ToEndSegmentLength"/>.
             If the value is `NaN`, this will return the <see cref="P:Northwoods.Go.Link.FromPort"/>'s <see cref="P:Northwoods.Go.GraphObject.FromEndSegmentLength"/>
             or the <see cref="P:Northwoods.Go.Link.ToPort"/>'s <see cref="P:Northwoods.Go.GraphObject.ToEndSegmentLength"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="node"></param>
             <param name="port">the <see cref="T:Northwoods.Go.GraphObject"/> representing a port on the node.</param>
             <param name="spot">a <see cref="T:Northwoods.Go.Spot"/> value describing where the link should connect.</param>
             <param name="from">true if the link is coming out of the port; false if going to the port.</param>
             <returns>a distance in document coordinates; must be a real number, not NaN or infinity.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeSpot(System.Boolean,Northwoods.Go.GraphObject)">
             <summary>
             Get the <see cref="T:Northwoods.Go.Spot"/> that describes how the end of the link should connect with the port.
             </summary>
             <remarks>
             Depending on the `from` argument, this will return <see cref="P:Northwoods.Go.Link.FromSpot"/> or <see cref="P:Northwoods.Go.Link.ToSpot"/>.
             If the value is <see cref="M:Northwoods.Go.Spot.IsDefault"/>, this will return the <see cref="P:Northwoods.Go.Link.FromPort"/>'s <see cref="P:Northwoods.Go.GraphObject.FromSpot"/>
             or the <see cref="P:Northwoods.Go.Link.ToPort"/>'s <see cref="P:Northwoods.Go.GraphObject.ToSpot"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>must not be <see cref="F:Northwoods.Go.Spot.Default"/>, but may be <see cref="F:Northwoods.Go.Spot.None"/></returns>
        </member>
        <member name="M:Northwoods.Go.Link._GetFromSpot(Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link._GetToSpot(Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.IsSpotUndirected(Northwoods.Go.Spot)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.ComputeFocusSpot(Northwoods.Go.Spot,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.ComputeOtherPoint(Northwoods.Go.Node,Northwoods.Go.GraphObject)">
             <summary>
             Find the approximate point of the other end of the link in document coordinates.
             </summary>
             <remarks>
             This is useful when computing the connection point when there is no specific spot, to have an idea of which general direction the link should be going.
             By default this will return the center of the other port.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>approximately where the other end of this link might end, in document coordinates</returns>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeShortLength(System.Boolean)">
            <summary>
            (undocumented)
            </summary>
            <returns>must be a real number, not NaN or infinity.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.FindElementsIn``1(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,System.Collections.Generic.ICollection{``0},Northwoods.Go.Transform)">
            @hidden @internal
            <param name="r">A Rect in container coordinates.</param>
            <param name="navig">A function taking a GraphObject and returning a GraphObject, defaulting to the identity.</param>
            <param name="pred">A function taking the GraphObject
            returned by navig and returning true if that object should be returned,
            defaulting to a predicate that always returns true.</param>
            <param name="partialInclusion">True if objects are to be included when they
            intersect.</param>
            <param name="list">A List (or Set) to add the results to.</param>
            <param name="txfm"></param>
            <returns>Whether or not this object is included.</returns>
        </member>
        <member name="P:Northwoods.Go.Link.IsOrthogonal">
             <summary>
             This read-only property is true if <see cref="P:Northwoods.Go.Link.Routing"/> is a value that implies that the points
             of the route should be orthogonal, such that each point shares a common X or a common Y value
             with the immediately previous and next points.
             </summary>
             <remarks>
             This property is completely dependent on the <see cref="P:Northwoods.Go.Link.Routing"/> property.
             Values of <see cref="F:Northwoods.Go.LinkRouting.Orthogonal"/> and <see cref="F:Northwoods.Go.LinkRouting.AvoidsNodes"/> causes this property to be true.
            
             The points in the route might not actually form an orthogonal route, but when the route is computed
             the intent is to maintain orthogonality.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.IsOrthogonalRouting(Northwoods.Go.LinkRouting)">
            @hidden @internal
            <summary>
            An internal static predicate.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Link.IsAvoiding">
            @hidden
            <summary>
            (undocumented)
            This read-only property is true when the routing tries to be smart about not overlapping other parts.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeCurve">
            <summary>
            Returns the <see cref="P:Northwoods.Go.Link.Curve"/>, unless this link is supposed to pretend to be curved, as with reflexive links.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeCorner">
            <summary>
            (undocumented)
            Returns the <see cref="P:Northwoods.Go.Link.Corner"/>, if it's a non-negative number, or else 10.
            </summary>
            <returns>must be a real number, not NaN or infinity</returns>
        </member>
        <member name="M:Northwoods.Go.Link.FindMidLabel">
            <summary>
            (undocumented)
            Returns the first label that should be at the "middle" of the link, if there is any such label.
            </summary>
            <remarks>
            Elements that have .IsPanelMain == true are ignored, including the <see cref="P:Northwoods.Go.Link.Path"/>.
            Elements that have a <see cref="P:Northwoods.Go.GraphObject.SegmentIndex"/> set are ignored, such as arrowheads.
            If there are no label objects within the Link Panel, consider any <see cref="P:Northwoods.Go.Link.LabelNodes"/>
            whose SegmentIndex has not been set.
            This could be overridden to return a different label than the first one, or to always return null.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeSpacing">
             <summary>
             Returns the expected spacing between this link and others that connect this link's fromPort and toPort.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Link.ComputeThickness"/> and also takes any "mid label""s breadth into account.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>must be a real number, not NaN or infinity</returns>
             <seealso cref="M:Northwoods.Go.Link.ComputeCurviness"/>
        </member>
        <member name="M:Northwoods.Go.Link.ArrangeBundledLinks(System.Collections.Generic.IList{Northwoods.Go.Link},System.Boolean)">
             <summary>
             (undocumented)
             Sort the Links between two ports and invalidate their routes.
             </summary>
             <remarks>
             Only one of the Links in the bundle will get this method called -- it is undetermined which Link is chosen.
            
             By default does not change the order of the links, but does invalidate all routes if REROUTE is true.
             This method must not add Links to or remove Links from the argument list, but may re-order the Links in the list.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeCurviness">
            <summary>
            Returns the <see cref="P:Northwoods.Go.Link.Curviness"/>, if it's a number,
            or else a computed value based on how many links connect this pair of nodes/ports,
            by calling <see cref="M:Northwoods.Go.Link.ComputeSpacing"/> on each link.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>must be a real number, not NaN or infinity</returns>
            <seealso cref="M:Northwoods.Go.Link.ComputeSpacing"/>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeThickness">
             <summary>
             Returns the thickness of this link.
             </summary>
             <remarks>
             By default it uses the strokeWidth of the main element, assuming it's a Shape.
             This is called by <see cref="M:Northwoods.Go.Link.ComputeSpacing"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>a non-negative real number</returns>
        </member>
        <member name="M:Northwoods.Go.Link.HasCurviness">
            <summary>
            Returns true if an extra or a different point is needed based on <see cref="P:Northwoods.Go.Link.Curviness"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.CalculateLineNoSpot(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot,Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.CalculateBezierNoSpot(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot,Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Spot)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.AdjustPoints(System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Point)">
             @hidden @internal
             <summary>
             Adjust all of the existing points in this link's stroke in an inclusive range
             according to new first and last stroke points.
             </summary>
             <remarks>
             This is primarily useful to help maintain intermediate inflection points
             in a link when one or both ports moves.
             By default this just calls <see cref="M:Northwoods.Go.Link.RescalePoints(System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Point)"/>, <see cref="M:Northwoods.Go.Link.StretchPoints(System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Point)"/>,
             or <see cref="M:Northwoods.Go.Link.ModifyEndPoints(System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Point)"/>.
             This method is not called when there are no existing points to be adjusted
             or when <see cref="P:Northwoods.Go.Link.Adjusting"/> is None.
            
             When this link is orthogonal, an <see cref="P:Northwoods.Go.Link.Adjusting"/> of
             Scale will just return false to result in the standard orthogonal path.
             An <see cref="P:Northwoods.Go.Link.Adjusting"/> of Stretch
             for an orthogonal link is treated as if it were End.
             </remarks>
             @expose
             <param name="startIndex">int the zero-based index of the first point to be changed, to be
             the value of the newFromPoint argument.</param>
             <param name="newFromPoint">a Point in document coordinates.</param>
             <param name="endIndex">int the zero-based index of the last point to be changed, to be
             the value of the newToPoint argument.</param>
             <param name="newToPoint">a Point in document coordinates.</param>
             <returns>This method should return true if the stroke points were adjusted.
             Return false to tell <see cref="M:Northwoods.Go.Link.ComputePoints"/> to plot the standard path.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.RescalePoints(System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            Maintain the same shape for the stroke, but scale and rotate according to the
            new point arguments newFromPoint and newToPoint.
            </summary>
            <param name="startIndex">int the zero-based index of the first point to be changed, to be
            the value of the newFromPoint argument.</param>
            <param name="newFromPoint">a Point in document coordinates.</param>
            <param name="endIndex">int the zero-based index of the last point to be changed, to be
            the value of the newToPoint argument.</param>
            <param name="newToPoint">a Point in document coordinates.</param>
            <returns>This method should return true if the stroke points were adjusted.
            Return false to tell <see cref="M:Northwoods.Go.Link.ComputePoints"/> to plot the standard path.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.StretchPoints(System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            Stretch the points of this stroke by interpolating the points
            from startIndex to endIndex between the
            new point arguments newFromPoint and newToPoint.
            </summary>
            <param name="startIndex">int the zero-based index of the first point to be changed, to be
            the value of the newFromPoint argument.</param>
            <param name="newFromPoint">a Point in document coordinates.</param>
            <param name="endIndex">int the zero-based index of the last point to be changed, to be
            the value of the newToPoint argument.</param>
            <param name="newToPoint">a Point in document coordinates.</param>
            <returns>This method should return true if the stroke points were adjusted.
            Return false to tell <see cref="M:Northwoods.Go.Link.ComputePoints"/> to plot the standard path.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.ModifyEndPoints(System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            Modify only the end points of this stroke to match any new
            newFromPoint or newToPoint points;
            intermediate points are not changed.
            </summary>
            <remarks>
            The startIndex'th point should be set to the newFromPoint argument,
            and the endIndex"th point should be set to the newToPoint argument,
            and the intermediate points should be not be changed unless needed to maintain orthogonality.
            </remarks>
            <param name="startIndex">int the zero-based index of the first point to be changed, to be
            the value of the newFromPoint argument.</param>
            <param name="newFromPoint">a Point in document coordinates.</param>
            <param name="endIndex">int the zero-based index of the last point to be changed, to be
            the value of the newToPoint argument.</param>
            <param name="newToPoint">a Point in document coordinates.</param>
            <returns>This method should return true if the stroke points were adjusted.
            Return false to tell <see cref="M:Northwoods.Go.Link.ComputePoints"/> to plot the standard path.</returns>
        </member>
        <member name="M:Northwoods.Go.Link.AddOrthoPoints(Northwoods.Go.Point,System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Node,Northwoods.Go.Node)">
            @hidden
            <summary>
            (undocumented)
            This method is called by <see cref="M:Northwoods.Go.Link.ComputePoints"/> when the link is orthogonal
            and at least one port has a link spot that is not <see cref="M:Northwoods.Go.Spot.IsNoSpot"/>.
            </summary>
            <remarks>
            <see cref="M:Northwoods.Go.Link.ComputePoints"/> is responsible for adding the first two
            and the last two points of the stroke, including the startFrom and endTo values.
            This method is responsible for adding any additional points in the middle of the stroke.
            This method calls <see cref="M:Northwoods.Go.Link.ComputeMidOrthoPosition(System.Double,System.Double,System.Double,System.Double,System.Boolean)"/> to determine the
            distance of the middle segment between the two ports.
            It also tries to avoid the source node and the destination node.
            When the <see cref="P:Northwoods.Go.Link.Routing"/> property is not Normal,
            this method uses another, more computationally expensive,
            method for determining the proper path of the link, which may have many segments.
            </remarks>
            <param name="startFrom">this <see cref="T:Northwoods.Go.Point"/> will already have been added to the stroke by <see cref="M:Northwoods.Go.Link.ComputePoints"/> before calling this method.</param>
            <param name="fromDir">Normally 0, 90, 180, or 270 degrees.</param>
            <param name="endTo"><see cref="M:Northwoods.Go.Link.ComputePoints"/> will add this <see cref="T:Northwoods.Go.Point"/> after calling this method.</param>
            <param name="toDir">Normally 0, 90, 180, or 270 degrees.</param>
            <param name="fromnode">the <see cref="T:Northwoods.Go.Node"/> that the link is coming from.</param>
            <param name="tonode">the <see cref="T:Northwoods.Go.Node"/> that the link is going to.</param>
        </member>
        <member name="M:Northwoods.Go.Link.MaybeAvoidsNodes(Northwoods.Go.Point,System.Int32,Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,System.Int32,Northwoods.Go.Node,Northwoods.Go.Node,Northwoods.Go.Rect,Northwoods.Go.Rect,System.Int32)">
            @hidden @internal
            <param name="startFrom">this <see cref="T:Northwoods.Go.Point"/> will already have been added to the stroke by <see cref="M:Northwoods.Go.Link.ComputePoints"/> before calling this method.</param>
            <param name="fromDir">Normally 0, 90, 180, or 270 degrees.</param>
            <param name="m2">first default ortho midpoint.</param>
            <param name="m3">second default ortho midpoint.</param>
            <param name="endTo"><see cref="M:Northwoods.Go.Link.ComputePoints"/> will add this <see cref="T:Northwoods.Go.Point"/> after calling this method.</param>
            <param name="toDir">Normally 0, 90, 180, or 270 degrees.</param>
            <param name="fromnode">the <see cref="T:Northwoods.Go.Node"/> that the link is coming from.</param>
            <param name="tonode">the <see cref="T:Northwoods.Go.Node"/> that the link is going to.</param>
            <param name="fromR">inflated fromnode.ActualBounds.</param>
            <param name="toR">inflated tonode.ActualBounds.</param>
            <param name="oldToDir">original toDir passed to AddOrthoPoints</param>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeMidOrthoPosition(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            (undocumented)
            This method is called by <see cref="M:Northwoods.Go.Link.AddOrthoPoints(Northwoods.Go.Point,System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Node,Northwoods.Go.Node)"/> to determine the distance
            of the middle segment between the two ports.
            </summary>
            <param name="fromX">The first point's X coordinate.</param>
            <param name="fromY">The first point's Y coordinate.</param>
            <param name="toX">The last point's X coordinate.</param>
            <param name="toY">The last point's Y coordinate.</param>
            <param name="vertical">Whether the mid-position is along the vertical axis or horizontal axis.</param>
            <returns>must be a real number, not NaN or infinity</returns>
        </member>
        <member name="M:Northwoods.Go.Link.CrossesOverNode">
            @hidden @internal
            <returns>false if not AvoidsNodes or if no non-end segment intersects with any avoidable Nodes</returns>
        </member>
        <member name="M:Northwoods.Go.Link.TraversePositions(Northwoods.Go.PositionArray,System.Double,System.Double,System.Int32,System.Boolean,System.Int32)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.FindClosestSegment(Northwoods.Go.Point)">
            <summary>
            Find the index of the segment that is closest to a given point.
            </summary>
            <remarks>
            This assumes the route only has straight line segments.
            It ignores any jump-overs or jump-gaps.
            </remarks>
            <param name="p">the Point, in document coordinates.</param>
            <returns>int the index of the segment, from zero to the number of points minus 2.</returns>
        </member>
        <member name="P:Northwoods.Go.Link.Geometry">
             <summary>
             This read-only property returns the <see cref="P:Northwoods.Go.Link.Geometry"/> that is used by the <see cref="P:Northwoods.Go.Link.Path"/>, the link <see cref="T:Northwoods.Go.Shape"/> based on the route points.
             </summary>
             <remarks>
             This geometry is automatically generated using the route points and other properties
             such as the <see cref="P:Northwoods.Go.Link.Curve"/>.
             The points of the Geometry are in local coordinates, whereas the <see cref="P:Northwoods.Go.Link.Points"/> of the link route are in document coordinates.
            
             More than one <see cref="T:Northwoods.Go.Shape"/> may share this geometry as its <see cref="P:Northwoods.Go.Shape.Geometry"/>,
             if there is more than one shape element in the Link with <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> set to true.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.MakeShapeGeometry(System.Boolean)">
            @hidden @internal
            <param name="force">true if you want to re-create the geometry even if one exists and the route is valid</param>
        </member>
        <member name="M:Northwoods.Go.Link.CanMakeSimplifiedGeometries(Northwoods.Go.Diagram)">
            <summary>
            Determine if current Diagram state should
            </summary>
            <param name="diagram"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Link.MakeGeometry">
             <summary>
             Produce a <see cref="P:Northwoods.Go.Link.Geometry"/> given the points of this route,
             depending on the value of <see cref="P:Northwoods.Go.Link.Curve"/> and <see cref="P:Northwoods.Go.Link.Corner"/> and perhaps other properties.
             </summary>
             <remarks>
             The points of the Geometry are in local coordinates, whereas the <see cref="P:Northwoods.Go.Link.Points"/> of the link route are in document coordinates.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Link._GetDistanceBetweenLinkPoints(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link._GetOrthogonalBezierControls(Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,System.Double,Northwoods.Go.Point,Northwoods.Go.Point)">
            @hidden @internal
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="ratio">the control point distance ratio.</param>
            <param name="cp0">a Point to be modified to hold the results.</param>
            <param name="cp1">a Point to be modified to hold the results.</param>
        </member>
        <member name="M:Northwoods.Go.Link._ShiftPointByShortLength(Northwoods.Go.Point,System.Boolean,Northwoods.Go.Point)">
            @hidden @internal
            <param name="pt">the Point to be modified with the result, in geometry coordinates.</param>
            <param name="from"></param>
            <param name="offset">the translation from document to geometry coordinates.</param>
            <returns>the first argument</returns>
        </member>
        <member name="M:Northwoods.Go.Link._FurthestPoint(Northwoods.Go.Point,System.Int32,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link._AddLineAndCorner(Northwoods.Go.StreamGeometryContext,System.Double,System.Double,Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,System.Double,System.Boolean)">
            @hidden @internal
            <param name="g"></param>
            <param name="offx"></param>
            <param name="offy"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="end">this is modified to be the end point of this operation</param>
            <param name="origfrom"></param>
            <param name="corner"></param>
            <param name="makeSimplifiedGeo"></param>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeJumpLength">
            <summary>
            Compute the minimum length of a JumpOver or JumpGap.
            </summary>
            <remarks>
            By default, this method just returns 10.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Link._AddLine(Northwoods.Go.StreamGeometryContext,System.Double,System.Double,Northwoods.Go.Point,Northwoods.Go.Point,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link._GetIntersections(Northwoods.Go.Point,Northwoods.Go.Point,System.Collections.Generic.List{System.Double})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link._GetIntersections2(Northwoods.Go.Point,Northwoods.Go.Point,System.Collections.Generic.List{System.Double},Northwoods.Go.Link)">
            @hidden @internal
            <param name="A"></param>
            <param name="B">known not be to equal to A</param>
            <param name="vec">list of numbers to hold intersections</param>
            <param name="route"></param>
        </member>
        <member name="M:Northwoods.Go.Link._GetOrthoSegmentIntersection(Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point@)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Link.FirstPickIndex">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="P:Northwoods.Go.Link.LastPickIndex">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link._JumpsOver">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link._InvalidateOtherJumpOversMaybe(System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.InvalidateOtherJumpOvers(Northwoods.Go.Rect)">
            <summary>
            (undocumented)
            Maybe invalidate the geometries of other links that jump or gap over this link.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Link._InvalidateJumpOvers(Northwoods.Go.Link,Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.UsesSamePort(Northwoods.Go.Link)">
            @hidden @internal
            @expose
        </member>
        <member name="M:Northwoods.Go.Link.IsVisible">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.MadeVisible(System.Boolean)">
            @hidden @internal
            <summary>
            Called when a part's visibility changes, from .visible or other indirect sources (like layer.Visible)
            </summary>
            <param name="val">whether the part was just made visible (true) or just made invisible (false)</param>
        </member>
        <member name="P:Northwoods.Go.Link.Adjusting">
             <summary>
             Gets or sets how the route is computed, including whether it uses the points of its old route to determine the new route.
             </summary>
             <remarks>
             The value must be one of <see cref="F:Northwoods.Go.LinkAdjusting.None">None</see>, <see cref="F:Northwoods.Go.LinkAdjusting.End">End</see>,
             <see cref="F:Northwoods.Go.LinkAdjusting.Scale">Scale</see>, or <see cref="F:Northwoods.Go.LinkAdjusting.Stretch">Stretch</see>.
            
             The default value is <see cref="F:Northwoods.Go.LinkAdjusting.None">None</see> -- the route is completely recalculated each time.
             </remarks>
             <seealso cref="M:Northwoods.Go.Link.ComputeAdjusting"/>
        </member>
        <member name="M:Northwoods.Go.Link.ComputeAdjusting">
            <summary>
            Returns the <see cref="P:Northwoods.Go.Link.Adjusting"/> value, unless this Link's Diagram is animating and the routing is AvoidsNodes --
            then it will return <see cref="F:Northwoods.Go.LinkAdjusting.End">End</see>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <seealso cref="P:Northwoods.Go.Link.Adjusting"/>
        </member>
        <member name="P:Northwoods.Go.Link.Corner">
            <summary>
            Gets or sets how rounded the corners are for adjacent line segments when the <see cref="P:Northwoods.Go.Link.Curve"/>
            is <see cref="F:Northwoods.Go.LinkCurve.None">None</see>, <see cref="F:Northwoods.Go.LinkCurve.JumpGap">JumpGap</see>, or <see cref="F:Northwoods.Go.LinkCurve.JumpOver">JumpOver</see> and
            the two line segments are orthogonal to each other.
            </summary>
            <remarks>
            The default value is zero -- there is no curve at a corner.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.Curve">
             <summary>
             Gets or sets the way the path is generated from the route's points.
             </summary>
             <remarks>
             The value must be one of <see cref="F:Northwoods.Go.LinkCurve.None">None</see>, <see cref="F:Northwoods.Go.LinkCurve.Bezier">Bezier</see>,
             <see cref="F:Northwoods.Go.LinkCurve.JumpGap">JumpGap</see>, or <see cref="F:Northwoods.Go.LinkCurve.JumpOver">JumpOver</see>.
            
             Setting this property to <see cref="F:Northwoods.Go.LinkCurve.JumpOver">JumpOver</see> or <see cref="F:Northwoods.Go.LinkCurve.JumpGap">JumpGap</see> requires the Diagram to do
             considerable computation when calculating Link routes. Consider not using
             a Jump... value with Diagrams that contain large numbers of Links
             if you are targeting slow devices.
            
             The default value is <see cref="F:Northwoods.Go.LinkCurve.None">None</see> -- each link segment is a straight line.
             </remarks>
             <seealso cref="M:Northwoods.Go.Link.ComputeCurve"/>
        </member>
        <member name="P:Northwoods.Go.Link.Curviness">
            <summary>
            Gets or sets how far the control points are offset when the <see cref="P:Northwoods.Go.Link.Curve"/> is <see cref="F:Northwoods.Go.LinkCurve.Bezier">Bezier</see>
            or when there are multiple links between the same two ports.
            </summary>
            <remarks>
            The default value is NaN -- the actual curviness is computed based on how many links connect the same pair of ports.
            </remarks>
            <seealso cref="M:Northwoods.Go.Link.ComputeCurviness"/>
        </member>
        <member name="P:Northwoods.Go.Link.Routing">
             <summary>
             Gets or sets whether the link's path tries to avoid other nodes.
             </summary>
             <remarks>
             The value must be one of <see cref="F:Northwoods.Go.LinkRouting.Normal">Normal</see>,
             <see cref="F:Northwoods.Go.LinkRouting.Orthogonal">Orthogonal</see>, or <see cref="F:Northwoods.Go.LinkRouting.AvoidsNodes">AvoidsNodes</see>.
            
             Setting this property to <see cref="F:Northwoods.Go.LinkRouting.AvoidsNodes">AvoidsNodes</see> requires the Diagram to do
             considerable computation when calculating Link routes. Consider not using
             the <see cref="F:Northwoods.Go.LinkRouting.AvoidsNodes">AvoidsNodes</see> with Diagrams that contain large numbers of Nodes and Links
             if you are targeting slow devices.
             When using <see cref="F:Northwoods.Go.LinkRouting.AvoidsNodes">AvoidsNodes</see>, dragging performance can be improved by setting <see cref="P:Northwoods.Go.Tools.DraggingTool.IsComplexRoutingRealtime"/> to false.
            
             The default value is <see cref="F:Northwoods.Go.LinkRouting.Normal">Normal</see> -- the route is primarily a single straight segment,
             with possible short end segments when connecting with ports that have a "spot" value
             as the <see cref="P:Northwoods.Go.Link.FromSpot"/> or <see cref="P:Northwoods.Go.GraphObject.FromSpot"/> or <see cref="P:Northwoods.Go.Link.ToSpot"/> or <see cref="P:Northwoods.Go.GraphObject.ToSpot"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Link.Smoothness">
            <summary>
            Gets or sets how far the control points are from the points of the route
            when <see cref="P:Northwoods.Go.Link.Routing"/> is <see cref="F:Northwoods.Go.LinkRouting.Orthogonal">Orthogonal</see> and <see cref="P:Northwoods.Go.Link.Curve"/> is <see cref="F:Northwoods.Go.LinkCurve.Bezier">Bezier</see>.
            </summary>
            <remarks>
            The default value is 0.5.
            Values of this property typically fall in the range of 0.0 to 1.0.
            A value of 0.0 indicates that the control points of the curve are at the end points,
            which will result in straight line segments.
            A value of 1.0 indicates that the control points are one-third of the link's
            length away from the end point along the direction of the link,
            and the same distance away in a perpendicular direction.
            The distance scales linearly with the value of this property,
            even with negative values and values greater than 1.0.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Link.UpdateLinkBundleAdd">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.UpdateLinkBundleRemove">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Link.IsLinkLike">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Link.Key">
            <summary>
            This read-only property returns the Links's Model data key if it is in a Diagram and is backed by Model data,
            otherwise this returns null.
            </summary>
            <remarks>
            If the link data is in a GraphLinksModel, the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> must not be an empty string.
            </remarks>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetKeyForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Add(Northwoods.Go.GraphObject[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/>
        </member>
        <member name="M:Northwoods.Go.Link.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Set(Northwoods.Go.Link)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Link.Apply(System.Action{Northwoods.Go.Link})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Link.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.Link.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.Link.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="T:Northwoods.Go.LinkBundle">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.LinkBundle.Invalidate">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.LinkBundle.Validate">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.PositionArray">
            @hidden @internal
        </member>
        <member name="F:Northwoods.Go.PositionArray._OCCUPIED">
            @hidden @internal @const @static 
        </member>
        <member name="F:Northwoods.Go.PositionArray._START">
            @hidden @internal @const @static 
        </member>
        <member name="F:Northwoods.Go.PositionArray._MAX">
            @hidden @internal @const @static 
        </member>
        <member name="F:Northwoods.Go.PositionArray._UNOCCUPIED">
            @hidden @internal @const @static 
        </member>
        <member name="F:Northwoods.Go.PositionArray._FAILED">
            @hidden @internal @const @static 
        </member>
        <member name="M:Northwoods.Go.PositionArray.Initialize(Northwoods.Go.Rect)">
            @hidden @internal
            <param name="rect"></param>
        </member>
        <member name="M:Northwoods.Go.PositionArray.InBounds(System.Double,System.Double)">
            @hidden @internal
            <param name="x"> in document coordinates.</param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.PositionArray.GetDistance(System.Double,System.Double)">
            @hidden @internal
            <param name="x"> in document coordinates.</param>
            <param name="y"></param>
            <returns>int</returns>
        </member>
        <member name="M:Northwoods.Go.PositionArray.SetOccupied(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <param name="x"> in document coordinates.</param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Northwoods.Go.PositionArray.SetAll(System.Int32)">
            @hidden @internal
            <param name="v">int</param>
        </member>
        <member name="M:Northwoods.Go.PositionArray.ClearAllUnoccupied">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PositionArray.IsOccupied(System.Double,System.Double)">
            @hidden @internal
            <param name="x"> in document coordinates.</param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.PositionArray.IsUnoccupied(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <param name="x"> in document coordinates.</param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.PositionArray.Ray(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            @hidden @internal
            <param name="x">int</param>
            <param name="y">int</param>
            <param name="inc">int</param>
            <param name="vert"></param>
            <param name="lowx">int</param>
            <param name="hix">int</param>
            <param name="lowy">int</param>
            <param name="hiy">int</param>
            <returns>int</returns>
        </member>
        <member name="M:Northwoods.Go.PositionArray.Spread(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            @hidden @internal
            <param name="x"></param>
            <param name="y"></param>
            <param name="inc"></param>
            <param name="vert"></param>
            <param name="lowx"></param>
            <param name="hix"></param>
            <param name="lowy"></param>
            <param name="hiy"></param>
        </member>
        <member name="M:Northwoods.Go.PositionArray.BreakOut(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            @hidden @internal
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="inc"></param>
            <param name="vert"></param>
            <param name="lowx"></param>
            <param name="hix"></param>
            <param name="lowy"></param>
            <param name="hiy"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.PositionArray.BreakIn(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="inc"></param>
            <param name="vert"></param>
            <param name="lowx"></param>
            <param name="hix"></param>
            <param name="lowy"></param>
            <param name="hiy"></param>
        </member>
        <member name="M:Northwoods.Go.PositionArray.Propagate(Northwoods.Go.Point,System.Int32,Northwoods.Go.Point,System.Int32,Northwoods.Go.Rect,System.Boolean)">
            @hidden @internal
            <param name="p1"></param>
            <param name="fromDir"></param>
            <param name="p2"></param>
            <param name="toDir"></param>
            <param name="bounds"></param>
            <param name="first"></param>
        </member>
        <member name="M:Northwoods.Go.PositionArray.SearchFrom(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32})">
            <param name="px"></param>
            <param name="py"></param>
            <param name="dir"></param>
            <param name="tx"></param>
            <param name="ty"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.Go.LinkInfo">
            <summary>
            This is used by Knot.SortLinkInfos, Knot.AssignLinkPoints, and Knot.AssignEndSegmentLengths
            only when Knot.LinkPointsSpread is True.
            This information is transient, just used when calculating link Points.
            </summary>
        </member>
        <member name="M:Northwoods.Go.LinkInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Northwoods.Go.PortSpreading">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Node.PortSpreading"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PortSpreading.None">
            <summary>
            Links connecting with a port should all connect at a single point on the side(s)
            indicated by a Spot that is <see cref="M:Northwoods.Go.Spot.IsSide"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PortSpreading.Evenly">
            <summary>
            Links connecting with a port should be distributed evenly along the side(s)
            indicated by a Spot that is <see cref="M:Northwoods.Go.Spot.IsSide"/>.
            This is the default value.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PortSpreading.Packed">
            <summary>
            Links connecting with a port should packed together based on the link's shape's width
            on the side(s) indicated by a Spot that is <see cref="M:Northwoods.Go.Spot.IsSide"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Node">
             <summary>
             A Node is a <see cref="T:Northwoods.Go.Part"/> that may connect to other nodes with <see cref="T:Northwoods.Go.Link"/>s,
             or that may be a member of a <see cref="T:Northwoods.Go.Group"/>.
            
             <see cref="T:Northwoods.Go.Group"/> inherits from Node,
             enabling nodes to logically contain other nodes and links.
             </summary>
             <remarks>
             <p class="boxread">
             For a more general discussion of how to define nodes, see <a href="../../intro/nodes.Html">Introduction to Nodes</a>.
             </p>
            
             Although you can create a Node and <see cref="M:Northwoods.Go.Diagram.Add(Northwoods.Go.Part)"/> it to a Diagram, this does not update the Model.
             It is more common to create a node by adding a node data object to the model
             by calling <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>. For example:
             <code language="cs">
               myDiagram.StartTransaction("make new node");
               myDiagram.Model.AddNodeData(new MyNodeData { Key = "Omega" });
               myDiagram.CommitTransaction("make new node");
             </code>
            
             This will cause a Node or simple <see cref="T:Northwoods.Go.Part"/> to be created (copying the template found in <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/>),
             added to the Diagram in some <see cref="T:Northwoods.Go.Layer"/> (based on <see cref="P:Northwoods.Go.Part.LayerName"/>), and bound to the node data
             (resulting in <see cref="P:Northwoods.Go.Panel.Data"/> referring to that node data object).
             If you do not keep a reference to that object, as the above code does not,
             you can retrieve it later by calling <see cref="M:Northwoods.Go.Models.Model`3.FindNodeDataForKey(`1)"/>.
            
             It is very common to initialize a Diagram by setting <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> to a collection
             of objects holding the properties that you need in your model.
             Nearly all of the samples do this kind of initialization.
            
             You can delete a Node by either calling <see cref="M:Northwoods.Go.Diagram.Remove(Northwoods.Go.Part)"/> or by calling <see cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/>.
             The latter obviously will modify the Model; the former does so if the Node was created from model data.
             Commands such as <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/> call these methods within a transaction.
            
             You can find all of the <see cref="T:Northwoods.Go.Link"/>s that are connected with a Node by calling <see cref="M:Northwoods.Go.Node.FindLinksConnected(System.String)"/>.
             Because links normally have a direction, you can find all of the links that have their <see cref="P:Northwoods.Go.Link.ToNode"/>
             be a given Node by calling <see cref="M:Northwoods.Go.Node.FindLinksInto(System.String)"/>.
             Similarly, you can call <see cref="M:Northwoods.Go.Node.FindLinksOutOf(System.String)"/> to find all of the links coming out from a node;
             such links have their <see cref="P:Northwoods.Go.Link.FromNode"/> be that node.
             For tree-structured graphs, use <see cref="M:Northwoods.Go.Node.FindTreeChildrenLinks"/> or <see cref="M:Northwoods.Go.Node.FindTreeParentLink"/>.
            
             If you are not so interested in the links but are interested in the nodes at the other end of the links
             connecting with a node, there are other methods that you can call.
             <see cref="M:Northwoods.Go.Node.FindNodesConnected(System.String)"/> returns all of the nodes that are at the other end of the links that
             connect with a given node.
             <see cref="M:Northwoods.Go.Node.FindNodesInto(System.String)"/> and <see cref="M:Northwoods.Go.Node.FindNodesOutOf(System.String)"/> return the subsets of those nodes considering
             only those links that go into or come out of the given node.
             For tree-structured graphs, use <see cref="M:Northwoods.Go.Node.FindTreeChildrenNodes"/> or <see cref="M:Northwoods.Go.Node.FindTreeParentNode"/>.
            
             For example, to operate on the data of all of the destination nodes:
             <code language="cs">
               var destnodes = somenode.FindNodesOutOf();
               foreach (var child in destnodes) {
                 if ((child.Data as MyNodeData).Text.Contains("special")) { ... }
               }
             </code>
            
             You can link two nodes by creating a new <see cref="T:Northwoods.Go.Link"/>, setting its <see cref="P:Northwoods.Go.Link.ToNode"/> and <see cref="P:Northwoods.Go.Link.FromNode"/>
             (in either order), and <see cref="M:Northwoods.Go.Diagram.Add(Northwoods.Go.Part)"/>ing it to the diagram.
             But it is more common to add a link data object to the <see cref="P:Northwoods.Go.Diagram.Model"/> by calling <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>.
             Just creating and adding a <see cref="T:Northwoods.Go.Link"/> will not update the model.
            
             Thus to add a link when using a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/> you should do something like:
             <code language="cs">
               myDiagram.StartTransaction("make new link");
               (myDiagram.Model as MyModel).AddLinkData(new MyLinkData { From = "Alpha", To = "Beta" });
               myDiagram.CommitTransaction("make new link");
             </code>
            
             Where you would substitute the keys of the actual nodes that you want to connect with a link.
             If you are using a <see cref="T:Northwoods.Go.Models.TreeModel`3"/>, there are no link data objects, so you just need to call
             <see cref="M:Northwoods.Go.Models.TreeModel`3.SetParentKeyForNodeData(`0,`1)"/> to specify the "parent" node's key for a "child" node data.
            
             To find a <see cref="T:Northwoods.Go.Link"/> given a link data object in the <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>,
             call <see cref="M:Northwoods.Go.Diagram.FindLinkForData(System.Object)"/>.  When using a <see cref="T:Northwoods.Go.Models.TreeModel`3"/>, call either <see cref="M:Northwoods.Go.Diagram.FindNodeForData(System.Object)"/>
             or <see cref="M:Northwoods.Go.Diagram.FindNodeForKey(System.Object)"/> to get a Node, and then call <see cref="M:Northwoods.Go.Node.FindTreeParentLink"/> to get the Link, if any exists.
            
             To find a link that connects two nodes, call <see cref="M:Northwoods.Go.Node.FindLinksTo(Northwoods.Go.Node,System.String,System.String)"/> or <see cref="M:Northwoods.Go.Node.FindLinksBetween(Northwoods.Go.Node,System.String,System.String)"/>.
             With the former method, the direction matters; with the latter method it returns links in either direction.
            
             As links connect with a node or are disconnected, you may want to update the appearance of the node.
             You can set the <see cref="P:Northwoods.Go.Node.LinkConnected"/> property to be an Action that is called.
             These functions must not modify any link relationships -- the properties just exist to update the appearance of the node.
             A typical usage would be to change the color or figure of a shape.
            
             You can control whether the user may draw a new link or reconnect a link between a pair of Nodes
             by affecting the result of <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
             You can override that predicate on <see cref="T:Northwoods.Go.Tools.LinkingTool"/> and <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>,
             but it is easier to set the <see cref="P:Northwoods.Go.Node.LinkValidation"/> or
             <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.LinkValidation"/> functional property.
            
             <p class="boxread">
             For a more general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
            
             Nodes also support the ability to provide logical and physical distinctions in the connection points
             that links use at a node. These connection objects are called "ports".
             By default the port object will be the whole <see cref="T:Northwoods.Go.Node"/>.
             However, you can set the <see cref="P:Northwoods.Go.GraphObject.PortId"/> property on any <see cref="T:Northwoods.Go.GraphObject"/> in the visual tree of a node
             to cause that element to be treated as a "port".
             The "port id" is just a string that ought to be unique amongst all of the port elements in the node.
            
             In the case of a node only having a single port, you should set the <see cref="P:Northwoods.Go.GraphObject.PortId"/> as an empty string.
             When there is no such element declared as the default port, it uses the whole node.
             You can use the <see cref="P:Northwoods.Go.Node.Port"/> property to get the only port element.
            
             When a node should have multiple ports,
             i.e. multiple <see cref="T:Northwoods.Go.GraphObject"/>s acting as separate connection points for links,
             you should set each port's <see cref="P:Northwoods.Go.GraphObject.PortId"/> to a string value that is unique for the node.
             When there may be multiple ports on a node, you can get a collection of elements representing ports
             by using the <see cref="P:Northwoods.Go.Node.Ports"/> property.
             Use the <see cref="M:Northwoods.Go.Node.FindPort(System.String)"/> method to find a particular port element by name.
            
             Note: the only kind of model that can save port information, i.e. portIds that are not an empty string,
             for links is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/> whose <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromPortIdProperty"/> and
             <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToPortIdProperty"/> have been set to name properties on the link data objects.
            
             <p class="boxread">
             For a more general discussion of ports, see <a href="../../intro/ports.Html">Introduction to Ports</a>.
             </p>
            
             All of the "FindLinks..." and "FindNodes..." methods mentioned above take an optional port id argument.
             When no argument is passed, these methods consider all links connecting with the node.
             When a port id argument is provided, these methods only consider links that connect with that port
             in the given node.
             Thus when navigating through the diagram, you can easily look at all of the nodes that links coming out of
             a given node go to.  Or you can just look at those nodes at the ends of links coming out of a particular port.
            
             You can also control the default connecting behavior of <see cref="T:Northwoods.Go.Link"/>s at each port.
             Because a port can be any <see cref="T:Northwoods.Go.GraphObject"/>, they are all properties on GraphObject.
             The properties are duplicated so that you can guide the "from" ends of links differently from the "to" ends of links.
             The properties include:
               - <see cref="P:Northwoods.Go.GraphObject.FromSpot"/>, <see cref="P:Northwoods.Go.GraphObject.ToSpot"/>
               - <see cref="P:Northwoods.Go.GraphObject.FromEndSegmentLength"/>, <see cref="P:Northwoods.Go.GraphObject.ToEndSegmentLength"/>
               - <see cref="P:Northwoods.Go.GraphObject.FromShortLength"/>, <see cref="P:Northwoods.Go.GraphObject.ToShortLength"/>
               - <see cref="P:Northwoods.Go.GraphObject.FromLinkable"/>, <see cref="P:Northwoods.Go.GraphObject.ToLinkable"/>
               - <see cref="P:Northwoods.Go.GraphObject.FromLinkableDuplicates"/>, <see cref="P:Northwoods.Go.GraphObject.ToLinkableDuplicates"/>
               - <see cref="P:Northwoods.Go.GraphObject.FromLinkableSelfNode"/>, <see cref="P:Northwoods.Go.GraphObject.ToLinkableSelfNode"/>
               - <see cref="P:Northwoods.Go.GraphObject.FromMaxLinks"/>, <see cref="P:Northwoods.Go.GraphObject.ToMaxLinks"/>
            
             The "...Spot" and "...Length" properties control the position and routing of links at a port.
             The "...Linkable..." and "...MaxLinks" properties control whether or not users can draw a new link
             or reconnect an existing link from or to a port.
             (The "...Spot" and "...Length" properties also exist on <see cref="T:Northwoods.Go.Link"/>, to override for a particular
             link the default values that come from a port element.)
            
             <p class="boxread">
             For a more general discussion of link points, see <a href="../../intro/connectionPoints.Html">Introduction to Link Connection Points</a>.
             </p>
            
             When the graph is tree-structured, you can use several functions for traversing the tree:
               - <see cref="M:Northwoods.Go.Node.FindTreeParentNode"/>
               - <see cref="M:Northwoods.Go.Node.FindTreeChildrenNodes"/>
               - <see cref="M:Northwoods.Go.Node.FindTreeParentLink"/>
               - <see cref="M:Northwoods.Go.Node.FindTreeChildrenLinks"/>
               - <see cref="M:Northwoods.Go.Node.FindTreeRoot"/>
               - <see cref="M:Northwoods.Go.Node.FindTreeParentChain"/>
               - <see cref="M:Northwoods.Go.Node.FindTreeParts(System.Int32)"/>
               - <see cref="M:Northwoods.Go.Node.FindCommonTreeParent(Northwoods.Go.Node)"/>
               - <see cref="M:Northwoods.Go.Node.IsInTreeOf(Northwoods.Go.Node)"/>
               - <see cref="M:Northwoods.Go.Node.FindTreeLevel"/>
            
             Determining whether a tree grows from the root via links that go out to the children or vice-versa
             is controlled for the whole diagram by the <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/> property.
             However an individual link will be ignored by the above functions if <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false.
            
             The Node class also supports the notion of expanding and collapsing a subtree of nodes and links,
             causing those nodes and links to be shown or hidden.
             Principally this is a matter of setting <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/>.
             Of course if the diagram's graph is not tree-structured, these concepts and properties might not apply.
            
             If you want to change the appearance of the node you can do so in a function that you assign to
             the <see cref="P:Northwoods.Go.Node.TreeExpandedChanged"/> property.
             This function must not modify any link relationships or expand or collapse any subtrees -- the property just exists
             to update the appearance of the node.
            
             There is an option for link routing to try to avoid crossing over nodes:
             <see cref="P:Northwoods.Go.Link.Routing"/> = <see cref="F:Northwoods.Go.LinkRouting.AvoidsNodes"/>.
             You can control whether such links should avoid or ignore a node by setting <see cref="P:Northwoods.Go.Node.Avoidable"/>.
             Set <see cref="P:Northwoods.Go.Node.AvoidableMargin"/> to control the area beyond the <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>
             where AvoidsNodes links should not go.
            
             <p class="boxread">
             For more discussion and examples, see <a href="../../intro/nodes.Html">Nodes</a>,
             <a href="../../intro/ports.Html">Ports</a>, and
             <a href="../../intro/connectionPoints.Html">Link Points</a>.
             </p>
            
             <p class="boxread">
             For more about trees, see <a href="../../intro/trees.Html">Trees</a>, and
             <a href="../../intro/subtrees.Html">SubTrees</a>.
             </p>
            
             <p class="boxread">
             To customize user-resizing behavior, please read
             <a href="../../intro/tools.Html#ResizingTool">Introduction to the ResizingTool</a>.
             To customize user-rotating behavior, please read
             <a href="../../intro/tools.Html#RotatingTool">Introduction to the RotatingTool</a>.
             </p>
            
             Only Nodes that are in Diagrams can have connections via Links.
             Templates should not be connected with Links, be labels of Links, be members of Groups, or have any Adornments.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Node.#ctor">
            <summary>
            Constructs an empty Node.
            </summary>
            <remarks>
            The default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Node.#ctor(Northwoods.Go.PanelLayouts.PanelLayout)">
            <summary>
            Constructs an empty Node.
            The panel type must be one of the values permitted by <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <param name="type">if null, the default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Node.#ctor(System.String)">
            <summary>
            Constructs an empty Node.
            The panel type can be a string describing one of the built <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/> types.
            </summary>
            <param name="type">if the empty string, the default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Node.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Copies properties to a cloned Node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Node.DisplaceProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Fix up references in the argument object so that the argument object can get a new visual tree
            </summary>
            <param name="c">The original Part whose category is being changed by displacing its visual tree with this Part's visual tree.</param>
        </member>
        <member name="M:Northwoods.Go.Node.ApplyProtected(Northwoods.Go.GraphObject)">
            <summary>
            Copy properties from this object to the target object, which must be of the same class.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Node.AddBundle(Northwoods.Go.LinkBundle)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.RemoveBundle(Northwoods.Go.LinkBundle)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.FindBundle(Northwoods.Go.Node,System.String,System.String)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.InvalidateLinkBundle(Northwoods.Go.Node,System.String,System.String)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Node.RaisePartChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <summary>
            Call this method to notify that the some state has changed.
            This just calls the <see cref="T:Northwoods.Go.Diagram"/>'s <see cref="M:Northwoods.Go.Diagram.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/> method.
            </summary>
            <param name="change">specifies the general nature of the change;
            permissible values include <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>, <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>,
            <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>, and <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.</param>
            <param name="propertyname">names the property that was modified.</param>
            <param name="obj">the object that was modified, typically a <see cref="T:Northwoods.Go.GraphObject"/>.</param>
            <param name="oldval">the previous or older value.</param>
            <param name="newval">the next or newer value.</param>
            <param name="oldparam">an optional value that helps describe the older value.</param>
            <param name="newparam">an optional value that helps describe the newer value.</param>
        </member>
        <member name="M:Northwoods.Go.Node.InvalidateConnectedLinks(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
            <summary>
            (undocumented)
            Invalidates the routes of all links connected to this node.
            Basically this calls <see cref="M:Northwoods.Go.Link.InvalidateRoute"/> on all connected links
            and invalidates any cached side-connection information.
            </summary>
            <param name="ignore">An optional set of <see cref="T:Northwoods.Go.Link"/>s to ignore.</param>
        </member>
        <member name="M:Northwoods.Go.Node.InvalidatePortLinks(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            For a given port, invalidate any connected links
            </summary>
            <param name="port">the port</param>
        </member>
        <member name="M:Northwoods.Go.Node.InvalidatePortInfo(Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.IsReadyToMeasureArrange">
            @hidden @internal
            <summary>
            A node is ready to be measured/arranged if is not a link label,
            or if it is a link label if its link has been arranged.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Node.PortSpreading">
            <summary>
            Gets or sets how link points are computed when the port spot is a "side" spot.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.PortSpreading.Evenly"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Node.Avoidable">
            <summary>
            Gets or sets whether this Node is to be avoided by <see cref="T:Northwoods.Go.Link"/>s
            whose <see cref="P:Northwoods.Go.Link.Routing"/> is <see cref="F:Northwoods.Go.LinkRouting.AvoidsNodes"/>.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Node.AvoidableMargin">
             <summary>
             Gets or sets the margin around this Node in which avoidable links will not be routed.
             </summary>
             <remarks>
             You may need to increase the <see cref="P:Northwoods.Go.GraphObject.FromEndSegmentLength"/> and <see cref="P:Northwoods.Go.GraphObject.ToEndSegmentLength"/> in
             order to prevent link routes from turning within the avoidable area around the Node.
            
             Value must be of type Margin.
             The default margin is Margin(2,2,2,2)
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Node.CanAvoid">
            @hidden @internal
            <summary>
            This predicate determines whether this node should be avoided in the routing
            of links whose <see cref="P:Northwoods.Go.Link.Routing"/> is <see cref="F:Northwoods.Go.LinkRouting.AvoidsNodes"/>.
            </summary>
            <remarks>
            This is not called for Nodes in temporary layers (which includes Tools and Adornments).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Node.GetAvoidableRect">
            <summary>
            Return the area to be avoided for this node -- the node's <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>
            plus the <see cref="P:Northwoods.Go.Node.AvoidableMargin"/>.
            </summary>
            <returns>the area in document coordinates.</returns>
        </member>
        <member name="M:Northwoods.Go.Node.FindVisibleNode">
            <summary>
            Starting with this node, walk up the chain of containingGroups to find a node that is visible.
            </summary>
            <remarks>
            This can be overridden to find a tree-parent/ancestor if the reason that this node
            is not visible is because of a collapsed tree rather than a collapsed group.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Node.IsVisible">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.MadeVisible(System.Boolean)">
            @hidden @internal
            <summary>
            Called when a part's visibility changes, from .Visible or other indirect sources (like Layer.Visible)
            </summary>
            <param name="val">whether the part was just made visible (true) or just made invisible (false)</param>
        </member>
        <member name="P:Northwoods.Go.Node.LinksConnected">
             <summary>
             This read-only property returns an iterator over all of the <see cref="T:Northwoods.Go.Link"/>s that are connected with this node.
             </summary>
             <remarks>
             This includes both links that are coming out of this node as well as links that are going into this node.
             Setting <see cref="P:Northwoods.Go.Link.FromNode"/> or <see cref="P:Northwoods.Go.Link.ToNode"/> to refer to this Node
             will add that <see cref="T:Northwoods.Go.Link"/> to this collection.
            
             Use the <see cref="M:Northwoods.Go.Node.FindLinksConnected(System.String)"/>, <see cref="M:Northwoods.Go.Node.FindLinksOutOf(System.String)"/>, or <see cref="M:Northwoods.Go.Node.FindLinksInto(System.String)"/> methods
             to get different subsets of the links, depending on direction or depending on connecting to a particular port.
            
             A template should not have any links connected with it.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Node.FindExternalTreeLinksConnected">
            <summary>
            Return a collection of Links that connect with this Node or any in its subtree, excluding any IsTreeLink Links.
            For trees this is the analog of <see cref="M:Northwoods.Go.Group.FindExternalLinksConnected"/> for Groups.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Node.FindLinksConnected(System.String)">
            <summary>
            Returns an iterator over all of the <see cref="T:Northwoods.Go.Link"/>s that connect with this node in either direction,
            perhaps limited to the given port id on this node.
            </summary>
            <param name="pid">A port identifier string; if null the link's PortId is ignored and all links are included in the search.</param>
        </member>
        <member name="M:Northwoods.Go.Node.FindLinksOutOf(System.String)">
            <summary>
            Returns an iterator over all of the <see cref="T:Northwoods.Go.Link"/>s that come out of this node,
            perhaps limited to the given port id on this node.
            </summary>
            <param name="pid">A port identifier string; if null the link's PortId is ignored and all links are included in the search.</param>
        </member>
        <member name="M:Northwoods.Go.Node.FindLinksInto(System.String)">
            <summary>
            Returns an iterator over all of the <see cref="T:Northwoods.Go.Link"/>s that go into this node,
            perhaps limited to the given port id on this node.
            </summary>
            <param name="pid">A port identifier string; if null the link's PortId is ignored and all links are included in the search.</param>
        </member>
        <member name="M:Northwoods.Go.Node.FindNodesConnected(System.String)">
            <summary>
            Returns an iterator over the <see cref="T:Northwoods.Go.Node"/>s that are connected with this node
            in either direction, perhaps limited to the given port id on this node.
            </summary>
            <remarks>
            The results may include this node itself if there is a reflexive link connecting this node with itself.
            </remarks>
            <param name="pid">A port identifier string; if null the link's PortId is ignored and all links are included in the search.</param>
        </member>
        <member name="M:Northwoods.Go.Node.FindNodesOutOf(System.String)">
            <summary>
            Returns an iterator over the <see cref="T:Northwoods.Go.Node"/>s that are connected with this node
            by links coming out of this node, perhaps limited to the given port id on this node.
            </summary>
            <param name="pid">A port identifier string; if null the link's portId is ignored and all links are included in the search.</param>
        </member>
        <member name="M:Northwoods.Go.Node.FindNodesInto(System.String)">
            <summary>
            Returns an iterator over the <see cref="T:Northwoods.Go.Node"/>s that are connected with this node
            by links going into this node, perhaps limited to the given port id on this node.
            </summary>
            <param name="pid">A port identifier string; if null the link's PortId is ignored and all links are included in the search.</param>
        </member>
        <member name="M:Northwoods.Go.Node.FindLinksBetween(Northwoods.Go.Node,System.String,System.String)">
            <summary>
            Returns an iterator over all of the <see cref="T:Northwoods.Go.Link"/>s that go from this node to another node or vice-versa,
            perhaps limited to a given port id on this node and a port id on the other node.
            </summary>
            <remarks>
            If you want all of the links between two nodes in just one direction, use <see cref="M:Northwoods.Go.Node.FindLinksTo(Northwoods.Go.Node,System.String,System.String)"/>.
            </remarks>
            <param name="othernode"></param>
            <param name="pid">A port identifier string; if null the link's PortId is ignored and all links are included in the search.</param>
            <param name="otherpid">A port identifier string; if null the link's PortId is ignored and all links are included in the search.</param>
        </member>
        <member name="M:Northwoods.Go.Node.FindLinksTo(Northwoods.Go.Node,System.String,System.String)">
            <summary>
            Returns an iterator over all of the <see cref="T:Northwoods.Go.Link"/>s that go from this node to another node,
            perhaps limited to a given port id on this node and a port id on the other node.
            </summary>
            <remarks>
            If you want all of the links between two nodes in both directions, use <see cref="M:Northwoods.Go.Node.FindLinksBetween(Northwoods.Go.Node,System.String,System.String)"/>.
            </remarks>
            <param name="othernode"></param>
            <param name="pid">A port identifier string; if null the link's PortId is ignored and all links are included in the search.</param>
            <param name="otherpid">A port identifier string; if null the link's PortId is ignored and all links are included in the search.</param>
        </member>
        <member name="P:Northwoods.Go.Node.LinkConnected">
             <summary>
             Gets or sets the function that is called after a <see cref="T:Northwoods.Go.Link"/> has been connected or disconnected with this Node.
             </summary>
             <remarks>
             It is typically used to modify the appearance of the node.
             The first argument will be this Node.
             The second argument will be a Link that is now connected with this node.
             The third argument will be a GraphObject port indicating which port the link was connected with.
             The fourth argument will be a bool that is true if a Link was connected, and false if a Link was disconnected.
            
             If the value is a function, that function must not modify what this Node is connected with.
             The Link has already been added -- trying to remove it or another link may produce undefined behavior.
             However, the other end of the link may not yet have been connected with a node (and might never be),
             so you cannot depend on looking at what the link connects with.
            
             The default value is null -- no function is called.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Node.LinkValidation">
             <summary>
             Gets or sets a predicate that determines whether or not a Link may be connected with this node.
             </summary>
             <remarks>
             If this is non-null, the predicate is called in addition to the predicate that is <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.LinkValidation"/>
             on the <see cref="T:Northwoods.Go.Tools.LinkingTool"/> and <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>.
             See <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/> for more details.
            
             The default predicate is null, which is equivalent to simply returning true.
             The first argument will be the proposed "from" Node (may be null).
             The second argument will be the proposed "from" GraphObject port (may be null).
             The third argument will be the proposed "to" Node (may be null).
             The fourth argument will be the proposed "to" GraphObject port (may be null).
             The fifth argument may be null when asking about creating a new link,
             or may be a Link when asking about reconnecting an existing link.
            
             The function, if supplied, must not have any side-effects.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Node.AddLinkInternal(Northwoods.Go.Link,Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.RemoveLinkInternal(Northwoods.Go.Link,Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.UpdateTreeLeaf">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.UpdateRelationshipsFromData">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.InternalAddProtected(System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.InternalRemoveProtected(System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.DeleteCascade">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Node.IsLinkLabel">
            <summary>
            This read-only property is true when this Node is a label node for a Link.
            </summary>
            <remarks>
            If this is true, then `n.LabeledLink` will be a Link and `n.LabeledLink.IsLabeledLink` will be true.
            </remarks>
            <seealso cref="P:Northwoods.Go.Node.LabeledLink"/>
        </member>
        <member name="P:Northwoods.Go.Node.LabeledLink">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Link"/> for which this Node is acting as a smart label.
             </summary>
             <remarks>
             Most nodes do not act as link labels, so this property will be null.
            
             A template should not be a label node for a link.
             </remarks>
             <seealso cref="P:Northwoods.Go.Node.IsLinkLabel"/>
        </member>
        <member name="M:Northwoods.Go.Node.FindPort(System.String)">
            <summary>
            Find a <see cref="T:Northwoods.Go.GraphObject"/> with a given <see cref="P:Northwoods.Go.GraphObject.PortId"/>.
            </summary>
            <remarks>
            If no such GraphObject is found, search for one with the empty string as its port identifier.
            Finally, when failing to find a port with either the given name or the empty string,
            this method returns this whole node itself.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Node.Port">
            <summary>
            This read-only property returns the primary <see cref="T:Northwoods.Go.GraphObject"/> representing a port in this node.
            </summary>
            <remarks>
            If there is a GraphObject whose <see cref="P:Northwoods.Go.GraphObject.PortId"/> is the empty string, return it.
            If there is no such element, just return this whole Node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Node.Ports">
            <summary>
            This read-only property returns an iterator over all of the <see cref="T:Northwoods.Go.GraphObject"/>s in this node that act as ports.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Node._RebuildPorts">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.InternalAddPort(Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.InternalRemovePort(Northwoods.Go.GraphObject,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.IsInTreeOf(Northwoods.Go.Node)">
             <summary>
             This predicate is true if this node is a child of the given <see cref="T:Northwoods.Go.Node"/>, perhaps indirectly as a descendant.
             </summary>
             <remarks>
             If this node is a child of the given node according to <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/>, this returns true.
             Otherwise this searches recursively the chain of tree parents of this node,
             ignoring links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false.
             A node cannot be in its own subtree.
            
             If you what to find out whether this Node is (perhaps indirectly) contained by a Group, use <see cref="M:Northwoods.Go.Part.IsMemberOf(Northwoods.Go.Part)"/>.
             </remarks>
             <param name="node">the Node that might be a parent or ancestor of this node.</param>
             <returns>true if the given node is an ancestor of this node, but false otherwise, including false if it is the same node.</returns>
             <seealso cref="M:Northwoods.Go.Node.FindTreeRoot"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParentChain"/>
        </member>
        <member name="M:Northwoods.Go.Node.FindTreeRoot">
             <summary>
             Return the <see cref="T:Northwoods.Go.Node"/> that is at the root of the tree that this node is in, perhaps this node itself.
             </summary>
             <remarks>
             This node will be <see cref="M:Northwoods.Go.Node.IsInTreeOf(Northwoods.Go.Node)"/> the resulting node, unless the resulting node is this node itself.
             The graph traversal will ignore links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false.
            
             If you want to search up the containment hierarchy of <see cref="T:Northwoods.Go.Group"/>s, use <see cref="M:Northwoods.Go.Part.FindTopLevelPart"/>.
             </remarks>
             <returns>If this Node has no "tree parent", this returns itself.</returns>
             <seealso cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParentChain"/>
        </member>
        <member name="M:Northwoods.Go.Node.FindCommonTreeParent(Northwoods.Go.Node)">
            <summary>
            Find the <see cref="T:Northwoods.Go.Node"/> that is the perhaps indirect tree parent of both this node and another one,
            or this node if it is an ancestor of the other node, or vice-versa.
            </summary>
            <remarks>
            If you want to find the <see cref="T:Northwoods.Go.Group"/> that contains two Parts, call <see cref="M:Northwoods.Go.Part.FindCommonContainingGroup(Northwoods.Go.Part)"/>.
            </remarks>
            <returns>may be null if in different trees,
              or may be itself if the OTHER argument is THIS node,
              or may be itself if the OTHER node is a descendant of THIS node,
              or may be the OTHER node if THIS node is in the tree of the OTHER node.</returns>
            <seealso cref="M:Northwoods.Go.Node.FindTreeRoot"/>
            <seealso cref="M:Northwoods.Go.Node.FindTreeParentChain"/>
        </member>
        <member name="M:Northwoods.Go.Node.FindTreeParentLink">
            <summary>
            Returns the <see cref="T:Northwoods.Go.Link"/> that connects with the tree parent <see cref="T:Northwoods.Go.Node"/> of this node if the graph is tree-structured,
            if there is such a link and <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is true.
            </summary>
            <returns>The Link to the parent Node, or null if there is no parent node.</returns>
            <seealso cref="M:Northwoods.Go.Node.FindTreeParentNode"/>
            <seealso cref="M:Northwoods.Go.Node.FindTreeChildrenLinks"/>
            <seealso cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/>
            <seealso cref="M:Northwoods.Go.Node.FindTreeRoot"/>
            <seealso cref="M:Northwoods.Go.Node.FindTreeParentChain"/>
        </member>
        <member name="M:Northwoods.Go.Node.FindTreeParentNode">
            <summary>
            Returns the <see cref="T:Northwoods.Go.Node"/> that is the tree parent of this node if the graph is tree-structured, if there is a parent.
            </summary>
            <remarks>
            Links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false are ignored.
            </remarks>
            <returns>The parent Node, or null if there is no parent node.</returns>
            <seealso cref="M:Northwoods.Go.Node.FindTreeParentLink"/>
            <seealso cref="M:Northwoods.Go.Node.FindTreeChildrenNodes"/>
            <seealso cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/>
            <seealso cref="M:Northwoods.Go.Node.FindTreeRoot"/>
            <seealso cref="M:Northwoods.Go.Node.FindTreeParentChain"/>
        </member>
        <member name="M:Northwoods.Go.Node.FindTreeParentChain">
             <summary>
             Return a collection of <see cref="T:Northwoods.Go.Part"/>s including this <see cref="T:Northwoods.Go.Node"/>,
             its tree parent link and node, and so on up the chain to the root node.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Node.FindTreeParentLink"/> and <see cref="M:Northwoods.Go.Node.FindTreeParentNode"/>.
             Links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false are ignored.
            
             This may result in undefined behavior if there are cycles of Links that are <see cref="P:Northwoods.Go.Link.IsTreeLink"/>.
            
             The result will include this node and the "root" node and all nodes and links in between.
             The root node is also accessible directly via <see cref="M:Northwoods.Go.Node.FindTreeRoot"/>.
             If any of the nodes are <see cref="T:Northwoods.Go.Group"/>s, their member parts are not included.
             </remarks>
             <returns>A collection of Nodes and Links.</returns>
             <seealso cref="M:Northwoods.Go.Node.FindTreeRoot"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParts(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Node.FindTreeLevel">
             <summary>
             Return how deep this node is in a tree structure.
             </summary>
             <remarks>
             For tree root nodes, this returns zero.
             This calls <see cref="M:Northwoods.Go.Node.FindTreeParentNode"/> to find any tree parent node,
             so this respects <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/> and <see cref="P:Northwoods.Go.Link.IsTreeLink"/>
             to know which way to traverse links and to know to ignore non-tree links.
            
             This may result in undefined behavior if there are cycles of Links that are <see cref="P:Northwoods.Go.Link.IsTreeLink"/>.
            
             If you want to know how deep a Part is nested inside Groups, call <see cref="M:Northwoods.Go.Part.FindSubGraphLevel"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Node.FindTreeRoot"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParentChain"/>
        </member>
        <member name="M:Northwoods.Go.Node._FindTreeLevel(Northwoods.Go.Node)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Node.FindTreeChildrenLinks">
             <summary>
             Returns an IEnumerable for the collection of <see cref="T:Northwoods.Go.Link"/>s that connect with the immediate tree children of this node.
             </summary>
             <remarks>
             Links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false are ignored.
            
             This basically returns either <see cref="M:Northwoods.Go.Node.FindLinksOutOf(System.String)"/> or <see cref="M:Northwoods.Go.Node.FindLinksInto(System.String)"/>,
             depending on <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/>,
             but the results excludes links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false.
             </remarks>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParentLink"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeChildrenNodes"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParts(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Node.FindTreeChildrenNodes">
             <summary>
             Returns an IEnumerable for the collection of <see cref="T:Northwoods.Go.Node"/>s that are the immediate tree children of this node.
             </summary>
             <remarks>
             Nodes only connected by links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false are ignored.
            
             This basically returns either <see cref="M:Northwoods.Go.Node.FindNodesOutOf(System.String)"/> or <see cref="M:Northwoods.Go.Node.FindNodesInto(System.String)"/>,
             depending on <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParentNode"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeChildrenLinks"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParts(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Node.FindTreeParts(System.Int32)">
             <summary>
             Return a collection of <see cref="T:Northwoods.Go.Part"/>s including this <see cref="T:Northwoods.Go.Node"/>,
             all of the <see cref="T:Northwoods.Go.Link"/>s going to child <see cref="T:Northwoods.Go.Node"/>s, and all of their
             tree child nodes and links.
             </summary>
             <remarks>
             Links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false are ignored.
            
             Whether child nodes are found for a parent node by following links out of the parent node or
             by links coming into the parent node is determined by the value of <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/>.
            
             The result will include this, the "root" node.
             If any of the nodes are <see cref="T:Northwoods.Go.Group"/>s, their member parts are not included.
            
             If you want to find the collection of Parts that are contained by a <see cref="T:Northwoods.Go.Group"/>, use <see cref="M:Northwoods.Go.Group.FindSubGraphParts"/>.
             </remarks>
             <param name="level">How many levels of the tree, starting at this node, to include;
                the default is int.MaxValue, including all tree children of this node.  Values less than 1 are treated as 1.</param>
             <returns>A collection of Nodes and Links.</returns>
             <seealso cref="M:Northwoods.Go.Node.FindTreeChildrenNodes"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeChildrenLinks"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParentChain"/>
        </member>
        <member name="M:Northwoods.Go.Node.CollapseTree(System.Int32)">
             <summary>
             Hide each child node and the connecting link,
             and recursively collapse each child node.
             </summary>
             <remarks>
             This changes the value of <see cref="M:Northwoods.Go.Part.IsVisible"/> of the whole subtree and the parts owned by
             those nodes and links.
             However, this root node's visibility is unchanged.
            
             Links are assumed to go from the parent node to the children nodes,
             unless <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/> is false.
             Links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false are ignored.
            
             This sets <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/> to false on this node and on all of the children nodes.
             For those child nodes that were expanded when they were collapsed,
             <see cref="P:Northwoods.Go.Node.WasTreeExpanded"/> is set to true.
            
             You can also pass in a number of levels to hide nodes beyond a certain level starting at this node.
             If you want to make sure that all nodes are expanded up to a particular level, call <see cref="M:Northwoods.Go.Node.ExpandTree(System.Int32)"/>.
             If you want to do both, call `ExpandTree` before calling `CollapseTree` to
             collapse nodes expanded due to the <see cref="P:Northwoods.Go.Node.WasTreeExpanded"/> flag.
            
             This method does not perform a transaction or start any animation.
             You may want to call the <see cref="M:Northwoods.Go.CommandHandler.CollapseTree(Northwoods.Go.Node)"/> command, which does perform a transaction
             and raise a <see cref="T:Northwoods.Go.DiagramEvent"/>.
            
             To collapse a <see cref="T:Northwoods.Go.Group"/>'s subgraph of <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s, use <see cref="M:Northwoods.Go.Group.CollapseSubGraph"/>.
             </remarks>
             <param name="level">How many levels of the tree, starting at this node, to keep expanded if already expanded;
                the default is 1, hiding all tree children of this node. Values less than 1 are treated as 1.</param>
             <seealso cref="M:Northwoods.Go.Node.ExpandTree(System.Int32)"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParts(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Node._CollapseTree2(System.Collections.Generic.HashSet{Northwoods.Go.Node},System.Boolean,System.Int32,Northwoods.Go.Diagram,Northwoods.Go.Node,System.Boolean)">
            @hidden @internal
            <summary>
            Recurse through the requested levels to be collapsed, to actually collapse only at that level, not before.
            It's OK for nodes to remain collapsed at levels lower than requested.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Node._CollapseTree1(System.Collections.Generic.HashSet{Northwoods.Go.Node},System.Boolean,Northwoods.Go.Diagram,Northwoods.Go.Node,System.Boolean)">
            @hidden @internal
            <summary>
            This needs to handle non-tree-structured graphs.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Node.ExpandTree(System.Int32)">
             <summary>
             Show each child node and the connecting link,
             and perhaps recursively expand their child nodes.
             </summary>
             <remarks>
             This may change the value of <see cref="M:Northwoods.Go.Part.IsVisible"/> of the whole subtree and the parts owned by
             those nodes and links.
             However, this root node's visibility is unchanged.
            
             This sets <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/> to true on this node and on all of the children nodes.
             Links are assumed to go from the parent node to the children nodes,
             unless <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/> is false.
             Links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false are ignored.
            
             This will expand a tree child node only if its <see cref="P:Northwoods.Go.Node.WasTreeExpanded"/> property was true.
            
             You can also pass in a number of levels in order to be sure that all nodes
             starting at this node and up through that number of levels are visible.
             If you want to make sure that there are no nodes expanded after a particular level, call <see cref="M:Northwoods.Go.Node.CollapseTree(System.Int32)"/>.
             If you want to do both, call `ExpandTree` before calling `CollapseTree` to
             collapse nodes expanded due to the <see cref="P:Northwoods.Go.Node.WasTreeExpanded"/> flag.
            
             This method does not perform a transaction or start any animation.
             You may want to call the <see cref="M:Northwoods.Go.CommandHandler.ExpandTree(Northwoods.Go.Node)"/> command, which does perform a transaction
             and raise a <see cref="T:Northwoods.Go.DiagramEvent"/>.
            
             To expand a <see cref="T:Northwoods.Go.Group"/>'s subgraph of <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s, use <see cref="M:Northwoods.Go.Group.ExpandSubGraph"/>.
             </remarks>
             <param name="level">How many levels of the tree should be expanded;
                the default is 2, showing all tree children of this node and potentially more.
                Values less than 2 are treated as 2.</param>
             <seealso cref="M:Northwoods.Go.Node.CollapseTree(System.Int32)"/>
             <seealso cref="M:Northwoods.Go.Node.FindTreeParts(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Node._ExpandTree1(System.Collections.Generic.HashSet{Northwoods.Go.Node},System.Boolean,System.Int32,Northwoods.Go.Diagram,Northwoods.Go.Node,System.Boolean)">
            @hidden @internal
            <summary>
            This needs to handle non-tree-structured graphs.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Node.IsTreeExpanded">
             <summary>
             Gets or sets whether the subtree graph starting at this node is expanded.
             </summary>
             <remarks>
             Changing this property's value will call <see cref="M:Northwoods.Go.Node.CollapseTree(System.Int32)"/> or <see cref="M:Northwoods.Go.Node.ExpandTree(System.Int32)"/>,
             and also will call the value of <see cref="P:Northwoods.Go.Node.TreeExpandedChanged"/> if it is a function.
            
             The initial value is true -- "tree-child" nodes, and the links to them, are shown.
            
             There is an analogous property for expanded/collapsed <see cref="T:Northwoods.Go.Group"/>s: <see cref="P:Northwoods.Go.Group.IsSubGraphExpanded"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Node.WasTreeExpanded">
            <summary>
            Gets or sets whether the subtree graph starting at this node
            had been collapsed by a call to <see cref="M:Northwoods.Go.Node.ExpandTree(System.Int32)"/> on the parent node.
            </summary>
            <remarks>
            The initial value is false.
            </remarks>
            <seealso cref="P:Northwoods.Go.Node.IsTreeExpanded"/>
        </member>
        <member name="P:Northwoods.Go.Node.TreeExpandedChanged">
             <summary>
             Gets or sets the function that is called when <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/> has changed value.
             </summary>
             <remarks>
             The argument to that function will be this Node.
            
             If the value is a function, that function must not expand or collapse any trees of nodes and links.
             The Node has already been expanded or collapsed -- trying to change it again may produce undefined behavior.
            
             The default value is null -- no function is called.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Node.IsTreeLeaf">
            <summary>
            Gets whether this node has no tree children.
            </summary>
            <remarks>
            The initial value is true, meaning that there are no links connected with child nodes
            in the direction given by <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/>.
            This value changes automatically as link connections are added to or removed from this node.
            Links for which <see cref="P:Northwoods.Go.Link.IsTreeLink"/> is false are ignored.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Node.Add(Northwoods.Go.GraphObject[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/>
        </member>
        <member name="M:Northwoods.Go.Node.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Node.Add(Northwoods.Go.RowDefinition[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.RowDefinition[])"/>
        </member>
        <member name="M:Northwoods.Go.Node.Add(Northwoods.Go.ColumnDefinition[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.ColumnDefinition[])"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Set(Northwoods.Go.Node)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Node.Apply(System.Action{Northwoods.Go.Node})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Node.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.Node.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.Node.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="T:Northwoods.Go.PanelType">
            <summary>
            Contains strings to be used in the <see cref="M:Northwoods.Go.Panel.#ctor(System.String)"/> contructor.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Position">
            <summary>
            A Position Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>,
            used to arrange elements based on their absolute positions within the Panel's local coordinate system.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Vertical">
            <summary>
            A Vertical Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutVertical"/>,
            used to create vertical "stacks" of elements.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Horizontal">
            <summary>
            A Horizontal Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutHorizontal"/>,
            used to create horizontal "stacks" of elements
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Auto">
            <summary>
            An Auto Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutAuto"/>,
            used to size the main element to fit around other elements in the Panel -- this creates borders.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Spot">
            <summary>
            A Spot Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutSpot"/>,
            used to arrange elements based on the <see cref="T:Northwoods.Go.Spot"/> properties <see cref="P:Northwoods.Go.GraphObject.Alignment"/>
            and <see cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/>, relative to a main element of the panel.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Table">
            <summary>
            A Table Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/>,
            used to arrange elements into rows and columns, typically employing the different
            elements' <see cref="P:Northwoods.Go.GraphObject.Row"/>, <see cref="P:Northwoods.Go.GraphObject.RowSpan"/>, <see cref="P:Northwoods.Go.GraphObject.Column"/>,
            and <see cref="P:Northwoods.Go.GraphObject.ColumnSpan"/> properties. This Panel type also makes use of <see cref="T:Northwoods.Go.RowDefinition"/>/<see cref="T:Northwoods.Go.ColumnDefinition"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.TableRow">
            <summary>
            A TableRow Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableRow"/>,
            only used immediately within a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/> Panel
            to organize a collection of elements as a row in a table.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.TableColumn">
            <summary>
            A TableColumn Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableColumn"/>,
            only used immediately within a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/> Panel
            to organize a collection of elements as a column in a table.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Viewbox">
            <summary>
            A Viewbox Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutViewbox"/>,
            used to automatically resize a single element to fit inside the panel's available area.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Grid">
            <summary>
            A Grid Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid"/>,
            not used to house typical elements, but is used only to draw regular patterns of lines.
            The elements must be <see cref="T:Northwoods.Go.Shape"/>s used to describe the repeating lines.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Link">
            <summary>
            A Link Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutLink"/>,
            only used by <see cref="T:Northwoods.Go.Link"/> parts and Link Adornments.
            </summary>
        </member>
        <member name="F:Northwoods.Go.PanelType.Graduated">
            <summary>
            A Graduated Panel, <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated"/>,
            used to draw regular tick marks and text along the main <see cref="T:Northwoods.Go.Shape"/> element.
            </summary>
        </member>
        <member name="T:Northwoods.Go.ViewboxStretch">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Panel.ViewboxStretch"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ViewboxStretch.Uniform">
            <summary>
            Scale the contained element equally in both directions to fit the larger side of the element's bounds in the given bounds.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ViewboxStretch.UniformToFill">
            <summary>
            Scale the contained element equally in both directions to fit the smaller side of the element's bounds in the given bounds.
            There may be clipping in on dimension.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Panel">
             <summary>
             A Panel is a <see cref="T:Northwoods.Go.GraphObject"/> that holds other GraphObjects as its elements.
             A Panel is responsible for sizing and positioning its elements.
             The elements of a panel are drawn in the order in which they appear in the <see cref="P:Northwoods.Go.Panel.Elements"/> collection.
            
             The <see cref="T:Northwoods.Go.Part"/> class inherits from Panel; Part in turn is the base class of <see cref="T:Northwoods.Go.Node"/> and <see cref="T:Northwoods.Go.Link"/>.
             </summary>
             <remarks>
             Every Panel has a <see cref="P:Northwoods.Go.Panel.Type"/> and establishes its own coordinate system. The type of a Panel
             determines how it will size and arrange its elements:
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/> is used to arrange elements based on their absolute positions within the Panel's local coordinate system.
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutVertical"/> and <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutHorizontal"/> are used to create linear "stacks" of elements.
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutAuto"/> is used to size the main element to fit around other elements in the Panel -- this creates borders.
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutSpot"/> is used to arrange elements based on the <see cref="T:Northwoods.Go.Spot"/> properties <see cref="P:Northwoods.Go.GraphObject.Alignment"/>
                 and <see cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/>, relative to a main element of the panel.
                 Spot panels can align relative to other elements by using <see cref="P:Northwoods.Go.Panel.AlignmentFocusName"/>.
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/> is used to arrange elements into rows and columns, typically employing the different
                 elements' <see cref="P:Northwoods.Go.GraphObject.Row"/>, <see cref="P:Northwoods.Go.GraphObject.RowSpan"/>, <see cref="P:Northwoods.Go.GraphObject.Column"/>,
                 and <see cref="P:Northwoods.Go.GraphObject.ColumnSpan"/> properties. This Panel type also makes use of <see cref="T:Northwoods.Go.RowDefinition"/>/<see cref="T:Northwoods.Go.ColumnDefinition"/>.
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableRow"/> and <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableColumn"/> can only be used immediately within a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/> Panel
                 to organize a collection of elements as a row or as a column in a table.
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutViewbox"/> is used to automatically resize a single element to fit inside the panel's available area.
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid"/> is not used to house typical elements, but is used only to draw regular patterns of lines.
                 The elements must be <see cref="T:Northwoods.Go.Shape"/>s used to describe the repeating lines.
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutLink"/> is only used by <see cref="T:Northwoods.Go.Link"/> parts and Link Adornments.
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated"/> is used to draw regular tick marks and text along the main <see cref="T:Northwoods.Go.Shape"/> element.
            
             Using the constructor, the argument can be used to declare the Panel type:
             <code language="cs">
             new Panel(PanelType.Horizontal) { ... }
            
             // Full example:
             new Panel(PanelType.Horizontal) {
                 Width = 60, Height = 60  // panel properties
               }
               .Add(
                 new Shape("Rectangle") { Stroke = "lime" },
                 new TextBlock("Some Text")
               )  // end of panel definition
             </code>
            
             <p class="boxread">
             For an overview of most Panel types, please read the <a href="../../intro/panels.Html">Introduction page on Panels</a>.
             </p>
            
             <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutVertical"/> and <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutHorizontal"/> panels are frequently used to position two or more GraphObjects
             vertically above each other or horizontally next to each other.  Use the <see cref="P:Northwoods.Go.GraphObject.Alignment"/> or
             <see cref="P:Northwoods.Go.GraphObject.Stretch"/> properties on the individual elements to control their position and size.
             Set <see cref="P:Northwoods.Go.Panel.IsOpposite"/> to true if you want the elements arranged from right-to-left in Horizontal Panels
             or from bottom-to-top in Vertical Panels.
            
             <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutSpot"/> and <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutAuto"/> panels have a "main" element, signified by the Panel's first element
             with <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> set to true.  If there is no such element, it uses the first element as the "main" one.
             Use the <see cref="P:Northwoods.Go.GraphObject.Alignment"/> property to position elements with respect to the main element.
             Use the <see cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/> property to further specify the position within Spot Panels.
             "Spot" and "Auto" Panels should have two or more elements in them.
            
             In <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/> panels you will want to set the <see cref="P:Northwoods.Go.GraphObject.Row"/> and <see cref="P:Northwoods.Go.GraphObject.Column"/>
             properties on each element.  The <see cref="P:Northwoods.Go.GraphObject.Alignment"/> and <see cref="P:Northwoods.Go.GraphObject.Stretch"/> properties are also
             useful when an element's table cell is larger than that element.
            
             <p class="boxrun">
             Please read the <a href="../../intro/tablePanels.Html">Introduction page on Table Panels</a>
             for more examples and explanation.
             </p>
            
             <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableRow"/> and <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableColumn"/> panels can only be used as elements within a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/> Panel.
             They are typically only used in item templates, e.g. for automatically creating rows in a Table Panel based on model data
             provided in an <see cref="P:Northwoods.Go.Panel.ItemList"/>. You will still need to specify properties on the individual elements within a TableRow
             or TableColumn as if they were immediate elements of the containing Table panel.
            
             <p class="boxrun">
             For an example that uses TableRow Panels, see <a href="../../samples/records.Html">Records sample</a>.
             </p>
            
             <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid"/> panels are often used for the Diagram's <see cref="P:Northwoods.Go.Diagram.Grid"/>.
             <code language="cs">
              myDiagram.Grid =
                new Panel(PanelType.Grid) { GridCellSize = new Size(40, 40) }
                  .Add(
                    new Shape("LineH") { Stroke = "lightgray" },
                    new Shape("LineV") { Stroke = "lightgray" }
                  );
             </code>
             Or to get a green bar effect:
             <code language="cs">
              myDiagram.Grid =
                new Panel(PanelType.Grid) { GridCellSize = new Size(100, 100) }
                  .Add(new Shape("BarH") { Fill = "lightgreen", Height = 50 });
             </code>
             But Grid Panels can also be stand alone objects:
             <code language="cs">
              new Node(PanelType.Grid) {
                  GridCellSize = new Size(6, 6), Width = 60, Height = 60
                }
                .Add(
                  new Shape("LineH") { Stroke = "gray" },
                  new Shape("LineV") { Stroke = "gray" }
                )
             </code>
            
             A Grid Panel's elements do not participate in object picking.
            
             <p class="boxrun">
             Please read the <a href="../../intro/grids.Html">Introduction page on Grid Patterns</a>
             for more examples and explanation.
             </p>
            
             <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated"/> panels, like Spot and Auto Panels have a "main" element. The other elements within a Graduated Panel
             are used to define ticks and labels to draw along the main shape's path.
             <code language="cs">
              new Part(PanelType.Graduated)
                .Add(
                  new Shape { GeometryString = "M0 0 H400 },
                  new Shape { GeometryString = "M0 0 V10" },
                  // offset to display below ticks
                  new TextBlock { SegmentOffset = new Point(0, 12) }
                );
             </code>
            
             Only the main shape of a Graduated Panel participates in object picking, but a `Background`
             can be set if the entire panel needs to be pickable.
             You cannot set or bind the <see cref="P:Northwoods.Go.Panel.ItemList"/> of a Graduated Panel.
             Events on the tick Shapes and TextBlock labels of a Graduated Panel will be ignored.
             Graduated Panel TextBlock labels cannot be edited.
            
             Rotating the main shape will not rotate the ticks, just as rotating a Spot Panel's main element
             won't rotate its children. Rotation should generally be done at the Panel level. Another similarity
             to Spot Panels is that resizing of a Graduated Panel should generally be done on the main shape.
            
             <p class="boxrun">
             Please read the <a href="../../intro/graduatedPanels.Html">Introduction page on Graduated Panels</a>
             for more examples and explanation.
             </p>
            
             <h3>Changing and accessing elements of a Panel</h3>
            
             You can change the collection of <see cref="P:Northwoods.Go.Panel.Elements"/> by calling <see cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/>, <see cref="M:Northwoods.Go.Panel.InsertAt(System.Int32,Northwoods.Go.GraphObject)"/>, <see cref="M:Northwoods.Go.Panel.Remove(Northwoods.Go.GraphObject)"/>, or <see cref="M:Northwoods.Go.Panel.RemoveAt(System.Int32)"/>.
             You can get direct access to a particular element by calling <see cref="M:Northwoods.Go.Panel.Elt(System.Int32)"/>.
            
             Alternatively you can control the number and order of elements that are copies of an item template by setting or binding the
             <see cref="P:Northwoods.Go.Panel.ItemList"/> property. This is discussed below.
            
             You can search the visual tree of a Panel for GraphObjects that given a <see cref="P:Northwoods.Go.GraphObject.Name"/> using <see cref="M:Northwoods.Go.Panel.FindElement(System.String)"/>.
            
             <h3>Panel Size and Appearance</h3>
            
             Panels typically compute their own size based on their elements and Panel <see cref="P:Northwoods.Go.Panel.Type"/>,
             but can also be sized by setting <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>, <see cref="P:Northwoods.Go.GraphObject.MinSize"/>, and <see cref="P:Northwoods.Go.GraphObject.MaxSize"/>.
             Setting an explicit size on a Panel may cause nested elements of that panel to size themselves differently,
             especially in the cases of nested elements having a <see cref="P:Northwoods.Go.GraphObject.Stretch"/> value or <see cref="T:Northwoods.Go.TextBlock"/>'s having word wrap.
            
             Panels have no visual components of their own unless a <see cref="P:Northwoods.Go.GraphObject.Background"/> is specified
             or separators are specified either as defaults for the whole Table Panel or on individual <see cref="T:Northwoods.Go.RowDefinition"/>/<see cref="T:Northwoods.Go.ColumnDefinition"/>s.
             Panels can specify <see cref="P:Northwoods.Go.Panel.Padding"/>, to make the Panel larger including its background. Setting a padding
             when the Panel is constrained in size will reduce the total area that it has to arrange its elements. Setting a <see cref="T:Northwoods.Go.Margin"/>
             will not do this -- instead the Panel will expand in size.
            
             In addition to the <see cref="T:Northwoods.Go.GraphObject"/> properties on elements that are only used by certain types of panels,
             several Panel properties only apply to specific Panel types.
               - Panels of <see cref="P:Northwoods.Go.Panel.Type"/> <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/> use the <see cref="P:Northwoods.Go.Panel.RowCount"/>, <see cref="P:Northwoods.Go.Panel.RowSizing"/>, <see cref="P:Northwoods.Go.Panel.ColumnCount"/>,
                 <see cref="P:Northwoods.Go.Panel.ColumnSizing"/>, <see cref="P:Northwoods.Go.Panel.LeftIndex"/>, <see cref="P:Northwoods.Go.Panel.TopIndex"/>, and all of the "default" separator properties.
               - Panels of <see cref="P:Northwoods.Go.Panel.Type"/> <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableRow"/> and <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableColumn"/> do not act like regular GraphObjects,
                 instead they are only to be used immediately within a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/>. They are pass-through containers
                 that hold elements for their parent table, and ignore their own scale and angle.
               - Panels of <see cref="P:Northwoods.Go.Panel.Type"/> <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid"/> use the <see cref="P:Northwoods.Go.Panel.GridCellSize"/> and <see cref="P:Northwoods.Go.Panel.GridOrigin"/> properties.
               - Panels of <see cref="P:Northwoods.Go.Panel.Type"/> <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutViewbox"/> use the <see cref="P:Northwoods.Go.Panel.ViewboxStretch"/> property.
               - Panels of <see cref="P:Northwoods.Go.Panel.Type"/> <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated"/> use the <see cref="P:Northwoods.Go.Panel.GraduatedMin"/>, <see cref="P:Northwoods.Go.Panel.GraduatedMax"/>,
                 <see cref="P:Northwoods.Go.Panel.GraduatedTickUnit"/>, and <see cref="P:Northwoods.Go.Panel.GraduatedTickBase"/> properties.
            
             <p class="boxread">
             For live examples of all Panel types, see the <a href="../../intro/panels.Html">Introduction page on Panels.</a>
             </p>
            
             <h3>Data Binding</h3>
            
             Panels also provide fundamental support for data binding.
             When a diagram gets a new model or when a diagram's model is augmented with additional data,
             the diagram automatically creates a new Node or Link whose <see cref="P:Northwoods.Go.Panel.Data"/> property refers to the corresponding
             node data or link data object.
            
             <p class="boxread">
             For more discussion of data binding, please read the <a href="../../intro/usingModels.Html">Introduction page on Models</a>
             and <a href="../../intro/dataBinding.Html">Data Binding</a>.
             </p>
            
             Panels provide support for automatically creating elements within the Panel based on items in a collection.
             This is achieved by setting or binding the <see cref="P:Northwoods.Go.Panel.ItemList"/> property, which acts in a manner similar
             to the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> property.
             You can supply an <see cref="P:Northwoods.Go.Panel.ItemTemplate"/>, which must itself be a simple Panel, which is copied to create the element
             in this container Panel corresponding to an item in the ItemList.
             This property is analogous to the <see cref="P:Northwoods.Go.Diagram.NodeTemplate"/> property, although for the diagram the
             template must be a <see cref="T:Northwoods.Go.Node"/>, <see cref="T:Northwoods.Go.Group"/>, or simple <see cref="T:Northwoods.Go.Part"/>.
            
             Much like the <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/>, Panel's <see cref="P:Northwoods.Go.Panel.ItemTemplateMap"/> supports having multiple templates,
             so that the actual structure of the element created for a data item can be chosen dynamically.
             Just as the <see cref="P:Northwoods.Go.Models.Model`3.NodeCategoryProperty"/> determines which template in the <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/>
             is copied to create a <see cref="T:Northwoods.Go.Node"/>, the <see cref="P:Northwoods.Go.Panel.ItemCategoryProperty"/> names the data property whose value
             chooses the Panel in the ItemTemplateMap to copy for the item.
            
             When binding the <see cref="P:Northwoods.Go.Panel.ItemList"/> property, it is commonplace to customize the model's copying processes, by
             supplying a custom <see cref="P:Northwoods.Go.Models.Model`3.CopyNodeDataFunction"/>.
            
             <p class="boxread">
             For more discussion and examples of item lists, please read the <a href="../../intro/itemLists.Html">Introduction page on Item Lists</a>.
             </p>
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.#ctor">
            <summary>
            Constructs an empty Panel of the given <see cref="P:Northwoods.Go.Panel.Type"/>. Default type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.
            </summary>
            <remarks>
            The default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.#ctor(Northwoods.Go.PanelLayouts.PanelLayout)">
            <summary>
            Constructs an empty Panel of the given <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/> <see cref="P:Northwoods.Go.Panel.Type"/>.
            The default type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.
            The panel type must be a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/> instance.
            </summary>
            <param name="type">if null, the default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Panel.#ctor(System.String)">
            <summary>
            Constructs an empty Panel of the given <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/> <see cref="P:Northwoods.Go.Panel.Type"/>.
            The panel type can be a string describing one of the built-in <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/> types,
            available under the <see cref="T:Northwoods.Go.PanelType"/> static class.
            </summary>
            <param name="type">if the empty string, the default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Panel.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.ApplyProtected(Northwoods.Go.GraphObject)">
            <summary>
            Copy properties from this object to the target object, which must be of the same class.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.DisplaceProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Fix up references in the argument object so that the argument object can displace this object in the visual tree.
            </summary>
            <param name="c">This might be a copy of this object,
            but more likely is a separately created object of the same class with completely different internals.</param>
        </member>
        <member name="M:Northwoods.Go.Panel.Copy">
            <summary>
            Creates a deep copy of this Panel and returns it.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Northwoods.Go.Panel.Type">
             <summary>
             Gets or sets the type of the Panel, which controls how the Panel's elements are measured and arranged.
             </summary>
             <remarks>
             The value must be an instance of <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>.
             The only predefined values are:
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutVertical"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutHorizontal"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutAuto"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutSpot"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutViewbox"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutLink"/> (see also <see cref="T:Northwoods.Go.Link"/>s, which are all Panels of type Link)
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableRow"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTableColumn"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid"/>
               - <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated"/>
            
             The default value is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.
            
             You must not modify this property once the Panel has been measured or the Panel has been added to another Panel.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.Elements">
             <summary>
             This read-only property returns an iterator over the collection of the <see cref="T:Northwoods.Go.GraphObject"/>s that this panel manages.
             </summary>
             <remarks>
             You can change the collection by calling <see cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/>, <see cref="M:Northwoods.Go.Panel.InsertAt(System.Int32,Northwoods.Go.GraphObject)"/>, <see cref="M:Northwoods.Go.Panel.Remove(Northwoods.Go.GraphObject)"/>, or <see cref="M:Northwoods.Go.Panel.RemoveAt(System.Int32)"/>.
            
             You can also get direct access to individual elements by calling <see cref="M:Northwoods.Go.Panel.Elt(System.Int32)"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.NaturalBounds">
            @hidden @internal
            <summary>
            This read-only property returns the natural bounds of this Panel.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Panel.Padding">
             <summary>
             Gets or sets the space between this Panel's border and its content.
             </summary>
             <remarks>
             Unlike <see cref="P:Northwoods.Go.GraphObject.Margin"/>, padding expands the area inside of the Panel's border.
             If this Panel's size is unconstrained, this will increase the size of the panel.
             If this Panel's size is constrained, this will decrease the total area
             for the Panel elements to arrange themselves.
            
             Unlike margin, increases in size due to padding are visually covered by the
             <see cref="P:Northwoods.Go.GraphObject.Background"/>.
            
             Padding cannot contain negative numbers.
             The default value is a <see cref="T:Northwoods.Go.Margin"/> of zero.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Margin"/>
        </member>
        <member name="P:Northwoods.Go.Panel.DefaultAlignment">
            <summary>
            Gets or sets the default alignment spot of this Panel, used as
            the alignment for an element when its <see cref="P:Northwoods.Go.GraphObject.Alignment"/> value is <see cref="F:Northwoods.Go.Spot.Default"/>.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.Spot.Default"/>, which is interpreted by the Panel in whatever manner seems reasonable,
            depending on the Panel type.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.DefaultStretch">
            <summary>
            Gets or sets the default stretch of this Panel, used as
            the stretch for an element when its <see cref="P:Northwoods.Go.GraphObject.Stretch"/> value is <see cref="F:Northwoods.Go.Stretch.Default"/>.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.Stretch.Default"/>, which typically resolves to <see cref="F:Northwoods.Go.Stretch.None"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.DefaultSeparatorPadding">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets the additional padding for rows and columns.
            </summary>
            <remarks>
            Padding is applied both before and after a row or column's contents.
            </remarks>
            <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorPadding"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorPadding"/>
            <seealso cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorStrokeWidth"/>
            <seealso cref="P:Northwoods.Go.Panel.DefaultRowSeparatorStrokeWidth"/>
        </member>
        <member name="P:Northwoods.Go.Panel.DefaultRowSeparatorStroke">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets the default stroke (color) for rows
            provided a given row has a nonzero <see cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/>.
            </summary>
            <remarks>
            <see cref="P:Northwoods.Go.RowDefinition.SeparatorStroke"/> can override this default value.
            The default value is null -- no line is drawn.
            </remarks>
            <seealso cref="P:Northwoods.Go.Panel.DefaultRowSeparatorStrokeWidth"/>
            <seealso cref="P:Northwoods.Go.Panel.DefaultRowSeparatorDashArray"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorStroke"/>
            <seealso cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorStroke"/>
        </member>
        <member name="P:Northwoods.Go.Panel.DefaultRowSeparatorStrokeWidth">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets the default stroke width for a row's separator.
            </summary>
            <remarks>
            <see cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/> can override this default value.
            The default value is 1.  Any new value must be a real, non-negative number.
            </remarks>
            <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/>
            <seealso cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorStrokeWidth"/>
        </member>
        <member name="P:Northwoods.Go.Panel.DefaultRowSeparatorDashArray">
             <summary>
             For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets the default dash array for a row's separator.
             </summary>
             <remarks>
             <see cref="P:Northwoods.Go.RowDefinition.SeparatorDashArray"/> can override this default value.
            
             Must be an array of positive numbers and zeroes,
             or else null to indicate a solid line.
            
             For example, the array [5, 10] would create dashes of 5 pixels and spaces of 10 pixels.
            
             Setting an array with all zeroes will set the value to null.
            
             Default is null.
             </remarks>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorDashArray"/>
             <seealso cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorDashArray"/>
        </member>
        <member name="P:Northwoods.Go.Panel.DefaultColumnSeparatorStroke">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets the default stroke (color) for columns
            provided a given column has a nonzero <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/>.
            </summary>
            <remarks>
            <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorDashArray"/> can override this default value.
            The default value is null -- no line is drawn.
            </remarks>
            <seealso cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorStrokeWidth"/>
            <seealso cref="P:Northwoods.Go.Panel.DefaultColumnSeparatorDashArray"/>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorStroke"/>
            <seealso cref="P:Northwoods.Go.Panel.DefaultRowSeparatorStroke"/>
        </member>
        <member name="P:Northwoods.Go.Panel.DefaultColumnSeparatorStrokeWidth">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets the default stroke width for a column's separator.
            </summary>
            <remarks>
            <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/> can override this default value.
            The default value is 1.  Any new value must be a real, non-negative number.
            </remarks>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/>
            <seealso cref="P:Northwoods.Go.Panel.DefaultRowSeparatorStrokeWidth"/>
        </member>
        <member name="P:Northwoods.Go.Panel.DefaultColumnSeparatorDashArray">
             <summary>
             For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets the default dash array for a column's separator.
             </summary>
             <remarks>
             <see cref="P:Northwoods.Go.ColumnDefinition.SeparatorStrokeWidth"/> can override this default value.
            
             Must be an array of positive numbers and zeroes,
             or else null to indicate a solid line.
            
             For example, the array [5, 10] would create dashes of 5 pixels and spaces of 10 pixels.
            
             Setting an array with all zeroes will set the value to null.
            
             Default is null.
             </remarks>
             <seealso cref="P:Northwoods.Go.ColumnDefinition.SeparatorDashArray"/>
             <seealso cref="P:Northwoods.Go.Panel.DefaultRowSeparatorDashArray"/>
        </member>
        <member name="P:Northwoods.Go.Panel.ViewboxStretch">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutViewbox">Viewbox</see> Panels: Gets or sets how the panel will resize its content.
            </summary>
            <remarks>
            Possible values are <see cref="F:Northwoods.Go.ViewboxStretch.Uniform"/> and <see cref="F:Northwoods.Go.ViewboxStretch.UniformToFill"/>.
            The default is <see cref="F:Northwoods.Go.ViewboxStretch.Uniform"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.GridCellSize">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid">Grid</see> Panels: Gets or sets the distance between lines.
            </summary>
            <remarks>
            The units are in local coordinates.
            The default is 10x10. Any new width or height must be a positive real number.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.GridOrigin">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid">Grid</see> Panels: Gets or sets an origin point for the grid cells.
            </summary>
            <remarks>
            The units are in local coordinates.
            The default is (0,0). Any new value must use real numbers.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.GraduatedMin">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated">Graduated</see> Panels: Gets or sets the minimum value represented.
            </summary>
            <remarks>
            Must be less than <see cref="P:Northwoods.Go.Panel.GraduatedMax"/>. The default is 0.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.GraduatedMax">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated">Graduated</see> Panels: Gets or sets the maximum value represented.
            </summary>
            <remarks>
            Must be greater than <see cref="P:Northwoods.Go.Panel.GraduatedMin"/>. The default is 100.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.GraduatedRange">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated">Graduated</see> Panels: This read-only property returns the range of values represented by the Panel.
            </summary>
            <remarks>
            For example, a <see cref="P:Northwoods.Go.Panel.GraduatedMin"/> of 25 and <see cref="P:Northwoods.Go.Panel.GraduatedMax"/> of 75 would return 50.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.GraduatedTickUnit">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated">Graduated</see> Panels: Gets or sets the difference between two consecutive values marked by ticks.
            </summary>
            <remarks>
            Must be positive. The default is 10.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.GraduatedTickBase">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated">Graduated</see> Panels: Gets or sets the base value which is marked with a tick.
            </summary>
            <remarks>
            The default is 0.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel._NotifyPorts(Northwoods.Go.Part)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.DrawProtected(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.DrawProtectedSpacers(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
            <summary>
            Table Panel spacers
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.DrawProtectedSpacers2(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram,System.Collections.Generic.SortedDictionary{System.Int32,Northwoods.Go.RowDefinition})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.DrawProtectedSpacers2(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram,System.Collections.Generic.SortedDictionary{System.Int32,Northwoods.Go.ColumnDefinition})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.DrawProtectedBackgrounds(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram,System.Collections.Generic.SortedDictionary{System.Int32,Northwoods.Go.RowDefinition},System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.DrawProtectedBackgrounds(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram,System.Collections.Generic.SortedDictionary{System.Int32,Northwoods.Go.ColumnDefinition},System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.ComputeTileSize">
            @hidden @internal
            <summary>
            Set the size arg to the size at which the grid pattern repeats.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel._IsVertical(System.String)">
            @hidden @internal
            <param name="fig">a Shape.Figure</param>
        </member>
        <member name="M:Northwoods.Go.Panel.GetNearestIntersectionPoint2(System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Point@)">
            @hidden @internal
            <summary>
            Find the closest point in this object to the given point p1 that is on the
            line p1-p2.
            </summary>
            <param name="p1x"></param>
            <param name="p1y"></param>
            <param name="p2x"></param>
            <param name="p2y"></param>
            <param name="result">(reference) the point of this object that is closest to p1 and that is on the infinite line from p1 to p2.</param>
            <returns>true if the infinite line does intersect with this object; false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.InvalidateMeasure(System.Boolean)">
            @hidden @internal
            <param name="parent">flag, meaning the parent invalidated a child. Stops the child from trying to invalidate the parent.</param>
        </member>
        <member name="M:Northwoods.Go.Panel.InvalidateMeasureChildren">
            @hidden @internal
            <summary>
            Special invalidateMeasure for invalidating panels and their children only.
            </summary>
            <remarks>
            This does not notify the diagram nor any parent panels
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel._InvalidateTransform">
            @hidden @internal
            <summary>
            Invalidates an Object's transform and then recurses through the visual tree to invalidate the allTransforms for each object in collection.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.InvalidateAllTransforms">
            @hidden @internal
            <summary>
            Recurses through the visual tree to invalidate the allTransforms for each GraphObject.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.MeasureProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.FindMainElement">
            <summary>
            Return an immediate child element whose <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> is true,
            or else just return the first child element.
            </summary>
            <returns>this may return null if there are no child elements</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.GetLocationElement">
            @hidden @internal
            <returns>this may return null</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.ArrangeProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Causes a Panel to arrange it's children.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.ContainsProtected(Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            Search in elements for objects containing the given point
            </summary>
            <param name="p">a Point in local coordinates.</param>
        </member>
        <member name="M:Northwoods.Go.Panel.FindId(System.Int32)">
            @hidden @internal
            <summary>
            Used by data binding to find the unique object in a visual tree corresponding to a particular object in the template.
            </summary>
            <remarks>
            This could cache references to reduce searching overhead.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.WalkVisualTreeFrom(Northwoods.Go.GraphObject,System.Action{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject})">
            @hidden @internal
            <summary>
            Walk the visual tree, starting at a given GraphObject in the tree,
            passing this "root" Panel as the first arg to the given function for each element in the tree.
            </summary>
            <param name="obj">the GraphObject from which to start walking the tree</param>
            <param name="func"> first arg is this Panel; second arg is the current GraphObject in the tree walk</param>
        </member>
        <member name="M:Northwoods.Go.Panel.WalkPanels(System.Action{Northwoods.Go.Panel})">
            @hidden @internal
            <summary>
            Walk the visual tree, ignoring non-Panels.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.WalkPanels1(Northwoods.Go.Panel,System.Action{Northwoods.Go.Panel})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.WalkVisualTree(System.Action{Northwoods.Go.GraphObject})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel._WalkVisualTree1(Northwoods.Go.GraphObject,System.Action{Northwoods.Go.GraphObject})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.FindInVisualTree(System.Predicate{Northwoods.Go.GraphObject})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel._FindInVisualTree1(Northwoods.Go.GraphObject,System.Predicate{Northwoods.Go.GraphObject})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.FindElement(System.String)">
            <summary>
            Search the visual tree starting at this Panel for a GraphObject
            whose <see cref="P:Northwoods.Go.GraphObject.Name"/> is the given name.
            </summary>
            <remarks>
            This does not recurse into the elements inside a Panel that holds elements for an <see cref="P:Northwoods.Go.Panel.ItemList"/>.
            </remarks>
            <param name="name">The name to search for, using a case-sensitive string comparison.</param>
            <returns>If no such named element can be found, this returns null.</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.FindMiter">
            @hidden @internal
            <summary>
            Finds the largest miter of all children
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.TrueTransform">
            @hidden @internal
            <summary>
            Determine if an elements's transform should or should not affect its children.
            </summary>
            <remarks>
            This is only meaningful on Panel right now, and only for TableRow/TableColumn
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.IsTableRowCol">
            <summary>
            True if this panel is a TableRow or TableColumn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Panel.FindElementAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})">
            @hidden @internal
            <param name="p">A Point in local coordinates.</param>
            <param name="navig">A function taking a GraphObject and
            returning a GraphObject, defaulting to the identity.</param>
            <param name="pred">A function taking the GraphObject
            returned by navig and returning true if that element should be returned,
            defaulting to a predicate that always returns true.</param>
            <returns>The first GraphObject in the Z-order, or else null.</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.FindElementsAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Collections.Generic.ICollection{``0})">
            @hidden @internal
            <param name="p">A Point in local coordinates.</param>
            <param name="navig">A function taking a GraphObject and
            returning a GraphObject, defaulting to the identity.</param>
            <param name="pred">A function taking the GraphObject
            returned by navig and returning true if that element should be returned,
            defaulting to a predicate that always returns true.</param>
            <param name="list">An optional List (or Set) to add the results to.</param>
            <returns>Whether or not this element is included.</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.FindElementsIn``1(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,System.Collections.Generic.ICollection{``0},Northwoods.Go.Transform)">
            @hidden @internal
            <param name="r">A Rect in container coordinates.</param>
            <param name="navig">A function taking a GraphObject and
            returning a GraphObject, defaulting to the identity.</param>
            <param name="pred">A function taking the GraphObject
            returned by navig and returning true if that element should be returned,
            defaulting to a predicate that always returns true.</param>
            <param name="partialInclusion">True if elements are to be included when they
            intersect.</param>
            <param name="list">A List (or Set) to add the results to.</param>
            <param name="txfm"></param>
            <returns>Whether or not this element is included.</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.AddElts``1(System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Collections.Generic.ICollection{``0})">
            @hidden @internal
            <summary>
            Used by Panel.FindElementsIn to place more objects into List that are wholly within the rect.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.FindElementsNear``1(Northwoods.Go.Point,Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,System.Collections.Generic.ICollection{``0})">
            @hidden @internal
            <param name="p">A Point in container coordinates.</param>
            <param name="distp">A Point representing the distance from the point p.</param>
            <param name="navig">A function taking a GraphObject and
            returning a GraphObject, defaulting to the identity.</param>
            <param name="pred">A function taking the GraphObject
            returned by navig and returning true if that element should be returned,
            defaulting to a predicate that always returns true.</param>
            <param name="partialInclusion">True if elements are to be included when they intersect.</param>
            <param name="list">An optional List (or Set) to add the results to.</param>
            <returns>Whether or not this element is included.</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.ComputeSpot1(Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.ComputeSpot2(Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])">
            <summary>
            Adds a number of GraphObjects to the end of this Panel's list of elements, visually in front of all of the other elements.
            </summary>
            <remarks>
            If an element to be added is already in this Panel's list of elements,
            the object is moved to the end of the list.
            You cannot add a GraphObject to a Panel if that GraphObject is already in a different Panel.
            </remarks>
            <param name="elements">A variable number of GraphObject parameters.</param>
            <returns>this Panel</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})">
            <summary>
            Adds a number of GraphObjects to the end of this Panel's list of elements, visually in front of all of the other elements.
            </summary>
            <remarks>
            If an element to be added is already in this Panel's list of elements,
            the object is moved to the end of the list.
            You cannot add a GraphObject to a Panel if that GraphObject is already in a different Panel.
            </remarks>
            <param name="elements">An enumerable of GraphObjects.</param>
            <returns>this Panel</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.Add(Northwoods.Go.RowDefinition[])">
            <summary>
            Adds a number of RowDefinitions to this Table panel.
            </summary>
            <remarks>
            This method will throw an error if used on a Panel that isn't of <see cref="P:Northwoods.Go.Panel.Type"/> <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/>.
            If the row already exists in the Table Panel, this method will modify the existing row.
            </remarks>
            <param name="rows">A number of RowDefinitions.</param>
            <returns>this Panel</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.Add(Northwoods.Go.ColumnDefinition[])">
            <summary>
            Adds a number of ColumnDefinitions to this Table panel.
            </summary>
            <remarks>
            This method will throw an error if used on a Panel that isn't of <see cref="P:Northwoods.Go.Panel.Type"/> <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/>.
            If the column already exists in the Table Panel, this method will modify the existing column.
            </remarks>
            <param name="cols">A number of ColumnDefinitions.</param>
            <returns>this Panel</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.Elt(System.Int32)">
            <summary>
            Returns the GraphObject in this Panel's list of elements at the specified index.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.InsertAt(System.Int32,Northwoods.Go.GraphObject)">
            <summary>
            Adds a GraphObject to the Panel's list of elements at the specified index.
            </summary>
            <remarks>
            If the element to be added is already in this Panel's list of elements,
            the element is moved to the specified index.
            You cannot add a GraphObject to a Panel that if that GraphObject is already in a different Panel.
            </remarks>
            <param name="index"></param>
            <param name="element">A GraphObject.</param>
        </member>
        <member name="P:Northwoods.Go.Panel.HasNamedPorts">
            @hidden @internal 
        </member>
        <member name="M:Northwoods.Go.Panel.CopyInsert(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Special insert for copying panels
            </summary>
            <param name="element">A GraphObject.</param>
        </member>
        <member name="M:Northwoods.Go.Panel.Remove(Northwoods.Go.GraphObject)">
            <summary>
            Removes a GraphObject from this Panel's list of elements.
            </summary>
            <param name="element">A GraphObject.</param>
        </member>
        <member name="M:Northwoods.Go.Panel.RemoveAt(System.Int32)">
            <summary>
            Removes an GraphObject from this Panel's list of elements at the specified index.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.InternalRemove(System.Int32,System.Boolean)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Panel.RowCount">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: This read-only property returns the number of rows.
            </summary>
            <remarks>
            This value is only valid after the Panel has been measured.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.GetRowDefinition(System.Int32)">
             <summary>
             For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets the <see cref="T:Northwoods.Go.RowDefinition"/> for a particular row.
             </summary>
             <remarks>
             If you ask for the definition of a row at or beyond the <see cref="P:Northwoods.Go.Panel.RowCount"/>,
             it will automatically create one and return it.
            
             If this Panel is not a Table Panel, this method returns null.
             </remarks>
             <param name="idx">the non-negative zero-based integer row index.</param>
        </member>
        <member name="M:Northwoods.Go.Panel.RemoveRowDefinition(System.Int32)">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Removes the <see cref="T:Northwoods.Go.RowDefinition"/> for a particular row.
            </summary>
            <remarks>
            If this Panel is not a Table Panel, this method does nothing.
            </remarks>
            <param name="idx">the non-negative zero-based integer row index.</param>
        </member>
        <member name="P:Northwoods.Go.Panel.ColumnCount">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: This read-only property returns the number of columns.
            </summary>
            <remarks>
            This value is only valid after the Panel has been measured.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.GetColumnDefinition(System.Int32)">
             <summary>
             For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets the <see cref="T:Northwoods.Go.ColumnDefinition"/> for a particular column.
             </summary>
             <remarks>
             If you ask for the definition of a column at or beyond the <see cref="P:Northwoods.Go.Panel.ColumnCount"/>,
             it will automatically create one and return it.
            
             If this Panel is not a Table Panel, this method returns null.
             </remarks>
             <param name="idx">the non-negative zero-based integer column index.</param>
        </member>
        <member name="M:Northwoods.Go.Panel.RemoveColumnDefinition(System.Int32)">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Removes the <see cref="T:Northwoods.Go.ColumnDefinition"/> for a particular column.
            </summary>
            <remarks>
            If this Panel is not a Table Panel, this method does nothing.
            </remarks>
            <param name="idx">the non-negative zero-based integer row index.</param>
        </member>
        <member name="P:Northwoods.Go.Panel.RowSizing">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets how this Panel's rows deal with extra space.
            </summary>
            <remarks>
            Valid values are <see cref="F:Northwoods.Go.Sizing.ProportionalExtra"/> and <see cref="F:Northwoods.Go.Sizing.None"/>.
            The default is <see cref="F:Northwoods.Go.Sizing.ProportionalExtra"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.RowDefinition.Sizing"/>
        </member>
        <member name="P:Northwoods.Go.Panel.ColumnSizing">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets how this Panel's columns deal with extra space.
            </summary>
            <remarks>
            Valid values are <see cref="F:Northwoods.Go.Sizing.ProportionalExtra"/> and <see cref="F:Northwoods.Go.Sizing.None"/>.
            The default is <see cref="F:Northwoods.Go.Sizing.ProportionalExtra"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.ColumnDefinition.Sizing"/>
            <seealso cref="P:Northwoods.Go.Panel.RowSizing"/>
        </member>
        <member name="P:Northwoods.Go.Panel.TopIndex">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets the first row that this Panel displays.
            </summary>
            <remarks>
            The default value is 0.
            </remarks>
            <seealso cref="P:Northwoods.Go.Panel.LeftIndex"/>
        </member>
        <member name="P:Northwoods.Go.Panel.LeftIndex">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Gets or sets the first column that this Panel displays.
            </summary>
            <remarks>
            The default value is 0.
            </remarks>
            <seealso cref="P:Northwoods.Go.Panel.TopIndex"/>
        </member>
        <member name="M:Northwoods.Go.Panel.FindRowForLocalY(System.Double)">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Returns the row at a given y-coordinate in local coordinates,
            or -1 if there are no RowDefinitions for this Table Panel or if the argument is negative.
            </summary>
            <remarks>
            Call <see cref="M:Northwoods.Go.GraphObject.GetLocalPoint(Northwoods.Go.Point)"/> to convert a Point in document coordinates into
            a Point in local coordinates.
            </remarks>
            <returns>a zero-based integer</returns>
            <seealso cref="M:Northwoods.Go.Panel.FindColumnForLocalX(System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.FindColumnForLocalX(System.Double)">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">Table</see> Panels: Returns the cell at a given x-coordinate in local coordinates,
            or -1 if there are no ColumnDefinitions for this Table Panel or if the argument is negative.
            </summary>
            <remarks>
            Call <see cref="M:Northwoods.Go.GraphObject.GetLocalPoint(Northwoods.Go.Point)"/> to convert a Point in document coordinates into
            a Point in local coordinates.
            </remarks>
            <returns>a zero-based integer</returns>
            <seealso cref="M:Northwoods.Go.Panel.FindRowForLocalY(System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.GraduatedPointForValue(System.Double)">
             <summary>
             For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated">Graduated</see> Panels: Returns the point that corresponds with a value, in the panel's coordinates.
             </summary>
             <remarks>
             If the value provided is not within the <see cref="P:Northwoods.Go.Panel.GraduatedMin"/> and <see cref="P:Northwoods.Go.Panel.GraduatedMax"/>,
             it will be constrained to within those values.
            
             If this Panel is not a Graduated Panel, this method returns Point(double.NaN, double.NaN).
             </remarks>
             <param name="val">a value between <see cref="P:Northwoods.Go.Panel.GraduatedMin"/> and <see cref="P:Northwoods.Go.Panel.GraduatedMax"/></param>
             <seealso cref="M:Northwoods.Go.Panel.GraduatedValueForPoint(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.GraduatedValueForPoint(Northwoods.Go.Point)">
             <summary>
             For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated">Graduated</see> Panels: Returns the value that corresponds with the given Point.
             </summary>
             <remarks>
             The Point must be in the panel's coordinates.
             The value returned will be in the Graduated Panel's range.
            
             If this Panel is not a Graduated Panel, this method returns double.NaN.
             </remarks>
             <param name="pt">a Point in the Graduated Panel's coordinates</param>
             <seealso cref="M:Northwoods.Go.Panel.GraduatedPointForValue(System.Double)"/>
        </member>
        <member name="P:Northwoods.Go.Panel.Data">
             <summary>
             Gets or sets the optional model data to which this panel is data-bound.
             </summary>
             <remarks>
             The data must be an object if this is a <see cref="T:Northwoods.Go.Part"/>.
             The data can be any value if this is a <see cref="T:Northwoods.Go.Panel"/> created for
             an item in an list that was data-bound by the <see cref="P:Northwoods.Go.Panel.ItemList"/> property.
             The default value is null.
            
             Setting it to a new value automatically calls <see cref="M:Northwoods.Go.Panel.UpdateTargetBindings(System.String)"/>
             in order to assign new values to all of the data-bound GraphObject properties.
            
             Once you set this property you cannot add, remove, or modify any data bindings
             on any of the GraphObjects in the visual tree of this Panel, including on
             this panel itself.
            
             You should not modify this property on a <see cref="T:Northwoods.Go.Part"/> that is created automatically
             to represent model data, nor on a <see cref="T:Northwoods.Go.Panel"/> that is created automatically for a data item
             in the containing Panel's <see cref="P:Northwoods.Go.Panel.ItemList"/>.
             Call <see cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/> and <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/> if you want to replace
             this Part with another one, or call <see cref="M:Northwoods.Go.Models.Model`3.RemoveListItem(System.Collections.IList,System.Int32)"/> and <see cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/>
             if you want to replace this Panel with another one.
            
             Although you might not be able to replace this data value if this Part was created
             automatically by the Diagram, you can still modify that data object's properties.
             Call the appropriate Model method for changing properties that affect the structure of the diagram.
             Call <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/> for changing other properties that may be the sources
             of <see cref="T:Northwoods.Go.Models.Binding"/>s on <see cref="T:Northwoods.Go.GraphObject"/> properties that are in the visual tree of this panel/part.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.ItemIndex">
             <summary>
             Gets the index of this Panel's data if it was created to represent an item in its containing Panel's <see cref="P:Northwoods.Go.Panel.ItemList"/>.
             </summary>
             <remarks>
             The default value is double.NaN.
            
             This is only set internally by code such as <see cref="M:Northwoods.Go.Panel.RebuildItemElements"/> or <see cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/>
             when building or shifting a Panel representing items
             in the Panel whose <see cref="P:Northwoods.Go.Panel.ItemList"/> was set or bound to a list of values.
            
             This property can be used in data bindings within the item template to produce values
             that depend on its position in the item list.
             For example:
             <code language="cs">
              new Panel {
                  ...,
                  ItemTemplate =
                    new Panel()  // the item Panel
                      // set Panel.Background to a color based on the Panel.ItemIndex
                      .Bind(
                        new Binding("Background", "ItemIndex",
                          // using this conversion function
                          (i, _) => { return ((int)i % 2 == 0) ? "lightgreen" : "lightyellow"; })
                        // bound to this Panel itself, not to the Panel.Data item
                        .OfElement()
                      )
                      .Add(
                        new TextBlock().Bind("Text")  // a trivial item template, just showing some text
                      )
                }
                .Bind("ItemList", "SomeProperty")
             </code>
            
             The main element of a Spot or Auto or Link Panel, or the first TableRow or TableColumn element of a Table Panel
             whose <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> property is true, will not have this property set to a number,
             because it will not have been created by <see cref="M:Northwoods.Go.Panel.RebuildItemElements"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.IsBindingPanel">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.IsBindingPanelFrozen">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.FreezeBindings">
            <summary>
            (undocumented)
            Collect all of the Bindings in the visual tree, freeze them,
            and make sure there is a name association to the target object,
            so that they can be found in each copy of the visual tree.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Panel._WarnedAboutNoElementsInTemplate">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.CopyTemplate(System.Boolean)">
            <summary>
            Make a deep copy of this Panel and allow it to be used as a template.
            </summary>
            <remarks>
            This makes copies of Bindings, unlike the regular Copy() method.
            Pass true as the argument in order to freeze the Bindings,
            allowing it to operate efficiently as a template.
            A false value (which is the default) allows further additions/modifications
            of the bindings in the copied panel.
            </remarks>
            <param name="freeze">whether to freeze the Bindings in the copy; default is false</param>
        </member>
        <member name="M:Northwoods.Go.Panel.UpdateTargetBindings(System.String)">
             <summary>
             Re-evaluate all data bindings on this panel,
             in order to assign new property values to the <see cref="T:Northwoods.Go.GraphObject"/>s in this visual tree
             based on this object's <see cref="P:Northwoods.Go.Panel.Data"/> property values.
             </summary>
             <remarks>
             It is better to call <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/> to modify data properties,
             because that will both record changes for undo/redo and will update all bindings
             that may depend on that property.
            
             This method does nothing if <see cref="P:Northwoods.Go.Panel.Data"/> is null.
             </remarks>
             <param name="srcprop">An optional source data property name:
               when provided, only evaluates those <see cref="T:Northwoods.Go.Models.Binding"/>s that use that particular property;
               when not provided or when it is the empty string, all bindings are evaluated.</param>
             <seealso cref="M:Northwoods.Go.Models.Model`3.UpdateTargetBindings(System.Object,System.String)"/>
        </member>
        <member name="P:Northwoods.Go.Panel.ItemList">
             <summary>
             Gets or sets a list of values or objects, each of which will be represented
             by a <see cref="T:Northwoods.Go.Panel"/> as elements in this Panel.
             </summary>
             <remarks>
             Replacing this list results all of this panel's child elements being replaced with
             a copy of the <see cref="T:Northwoods.Go.Panel"/> found in <see cref="P:Northwoods.Go.Panel.ItemTemplateMap"/> for each particular
             item in the list.
            
             Because the software does not receive any notifications when a list is modified,
             any insertions or removals or replacements of data in the list will not be noticed
             unless you call <see cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/> or <see cref="M:Northwoods.Go.Models.Model`3.RemoveListItem(System.Collections.IList,System.Int32)"/>.
             You may also reset this property to its current value (the modified list) or
             call <see cref="M:Northwoods.Go.Panel.UpdateTargetBindings(System.String)"/>, if there is a <see cref="T:Northwoods.Go.Models.Binding"/> whose target is this property.
            
             When binding this property, it is commonplace to customize the model's copying processes.
             You can supply a custom <see cref="P:Northwoods.Go.Models.Model`3.CopyNodeDataFunction"/>
             and perhaps a <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.CopyLinkDataFunction"/>.
            
             Any object that is in this list must only appear once
             and must not appear in any other <see cref="P:Northwoods.Go.Panel.ItemList"/>s.
             Use <see cref="M:Northwoods.Go.Panel.FindItemPanelForData(System.Object)"/> to find the data-bound Panel created for an object in this panel's item list.
            
             Non-object values in an item list may appear multiple times.
             An item list may be shared by multiple Panels.
            
             Item lists should not be used with Grid Panels or Graduated Panels as they may not have nested Panels.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.FindItemPanelForData(System.Object)">
            <summary>
            Return the <see cref="T:Northwoods.Go.Panel"/> that was made for a particular data object in this panel's <see cref="P:Northwoods.Go.Panel.ItemList"/>.
            </summary>
            <remarks>
            If this returns a Panel, its <see cref="P:Northwoods.Go.Panel.Data"/> property will be the argument data object,
            and its containing <see cref="P:Northwoods.Go.GraphObject.Panel"/> will be this panel.
            </remarks>
            <param name="data">must be an Object, not a string or a number or a bool or a function</param>
            <returns>null if not found</returns>
        </member>
        <member name="M:Northwoods.Go.Panel.IsItemListDifferent(System.Collections.IList)">
            @hidden @internal
            <summary>
            If any of the child Panels do not correspond with each of the given list's items in order,
            or if there isn't such a Panel for an list item, return true.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.KeepFirstItemElements">
            @hidden @internal
            <summary>
            This should only be called when item lists are involved.
            Returns how many of the first elements of the children are kept by RebuildItemElements.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.RebuildItemElements">
             <summary>
             Create and add new GraphObjects corresponding to and bound to the data in the <see cref="P:Northwoods.Go.Panel.ItemList"/>,
             after removing all existing elements from this Panel.
             </summary>
             <remarks>
             This method is automatically called when replacing the <see cref="P:Northwoods.Go.Panel.ItemList"/> value,
             or when changing the value of <see cref="P:Northwoods.Go.Panel.ItemTemplate"/> or <see cref="P:Northwoods.Go.Panel.ItemTemplateMap"/>.
            
             This uses <see cref="P:Northwoods.Go.Panel.ItemCategoryProperty"/> to determine the category for an item data.
             That string is used to look up a template in <see cref="P:Northwoods.Go.Panel.ItemTemplateMap"/>.
             The resulting template (which is also a Panel) is copied, added to this panel,
             and its <see cref="P:Northwoods.Go.Panel.ItemIndex"/> is set to its index in that list.
             That new child Panel is then data-bound to that list item by setting its <see cref="P:Northwoods.Go.Panel.Data"/>.
            
             If <see cref="P:Northwoods.Go.Panel.ItemList"/> is null, this method just removes all elements from this panel.
             Actually, if this Panel <see cref="P:Northwoods.Go.Panel.Type"/> is "Spot", "Auto", or "Link", the very first element
             is always kept by this method.
             Also, if this Panel type is "Table", and if the first element is a "TableRow" or "TableColumn" Panel
             whose <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> property is set to true, that first element will be kept too.
             That is useful for defining literal TableRow headers in Table panels, when the header information
             is not kept as the first item in the ItemList.
            
             It is wasteful to call this method after making some model data changes.
             It is better to call <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>, <see cref="M:Northwoods.Go.Models.Model`3.AddListItem(System.Collections.IList,System.Object)"/>,
             <see cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/>, or <see cref="M:Northwoods.Go.Models.Model`3.RemoveListItem(System.Collections.IList,System.Int32)"/>, or other model methods.
             Not only do those methods update efficiently, they also preserve unbound state and support undo/redo.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel._RebuildItemElementsInternal(System.Collections.IList,System.Collections.IList)">
             <summary>
            
             </summary>
             <param name="olda">NYI: someday make use of this argument to optimize updating the panel's elements</param>
             <param name="newa">The value of ItemList</param>
        </member>
        <member name="M:Northwoods.Go.Panel.AddItemElement(System.Object,System.Int32,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.RemoveItemElement(System.Int32)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.UpdateTableIndexesStartingAt(System.Int32,System.Int32)">
            @hidden @internal
            <summary>
            After removing or inserting an item into an ItemList Panel,
            we need to update the row or column of all TableRow or TableColumn Panels
            that come at and after that index in this Panel.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.InternalSetAllRowColumn(System.Int32,System.Int32)">
            @hidden @internal
            <summary>
            Assume this is an item Panel generated for a data item in an ItemList.
            Depending on whether this Panel is of type TableRow or TableColumn,
            make sure all of its elements have the given row or column index.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Panel.IsItemsPanel">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Panel.ItemTemplate">
             <summary>
             Gets or sets the default <see cref="T:Northwoods.Go.Panel"/> template used as the archetype
             for item data that are in <see cref="P:Northwoods.Go.Panel.ItemList"/>.
             </summary>
             <remarks>
             Setting this property just modifies the <see cref="P:Northwoods.Go.Panel.ItemTemplateMap"/>
             by replacing the entry named with the empty string.
             Any new value must be a <see cref="T:Northwoods.Go.Panel"/> but not a <see cref="T:Northwoods.Go.Part"/>.
             By default this property is null.
            
             <see cref="M:Northwoods.Go.GraphObject.Copy"/> when copying a panel will share the <see cref="P:Northwoods.Go.Panel.ItemTemplateMap"/>
             between the original panel and the copied panel.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.ItemTemplateMap">
             <summary>
             Gets or sets a dictionary mapping template names to <see cref="T:Northwoods.Go.Panel"/>s.
             </summary>
             <remarks>
             One of these Panels is copied for each item data that is in the <see cref="P:Northwoods.Go.Panel.ItemList"/>.
             Replacing this map will automatically rebuild all of the elements in this Panel.
            
             By default this property is null.
             All values in the dictionary must be <see cref="T:Northwoods.Go.Panel"/>s but not <see cref="T:Northwoods.Go.Part"/>s.
            
             If you modify this dictionary, by replacing a <see cref="T:Northwoods.Go.Panel"/> or by adding or
             removing a map entry, you need to explicitly call <see cref="M:Northwoods.Go.Panel.RebuildItemElements"/> afterwards.
            
             <see cref="M:Northwoods.Go.GraphObject.Copy"/> when copying a panel will share the <see cref="P:Northwoods.Go.Panel.ItemTemplateMap"/>
             between the original panel and the copied panel.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.ItemCategoryProperty">
             <summary>
             Gets or sets the name of the item data property that returns a string describing that data's category.
             </summary>
             <remarks>
             The default value is the name "Category".
            
             This is used to distinguish between different
             kinds of items in the <see cref="P:Northwoods.Go.Panel.ItemList"/>.
            
             The name must not be null.
             If the value is an empty string, the category is assumed to be an empty string,
             the default category name, for all item data objects.
             You must not change this property when the <see cref="P:Northwoods.Go.Panel.ItemList"/> already has a value.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.GetCategoryForItemData(System.Object,System.Int32)">
            @hidden @internal
            <summary>
            Find the category of a given item data, a string naming the template
            in this <see cref="T:Northwoods.Go.Panel"/>'s <see cref="P:Northwoods.Go.Panel.ItemTemplateMap"/> to use to
            represent the item data.
            </summary>
            <remarks>
            By default this just returns the empty string, resulting in the use
            of the default <see cref="P:Northwoods.Go.Panel.ItemTemplate"/>.
            </remarks>
            <param name="itemdata">a value that is in the <see cref="P:Northwoods.Go.Panel.ItemList"/>.</param>
            <param name="idx">the zero-based index of the data in the <see cref="P:Northwoods.Go.Panel.ItemList"/>.</param>
            <seealso cref="P:Northwoods.Go.Panel.ItemCategoryProperty"/>
        </member>
        <member name="F:Northwoods.Go.Panel._WarnedAboutNoItemTemplate">
            @hidden @internal
        </member>
        <member name="F:Northwoods.Go.Panel._DefaultItemTemplate">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Panel.FindTemplateForItemData(System.Object,System.Double,System.String)">
            @hidden @internal
            <param name="data">a data item in the ItemList, of any type.</param>
            <param name="idx">the zero-based index of the item to be created.</param>
            <param name="cat">the category.</param>
        </member>
        <member name="P:Northwoods.Go.Panel.IsAtomic">
            @hidden @internal
            <summary>
            Determines whether or not this Panel's elements participate in object picking
            (FindObjectAt, FindObjectsIn, FindObjectNear, etc).
            </summary>
            <remarks>
            This is set to true if the Panel is of type <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid">Grid</see>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.IsClipping">
             <summary>
             For <see cref="T:Northwoods.Go.Spot"/> Panels: Gets or sets whether this Panel's main element clips instead of fills.
             </summary>
             <remarks>
             The main element will not paint its stroke, if it has any.
             This assumes that the main element is a Shape.
            
             For <see cref="T:Northwoods.Go.Group"/>s: Gets or sets whether this Group's Placeholder clips its member nodes.
             For compatibility, if the Group is a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutSpot"/> Panel, it will not clip its members.
            
             When this property is `true`, the Spot panel will size itself to be the *intersection* of the main element bounds and
             all other elements' bounds, rather than the union of these bounds.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.IsOpposite">
            <summary>
            For <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutHorizontal">Horizontal</see> and <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutVertical">Vertical</see> Panels:
            gets or sets whether this Panel arranges its contents from the
            typical side (left and top, respectively), or the opposite side (right and bottom, respectively).
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Panel.IsEnabled">
             <summary>
             Gets or sets whether this Panel or any GraphObject inside the panel actually responds to user click events.
             </summary>
             <remarks>
             May be used as a Binding target.
             See how this property is used in <a href="https://github.com/NorthwoodsSoftware/GoDiagram/blob/main/Extensions/GraphObjects/Buttons/Buttons.cs">Buttons.cs</a>.
            
             This property does not have any effect on picking ("hit-testing") -- that behavior is implemented
             by the <see cref="P:Northwoods.Go.GraphObject.Pickable"/> property.
             When this property is false, non-click events may still occur on this panel or on objects within this panel.
             This property is normally only used for Panels that are <see cref="P:Northwoods.Go.GraphObject.IsActionable"/>.
            
             Call <see cref="M:Northwoods.Go.GraphObject.IsEnabledElement"/> to decide whether a particular object can be clicked.
             </remarks>
             <seealso cref="M:Northwoods.Go.GraphObject.IsEnabledElement"/>
             <seealso cref="P:Northwoods.Go.GraphObject.EnabledChanged"/>
             <seealso cref="P:Northwoods.Go.GraphObject.IsActionable"/>
             <seealso cref="P:Northwoods.Go.GraphObject.Pickable"/>
        </member>
        <member name="M:Northwoods.Go.Panel._WalkIsEnabled(Northwoods.Go.GraphObject,System.Boolean)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Panel.AlignmentFocusName">
            <summary>
            For Panels which are elements of Spot Panels: Gets or sets the name
            of this Panel's element that should be used as the alignment object instead of this Panel.
            </summary>
            <remarks>
            This allows Spot Panels to align objects that are nested in the element tree of its own elements.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Set(Northwoods.Go.Panel)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Apply(System.Action{Northwoods.Go.Panel})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.Panel.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayout">
             <summary>
             This is the abstract base class for all Panel Layouts, which inform the possible Panel types.
             It is possible to create your own Panel type by creating a subclass of PanelLayout,
             though this is not common and not recommended for beginners.
             </summary>
             <remarks>
             By default, GoDiagram has 12 Panel types, each corresponding to a PanelLayout subclass:
               - "Position", `PanelLayoutPosition`
               - "Horizontal", `PanelLayoutHorizontal`
               - "Vertical", `PanelLayoutVertical`
               - "Spot", `PanelLayoutSpot`
               - "Auto", `PanelLayoutAuto`
               - "Table", `PanelLayoutTable`
               - "Viewbox", `PanelLayoutViewbox`
               - "TableRow", `PanelLayoutTableRow`
               - "TableColumn", `PanelLayoutTableColumn`
               - "Link", `PanelLayoutLink`
               - "Grid", `PanelLayoutGrid`
               - "Graduated", `PanelLayoutGraduated`
            
             Adding a new Layout is done by defining a new singleton class that extends PanelLayout.
            
             Each PanelLayout must define a <see cref="M:Northwoods.Go.PanelLayouts.PanelLayout.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)"/> and <see cref="M:Northwoods.Go.PanelLayouts.PanelLayout.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)"/> method.
             The measure method must call <see cref="M:Northwoods.Go.PanelLayouts.PanelLayout.MeasureElement(Northwoods.Go.GraphObject,System.Double,System.Double,System.Double,System.Double)"/> with each element of the Panel,
             which sets each element's <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/>. These bounds can be used to determine object layout.
             The arrange method must call <see cref="M:Northwoods.Go.PanelLayouts.PanelLayout.ArrangeElement(Northwoods.Go.GraphObject,System.Double,System.Double,System.Double,System.Double,System.Nullable{Northwoods.Go.Rect})"/> with each element of the Panel to position the objects relative to the Panel.
             Remember that each Panel defines its own coordinate system, which is used for sizing and positioning of the panel's elements.
            
             An instance of a PanelLayout is shared by all copies of a Panel that uses it.
            
             There is an example PanelLayout in the <a href="../../samples/panelLayout.html">PanelLayout sample</a>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayout.#ctor">
            <summary>
            This class is abstract.  Define your own subclass if you want to implement a custom panel layout.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayout.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
             <summary>
             Given the available size, measure the Panel and
             determine its expected drawing size.
             </summary>
             <remarks>
             This must call <see cref="M:Northwoods.Go.PanelLayouts.PanelLayout.MeasureElement(Northwoods.Go.GraphObject,System.Double,System.Double,System.Double,System.Double)"/> with each Panel element, which will set the
             <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> of those elements. Depending on how the Panel intends to lay out its elements,
             the programmer must construct the `union` by setting `union.Width` and `union.Height` of the supplied argument.
             For example PanelLayoutHorizontal measures its elements and sums their widths to set its `union.Width`,
             and takes the maximum of their heights to set its `union.Height`.
            
             This union must reflect the measured size of the Panel. After measure is called, the Panel class will modify this union Rect,
             constraining its size by the Panel's <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>, <see cref="P:Northwoods.Go.GraphObject.MinSize"/>, and <see cref="P:Northwoods.Go.GraphObject.MaxSize"/>,
             before passing it to <see cref="M:Northwoods.Go.PanelLayouts.PanelLayout.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)"/>.
             </remarks>
             <param name="panel">Panel which called this layout</param>
             <param name="width">expected width of the Panel, informed by any containing Panel and by the Panel's own
             <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>, <see cref="P:Northwoods.Go.GraphObject.MinSize"/>, and <see cref="P:Northwoods.Go.GraphObject.MaxSize"/>.
             Often Infinity.</param>
             <param name="height">expected height of the Panel.</param>
             <param name="elements">List of Panel elements</param>
             <param name="union">rectangle to be modified to contain the expected union bounds of every element in the Panel,
             to be potentially used in <see cref="M:Northwoods.Go.PanelLayouts.PanelLayout.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)"/>.</param>
             <param name="minw">expected minimum width of the Panel, informed by any containing Panel. Often zero.</param>
             <param name="minh">expected minimum height of the Panel.</param>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayout.MeasureElement(Northwoods.Go.GraphObject,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Given the available size, measure one element of the Panel and
            determine its expected drawing size. This sets the <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> of the element,
            which can then be used to determine the arrangement of elements in the PanelLayout.
            </summary>
            <param name="obj">Panel which called this layout</param>
            <param name="width">expected width of the GraphObject</param>
            <param name="height">expected height of the GraphObject</param>
            <param name="minw">minimum width of the GraphObject</param>
            <param name="minh">minimum height of the GraphObject</param>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayout.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
             <summary>
             After measuring, a Panel must arrange each element, giving the elements a position and size in the Panel's coordinate system.
             </summary>
             <remarks>
             This must call <see cref="M:Northwoods.Go.PanelLayouts.PanelLayout.ArrangeElement(Northwoods.Go.GraphObject,System.Double,System.Double,System.Double,System.Double,System.Nullable{Northwoods.Go.Rect})"/> with each Panel element, which will set that element's <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
            
             For arranging some elements, it is useful to know the total unioned area of every element, which is given as the `union` argument.
             This Rect can be used to right-align or center-align, etc, elements within an area.
            
             For example, PanelLayoutHorizontal arranges each element sequentially, starting with an `X` value of `0`,
             and increasing it by each previous element's <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> `Width`.
             The horizontal Panel arranges each element with a `Y` value determined by  the `union` argument's `Height`
             considering the <see cref="P:Northwoods.Go.GraphObject.Alignment"/> of the element, and the GraphObject's own <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> `Height`.
             </remarks>
             <param name="panel">Panel which called this layout</param>
             <param name="elements">Array of Panel elements</param>
             <param name="union"></param> rectangle, if properly constructed in <see cref="M:Northwoods.Go.PanelLayouts.PanelLayout.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)"/>, that contains the expected union bounds of every element in the Panel.
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayout.ArrangeElement(Northwoods.Go.GraphObject,System.Double,System.Double,System.Double,System.Double,System.Nullable{Northwoods.Go.Rect})">
             <summary>
             Arranges the GraphObject onto its parent Panel.
             </summary>
             <remarks>
             The passed-in numbers typically account for <see cref="P:Northwoods.Go.GraphObject.Margin"/> and other offsets.
             This sets <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
            
             The `x` and `y` coordinates are where GraphObjects will be placed within the Panel's own coordinates
             (from the Panel's top-left corner). The `width` and `height` are the size it will take up within the Panel's coordinates.
            
             This sets the <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> of the `obj`.
             </remarks>
             <param name="obj">GraphObject to be arranged.</param>
             <param name="x">The final x value of ActualBounds that the Panel computes for the GraphObject.</param>
             <param name="y">The final y value of ActualBounds that the Panel computes for the GraphObject.</param>
             <param name="width">The final width value of ActualBounds that the Panel computes for the GraphObject.</param>
             <param name="height">The final height value of ActualBounds that the Panel computes for the GraphObject.</param>
             <param name="clipRect">an optional area to constrain this ActualBounds to when picking and drawing.
             By default, this is only used with Table Panel elements, which are clipped to their cell sizes.</param>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayout.RemeasureElement(Northwoods.Go.GraphObject)">
             <summary>
             Uncommon: Force a given GraphObject to remeasure in the near future.
             </summary>
             <remarks>
             If a PanelLayout is not just measuring elements, but must also modify some of its elements,
             this must be called on those elements <em>before</em> modifications are made.
             This prevents the elements from potentially remeasuring
             the entire visual tree, which would cause an infinite loop.
            
             Normally, panels do not modify the dimensions of their elements. In other words, a Panel
             would not normally set a property like <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> or <see cref="P:Northwoods.Go.TextBlock.Text"/>
             or <see cref="P:Northwoods.Go.Shape.Geometry"/> on any of their elements. Some custom panels may wish to do this,
             especially if the programmer knows it will not affect the size of any containing Panel.
            
             Calling this method before changing a property preempts the remeasuring of any <em>containing</em> Panels,
             ensuring only the GraphObject and its own child elements will be remeasured.
            
             This is used in <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutViewbox"/> on its one element.
             It modifies that element's <see cref="P:Northwoods.Go.GraphObject.Scale"/> and is certain that will not
             affect Panels up the visual tree.
             </remarks>
             <param name="obj"></param>
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutAuto">
            <summary>
            Resizes the main element to fit around the other elements;
            the main element is the first GraphObject with <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> set to true,
            or else the first GraphObject if none have that property set to true.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutAuto.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutAuto.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
            <summary>
            The main object is sized around all the other ones.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutAuto.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Arrange children in Auto panel.
            </summary>
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutGraduated">
            <summary>
            Used to draw regular tick marks and labels along some shape.
            The main element is the first GraphObject with <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> set to true,
            or else the first GraphObject if none have that property set to true.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutGraduated.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated.MeasureGraduatedTicks(Northwoods.Go.Panel,Northwoods.Go.GraphObject,System.Collections.Generic.List{Northwoods.Go.PanelLayouts.GraduatedMark},Northwoods.Go.Rect@)">
            @hidden @internal
            <summary>
            Use main element as the measure, then perform a union with ticks/text.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated.MeasureGraduatedLabels(Northwoods.Go.Panel,Northwoods.Go.TextBlock,System.Collections.Generic.List{Northwoods.Go.PanelLayouts.GraduatedMark},Northwoods.Go.Rect@)">
            @hidden @internal
            <summary>
            Use main element as the measure, then perform a union.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated.DetermineGraduatedMarks(Northwoods.Go.Panel,Northwoods.Go.Shape)">
            @hidden @internal
            <summary>
            Traverse main path and determine points and angles for where ticks/text will be placed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated._WeighAngle(System.Double,System.Double,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Given some fraction along a segment, determine the average or weighted angle between it and a neigboring segment.
            The average is taken if right at the beginning or end, or a weight is found if the angles are close (approximating a curve).
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated._CollectTickIntervals(Northwoods.Go.Panel)">
            @hidden @internal
            <summary>
            Get the various intervals for ticks/text being drawn along the main shape of a Graduated Panel.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated._ShouldDrawTick(Northwoods.Go.Panel,System.Double,System.Collections.Generic.List{System.Int32})">
            @hidden @internal
            <summary>
            See if a tick should be drawn on a Graduated panel, considering its value,
            and whether other ticks with greater intervals would be drawn.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated.Draw(Northwoods.Go.Panel,Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated._SetGraduatedTickTransform(Northwoods.Go.Shape,Northwoods.Go.Point,Northwoods.Go.Rect,System.Double,Northwoods.Go.Rect,System.Double,Northwoods.Go.Spot)">
            @hidden @internal
            <summary>
            Set the transform such that when we draw, the context gets adjusted correctly for a particular tick.
            </summary>
            <param name="s"></param>
            <param name="pt"></param>
            <param name="mainab"></param>
            <param name="angle"></param>
            <param name="mb">Shape.MeasuredBounds</param>
            <param name="sw">Shape.StrokeWidth</param>
            <param name="align">Shape.AlignmentFocus</param>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated._SetGraduatedLabelTransform(Northwoods.Go.GraphObject,Northwoods.Go.Rect,Northwoods.Go.Rect,Northwoods.Go.Rect,Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Since we aren't measuring the temp text during drawing, we need to set the transform manually
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGraduated._CopyGraduatedLabelProperties(Northwoods.Go.TextBlock,Northwoods.Go.TextBlock)">
            @hidden @internal
            <summary>
            Copy measure/drawing properties from the Graduated Panel's label TextBlock to the temporary textblock.
            We don't want everything from the CloneProtected functions since they would overwrite some saved info.
            </summary>
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutGrid">
            <summary>
            Used to draw regular patterns of lines.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutGrid.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGrid.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGrid.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGrid.Draw(Northwoods.Go.Panel,Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGrid._ShouldDraw(System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            @hidden @internal
            <summary>
            See if the Nth line should be drawn on a grid panel, considering both its frequency
            and whether any other frequency lines would be drawn at this point.
            </summary>
            <param name="n">an integer</param>
            <param name="freq">the interval, normally 1, may be negative to mean ignore conflicts with other shapes in the orientation</param>
            <param name="offidx">a non-negative integer, normally 0, from 0 to Math.Abs(freq)</param>
            <param name="ints"></param>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutGrid._CollectIntervals(Northwoods.Go.Panel)">
            @hidden @internal
            <summary>
            For now, just assume LineH, LineV, BarH, and BarV Shape.Figure values.
            Unlike GoXam, no support for Shape.Offset, just Shape.Interval.
            </summary>
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutHorizontal">
            <summary>
            Lays out the elements horizontally with their <see cref="P:Northwoods.Go.GraphObject.Alignment"/> property dictating their alignment on the Y-axis.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutHorizontal.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutHorizontal.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutHorizontal.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutLink">
            <summary>
            Used for <see cref="T:Northwoods.Go.Link"/>s and adornments that act as Links.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutLink.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutLink.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutLink.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutLink.MeasureLinkPath(Northwoods.Go.Part,System.Double,System.Double,Northwoods.Go.Shape)">
            @hidden @internal
            <summary>
            For Link Shapes only.
            Create a Shape's measured bounds based on its geometry while making some assumptions:
            - The geometry exists
            - There is no stretch and width/height do not matter
            These conditions should almost never be assumed, except when the shape is a main element of a Link.
            This function replaces both Measure and MeasureProtected.
            </summary>
            <param name="panel"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="linkpath">the Shape's part, which will always be a Link or Link Adornment</param>
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition">
            <summary>
            The default PanelLayout, arranges each element according to their <see cref="P:Northwoods.Go.GraphObject.Position"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutPosition.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutPosition.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Measure all elements to get the bounding box of the panel.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutPosition.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Arrange children according to their positions.
            </summary>
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutSpot">
            <summary>
            Arranges GraphObjects about a main element using the <see cref="P:Northwoods.Go.GraphObject.Alignment"/> and <see cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/> properties;
            the main element is the first GraphObject with <see cref="P:Northwoods.Go.GraphObject.IsPanelMain"/> set to true,
            or else the first GraphObject if none have that property set to true.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutSpot.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutSpot.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Elements measured according to alignment spots around a main element.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutSpot.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Arrange children in spot panel.
            </summary>
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutTable">
            <summary>
            Arranges GraphObjects into rows and columns; set the <see cref="P:Northwoods.Go.GraphObject.Row"/> and <see cref="P:Northwoods.Go.GraphObject.Column"/> properties on each element.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutTable.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutTable.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutTable.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutTableRow">
            <summary>
            Organizational Panel type that is only valid inside of a Table panel;
            this Panel ignores its angle and scale, and does not have a meaningful size on its own,
            it is only an organizational container for other elements of a Panel.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutTableRow.Instance">
            <summary>
            This holds a static singleton instances of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as values for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutTableRow.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutTableRow.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutTableColumn">
            <summary>
            Organizational Panel type that is only valid inside of a Table panel;
            this Panel ignores its angle and scale, and does not have a meaningful size on its own,
            it is only an organizational container for other elements of a Panel.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutTableColumn.Instance">
            <summary>
            This holds a static singleton instances of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as values for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutTableColumn.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutTableColumn.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutVertical">
            <summary>
            Lays out the elements vertically with their <see cref="P:Northwoods.Go.GraphObject.Alignment"/> property dictating their alignment on the X-axis.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutVertical.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutVertical.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutVertical.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.PanelLayouts.PanelLayoutViewbox">
            <summary>
            Rescales a single GraphObject to fit inside the panel depending on the panel's <see cref="P:Northwoods.Go.Panel.ViewboxStretch"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PanelLayouts.PanelLayoutViewbox.Instance">
            <summary>
            This holds a static singleton instance of the <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>,
            used as a value for <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <remarks>
            These static <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/>s are used when defining templates:
            <code language="cs">
            // define a simple Node template
            myDiagram.NodeTemplate =
              new Node(PanelLayoutAuto.Instance)  // the Shape will go around the TextBlock
                .Add(
                  new Shape("RoundedRectangle") {
                    StrokeWidth = 0, Fill = "white"
                  }.Bind("Fill", "Color"),  // Shape.Fill is bound to Node.Data.Color
                  new TextBlock {
                    Margin = 8,  // Specify a margin to add some room around the text
                    Font = "bold 14px sans-serif", Stroke = "#333"
                  }.Bind("Text", "Key")  // TextBlock.Text is bound to Node.Data.Key
                );
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutViewbox.Measure(Northwoods.Go.Panel,System.Double,System.Double,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect@,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Element scaled to fit inside of panel.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PanelLayouts.PanelLayoutViewbox.Arrange(Northwoods.Go.Panel,System.Collections.Generic.IList{Northwoods.Go.GraphObject},Northwoods.Go.Rect)">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.LayoutConditions">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Part.LayoutConditions"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.None">
            <summary>
            No operation on this Part causes invalidation of the <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for this Part.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.Added">
            <summary>
            This flag may be combined with other flags to indicate that
            when a Part is added to a Diagram or Group, it invalidates the <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for the Part.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.Removed">
            <summary>
            This flag may be combined with other flags to indicate that
            when a Part is removed from a Diagram or Group, it invalidates the <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for the Part.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.Shown">
            <summary>
            This flag may be combined with other flags to indicate that
            when a Part's <see cref="P:Northwoods.Go.GraphObject.Visible"/> becomes true, it invalidates the <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for the Part.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.Hidden">
            <summary>
            This flag may be combined with other flags to indicate that
            when a Part's <see cref="P:Northwoods.Go.GraphObject.Visible"/> becomes false, it invalidates the <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for the Part.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.NodeSized">
            <summary>
            This flag may be combined with other flags to indicate that
            when a Node or simple Part's <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> changes size, it invalidates the <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for the Part;
            this flag is ignored for Parts that are Links.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.GroupLayout">
            <summary>
            This flag may be combined with other flags to indicate that
            when a <see cref="T:Northwoods.Go.Group"/> has been laid out, it invalidates the <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for that Group;
            this flag is ignored for Parts that are not Groups.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.NodeReplaced">
            <summary>
            This flag may be combined with other flags to indicate that
            when a Node or simple Part's <see cref="P:Northwoods.Go.Part.Category">Category</see> changes, it invalidates the <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for the Part;
            this flag is ignored for Parts that are Links.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.Standard">
            <summary>
            The <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for the Part is invalidated when the Part is added or removed or replaced
            from the Diagram or Group, or when it changes visibility or size, or when a Group's layout has been performed.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LayoutConditions.All">
            @hidden @internal
            <summary>
            The <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for the Part is invalidated when the Part is added or removed
            from the Diagram or Group or when it changes visibility or size.
            </summary>
            @constant
        </member>
        <member name="T:Northwoods.Go.Part">
             <summary>
             This is the base class for all user-manipulated top-level objects.
             Because it inherits from <see cref="T:Northwoods.Go.Panel"/>, it is automatically a visual container
             of other <see cref="T:Northwoods.Go.GraphObject"/>s.
             Because it thus also inherits from <see cref="T:Northwoods.Go.GraphObject"/>, it also has properties such as
             <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>, <see cref="P:Northwoods.Go.GraphObject.ContextMenu"/>, and <see cref="P:Northwoods.Go.GraphObject.Visible"/>.
             </summary>
             <remarks>
             If you just want an object that users can select and manipulate,
             you can create an instance of this class.
            
             If you want an object that also supports being connected by links to other objects,
             use the <see cref="T:Northwoods.Go.Node"/> class, which inherits from Part.
             Create those connections by using instances of the <see cref="T:Northwoods.Go.Link"/> class.
            
             If you want a node that logically contains a subgraph of nodes and links,
             use the <see cref="T:Northwoods.Go.Group"/> class, which inherits from <see cref="T:Northwoods.Go.Node"/>.
            
             If you want an object that decorates another Part, without having to modify that Part,
             use the <see cref="T:Northwoods.Go.Adornment"/> class.
             Adornments do not support linking or grouping or being selected.
            
             You can construct a Part, add <see cref="T:Northwoods.Go.GraphObject"/>s to it programmatically,
             and then add the part to a diagram by calling <see cref="M:Northwoods.Go.Diagram.Add(Northwoods.Go.Part)"/>.
             However it is commonplace to add data to a model by setting its <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> or calling <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>,
             or for <see cref="T:Northwoods.Go.Link"/>s, setting the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> or calling <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>.
             Such actions will cause a diagram that is displaying the model to copy a template,
             which is a Part that may have data <see cref="T:Northwoods.Go.Models.Binding"/>s, and add the new part to the diagram.
             The <see cref="P:Northwoods.Go.Panel.Data"/> property will refer to that data object in the model.
            
             Some examples of adding Parts to a Diagram:
             <code language="cs">
             // A simple Part template
             myDiagram.NodeTemplate =
               new Part(PanelLayoutHorizontal.Instance)
                 .Add(
                   new Shape("Circle") { Width = 20, Height = 20 },
                   new TextBlock("Hello World")
                 );
             // Node templates can be either Nodes, or simple Parts
             // (But not Groups, Adornments, or Links)
            
             // Adds copies of the NodeTemplate bound to the specified node data:
             myDiagram.Model.NodeDataSource = new List&lt;MyNodeData&gt; {
               new MyNodeData { Key = "Alpha" },
               new MyNodeData { Key = "Beta" }
             };
            
             // Adds one copy of the NodeTemplate bound to the given node data:
             myDiagram.Model.AddNodeData(new MyNodeData { Key = "Gamma" });
             </code>
            
             <p class="boxread">
             See the <a href="../../intro/usingModels.Html">Introduction on using Models</a>
             for examples and more information.
             </p>
            
             <h3>Layers and Z-ordering</h3>
            
             Parts added to a Diagram exist in one of the Diagram's <see cref="T:Northwoods.Go.Layer"/>s.
             You can specify which layer the part should be in by setting <see cref="P:Northwoods.Go.Part.LayerName"/>.
             Parts cannot be nested in the visual tree -- they cannot be added to other Parts of Panels.
            
             Parts can be individually z-ordered within a layer by setting <see cref="P:Northwoods.Go.Part.ZOrder"/>.
             Parts within the same layer that have a higher z-order number will be drawn above parts with a lower number.
             <h3>Size and Position</h3>
            
             The size and position of a part are given by its <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
             The size is determined by the <see cref="T:Northwoods.Go.GraphObject"/>s that are elements inside this part.
             You can change the position by setting <see cref="P:Northwoods.Go.GraphObject.Position"/> or <see cref="P:Northwoods.Go.Part.Location"/>.
            
             The "location" of a part is commonly the same as its "position".
             The "position" is always the point that is at the top-left corner of the area occupied by the part.
             But the "location" may be different from the "position" if you want to think of the part as being "at" a different spot in the part.
             For example, you might want the "location" to be at the center of a <see cref="T:Northwoods.Go.Picture"/> that has a <see cref="T:Northwoods.Go.TextBlock"/> title of arbitrary size.
             In this case you would set the <see cref="P:Northwoods.Go.Part.LocationSpot"/> to be <see cref="F:Northwoods.Go.Spot.Center"/> and the <see cref="P:Northwoods.Go.Part.LocationElementName"/>
             to be the name of the Picture element in your Part.
            
             A part may be selected or de-selected by setting its <see cref="P:Northwoods.Go.Part.IsSelected"/> property.
             This may also happen due to a call to <see cref="M:Northwoods.Go.Diagram.Select(Northwoods.Go.Part)"/> or other operations that change the selection.
             The user may change this property as part of the operation of the <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>,
             due to the user's mouse click, if the part is <see cref="P:Northwoods.Go.Part.Selectable"/>.
             <h3>Ability Properties (Permissions)</h3>
            
             There are many properties named "...able", that control what operations the user may perform on this part.
             These properties correspond to the similarly named properties on <see cref="T:Northwoods.Go.Diagram"/> and <see cref="T:Northwoods.Go.Layer"/> that govern the
             behavior for all parts in all layers or for all parts in the given layer.
             For example, the <see cref="P:Northwoods.Go.Part.Copyable"/> property corresponds to the properties <see cref="P:Northwoods.Go.Diagram.AllowCopy"/> and <see cref="P:Northwoods.Go.Layer.AllowCopy"/>.
            
             For each of these "ability" properties there is a corresponding "Can..." predicate.
             For example, the <see cref="M:Northwoods.Go.Part.CanCopy"/> predicate is false if any of the three previously named properties is false.
             Commands and tools will normally call these predicates rather than just looking at Part properties.
            
             <p class="boxread">
             For more discussion about permissions, please read: <a href="../../intro/permissions.Html">Permissions</a>.
             </p>
            
             As previously mentioned, each <see cref="T:Northwoods.Go.Diagram"/> supports the notion of selected parts.
             One way of displaying that a part is selected is by modifying the part.
             You can set the <see cref="P:Northwoods.Go.Part.SelectionChanged"/> property to be a function that is called when the value of <see cref="P:Northwoods.Go.Part.IsSelected"/> has changed;
             it is passed the Part as the first argument.
             The function can modify the color of one or more <see cref="T:Northwoods.Go.GraphObject"/>s in the visual tree of that Part.
             Or perhaps it could toggle the <see cref="P:Northwoods.Go.GraphObject.Visible"/> property of an object that is normally hidden when the part is not selected.
            
             The Part class also supports showing separate visual objects for a part when it gets selected.
             These visuals are typically used to show that the part is selected ("selection handles")
             or are used to allow the user to manipulate or modify the part with a tool ("tool handles").
             These handles are instances of <see cref="T:Northwoods.Go.Adornment"/>s.
             The <see cref="M:Northwoods.Go.Part.UpdateAdornments"/> method is responsible for showing or hiding adornments,
             normally depending on whether the part is selected.
            
             When the <see cref="P:Northwoods.Go.Part.SelectionAdorned"/> property is true, a selected part automatically gets an <see cref="T:Northwoods.Go.Adornment"/> created for it.
             By default the selection adornment is just a simple blue box around the Part, and a blue shape following the route of a selected Link.
             However you can set the <see cref="P:Northwoods.Go.Part.SelectionAdornmentTemplate"/> to an arbitrarily complex Adornment.
             This way it can show more information or buttons for executing various commands when the user selects a Part.
            
             Tool handles are shown for those mode-less mouse-down tools that need it.
             The process of updating adornments for a part will call <see cref="M:Northwoods.Go.Tools.Tool.UpdateAdornments(Northwoods.Go.Part)"/> on each tool in <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>.
             Most tools might not need special tool handles.
             But, for example, <see cref="T:Northwoods.Go.Tools.ResizingTool"/> naturally will want to create an adornment with eight resize handles
             positioned at the corners and at the middles of the sides of the selected node's visual element,
             if the node has its <see cref="M:Northwoods.Go.Part.CanResize"/> function returning true.
            
             One may not always want the whole Part to get the selection handle or all tool handles.
             Sometimes one wants to emphasize selection by highlighting a particular element within the part's visual tree.
             This can be achieved by setting the <see cref="P:Northwoods.Go.Part.SelectionElementName"/> property,
             and making sure the desired element has the same <see cref="P:Northwoods.Go.GraphObject.Name"/> property value.
            
             <p class="boxread">
             For more discussion about selection, see <a href="../../intro/selection.Html">Selection</a>.
             </p>
            
             Similarly the <see cref="P:Northwoods.Go.Part.ResizeElementName"/> and <see cref="P:Northwoods.Go.Part.RotateElementName"/> properties direct the
             corresponding <see cref="T:Northwoods.Go.Tools.ResizingTool"/> and <see cref="T:Northwoods.Go.Tools.RotatingTool"/> to operate on the particular <see cref="T:Northwoods.Go.GraphObject"/>
             in the Part's visual tree with the given name.
             That includes both providing tool handles and actually modifying properties on that object.
            
             Parts are not resizable or rotatable by default: you need to set <see cref="P:Northwoods.Go.Part.Resizable"/> and/or <see cref="P:Northwoods.Go.Part.Rotatable"/> to true.
            
             <p class="boxread">
             For more discussion about tools, see <a href="../../intro/tools.Html">Tools</a>.
             </p>
            
             A Part may be positioned (or a <see cref="T:Northwoods.Go.Link"/> may be routed) by a <see cref="T:Northwoods.Go.Layouts.Layout"/>.
             This will happen automatically if <see cref="P:Northwoods.Go.Diagram.Layout"/> or <see cref="P:Northwoods.Go.Group.Layout"/> are set.
             The default <see cref="P:Northwoods.Go.Diagram.Layout"/> will position any nodes that were not given explicit positions or location.
            
             If you set <see cref="P:Northwoods.Go.Part.IsLayoutPositioned"/> to false, this part will not participate in any of the standard layouts,
             so it will not be moved by a layout or affect other parts in a layout.
             In order for the part to get a <see cref="P:Northwoods.Go.Part.Location"/> or position you will need to supply it explicitly.
            
             As parts are added to or removed from a diagram, the <see cref="T:Northwoods.Go.Layouts.Layout"/> responsible for positioning the part is invalidated.
             This will cause the layout to be performed again in the near future, at the end of the transaction.
             This automatic layout invalidation also occurs as parts change their visibility (<see cref="P:Northwoods.Go.GraphObject.Visible"/>)
             or their size (<see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>).
             If you do want there to be a <see cref="P:Northwoods.Go.Diagram.Layout"/> but you do not want an automatic layout to happen
             after removing parts (for example), you can set <see cref="P:Northwoods.Go.Part.LayoutConditions"/> not to include the <see cref="F:Northwoods.Go.LayoutConditions.Removed"/> flag.
             In this particular case, you could set <see cref="P:Northwoods.Go.Part.LayoutConditions"/> to:
             `LayoutConditions.LayoutStandard &amp; ~LayoutConditions.LayoutRemoved`.
             It may also reasonable for your application to set it to <see cref="F:Northwoods.Go.LayoutConditions.None"/>.
             Do not forget to consider applying the same conditions to links as well as to nodes and groups.
            
             If you want to save the locations/positions of the parts in a diagram, it is commonplace to
             data bind the <see cref="P:Northwoods.Go.Part.Location"/> to a property on your node data with a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/>.
             For example:
             <code language="cs">
               new Part(PanelLayoutHorizontal.Instance) { ... }
                 .Bind("Location", "Loc", Point.Parse, Point.Stringify)
             </code>
            
             Then as the nodes are moved, whether manually by the user or automatically by a <see cref="T:Northwoods.Go.Layouts.Layout"/>,
             the model data is automatically updated with the location.
            
             <p class="boxread">
             For more discussion about related topics, see <a href="../../intro/selection.Html">Selection</a>,
             <a href="../../intro/tools.Html">Tools</a>, and
             <a href="../../intro/permissions.Html">Permissions</a>.
             </p>
            
             Parts that are templates should have no relationships with other Parts.
             Only real Parts that are in a Diagram can belong to Groups or have any Adornments.
             Only real Nodes in a Diagram can be connected with Links.
             </remarks>
             @extends Panel
             @unrestricted
        </member>
        <member name="M:Northwoods.Go.Part.#ctor">
            <summary>
            Constructs an empty Part.
            </summary>
            <remarks>
            The default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.#ctor(Northwoods.Go.PanelLayouts.PanelLayout)">
            <summary>
            Constructs an empty Part.
            The panel type must be one of the values permitted by <see cref="P:Northwoods.Go.Panel.Type"/>.
            </summary>
            <param name="type">if null, the default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Part.#ctor(System.String)">
            <summary>
            Constructs an empty Part.
            The panel type can be a string describing one of the built <see cref="T:Northwoods.Go.PanelLayouts.PanelLayout"/> types..
            </summary>
            <param name="type">if the empty string, the default Panel type is <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutPosition"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Part.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Copies properties to a cloned Part.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.DisplaceProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Fix up references in the argument object so that the argument object can get a new visual tree
            </summary>
            <param name="c">The original Part whose category is being changed by displacing its visual tree with this Part's visual tree.</param>
        </member>
        <member name="M:Northwoods.Go.Part.ApplyProtected(Northwoods.Go.GraphObject)">
            <summary>
            Copy properties from this object to the target object, which must be of the same class.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Part.RaisePartChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <summary>
            Call this method to notify that the some state has changed.
            This just calls the <see cref="P:Northwoods.Go.Part.Diagram"/>'s <see cref="M:Northwoods.Go.Diagram.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/> method.
            </summary>
            <param name="change">specifies the general nature of the change;
            permissible values include <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>, <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>,
            <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>, and <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.</param>
            <param name="propertyname">names the property that was modified.</param>
            <param name="obj">the object that was modified, typically a <see cref="T:Northwoods.Go.GraphObject"/>.</param>
            <param name="oldval">the previous or older value.</param>
            <param name="newval">the next or newer value.</param>
            <param name="oldparam">an optional value that helps describe the older value.</param>
            <param name="newparam">an optional value that helps describe the newer value.</param>
        </member>
        <member name="M:Northwoods.Go.Part.UpdateTargetBindings(System.String)">
             <summary>
             Re-evaluate all data bindings in this Part,
             in order to assign new property values to the <see cref="T:Northwoods.Go.GraphObject"/>s in this visual tree
             based on this this object's <see cref="P:Northwoods.Go.Panel.Data">Data</see> property values.
             </summary>
             <remarks>
             This method does nothing if <see cref="P:Northwoods.Go.Panel.Data">Data</see> is null.
            
             It is better to call <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/> to modify data properties,
             because that will both record changes for undo/redo and will update all bindings
             that make depend on that property.
            
             To update relationships between nodes, call <see cref="M:Northwoods.Go.Part.UpdateRelationshipsFromData"/>.
             </remarks>
             <param name="srcprop">An optional source data property name:
               when provided, only evaluates those <see cref="T:Northwoods.Go.Models.Binding"/>s that use that particular property;
               when not provided or when it is the empty string, all bindings are evaluated.</param>
             <seealso cref="M:Northwoods.Go.Part.UpdateRelationshipsFromData"/>
        </member>
        <member name="M:Northwoods.Go.Part.UpdateRelationshipsFromData">
             <summary>
             Update all of the references to nodes in case they had been modified in the model without
             properly notifying the model by calling <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)"/> or
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)"/> or other similar methods.
             </summary>
             <remarks>
             This method does not conduct a transaction, so you need to start and commit one yourself.
            
             This only updates the relationships between nodes, to have them reflect what is now declared in the model data.
             For example, in a GraphLinksModel if code has changed the value of the "To" property of a link data,
             calling this method on the corresponding <see cref="T:Northwoods.Go.Link"/> would cause the link to connect with
             the <see cref="T:Northwoods.Go.Node"/> whose data has the new key.
            
             To update <see cref="T:Northwoods.Go.GraphObject"/> properties that are data bound, call <see cref="M:Northwoods.Go.Part.UpdateTargetBindings(System.String)"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Part.UpdateTargetBindings(System.String)"/>
        </member>
        <member name="P:Northwoods.Go.Part.Key">
            <summary>
            This read-only property returns the Part's Model data key if it is in a Diagram and is backed by Model data;
            otherwise this returns the default key.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.GetKeyForNodeData(`0)"/>
        </member>
        <member name="P:Northwoods.Go.Part.Adornments">
            <summary>
            This read-only property returns a collection of the <see cref="T:Northwoods.Go.Adornment"/>s associated with this part.
            </summary>
            <remarks>
            Templates should not have any adornments.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.FindAdornment(System.String)">
            <summary>
            Find an <see cref="T:Northwoods.Go.Adornment"/> of a given category associated with this Part.
            </summary>
            <remarks>
            Templates should not have any adornments.
            </remarks>
            <returns>Returns null if no such Adornment was found.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.AddAdornment(System.String,Northwoods.Go.Adornment)">
             <summary>
             Associate an <see cref="T:Northwoods.Go.Adornment"/> with this Part, perhaps replacing any existing adornment of the same category.
             </summary>
             <remarks>
             Don't forget to set <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> before calling this method.
            
             This adds the Adornment to the <see cref="T:Northwoods.Go.Layer"/> named by <see cref="P:Northwoods.Go.Part.LayerName"/>, normally "Adornment".
            
             Adornments are also data bound to the same data that this Part has, if any.
             If the Adornment was already associated with a Part, it is unassociated with that old Part.
            
             This method should not be called on templates.
             </remarks>
             <param name="category">a string identifying the kind or role of the given adornment for this Part.</param>
             <param name="ad">the new Adornment.</param>
        </member>
        <member name="M:Northwoods.Go.Part.RemoveAdornment(System.String)">
            <summary>
            Remove any <see cref="T:Northwoods.Go.Adornment"/> of the given category that may be associated with this Part.
            </summary>
            <param name="category">a string identifying the kind or role of the given adornment for this Part.</param>
        </member>
        <member name="M:Northwoods.Go.Part.ClearAdornments">
            <summary>
            Remove all adornments associated with this part.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.UpdateAdornments">
            <summary>
            This is responsible for creating any selection <see cref="T:Northwoods.Go.Adornment"/> (if this Part <see cref="P:Northwoods.Go.Part.IsSelected"/>) and
            any tool adornments for this part.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.InvalidateAdornments">
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.ValidateAdornments">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.UpdateSelectionAdornment(Northwoods.Go.Diagram)">
            @hidden @internal
            <summary>
            This is responsible for creating or removing any selection <see cref="T:Northwoods.Go.Adornment"/>,
            depending on whether <see cref="P:Northwoods.Go.Part.IsSelected"/>.
            </summary>
            <remarks>
            By default the adornment is a <see cref="T:Northwoods.Go.Shape"/> that surrounds this part,
            or that follows the <see cref="T:Northwoods.Go.Link"/>'s route if this is a Link.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.UpdateToolAdornments(Northwoods.Go.Diagram)">
            @hidden @internal
            <summary>
            This is responsible for creating any tool <see cref="T:Northwoods.Go.Adornment"/>s for this part.
            </summary>
            <remarks>
            This iterates over the mouse-down tools,
            calling <see cref="M:Northwoods.Go.Tools.Tool.UpdateAdornments(Northwoods.Go.Part)"/> on each one.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.SetLayer(Northwoods.Go.Layer)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Part.Layer">
             <summary>
             This read-only property returns the <see cref="T:Northwoods.Go.Layer"/> that this Part is in.
             </summary>
             <remarks>
             The value is the Layer that is named with the value of <see cref="P:Northwoods.Go.Part.LayerName"/>.
             If you want to change what Layer this Part is in, change the value of <see cref="P:Northwoods.Go.Part.LayerName"/> to refer to a different Layer.
            
             This will be null if it has not yet been added to a <see cref="T:Northwoods.Go.Diagram"/>,
             or if it has already been removed from a Diagram.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.LayerName"/>
        </member>
        <member name="P:Northwoods.Go.Part.Diagram">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Diagram"/> that this Part is in.
            </summary>
            <remarks>
            This will be null if it is not in a <see cref="T:Northwoods.Go.Layer"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Part.LayerName">
             <summary>
             Gets or sets the layer name for this part.
             </summary>
             <remarks>
             The initial value is an empty string, which is the name of the default layer.
             The value of this property determines the value of <see cref="P:Northwoods.Go.Part.Layer"/>.
            
             If this part is not yet in a <see cref="T:Northwoods.Go.Diagram"/>,
             this value is used by <see cref="M:Northwoods.Go.Diagram.Add(Northwoods.Go.Part)"/>
             to determine which <see cref="T:Northwoods.Go.Layer"/> this part should go in.
             If no layer can be found with this name, it uses the default layer.
            
             Changing the value of this property while it is already in a layer
             causes it to change layers if needed.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.LayerChanged"/>
        </member>
        <member name="P:Northwoods.Go.Part.LayerChanged">
             <summary>
             Gets or sets the function to execute when this part changes layers.
             </summary>
             <remarks>
             This is typically used to modify the appearance of the part.
             This function must not change the layer of this part by setting <see cref="P:Northwoods.Go.Part.LayerName"/>.
            
             If this property value is a function, it is called with three arguments,
             this <see cref="T:Northwoods.Go.Part"/>, the old <see cref="T:Northwoods.Go.Layer"/> (may be null), and the new <see cref="T:Northwoods.Go.Layer"/> (may be null).
             By default this property is null -- no function is called.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.LayerName"/>
        </member>
        <member name="P:Northwoods.Go.Part.ZOrder">
             <summary>
             Gets or sets the z-ordering position of this Part within its Layer.
             </summary>
             <remarks>
             Within the same layer, nodes with larger z-order values are placed in front of nodes with smaller z-order values.
             When the value is double.NaN the ordering is not specified.
             The default value is double.NaN.
            
             When a <see cref="T:Northwoods.Go.Group"/> has a z-order value of double.NaN, it is automatically placed behind its member nodes and links
             that also have no z-order.
             Such automatic ordering is not guaranteed if any nodes including the groups have a numeric z-order.
             If you do want to specify the z-order of nodes, you should also specify the z-order of their containing groups
             unless those groups are in different layers.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.SortZOrder">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part._InvalidatePosition">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.ValidatePosition">
            @hidden @internal
            <summary>
            This is used in place of arrange to validate Parts when *only* their position/location has changed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part._MeasureRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Shared code amount each MeasureProtected routine. Sets MeasuredBounds.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Northwoods.Go.Part._SetTransformAngle(Northwoods.Go.Transform,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Shared code used by MeasureRect and ValidateTransforms.
            </summary>
            <param name="tt"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="P:Northwoods.Go.Part.LocationElement">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.GraphObject"/> that determines the location of this Part.
            </summary>
            <remarks>
            The value will be in the visual tree of this Part and is usually named with
            the value of <see cref="P:Northwoods.Go.Part.LocationElementName"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Part.MinLocation">
            <summary>
            Gets or sets the minimum location of this Part to which the user may drag using the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>.
            </summary>
            <remarks>
            Value must be of type <see cref="T:Northwoods.Go.Point"/>.
            The initial value is (-Infinity, -Infinity), which imposes no position constraint.
            A X value of double.NaN causes <see cref="M:Northwoods.Go.Diagram.ComputeMove(Northwoods.Go.Part,Northwoods.Go.Point,Northwoods.Go.DraggingOptions)"/> to use the part's current location's X value as the minimum,
            and similarly for double.NaN as the Y value.
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.Location"/>
            <seealso cref="P:Northwoods.Go.Part.MaxLocation"/>
            <seealso cref="P:Northwoods.Go.Part.DragComputation"/>
            <seealso cref="P:Northwoods.Go.Part.Movable"/>
        </member>
        <member name="P:Northwoods.Go.Part.MaxLocation">
            <summary>
            Gets or sets the maximum location of this Part to which the user may drag using the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>.
            </summary>
            <remarks>
            Value must be of type <see cref="T:Northwoods.Go.Point"/>.
            The initial value is (Infinity, Infinity), which imposes no position constraint.
            A X value of double.NaN causes <see cref="M:Northwoods.Go.Diagram.ComputeMove(Northwoods.Go.Part,Northwoods.Go.Point,Northwoods.Go.DraggingOptions)"/> to use the part's current location's X value as the maximum,
            and similarly for double.NaN as the Y value.
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.Location"/>
            <seealso cref="P:Northwoods.Go.Part.MinLocation"/>
            <seealso cref="P:Northwoods.Go.Part.DragComputation"/>
            <seealso cref="P:Northwoods.Go.Part.Movable"/>
        </member>
        <member name="P:Northwoods.Go.Part.LocationElementName">
             <summary>
             Gets or sets the name of the <see cref="T:Northwoods.Go.GraphObject"/> that provides the location of this Part.
             </summary>
             <remarks>
             This name determines the value of <see cref="P:Northwoods.Go.Part.LocationElement"/>.
             The actual <see cref="P:Northwoods.Go.Part.Location"/> also depends on the <see cref="P:Northwoods.Go.Part.LocationSpot"/>.
            
             The initial value is an empty string, meaning the whole Part itself determines the location.
             If you want to use a particular GraphObject in the visual tree of this Part,
             set this property to be the <see cref="P:Northwoods.Go.GraphObject.Name"/> of the element that you want to be the <see cref="P:Northwoods.Go.Part.LocationElement"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.Location"/>
             <seealso cref="P:Northwoods.Go.Part.LocationSpot"/>
        </member>
        <member name="P:Northwoods.Go.Part.LocationSpot">
             <summary>
             Gets or sets the location Spot of this Node, the spot on the <see cref="P:Northwoods.Go.Part.LocationElement"/>
             that is used in positioning this part in the diagram.
             </summary>
             <remarks>
             Value must be of the type <see cref="T:Northwoods.Go.Spot"/>.
             The initial value is `Spot.TopLeft`.
             The value must be a specific spot -- i.e. one for which <see cref="M:Northwoods.Go.Spot.IsSpot"/> is true.
            
             It is commonplace to set this property to `Spot.Center`, so that the <see cref="P:Northwoods.Go.Part.Location"/>
             has a value corresponding to the point at the center of this Part's <see cref="P:Northwoods.Go.Part.LocationElement"/> element.
             But the <see cref="P:Northwoods.Go.GraphObject.Position"/> of a Part is always at the top-left corner
             point of the <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.Location"/>
             <seealso cref="P:Northwoods.Go.Part.LocationElementName"/>
        </member>
        <member name="M:Northwoods.Go.Part.Move(Northwoods.Go.Point,System.Boolean)">
             <summary>
             Move this part and any parts that are owned by this part to a new position.
             </summary>
             <remarks>
             If this part is a <see cref="T:Northwoods.Go.Group"/>, it also moves all of its members, recursively.
             If this part is a <see cref="T:Northwoods.Go.Link"/>, it also moves all of its label nodes.
            
             This method does not perform a transaction or start any animation.
             </remarks>
             <param name="newpos">a new <see cref="T:Northwoods.Go.Point"/> in document coordinates.</param>
             <param name="useLocation">true if you want to set the <see cref="P:Northwoods.Go.Part.Location"/> instead of the position. False by default.</param>
        </member>
        <member name="M:Northwoods.Go.Part.Move(System.Double,System.Double,System.Boolean)">
            <summary>
            Move this part and any parts that are owned by this part to a new position.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Part.Move(Northwoods.Go.Point,System.Boolean)"/> without the caller having to allocate a new <see cref="T:Northwoods.Go.Point"/>.
            </remarks>
            <param name="newx">a new X value in document coordinates.</param>
            <param name="newy">a new Y value in document coordinates.</param>
            <param name="useLocation">true if you want to set the <see cref="P:Northwoods.Go.Part.Location"/> instead of the position. False by default.</param>
        </member>
        <member name="M:Northwoods.Go.Part.IsVisible">
             <summary>
             This predicate is true if this Part can be seen.
             </summary>
             <remarks>
             Parts that can be seen can be manipulated by the user, can take space in the document, or can take part in a layout,
             among many possibilities.
             Note that the value of this predicate can often be false even while <see cref="P:Northwoods.Go.GraphObject.Visible"/> is true.
            
             A Part is not seen if it is not <see cref="P:Northwoods.Go.GraphObject.Visible"/> or if it is in a <see cref="P:Northwoods.Go.Part.Layer"/> that is not <see cref="P:Northwoods.Go.Layer.Visible"/>.
            
             If a Part is a member of a <see cref="T:Northwoods.Go.Group"/> and the Group is not <see cref="P:Northwoods.Go.Group.IsSubGraphExpanded"/>, the part is not seen.
             (The containing Group might still be visible.)
            
             If a <see cref="T:Northwoods.Go.Node"/> is a "tree child" of a Node that is not <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/>, the node is not seen.
             (The parent Node might still be visible.)
            
             If a <see cref="T:Northwoods.Go.Link"/> is connected to or from a <see cref="T:Northwoods.Go.Node"/> that is not `IsVisible()`
             and is not a member of a <see cref="T:Northwoods.Go.Group"/> that `isVisible()`, the link is not seen.
            
             If a <see cref="T:Northwoods.Go.Node"/> is a "link label" of a <see cref="T:Northwoods.Go.Link"/> and that Link is not `IsVisible()`, the node is not seen.
            
             This is different from <see cref="M:Northwoods.Go.GraphObject.IsVisibleElement"/>,
             which ignores whether the <see cref="T:Northwoods.Go.Layer"/> is visible and just checks <see cref="P:Northwoods.Go.GraphObject.Visible"/>
             up the chain of containing <see cref="T:Northwoods.Go.Panel"/>s.
            
             If you want to know whether a Part is in the Diagram's viewport, try:
             <code language="cs">
               diagram.ViewportBounds.Contains(part.ActualBounds);
             </code>
            
             or:
             <code language="cs">
               diagram.ViewportBounds.Intersects(part.ActualBounds);
             </code>
             </remarks>
             <returns>true if <see cref="P:Northwoods.Go.GraphObject.Visible"/> is true and if <see cref="P:Northwoods.Go.Layer.Visible"/> is true.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.MadeVisible(System.Boolean)">
            @hidden @internal
            <summary>
            Called when a part's visibility changes, from .Visible or other indirect sources (like layer.Visible).
            </summary>
            <remarks>
            Calling this with true does not guarantee that the object is visible. It may still be invisible for other reasons.
            Calling this with false does guarantee that the object is no longer visible.
            </remarks>
            <param name="value">whether the part was just made visible (true) or just made invisible (false)</param>
        </member>
        <member name="M:Northwoods.Go.Part.FindElement(System.String)">
            @hidden @internal
            <param name="name">The name to search for, using a case-sensitive string comparison.</param>
            <returns>If no such named object can be found, this returns null.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.ClearNameMap">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.GetRelativePoint(Northwoods.Go.GraphObject,Northwoods.Go.Spot)">
            <summary>
            (undocumented)
            Gets a point on a GraphObject relative to this Part.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.GetDocumentBounds">
            <summary>
            Returns the Rect in document coordinates for this object's bounds.
            </summary>
            <remarks>
            If this GraphObject is a Part, the rect will be identical to its <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
            </remarks>
            <returns>in document coordinates.</returns>
            <seealso cref="M:Northwoods.Go.GraphObject.GetDocumentPoint(Northwoods.Go.Spot)"/>
        </member>
        <member name="M:Northwoods.Go.Part.EnsureBounds">
             <summary>
             Measures if needed to make sure the <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> and <see cref="P:Northwoods.Go.GraphObject.NaturalBounds"/> are all real numbers,
             primarily to get the actual width and height.
             </summary>
             <remarks>
             <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> will get a real width and height, but the x and y values may continue to be `double.NaN`
             if they were that way beforehand.
            
             This is sometimes necessary to call when defining custom layouts or implementing virtualization,
             so that it can work with the actual size of the nodes.
            
             For efficiency, do not call this method unnecessarily.
             </remarks>
             <seealso cref="M:Northwoods.Go.Diagram.EnsureBounds"/>
        </member>
        <member name="M:Northwoods.Go.Part.DetermineOffset">
            @hidden @internal
            <summary>
            Find the difference between position and location. This can only be called if the Part is arranged.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.GetDrawnSize(Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Takes a rect (usually a part's actualBounds) and expands it according to the shadow size.
            </summary>
            <param name="rect">the actual bounds of an object.</param>
            <returns>a rectangle in document coordinates.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.GetLogicalStrokeWidth">
            @hidden @internal
            <summary>
            Exists so that Shape does not need to import Adornment.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.GetMaxMiter">
            @hidden @internal
            <summary>
            The MaxMiter is the maximum possible miter value of all Shapes in a panel.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.ResetMaxMiter">
            @hidden @internal
            <summary>
            Called when a shape changes within a panel (added, removed, StrokeWidth, StrokeMiterLimit changed)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.Arrange">
            @hidden @internal
            <summary>
            Arrange a GraphObject onto its diagram.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.OnBoundsChanged(Northwoods.Go.Rect,Northwoods.Go.Rect)">
            @hidden @internal
            <summary>
            Called at the end of GraphObject.Arrange, Part.Arrange, and Part.ValidatePosition (used in lieu of arrange).
            </summary>
        </member>
        <member name="P:Northwoods.Go.Part.Location">
             <summary>
             Gets or sets the position of this part in document coordinates,
             based on the <see cref="P:Northwoods.Go.Part.LocationSpot"/> in this part's <see cref="P:Northwoods.Go.Part.LocationElement"/>.
             </summary>
             <remarks>
             Value must be of type <see cref="T:Northwoods.Go.Point"/>.
             The initial value is Point(double.NaN, double.NaN).
             It is commonplace to data bind this property to some property on your model node data.
            
             The value is related to the <see cref="P:Northwoods.Go.GraphObject.Position"/>.
             For Parts, both are in document coordinates; setting one property will set the other property.
             By default both will have the same value.
             However, by setting either or both of <see cref="P:Northwoods.Go.Part.LocationSpot"/> and <see cref="P:Northwoods.Go.Part.LocationElementName"/>,
             the location will be determined by a spot in the <see cref="P:Northwoods.Go.Part.LocationElement"/>,
             a <see cref="T:Northwoods.Go.GraphObject"/> that is in the visual tree of this Part.
             The <see cref="P:Northwoods.Go.GraphObject.Position"/> will always refer to the point at the top-left corner of the whole part.
            
             The <see cref="P:Northwoods.Go.Part.MinLocation"/> and <see cref="P:Northwoods.Go.Part.MaxLocation"/> limit the location of a part, not its position.
             Grid snapping will normally locate the location to be on grid points.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.LocationElementName"/>
             <seealso cref="P:Northwoods.Go.Part.LocationSpot"/>
             <seealso cref="P:Northwoods.Go.Part.Movable"/>
             <seealso cref="P:Northwoods.Go.Part.MaxLocation"/>
             <seealso cref="P:Northwoods.Go.Part.MinLocation"/>
             <seealso cref="P:Northwoods.Go.Part.DragComputation"/>
        </member>
        <member name="M:Northwoods.Go.Part.SetLoc(Northwoods.Go.Point,Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            This is not called during animation, instead, it calls SetPosInplace.
            This replaces _Location with value.
            </summary>
            <param name="value"></param>
            <param name="old">old value ( a copy of _Location at time of call)</param>
            <returns>true if successful, false if a no-op (only true calls raisechanged)</returns>
        </member>
        <member name="M:Northwoods.Go.Part.SetPos(Northwoods.Go.Point,System.Double,System.Double)">
            @hidden @internal
            <summary>
            This is not called during animation, instead, it calls SetPosInplace.
            </summary>
            <returns>true if successful, false if a no-op (only true calls raiseChanged)</returns>
        </member>
        <member name="M:Northwoods.Go.Part.AnimatePosLoc(Northwoods.Go.Diagram,Northwoods.Go.Point,System.Double,System.Double)">
            @hidden @internal
            <param name="diagram"></param>
            <param name="value">a position (not location)</param>
            <param name="oldx">the old position x value</param>
            <param name="oldy">the old position y value</param>
        </member>
        <member name="M:Northwoods.Go.Part.SetPosInplace(System.Double,System.Double,System.Boolean)">
            @hidden @internal
            <summary>
            Used during animation and tools (with temp objects) only.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.SetPositionFlag">
            @hidden @internal
            <summary>
            Sets the flag for locLastSet to false (so position is the accurate one), even if the position setter is a no-op.
            </summary>
            <remarks>
            Even though its a no-op, we need to make sure the LocLastSet ultimately can be set back to true,
            so InvalidatePosition is called even though the values may all be valid
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.DeterminePosLoc">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.UseLoc(Northwoods.Go.Diagram,Northwoods.Go.Point)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.UsePos(Northwoods.Go.Diagram,Northwoods.Go.Point)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.NotifyDiagram(System.Boolean,Northwoods.Go.Diagram)">
            @hidden @internal
            <summary>
            After this is called you must invalidate the draw.
            </summary>
            <param name="inside">whether or not the part is inside of the document bounds.</param>
            <param name="diagram"></param>
        </member>
        <member name="M:Northwoods.Go.Part.IsReadyToMeasureArrange">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.IsNodeLike">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.IsLinkLike">
            @hidden @internal
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.Part.Category">
             <summary>
             Gets or sets the category of this part,
             typically used to distinguish different kinds of nodes or links.
             </summary>
             <remarks>
             The initial value is an empty string, which is the default category.
             Any new value must be a string.
             This should not be set in templates.
            
             When building Parts for node data or link data in a model,
             the <see cref="T:Northwoods.Go.Diagram"/> will call <see cref="M:Northwoods.Go.Models.Model`3.GetCategoryForNodeData(`0)"/> or
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetCategoryForLinkData(`3)"/> to get the category string for the data object.
             The diagram uses this value to look up a template in <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/>,
             <see cref="P:Northwoods.Go.Diagram.LinkTemplateMap"/> or <see cref="P:Northwoods.Go.Diagram.GroupTemplateMap"/>.
             That template is copied to create the actual Part that is added to the diagram.
             The diagram will set this property to remember the category it used.
            
             Note that the class of the new Part must be the same as the class of the original Part.
             For example, a Node cannot be replaced by a simple Part or vice-versa.
             Nor can a Link be replaced by a subclass of Link or vice-versa.
            
             To change the category for a Part created for model data, call <see cref="M:Northwoods.Go.Models.Model`3.SetCategoryForNodeData(`0,System.String)"/> or
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetCategoryForLinkData(`3,System.String)"/>.
            
             This property is also used to distinguish <see cref="T:Northwoods.Go.Adornment"/>s on a Part.
             In this scenario you create the Adornment, often indirectly by specifying a template,
             and set this property explicitly.
             For example, <see cref="M:Northwoods.Go.Tools.ResizingTool.UpdateAdornments(Northwoods.Go.Part)"/> creates a resizing Adornment from the
             <see cref="P:Northwoods.Go.Part.ResizeAdornmentTemplate"/> and sets its category to be "Resizing".
             Changing the category of an existing Adornment will update any adorned part's association.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Part.Self">
            @hidden @internal
            <summary>
            Just for internal use when displacing a Part due to a change in category, only for undo/redo.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part._DisplaceWith(Northwoods.Go.Part,System.String,System.String)">
            @hidden @internal
            <param name="part">a Part copy of the new template specified by the new category.</param>
            <param name="oldcat">the old category.</param>
            <param name="newcat">the new category.</param>
        </member>
        <member name="M:Northwoods.Go.Part.CanCopy">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Part.Copyable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowCopy"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowCopy"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may copy this part.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.CanDelete">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Part.Deletable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowDelete"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowDelete"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may delete this part.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.CanEdit">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Part.TextEditable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowTextEdit"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowTextEdit"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may edit this part.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.CanGroup">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Part.Groupable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowGroup"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowGroup"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may group this part.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.CanMove">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Part.Movable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowMove"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowMove"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may move this part.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.CanReshape">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Part.Reshapable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowReshape"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowReshape"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may reshape this part.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.CanResize">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Part.Resizable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowResize"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowResize"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may resize this part.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.CanRotate">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Part.Rotatable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowRotate"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowRotate"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may rotate this part.</returns>
        </member>
        <member name="M:Northwoods.Go.Part.CanSelect">
            <summary>
            This predicate returns true if <see cref="P:Northwoods.Go.Part.Selectable"/> is true,
            if the layer's <see cref="P:Northwoods.Go.Layer.AllowSelect"/> is true, and
            if the diagram's <see cref="P:Northwoods.Go.Diagram.AllowSelect"/> is true.
            </summary>
            <remarks>
            This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
            but commands and tools should check those properties.
            </remarks>
            <returns>true if the user may select this part.</returns>
        </member>
        <member name="P:Northwoods.Go.Part.Copyable">
            <summary>
            Gets or sets whether the user may copy this part.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
            <seealso cref="M:Northwoods.Go.Part.CanCopy"/>
        </member>
        <member name="P:Northwoods.Go.Part.Deletable">
            <summary>
            Gets or sets whether the user may delete this part.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
            <seealso cref="M:Northwoods.Go.Part.CanDelete"/>
        </member>
        <member name="P:Northwoods.Go.Part.TextEditable">
            <summary>
            Gets or sets whether the user may do in-place text editing on <see cref="T:Northwoods.Go.TextBlock"/>s in this part
            that have <see cref="P:Northwoods.Go.TextBlock.Editable"/> set to true.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
            <seealso cref="M:Northwoods.Go.Part.CanEdit"/>
            <seealso cref="P:Northwoods.Go.TextBlock.Editable"/>
        </member>
        <member name="P:Northwoods.Go.Part.Groupable">
             <summary>
             Gets or sets whether the user may group this part to be a member of a new <see cref="T:Northwoods.Go.Group"/>.
             </summary>
             <remarks>
             The initial value is true.
            
             The grouping command is implemented by <see cref="M:Northwoods.Go.CommandHandler.GroupSelection"/>
             and depends on <see cref="P:Northwoods.Go.CommandHandler.ArchetypeGroupData"/> having been set to a node data object.
             A Group can be ungrouped by the user if you set <see cref="P:Northwoods.Go.Group.Ungroupable"/> to true.
             </remarks>
             <seealso cref="M:Northwoods.Go.Part.CanGroup"/>
        </member>
        <member name="P:Northwoods.Go.Part.Movable">
            <summary>
            Gets or sets whether the user may move this part.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
            <seealso cref="M:Northwoods.Go.Part.CanMove"/>
            <seealso cref="P:Northwoods.Go.Part.DragComputation"/>
            <seealso cref="P:Northwoods.Go.Part.MaxLocation"/>
            <seealso cref="P:Northwoods.Go.Part.MinLocation"/>
        </member>
        <member name="P:Northwoods.Go.Part.SelectionAdorned">
            <summary>
            Gets or sets whether a selection adornment is shown for this part when it is selected.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.SelectionChanged"/>
            <seealso cref="P:Northwoods.Go.Part.SelectionAdornmentTemplate"/>
        </member>
        <member name="P:Northwoods.Go.Part.IsInDocumentBounds">
            <summary>
            Gets or sets whether this Part is part of the document bounds.
            </summary>
            <remarks>
            The initial value is true.
            A value of false causes <see cref="M:Northwoods.Go.Diagram.ComputeBounds"/> to ignore this part.
            If the value is false, it is possible that user will not be able to scroll far enough to see this part,
            if the part's <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> are outside of the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Part.IsLayoutPositioned">
             <summary>
             Gets or sets whether a <see cref="T:Northwoods.Go.Layouts.Layout"/> positions this Node or routes this Link.
             </summary>
             <remarks>
             This property affects the value of <see cref="M:Northwoods.Go.Part.CanLayout"/>.
            
             The initial value is true, meaning that this part is laid out by the layout responsible for this Part.
             If this part is a member of a <see cref="T:Northwoods.Go.Group"/>, it is the <see cref="P:Northwoods.Go.Group.Layout"/>,
             otherwise it is the <see cref="P:Northwoods.Go.Diagram.Layout"/>.
            
             A value of false means that this part is not affected by and does not affect any automatic layout,
             so the <see cref="P:Northwoods.Go.Part.LayoutConditions"/> property is ignored.
             You will need to make sure that it has a real <see cref="P:Northwoods.Go.Part.Location"/> or <see cref="P:Northwoods.Go.GraphObject.Position"/> value,
             or else the Part might not be visible anywhere in the diagram.
            
             Another way of controlling when layouts are invalidated is by setting
             <see cref="P:Northwoods.Go.Part.LayoutConditions"/> or <see cref="P:Northwoods.Go.Layouts.Layout.IsInitial"/> or <see cref="P:Northwoods.Go.Layouts.Layout.IsOngoing"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Part.Selectable">
             <summary>
             Gets or sets whether the user may select this part.
             </summary>
             <remarks>
             The initial value is true.
            
             If you set this to true you may also want to set <see cref="P:Northwoods.Go.Part.SelectionElementName"/>
             to the <see cref="P:Northwoods.Go.GraphObject.Name"/>d element that you want to be adorned
             when the Part is selected.
             </remarks>
             <seealso cref="M:Northwoods.Go.Part.CanSelect"/>
             <seealso cref="P:Northwoods.Go.Part.IsSelected"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionAdorned"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionElementName"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionAdornmentTemplate"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionChanged"/>
        </member>
        <member name="P:Northwoods.Go.Part.Reshapable">
            <summary>
            Gets or sets whether the user may reshape this part.
            </summary>
            <remarks>
            The initial value is false.
            </remarks>
            <seealso cref="M:Northwoods.Go.Part.CanReshape"/>
            <seealso cref="T:Northwoods.Go.Tools.LinkReshapingTool"/>
        </member>
        <member name="P:Northwoods.Go.Part.Resizable">
             <summary>
             Gets or sets whether the user may resize this part.
             </summary>
             <remarks>
             The initial value is false.
            
             If you set this to true you may also want to set <see cref="P:Northwoods.Go.Part.ResizeElementName"/>
             to the <see cref="P:Northwoods.Go.GraphObject.Name"/>d element that you want the user to resize.
             It is also commonplace to add a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> of that named element's
             <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> in order to save to the model data the value that the user
             set via the <see cref="T:Northwoods.Go.Tools.ResizingTool"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Part.CanResize"/>
             <seealso cref="P:Northwoods.Go.Part.ResizeElementName"/>
             <seealso cref="P:Northwoods.Go.Part.ResizeCellSize"/>
             <seealso cref="P:Northwoods.Go.Part.ResizeAdornmentTemplate"/>
        </member>
        <member name="P:Northwoods.Go.Part.Rotatable">
             <summary>
             Gets or sets whether the user may rotate this part.
             </summary>
             <remarks>
             The initial value is false.
            
             If you set this to true you may also want to set <see cref="P:Northwoods.Go.Part.RotateElementName"/>
             to the <see cref="P:Northwoods.Go.GraphObject.Name"/>d element that you want the user to rotate.
             It is also commonplace to add a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> of that named element's
             <see cref="P:Northwoods.Go.GraphObject.Angle"/> in order to save to the model data the value that the user
             set via the <see cref="T:Northwoods.Go.Tools.RotatingTool"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Part.CanRotate"/>
             <seealso cref="P:Northwoods.Go.Part.RotateElementName"/>
             <seealso cref="P:Northwoods.Go.Part.RotateAdornmentTemplate"/>
        </member>
        <member name="P:Northwoods.Go.Part.IsSelected">
             <summary>
             Gets or sets whether this Part is selected.
             </summary>
             <remarks>
             The initial value is false.
            
             Selected parts typically are shown either with an <see cref="T:Northwoods.Go.Adornment"/>
             or with a different appearance by changing the brush or visibility of one or
             more of the <see cref="T:Northwoods.Go.GraphObject"/>s within the part.
            
             Changing this value does not by itself raise any "ChangingSelection" and "ChangedSelection" <see cref="T:Northwoods.Go.DiagramEvent"/>s.
             <see cref="T:Northwoods.Go.Tools.Tool"/>s and the <see cref="T:Northwoods.Go.CommandHandler"/> and methods such as <see cref="M:Northwoods.Go.Diagram.Select(Northwoods.Go.Part)"/> do raise those DiagramEvents
             because they want to surround changes to this property with a single "ChangingSelection" DiagramEvent beforehand and a single "ChangedSelection" afterwards.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.Selectable"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionAdorned"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionChanged"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionElementName"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionAdornmentTemplate"/>
        </member>
        <member name="P:Northwoods.Go.Part.IsHighlighted">
             <summary>
             Gets or sets whether this Part is highlighted.
             </summary>
             <remarks>
             The initial value is false.
            
             Highlighted parts may be shown with a different appearance by changing the brush or visibility of one or
             more of the <see cref="T:Northwoods.Go.GraphObject"/>s within the part.
             One way of doing that is by using binding.
             Consider part of the definition of a Node template:
             <code language="cs">
               new Shape { ... }
                 // Shape.Fill is bound to Node.Data.Color
                 .Bind("Fill", "Color")
                 // Shape.Stroke is red when Node.IsHighlighted is true, black otherwise
                 .Bind(new Binding("Stroke", "IsHighlighted",
                                   (h, _) => { return (bool)h ? "red" : "black"; }).OfElement())
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.HighlightedChanged"/>
             <seealso cref="P:Northwoods.Go.Diagram.Highlighteds"/>
             <seealso cref="M:Northwoods.Go.Diagram.Highlight(Northwoods.Go.Part)"/>
             <seealso cref="M:Northwoods.Go.Diagram.ClearHighlighteds"/>
        </member>
        <member name="P:Northwoods.Go.Part.IsShadowed">
             <summary>
             Gets or sets whether this part will draw shadows.
             </summary>
             <remarks>
             The initial value is false.
            
             By default, setting this property to true will attempt to draw shadows only
             on the GraphObjects in this Part that appear to act as background objects, and
             not on GraphObjects that appear to be in front of other GraphObjects in the Part.
            
             To finely control shadows, you may need to set <see cref="P:Northwoods.Go.GraphObject.ShadowVisible"/> on
             elements of this Part, so that they explicitly do or do not get shadowed accordingly.
            
             The color of the shadow is determined by <see cref="P:Northwoods.Go.Part.ShadowColor"/>.
             The opacity of the shadow color is multiplied by the opacity of the shadowed object's brush.
             So, for example, if you have a <see cref="T:Northwoods.Go.Panel"/> with a <see cref="P:Northwoods.Go.GraphObject.Background"/>
             that is "transparent", the shadow that is drawn for the panel will also be transparent.
            
             The direction of the shadow that is cast is controlled by <see cref="P:Northwoods.Go.Part.ShadowOffset"/>,
             and is independent of the <see cref="P:Northwoods.Go.Diagram.Scale"/>.
             The sharpness of the shadow is controlled by <see cref="P:Northwoods.Go.Part.ShadowBlur"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.ShadowOffset"/>
             <seealso cref="P:Northwoods.Go.Part.ShadowColor"/>
             <seealso cref="P:Northwoods.Go.Part.ShadowBlur"/>
             <seealso cref="P:Northwoods.Go.GraphObject.ShadowVisible"/>
        </member>
        <member name="P:Northwoods.Go.Part.IsAnimated">
            <summary>
            Gets or sets whether this part may be animated.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Part.HighlightedChanged">
             <summary>
             Gets or sets the function to execute when this <see cref="P:Northwoods.Go.Part.IsHighlighted"/> changes.
             </summary>
             <remarks>
             This is typically used to modify the appearance of the part.
             This function must not highlight or unhighlight any parts.
            
             If this property value is a function, it is called with one argument,
             this <see cref="T:Northwoods.Go.Part"/> that whose <see cref="P:Northwoods.Go.Part.IsHighlighted"/> value changed.
             By default this property is null.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.IsHighlighted"/>
        </member>
        <member name="P:Northwoods.Go.Part.SelectionElementName">
             <summary>
             Gets or sets the name of the <see cref="T:Northwoods.Go.GraphObject"/> that should get a selection handle
             when this part is selected.
             </summary>
             <remarks>
             The value of this property affects the value of <see cref="P:Northwoods.Go.Part.SelectionElement"/>.
             The initial value is an empty string, meaning the whole <see cref="T:Northwoods.Go.Part"/> itself gets any selection handle.
            
             If no GraphObject has a <see cref="P:Northwoods.Go.GraphObject.Name"/> that is this name, <see cref="P:Northwoods.Go.Part.SelectionElement"/> returns the whole Part.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.Selectable"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionElement"/>
        </member>
        <member name="P:Northwoods.Go.Part.SelectionAdornmentTemplate">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Adornment"/> template used to create a selection handle for this Part.
             </summary>
             <remarks>
             If this is null, depending on the class of this Part, the value of <see cref="P:Northwoods.Go.Diagram.NodeSelectionAdornmentTemplate"/>, <see cref="P:Northwoods.Go.Diagram.GroupSelectionAdornmentTemplate"/>,
             or <see cref="P:Northwoods.Go.Diagram.LinkSelectionAdornmentTemplate"/> is used instead.
            
             It is commonplace to make use of a <see cref="T:Northwoods.Go.Placeholder"/> in an <see cref="T:Northwoods.Go.Adornment"/> for a <see cref="T:Northwoods.Go.Node"/>, <see cref="T:Northwoods.Go.Group"/>, or simple <see cref="T:Northwoods.Go.Part"/>.
             The Placeholder represents the <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> of the adorned Part.
             For <see cref="T:Northwoods.Go.Link"/>s, the Adornment must be of <see cref="P:Northwoods.Go.Panel.Type"/> <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutLink"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.Selectable"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionElementName"/>
        </member>
        <member name="P:Northwoods.Go.Part.SelectionElement">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.GraphObject"/> that should get a selection handle when this part is selected.
            </summary>
            <remarks>
            The value will be in the visual tree of this Part and is usually named with
            the value of <see cref="P:Northwoods.Go.Part.SelectionElementName"/>.
            When the <see cref="P:Northwoods.Go.Part.SelectionElementName"/> is unspecified, this whole Part is used as the "selection object".
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.Selectable"/>
            <seealso cref="P:Northwoods.Go.Part.SelectionElementName"/>
        </member>
        <member name="P:Northwoods.Go.Part.SelectionChanged">
             <summary>
             Gets or sets the function to execute when this part is selected or deselected.
             </summary>
             <remarks>
             This is typically used to modify the appearance of the part.
             This function must not select or deselect any parts.
            
             If this property value is a function, it is called with one argument,
             this <see cref="T:Northwoods.Go.Part"/> that was selected or that became unselected.
             When it is called, the value of <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> is temporarily set to true.
             By default this property is null.
            
             This function is called with <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> temporarily set to true,
             so that any changes to <see cref="T:Northwoods.Go.GraphObject"/>s are not recorded in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             You do not need to start and commit any transaction in this function.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.IsSelected"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionAdorned"/>
             <seealso cref="P:Northwoods.Go.Part.SelectionAdornmentTemplate"/>
        </member>
        <member name="P:Northwoods.Go.Part.ResizeAdornmentTemplate">
             <summary>
             Gets or sets the adornment template used to create a resize handle <see cref="T:Northwoods.Go.Adornment"/> for this part.
             </summary>
             <remarks>
             This is used by the <see cref="T:Northwoods.Go.Tools.ResizingTool"/>, <see cref="P:Northwoods.Go.Tools.ToolManager.ResizingTool"/>.
            
             If an Adornment is supplied, it is normally a <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutSpot"/> panel that contains a <see cref="T:Northwoods.Go.Placeholder"/>
             with some number of resize handles at the four corners or at the four side midpoints.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.Resizable"/>
             <seealso cref="P:Northwoods.Go.Part.ResizeElementName"/>
             <seealso cref="T:Northwoods.Go.Tools.ResizingTool"/>
        </member>
        <member name="P:Northwoods.Go.Part.ResizeElementName">
            <summary>
            Gets or sets the name of the <see cref="T:Northwoods.Go.GraphObject"/> that should get a resize handle
            when this part is selected.
            </summary>
            <remarks>
            The value of this property affects the value of <see cref="P:Northwoods.Go.Part.ResizeElement"/>.
            The initial value is an empty string, meaning the whole <see cref="T:Northwoods.Go.Part"/> itself gets any resize handle.
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.Resizable"/>
            <seealso cref="P:Northwoods.Go.Part.ResizeElement"/>
            <seealso cref="T:Northwoods.Go.Tools.ResizingTool"/>
        </member>
        <member name="P:Northwoods.Go.Part.ResizeElement">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.GraphObject"/> that should get resize handles when this part is selected.
            </summary>
            <remarks>
            The value will be in the visual tree of this Part and is usually named with
            the value of <see cref="P:Northwoods.Go.Part.ResizeElementName"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.Resizable"/>
            <seealso cref="P:Northwoods.Go.Part.ResizeElementName"/>
            <seealso cref="T:Northwoods.Go.Tools.ResizingTool"/>
        </member>
        <member name="P:Northwoods.Go.Part.ResizeCellSize">
            <summary>
            Gets or sets the width and height multiples used when resizing.
            </summary>
            <remarks>
            By default this property is the Size(double.NaN, double.NaN).
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.Resizable"/>
            <seealso cref="P:Northwoods.Go.Part.ResizeElementName"/>
            <seealso cref="T:Northwoods.Go.Tools.ResizingTool"/>
        </member>
        <member name="P:Northwoods.Go.Part.RotateAdornmentTemplate">
             <summary>
             Gets or sets the adornment template used to create a rotation handle <see cref="T:Northwoods.Go.Adornment"/> for this part.
             </summary>
             <remarks>
             This is used by the <see cref="T:Northwoods.Go.Tools.RotatingTool"/>, <see cref="P:Northwoods.Go.Tools.ToolManager.RotatingTool"/>.
            
             This Adornment should not have a <see cref="T:Northwoods.Go.Placeholder"/> in it, because the RotatingTool will position it away from the
             <see cref="P:Northwoods.Go.Part.RotateElement"/> at its <see cref="P:Northwoods.Go.GraphObject.Angle"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.Rotatable"/>
             <seealso cref="P:Northwoods.Go.Part.RotateElementName"/>
             <seealso cref="T:Northwoods.Go.Tools.RotatingTool"/>
        </member>
        <member name="P:Northwoods.Go.Part.RotateElementName">
            <summary>
            Gets or sets the name of the <see cref="T:Northwoods.Go.GraphObject"/> that should get a rotate handle
            when this part is selected.
            </summary>
            <remarks>
            The value of this property affects the value of <see cref="P:Northwoods.Go.Part.RotateElement"/>.
            The initial value is an empty string, meaning the whole <see cref="T:Northwoods.Go.Part"/> itself gets any rotate handle.
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.Rotatable"/>
            <seealso cref="P:Northwoods.Go.Part.RotateElement"/>
            <seealso cref="T:Northwoods.Go.Tools.RotatingTool"/>
        </member>
        <member name="P:Northwoods.Go.Part.RotateElement">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.GraphObject"/> that should get rotate handles when this part is selected.
            </summary>
            <remarks>
            The value will be in the visual tree of this Part and is usually named with
            the value of <see cref="P:Northwoods.Go.Part.RotateElementName"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.Rotatable"/>
            <seealso cref="P:Northwoods.Go.Part.RotateElementName"/>
            <seealso cref="T:Northwoods.Go.Tools.RotatingTool"/>
        </member>
        <member name="P:Northwoods.Go.Part.RotationSpot">
             <summary>
             Gets or sets the spot on the <see cref="P:Northwoods.Go.Part.RotateElement"/>
             that is used in rotating this part with the <see cref="T:Northwoods.Go.Tools.RotatingTool"/>.
             </summary>
             <remarks>
             Value must be of the type <see cref="T:Northwoods.Go.Spot"/>.
             The value must be a specific spot -- i.e. one for which <see cref="M:Northwoods.Go.Spot.IsSpot"/> is true, or else `Spot.Default`.
            
             If the value is `Spot.Default`, the <see cref="T:Northwoods.Go.Tools.RotatingTool"/> uses
             the locationSpot if the <see cref="P:Northwoods.Go.Part.RotateElement"/> is equal to the <see cref="P:Northwoods.Go.Part.LocationElement"/>, otherwise
             it uses `Spot.Center`.
            
             The initial value is `Spot.Default`.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.RotateElementName"/>
        </member>
        <member name="P:Northwoods.Go.Part.Text">
            <summary>
            Gets or sets a text string that is associated with this part.
            </summary>
            <remarks>
            The initial value is an empty string.
            This value is often used for sorting.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Part.ContainingGroup">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Group"/> of which this <see cref="T:Northwoods.Go.Part"/> or <see cref="T:Northwoods.Go.Node"/> is a member.
             </summary>
             <remarks>
             This will be null if this is a top-level part.
            
             You cannot set this property on a <see cref="T:Northwoods.Go.Link"/>; it is set for you automatically
             based on the group memberships of the connected nodes.
             You cannot set this property on an <see cref="T:Northwoods.Go.Adornment"/> at all.
            
             A template should not be a member of any group.
             </remarks>
             <seealso cref="P:Northwoods.Go.Group.MemberParts"/>
             <seealso cref="M:Northwoods.Go.Part.FindTopLevelPart"/>
             <seealso cref="P:Northwoods.Go.Part.IsTopLevel"/>
        </member>
        <member name="M:Northwoods.Go.Part.InvalidateContainingGroup">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.InvalidateDraw">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.InvalidateMeasure(System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.InternalAddProtected(System.Boolean)">
            @hidden @internal
            <summary>
            Called by Layer.InternalAdd, overridden on Node and Group and Link.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.InternalRemoveProtected(System.Boolean)">
            @hidden @internal
            <summary>
            Called by Layer.InternalRemove, overridden on Node and Group and Link.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.DeleteCascade">
            @hidden @internal
            <summary>
            Overridden by Node and Group and Link.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Part.ContainingGroupChanged">
             <summary>
             Gets or sets the function that is called after this Part has changed which <see cref="T:Northwoods.Go.Group"/> it belongs to, if any.
             </summary>
             <remarks>
             This is typically used to modify the appearance of the part.
             The first argument will be this Part.
             The second argument will be the old Group, or null if it had been a top-level part.
             The third argument will be the new Group, or null if it is now a top-level part.
            
             If the value is a function, that function must not modify the part's containing <see cref="T:Northwoods.Go.Group"/>.
             The containing Group has already been changed -- trying to change it again may produce undefined behavior.
            
             The initial value is null -- no function is called.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.FindSubGraphLevel">
             <summary>
             Return how deep this part is in the hierarchy of nested <see cref="T:Northwoods.Go.Group"/>s.
             </summary>
             <remarks>
             For parts that have no <see cref="P:Northwoods.Go.Part.ContainingGroup"/> this returns zero.
            
             If you want to know how deep a Node is in a tree structure, call <see cref="M:Northwoods.Go.Node.FindTreeLevel"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Part._FindSubGraphLevel(Northwoods.Go.Part)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.FindTopLevelPart">
             <summary>
             Gets the top-level Part for this part, which is itself when <see cref="P:Northwoods.Go.Part.IsTopLevel"/> is true.
             </summary>
             <remarks>
             If this Part is a member of a <see cref="T:Northwoods.Go.Group"/>, this returns the top-level Part for that Group.
             If this is a <see cref="T:Northwoods.Go.Node"/> that is a label node for a labeled <see cref="T:Northwoods.Go.Link"/>, this returns the top-level Part for that Link.
            
             If this is a Node and you are searching for the root of the tree that this node is in, use <see cref="M:Northwoods.Go.Node.FindTreeRoot"/>.
             </remarks>
             <returns>This will not return null.</returns>
        </member>
        <member name="M:Northwoods.Go.Part._FindTopLevelPart(Northwoods.Go.Part)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Part.IsTopLevel">
            <summary>
            This read-only property is true when this part is not member of any <see cref="T:Northwoods.Go.Group"/> node
            nor is it a label node for a <see cref="T:Northwoods.Go.Link"/>.
            </summary>
            <seealso cref="P:Northwoods.Go.Part.ContainingGroup"/>
            <seealso cref="P:Northwoods.Go.Node.LabeledLink"/>
        </member>
        <member name="M:Northwoods.Go.Part.IsMemberOf(Northwoods.Go.Part)">
             <summary>
             This predicate is true if this part is a member of the given <see cref="T:Northwoods.Go.Part"/>, perhaps indirectly.
             </summary>
             <remarks>
             If the given part is a <see cref="T:Northwoods.Go.Group"/> and this part is a member of the given group, this returns true.
             If this part is a <see cref="T:Northwoods.Go.Node"/> and it is a label node for a link that is a member of the given group, this returns true.
             Otherwise this searches recursively any <see cref="P:Northwoods.Go.Part.ContainingGroup"/> of the given part.
            
             A part cannot be contained by itself.
             A template should not be a member of any group.
            
             If this is a Node and you want to find whether it is in a subtree whose root is a given Node, use <see cref="M:Northwoods.Go.Node.IsInTreeOf(Northwoods.Go.Node)"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.FindUnnestedNodes(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
            @hidden @internal
            <param name="coll">a collection of Parts</param>
            <returns>of non-Links.</returns>
        </member>
        <member name="M:Northwoods.Go.Part._IsMemberOf(Northwoods.Go.Part,Northwoods.Go.Part)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Part.FindCommonContainingGroup(Northwoods.Go.Part)">
             <summary>
             Find the <see cref="T:Northwoods.Go.Group"/> that perhaps indirectly contains both this part and another one.
             </summary>
             <remarks>
             If this is a Group and it contains the OTHER Part, return this.
             If the OTHER Part is a Group and it contains this Part, return that OTHER Part.
            
             This returns null if the two parts are unrelated in the hierarchy of part membership.
             If non-null, the result is a <see cref="T:Northwoods.Go.Group"/>.
            
             If you want to find the <see cref="T:Northwoods.Go.Node"/> that is the tree parent of two Nodes,
             call <see cref="M:Northwoods.Go.Node.FindCommonTreeParent(Northwoods.Go.Node)"/>.
             </remarks>
             <returns>may be null</returns>
        </member>
        <member name="P:Northwoods.Go.Part.LayoutConditions">
             <summary>
             Gets or sets flags that control when the <see cref="T:Northwoods.Go.Layouts.Layout"/> that is responsible for this Part is invalidated.
             </summary>
             <remarks>
             The initial value is <see cref="F:Northwoods.Go.LayoutConditions.Standard"/>,
             which causes the layout for this part to be invalidated when the part is added or removed or changes visibility or size.
            
             Individual layout conditions include: <see cref="F:Northwoods.Go.LayoutConditions.Added"/>, <see cref="F:Northwoods.Go.LayoutConditions.Removed"/>,
             <see cref="F:Northwoods.Go.LayoutConditions.Shown"/>, <see cref="F:Northwoods.Go.LayoutConditions.Hidden"/>, and <see cref="F:Northwoods.Go.LayoutConditions.NodeSized"/>.
            
             This property is ignored when <see cref="P:Northwoods.Go.Part.IsLayoutPositioned"/> is false -- no operation on this Part
             will by itself cause the responsible Layout to be invalidated.
            
             You can also control when layouts are invalidated is by setting <see cref="P:Northwoods.Go.Layouts.Layout.IsInitial"/> or <see cref="P:Northwoods.Go.Layouts.Layout.IsOngoing"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.CanLayout">
             <summary>
             This predicate is called by Layout implementations to decide whether this Part
             should be positioned and might affect the positioning of other Parts.
             </summary>
             <remarks>
             This is false if <see cref="P:Northwoods.Go.Part.IsLayoutPositioned"/> is false, if <see cref="M:Northwoods.Go.Part.IsVisible"/> returns false,
             or if the part is in a temporary <see cref="P:Northwoods.Go.Part.Layer"/>.
            
             This does not check <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/> or <see cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>,
             but commands and tools should check those properties.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Part.CanInvalidateLayout(Northwoods.Go.LayoutConditions)">
             @hidden @internal
             <summary>
             This predicate is called by <see cref="M:Northwoods.Go.Part.InvalidateLayout(Northwoods.Go.LayoutConditions)"/> with a layout condition in order to decide whether
             to invalidate the Layout responsible for this Part after a change identified by the condition argument.
             </summary>
             <remarks>
             If the condition argument flag is not set in the value of <see cref="P:Northwoods.Go.Part.LayoutConditions"/>, this returns false.
             In particular, a Part that becomes not visible may still cause a layout invalidation
             if <see cref="P:Northwoods.Go.Part.LayoutConditions"/> includes <see cref="F:Northwoods.Go.LayoutConditions.Hidden"/>, even though that Part
             will not participate in the layout.
            
             This predicate is also false if <see cref="P:Northwoods.Go.Part.IsLayoutPositioned"/> is false
             or if the part is in a temporary <see cref="T:Northwoods.Go.Layer"/>.
             </remarks>
             <param name="condition">the reason that the layout should be invalidated,
               a value such as <see cref="F:Northwoods.Go.LayoutConditions.Added"/> or <see cref="F:Northwoods.Go.LayoutConditions.Shown"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Part.InvalidateLayout(Northwoods.Go.LayoutConditions)">
             <summary>
             Invalidate the <see cref="T:Northwoods.Go.Layouts.Layout"/> that is responsible for positioning this Part.
             </summary>
             <remarks>
             If this part is in a <see cref="T:Northwoods.Go.Group"/>, invalidate its <see cref="P:Northwoods.Go.Group.Layout"/>, if it has one.
             Otherwise invalidate the <see cref="P:Northwoods.Go.Diagram.Layout"/>.
            
             But note that if <see cref="P:Northwoods.Go.Part.IsLayoutPositioned"/> is false, or if it is in a temporary <see cref="T:Northwoods.Go.Layer"/>,
             or if it is not in a diagram or group, no layout is invalidated.
             </remarks>
             <param name="condition">the reason that the layout should be invalidated;
             if this argument is not supplied, any value of <see cref="P:Northwoods.Go.Part.LayoutConditions"/> other than <see cref="F:Northwoods.Go.LayoutConditions.None"/>
             will allow the layout to be invalidated.</param>
        </member>
        <member name="M:Northwoods.Go.Part.CanIncludeBounds">
            @hidden @internal
            <summary>
            This predicate is called by Diagram's DocumentBounds computation and its InternalAdd/Remove methods
            </summary>
        </member>
        <member name="M:Northwoods.Go.Part.GatherCollection(System.Collections.Generic.HashSet{Northwoods.Go.Part},Northwoods.Go.Part,System.Boolean,System.Int32,System.Nullable{System.Boolean},System.Func{Northwoods.Go.Part,System.Boolean})">
            @hidden @internal
            <summary>
            Static function for collecting the member Parts of a Group,
            or the tree children of a Node, or maybe even both.
            </summary>
            <remarks>
            This excludes any Adornments that might be encountered.
            This will include the initial part P in the result collection,
            unless the predicate is false for that part.
            </remarks>
            <param name="coll">the set that is modified to hold the results.</param>
            <param name="p">which to start the traversal.</param>
            <param name="groupmembers">whether to include member parts.</param>
            <param name="treechildren">int the number of levels of tree children to include (1 or less means just the node itself, no children).</param>
            <param name="connectedlinks">whether to include links connected with nodes in the collection.</param>
            <param name="pred">a predicate to execute on each part found,
            if the predicate returns false, the part is not included in the result.</param>
        </member>
        <member name="P:Northwoods.Go.Part.DragComputation">
             <summary>
             Gets or sets the function used to determine the location that this Part can be dragged to.
             </summary>
             <remarks>
             The first argument is a reference to the Part being dragged, the second argument is a Point describing
             the proposed location, and the third argument is a snapped location, if one was determined during dragging.
             It should return a Point that is the proposed new location.
            
             By default this function is null and the <see cref="T:Northwoods.Go.Tools.DraggingTool"/> uses the snapped location,
             if one was determined and if <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/> is true,
             or the proposed location (the second argument) if not snapping to a grid.
            
             In either case the <see cref="T:Northwoods.Go.Tools.DraggingTool"/> will limit the proposed new location by <see cref="P:Northwoods.Go.Part.MinLocation"/> and <see cref="P:Northwoods.Go.Part.MaxLocation"/>.
            
             The function, if supplied, must not have any side-effects.
            
             An example that limits moving a Node to the current viewport:
             <code language="cs">
               Point StayInViewport(Part part, Point pt, Point gridpt) {
                 var diagram = part.Diagram;
                 if (diagram == null) return pt;
                 // compute the area inside the viewport
                 var v = diagram.ViewportBounds.SubtractMargin(diagram.Padding);
                 // get the bounds of the part being dragged
                 var bnds = part.ActualBounds;
                 var loc = part.Location;
                 // now limit the location appropriately
                 var l = v.X + (loc.X - bnds.X);
                 var r = v.Right - (bnds.Right - loc.X);
                 var t = v.Y + (loc.Y - bnds.Y);
                 var b = v.Bottom - (bnds.Bottom - loc.Y);
                 if (l &lt;= gridpt.X &amp;&amp; gridpt.X &lt;= r &amp;&amp; t &lt;= gridpt.Y &amp;&amp; gridpt.Y &lt;= b) return gridpt;
                 var p = gridpt;
                 if (diagram.ToolManager.DraggingTool.IsGridSnapEnabled) {
                   // find a location that is inside V but also keeps the part's bounds within V
                   var cw = diagram.Grid.GridCellSize.Width;
                   if (cw &gt; 0) {
                     while (p.X &gt; r) p.X -= cw;
                     while (p.X &lt; l) p.X += cw;
                   }
                   var ch = diagram.Grid.GridCellSize.Height;
                   if (ch &gt; 0) {
                     while (p.Y &gt; b) p.Y -= ch;
                     while (p.Y &lt; t) p.Y += ch;
                   }
                   return p;
                 } else {
                   p.X = Math.Max(l, Math.Min(p.X, r));
                   p.Y = Math.Max(t, Math.Min(p.Y, b));
                   return p;
                 }
               }
             </code>
             Note that for this functionality you will also probably want to set <see cref="P:Northwoods.Go.Diagram.AutoScrollRegion"/> to be a zero margin.
             <code language="cs">
               myDiagram.NodeTemplate =
                 new Node { ..., DragComputation = StayInViewport }
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.MaxLocation"/>
             <seealso cref="P:Northwoods.Go.Part.MinLocation"/>
        </member>
        <member name="P:Northwoods.Go.Part.ShadowOffset">
            <summary>
            Gets or sets the X and Y offset of this part's shadow. This is only relevant if <see cref="P:Northwoods.Go.Part.IsShadowed"/> is true.
            </summary>
            <remarks>
            The initial value is (6, 6).
            </remarks>
            <seealso cref="P:Northwoods.Go.Part.IsShadowed"/>
            <seealso cref="P:Northwoods.Go.Part.ShadowColor"/>
            <seealso cref="P:Northwoods.Go.Part.ShadowBlur"/>
        </member>
        <member name="P:Northwoods.Go.Part.ShadowColor">
             <summary>
             Gets or sets the CSS string that describes a shadow color. Default is "gray".
             </summary>
             <remarks>
             Brushes cannot be used for this property -- only strings.
            
             The opacity of the shadow color is multiplied by the opacity of the shadowed object's brush.
             So, for example, if you have a <see cref="T:Northwoods.Go.Panel"/> with a <see cref="P:Northwoods.Go.GraphObject.Background"/>
             that is "transparent", the shadow that is drawn for the panel will also be transparent.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.IsShadowed"/>
             <seealso cref="P:Northwoods.Go.Part.ShadowOffset"/>
             <seealso cref="P:Northwoods.Go.Part.ShadowBlur"/>
        </member>
        <member name="P:Northwoods.Go.Part.ShadowBlur">
             <summary>
             Gets or sets the numerical value that describes the shadow's blur. Number must be non-negative and non-infinity.
             </summary>
             <remarks>
             A value of 0 would mean the shadow does not blur and larger numbers represent increasingly more blur.
             The total blur area is independent of the Part's area and can become quite large as this number is increased.
            
             This value is not affected by scale. Default value is 4.
             </remarks>
             <seealso cref="P:Northwoods.Go.Part.IsShadowed"/>
             <seealso cref="P:Northwoods.Go.Part.ShadowOffset"/>
             <seealso cref="P:Northwoods.Go.Part.ShadowColor"/>
        </member>
        <member name="M:Northwoods.Go.Part.Add(Northwoods.Go.GraphObject[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.GraphObject[])"/>
        </member>
        <member name="M:Northwoods.Go.Part.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(System.Collections.Generic.IEnumerable{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Part.Add(Northwoods.Go.RowDefinition[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.RowDefinition[])"/>
        </member>
        <member name="M:Northwoods.Go.Part.Add(Northwoods.Go.ColumnDefinition[])">
            <inheritdoc cref="M:Northwoods.Go.Panel.Add(Northwoods.Go.ColumnDefinition[])"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Set(Northwoods.Go.Part)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Part.Apply(System.Action{Northwoods.Go.Part})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Part.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.Part.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.Part.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="T:Northwoods.Go.ImageStretch">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Picture.ImageStretch"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ImageStretch.None">
            <summary>
            Do not scale the image; there may be clipping in one or both directions if the available dimensions are too small.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ImageStretch.Fill">
            <summary>
            Scale the image in both directions so as to fit exactly in the given bounds;
            there is no clipping, but the aspect ratio may change, causing the image to appear stretched.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ImageStretch.Uniform">
            <summary>
            Scale the image equally in both directions to fit the larger side of the image bounds
            </summary>
        </member>
        <member name="F:Northwoods.Go.ImageStretch.UniformToFill">
            <summary>
            Scale the image equally in both directions to fit the arranged (actual) bounds. There may be clipping in one dimension.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Picture">
             <summary>
             A Picture is a <see cref="T:Northwoods.Go.GraphObject"/> that shows an image, video-frame, or Canvas element.
             </summary>
             <remarks>
             You can specify what to show by either setting the <see cref="P:Northwoods.Go.Picture.Source"/> URL property
             to a URL string or the <see cref="P:Northwoods.Go.Picture.Element"/> property to an <see cref="T:Northwoods.Go.ImageElement"/>.
            
             If a <see cref="P:Northwoods.Go.Picture.Source"/> URL is set, the Picture will automatically create a corresponding
             HTMLImageElement and retain a reference to it in memory. If multiple Pictures specify
             the same <see cref="P:Northwoods.Go.Picture.Source"/> URL then they will all refer to the same IPictureElement.
            
             A created Picture:
             <code language="cs">
             // A Picture with the source set to "example.png". It will show a gray area until the image is loaded:
             new Picture { Source = "example.png", Background = "gray", Width = 50, Height = 50 }
             </code>
            
             If an element is not completely loaded during Diagram initialization, a redraw may occur,
             and if an image's size is not known before loading, the containing Part of this Picture
             may be resized, causing side effects such as layouts.
             This can be avoided by knowing the size of the image beforehand,
             and setting the Picture's <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>.
            
             With some images (notably sprite sheets) only a portion of the image is expected to be drawn.
             The <see cref="P:Northwoods.Go.Picture.SourceRect"/> property allows the programmer to specify a rectangular area of
             the source image that the Picture should display.
            
             The <see cref="P:Northwoods.Go.Picture.ImageStretch"/> property allows an image to be resized inside of its bounding box.
             This property does not change the size of the Picture element, it only resizes or re-scales
             the image to fit (or not) in its bounds.
            
             <p class="boxread">
             For examples of sizing and <see cref="P:Northwoods.Go.Picture.ImageStretch"/>,
             see the <a href="../../intro/pictures.Html">Introduction page on Pictures</a>.
             </p>
            
             The <see cref="P:Northwoods.Go.Picture.ErrorFunction"/> property allows one to set a function to call when a source fails to load.
             This is useful in instances where images cannot be guaranteed to work, such as with
             user specified input. The error function can set the <see cref="P:Northwoods.Go.Picture.Source"/> to a known good value,
             but care should be taken to avoid error infinite loops when doing so.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Picture.#ctor">
            <summary>
            Constructs a picture that shows nothing until the
            <see cref="P:Northwoods.Go.Picture.Source"/> or <see cref="P:Northwoods.Go.Picture.Element"/> is specified. It is also common to specify the
            <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> to make sure that the picture's size is known
            before the image is loaded asynchronously, so that layouts do not need to be recomputed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Picture.#ctor(System.String)">
            <summary>
            Constructs a picture with the given <see cref="P:Northwoods.Go.Picture.Source"/>.
            It is also common to specify the <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> to make sure
            that the picture's size is known before the image is loaded asynchronously,
            so that layouts do not need to be recomputed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Picture.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Copies properties to a cloned Picture.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Picture.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Picture.ClearCache(System.String)">
            <summary>
            (undocumented)
            This static function clears the cache of loaded images, or removes the cached image for a particular source.
            </summary>
            <remarks>
            When an image is loaded by GoDiagram when specifying a Picture.Source,
            GoDiagram creates a ImageElement using that source and caches it.
            That way, when many Picture elements refer to the same source,
            they can refer to the same single object in memory.
            </remarks>
            <param name="source">optional, clear only a specified source from the image cache. If relative urls are used as Picture sources, this must be in the same format.</param>
        </member>
        <member name="P:Northwoods.Go.Picture.Element">
             <summary>
             Gets or sets the Picture's <see cref="T:Northwoods.Go.ImageElement"/> that provides some kind of visual image.
             </summary>
             <remarks>
             The default value is null.
             Setting this does not set the <see cref="P:Northwoods.Go.Picture.Source"/> attribute and that attribute may be unknowable.
            
             Typically, this property will be used when one has access to a platform-specific image.
             The image can be used to construct an <see cref="T:Northwoods.Go.ImageElement"/> for the particular platform.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Picture._TestCors">
            @hidden @internal
            <summary>
            Check if an image will fail or succeed as a cross-origin resource.
            Important when calling Diagram.MakeImage
            </summary>
            @this {Picture}
        </member>
        <member name="P:Northwoods.Go.Picture.Source">
             <summary>
             Gets or sets the Picture's source, which can be any valid image (png, jpg, gif, etc) URI.
             </summary>
             <remarks>
             The default value is the empty string, which specifies no image source.
             Setting this attribute creates an <see cref="T:Northwoods.Go.ImageElement"/> and sets the <see cref="P:Northwoods.Go.Picture.Element"/>
             attribute to that element.
             Setting the source of multiple Pictures to the same URI will cause only one <see cref="T:Northwoods.Go.ImageElement"/>
             to be created and shared. Setting the source to the empty string will set <see cref="P:Northwoods.Go.Picture.Element"/> to null.
             It is commonplace to either specify a constant URI or to data bind this property to some data property,
             perhaps using a conversion function in order to produce a proper URI.
            
             Whether the URI resolves to a proper <see cref="T:Northwoods.Go.ImageElement"/> will depend on the platform and what
             sort of formats are accepted. See the <see cref="T:Northwoods.Go.ImageElement"/> class for platform-specific information.
            
             To avoid remeasuring and rearranging Parts as images load asynchronously,
             be sure to set the <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
             (or <see cref="P:Northwoods.Go.GraphObject.Width"/> and <see cref="P:Northwoods.Go.GraphObject.Height"/>) to fixed values.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Picture.ImageLoaded(Northwoods.Go.ImageElement,System.Object)">
            <summary>
            Notify every diagram that a contained Picture might have loaded
            </summary>
        </member>
        <member name="M:Northwoods.Go.Picture.ImageError(Northwoods.Go.ImageElement,System.Object)">
            <summary>
            Notify every diagram that a contained Picture might have errored
            </summary>
        </member>
        <member name="M:Northwoods.Go.Picture.ReloadSource">
             <summary>
             Attempts to reload a <see cref="P:Northwoods.Go.Picture.Source"/> image.
             </summary>
             <remarks>
             This can be useful if the content on a server has changed, or was missing before.
             If a new image is loaded, this Picture may remeasure and/or redraw.
            
             This should normally be called within a transaction.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Picture.Redraw">
             <summary>
             Redraws a Picture, which can be useful if the backing <see cref="P:Northwoods.Go.Picture.Element"/> has changed.
             </summary>
             <remarks>
             This will not attempt to *reload* any image. If you need to do that, call <see cref="M:Northwoods.Go.Picture.ReloadSource"/>.
            
             This does not need to be called within a transaction, and will not re-measure anything.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Picture.SourceRect">
             <summary>
             Gets or sets the rectangular area of the source image that this picture should display.
             </summary>
             <remarks>
             This is only common with sprite maps and image tables.
            
             The default value is Rect(NaN, NaN, NaN, NaN), which means the whole source image should be used.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Picture.ImageStretch">
             <summary>
             Gets or sets how the Picture's image is stretched within its bounding box.
             </summary>
             <remarks>
             Some images will be a different aspect ratio than their given size or <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>.
             This property will never change the size of the Picture itself,
             only the size of the image that is drawn in the Picture's <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
            
             Possible values are <see cref="F:Northwoods.Go.ImageStretch.Fill"/>, <see cref="F:Northwoods.Go.ImageStretch.Uniform"/>,
             <see cref="F:Northwoods.Go.ImageStretch.UniformToFill"/>, and <see cref="F:Northwoods.Go.ImageStretch.None"/>.
             The default is <see cref="F:Northwoods.Go.ImageStretch.Fill"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Picture.ImageAlignment"/>
        </member>
        <member name="P:Northwoods.Go.Picture.Flip">
            <summary>
            Gets or sets how the Picture is displayed: Either normally or with a Horizontal or Vertical flip or both.
            </summary>
            <remarks>
            Possible values are <see cref="F:Northwoods.Go.Flip.None"/>, <see cref="F:Northwoods.Go.Flip.Horizontal"/>, <see cref="F:Northwoods.Go.Flip.Vertical"/>, or <see cref="F:Northwoods.Go.Flip.Both"/>.
            The default is <see cref="F:Northwoods.Go.Flip.None"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Picture.ImageAlignment">
             <summary>
             Gets or sets the Spot to align the source image to, when the source image
             is smaller than the Picture.
             </summary>
             <remarks>
             This is only relevant when
             the <see cref="P:Northwoods.Go.Picture.ImageStretch"/> property value is not <see cref="F:Northwoods.Go.ImageStretch.Fill"/>.
            
             This does not affect Picture coordinates or bounds, it only affects what is drawn within the given area.
             The default value is <see cref="F:Northwoods.Go.Spot.Center"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.Picture.ImageStretch"/>
        </member>
        <member name="P:Northwoods.Go.Picture.ErrorFunction">
             <summary>
             Gets or sets the function to call if an image set by <see cref="P:Northwoods.Go.Picture.Source"/> fails to load.
             </summary>
             <remarks>
             The arguments to this function are this Picture and the ImageElement's "error" (onerror) Event.
            
             This is called once per Picture, for every Picture that is using the same <see cref="P:Northwoods.Go.Picture.Source"/> that failed to load.
             This will never be called if the <see cref="P:Northwoods.Go.Picture.Source"/> is never set, and is not called with Pictures that use <see cref="P:Northwoods.Go.Picture.Element"/> instead.
            
             The default value is null, meaning that no specific action occurs when there is an error loading an image.
             </remarks>
             <seealso cref="P:Northwoods.Go.Picture.SuccessFunction"/>
        </member>
        <member name="P:Northwoods.Go.Picture.SuccessFunction">
             <summary>
             Gets or sets the function to call when an image set by <see cref="P:Northwoods.Go.Picture.Source"/> loads successfully.
             </summary>
             <remarks>
             The arguments to this function are this Picture and the ImageElement's "load" Event.
            
             This is called once per Picture, for every Picture that is using the same <see cref="P:Northwoods.Go.Picture.Source"/> that loaded successfully.
             This will never be called if the <see cref="P:Northwoods.Go.Picture.Source"/> is never set, and is not called with Pictures that use <see cref="P:Northwoods.Go.Picture.Element"/> instead.
             It is even called for a Picture source that has already loaded, so that creating copies of a Picture with this property set will
             call it once for each newly created Picture.
            
             The default value is null, meaning that no specific action occurs when an image finishes loading.
             </remarks>
             <seealso cref="P:Northwoods.Go.Picture.ErrorFunction"/>
        </member>
        <member name="M:Northwoods.Go.Picture.DrawProtected(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            <summary>
            Draw the Picture to a specified context.
            </summary>
            <param name="context">a context for drawing.</param>
            <param name="diagram"></param>
        </member>
        <member name="P:Northwoods.Go.Picture.NaturalBounds">
            <summary>
            This read-only property returns the natural size of this picture as determined by its source's width and height.
            The value is initially NaN x NaN until the picture has been measured.
            It will use the <see cref="P:Northwoods.Go.Picture.Element"/>'s `NaturalWidth` and `NaturalHeight` if available.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Picture.ArrangeProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <param name="fx"></param>
            <param name="fy"></param>
            <param name="fw"></param>
            <param name="fh"></param>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Set(Northwoods.Go.Picture)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Apply(System.Action{Northwoods.Go.Picture})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.Picture.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="T:Northwoods.Go.Placeholder">
             <summary>
             If a Placeholder is in the visual tree of a <see cref="T:Northwoods.Go.Group"/>, it represents the area of all of the member <see cref="T:Northwoods.Go.Part"/>s of that Group.
             If a Placeholder is in the visual tree of an <see cref="T:Northwoods.Go.Adornment"/>, it represents the area of the <see cref="P:Northwoods.Go.Adornment.AdornedElement"/>.
             </summary>
             <remarks>
             Unlike other GraphObjects, the Placeholder measures itself based on these criteria, and not on its own <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> or <see cref="P:Northwoods.Go.GraphObject.Scale"/>.
             It will set its own natural bounds and scale, and in the case of Groups will set the Group's location.
            
             It can only be used in the visual tree of a Group node or an Adornment.
             There can be at most one Placeholder in a Group or an Adornment.
            
             See the documentation for <see cref="T:Northwoods.Go.Group"/> and <see cref="T:Northwoods.Go.Adornment"/> for descriptions of the Placeholder roles in each.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Placeholder.#ctor">
            <summary>
            This normally does not need any initialization,
            except for maybe setting <see cref="P:Northwoods.Go.Placeholder.Padding"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Placeholder.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Copies properties to a cloned Placeholder.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Placeholder.ContainsProtected(Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            We also need to consider the <see cref="P:Northwoods.Go.GraphObject.Background"/> --
            if it is non-null this will return false.
            Otherwise this just checks whether the given point is in the rectangle formed
            by the <see cref="P:Northwoods.Go.GraphObject.NaturalBounds"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Placeholder.MeasureProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Placeholder.ArrangeProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Just set the <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Placeholder.ComputeBorder">
            @hidden
            <summary>
            (undocumented)
            This is only called when the Placeholder is inside a <see cref="T:Northwoods.Go.Group"/>.
            </summary>
            <remarks>
            Normally this just returns the result of <see cref="M:Northwoods.Go.Placeholder.ComputeMemberBounds"/> expanded by the <see cref="P:Northwoods.Go.Placeholder.Padding"/>.
            However, if <see cref="P:Northwoods.Go.Group.ComputesBoundsAfterDrag"/> is true,
            and if the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> is the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>,
            and if this <see cref="T:Northwoods.Go.Group"/> is not being dragged,
            this method returns the last value of <see cref="M:Northwoods.Go.Placeholder.ComputeBorder"/> before dragging began.
            </remarks>
            <returns>in document coordinates.</returns>
        </member>
        <member name="M:Northwoods.Go.Placeholder.ComputeMemberBounds">
            @hidden
            <summary>
            (undocumented)
            Compute the union of the Bounds of this Placeholder's parent's Group.MemberParts.
            </summary>
            <remarks>
            If there are no members, this returns a <see cref="T:Northwoods.Go.Rect"/> with Width and Height of zero
            and an X and Y that are this panel's original location in document coordinates.
            This is only called when the Placeholder is inside a <see cref="T:Northwoods.Go.Group"/>.
            </remarks>
            <returns>in document coordinates.</returns>
        </member>
        <member name="P:Northwoods.Go.Placeholder.Padding">
            <summary>
            Gets or sets the padding around the members of the <see cref="T:Northwoods.Go.Group"/> or around the <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> <see cref="T:Northwoods.Go.GraphObject"/>.
            </summary>
            <remarks>
            The initial value is a <see cref="T:Northwoods.Go.Margin"/> of zero on all sides.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Set(Northwoods.Go.Placeholder)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Apply(System.Action{Northwoods.Go.Placeholder})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.Placeholder.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="T:Northwoods.Go.RowDefinition">
            <summary>
            The RowDefinition class describes constraints on a row
            in a <see cref="P:Northwoods.Go.RowDefinition.Panel"/> of type <see cref="T:Northwoods.Go.PanelLayouts.PanelLayoutTable"/>.
            It also provides information about the actual layout after the
            Table Panel has been arranged.
            </summary>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.#ctor">
            <summary>
            You should not use this Constructor, because calls to <see cref="M:Northwoods.Go.Panel.GetRowDefinition(System.Int32)"/>
            will automatically create and remember a RowDefinition for you.
            </summary>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Copy">
            Used by TableLayout...
            @hidden @internal
            <summary>
            Create a copy of this RowDefinition, with the same values.
            </summary>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.CopyFrom(Northwoods.Go.RowDefinition)">
            @hidden @internal
            <summary>
            Modify this RowDefinition by copying the settable properties from another RowDefinition.
            This is called by Panel.Add and TableLayout.Add.
            </summary>
            <param name="rd">The RowDefinition whose properties should be copied into this one.</param>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.ComputeEffectiveSpacing(System.Int32)">
            <summary>
            (undocumented)
            Get the spacing at the top of the row.
            </summary>
            <seealso cref="M:Northwoods.Go.RowDefinition.ComputeEffectiveSpacing"/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.ComputeEffectiveSpacing">
            <summary>
            (undocumented)
            Get the total spacing for a row.
            </summary>
            <remarks>
            The value of <see cref="P:Northwoods.Go.Panel.DefaultRowSeparatorStrokeWidth"/> or <see cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/>,
            plus the top and bottom values of <see cref="P:Northwoods.Go.Panel.DefaultSeparatorPadding"/> or <see cref="P:Northwoods.Go.RowDefinition.SeparatorPadding"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.RowDefinition._RaiseChanged(System.String,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <param name="pname">names the property that was modified.</param>
            <param name="oldval">the previous or older value.</param>
            <param name="newval">the next or newer value.</param>
            <param name="oldparam">an optional value that helps describe the older value.</param>
            <param name="newparam">an optional value that helps describe the newer value.</param>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.Panel">
            <summary>
            This read-only property returns the <see cref="P:Northwoods.Go.RowDefinition.Panel"/> that this row definition is in.
            </summary>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.Alignment">
             <summary>
             Gets or sets a default alignment for elements that are in this row.
             </summary>
             <remarks>
             The value must be a <see cref="T:Northwoods.Go.Spot"/>.
             The default value is <see cref="F:Northwoods.Go.Spot.Default"/>, so that this RowDefinition
             does not supply any alignment information for the row.
            
             When an element's <see cref="P:Northwoods.Go.GraphObject.Alignment"/> property is <see cref="F:Northwoods.Go.Spot.Default"/>,
             it gets the horizontal alignment from the element's column's <see cref="P:Northwoods.Go.ColumnDefinition.Alignment"/>
             and the vertical alignment from the element's row's <see cref="P:Northwoods.Go.RowDefinition.Alignment"/>.
             When that property is also Default,
             it takes the value from the table panel's <see cref="P:Northwoods.Go.Panel.DefaultAlignment"/> property.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Alignment"/>
             <seealso cref="P:Northwoods.Go.Panel.DefaultAlignment"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.Stretch">
             <summary>
             Gets or sets the default stretch for elements that are in this row.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Stretch.Default"/>, so that this RowDefinition
             does not supply any stretch information for the row.
            
             When an element's <see cref="P:Northwoods.Go.GraphObject.Stretch"/> property is <see cref="F:Northwoods.Go.Stretch.Default"/>,
             it gets the horizontal stretch from the element's column's <see cref="P:Northwoods.Go.ColumnDefinition.Stretch"/>
             and the vertical stretch from the element's row's <see cref="P:Northwoods.Go.RowDefinition.Stretch"/>.
             When that property is also Default,
             it takes the value from the table panel's <see cref="P:Northwoods.Go.Panel.DefaultStretch"/> property.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Stretch"/>
             <seealso cref="P:Northwoods.Go.Panel.DefaultStretch"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Sizing"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Height"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.SeparatorPadding">
             <summary>
             Gets or sets the additional padding for a particular row, in local coordinates.
             </summary>
             <remarks>
             Padding is applied on two sides - before and after a row's contents.
             The <see cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/> comes before any padding <see cref="P:Northwoods.Go.Margin.Top"/>.
            
             The default value is null, so that this RowDefinition
             does not supply any padding information for the row.
             There may still be some padding between rows if <see cref="P:Northwoods.Go.Panel.DefaultSeparatorPadding"/> is non-zero.
             </remarks>
             <seealso cref="P:Northwoods.Go.Panel.DefaultSeparatorPadding"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorStroke"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorDashArray"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Background"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.SeparatorStroke">
             <summary>
             Gets or sets the stroke (color) for the separator line that is drawn before a particular row,
             provided that row has a nonzero <see cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/>.
             </summary>
             <remarks>
             The default value is null, so that this RowDefinition
             does not specify any brush for the separator line to draw before the row.
             The line may still be drawn if the value of <see cref="P:Northwoods.Go.Panel.DefaultRowSeparatorStroke"/> is non-null.
            
             However, if no stroke color is specified, then no stroke width will be drawn,
             even if the <see cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/> value is non-zero.
             </remarks>
             <seealso cref="P:Northwoods.Go.Panel.DefaultRowSeparatorStroke"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorPadding"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorDashArray"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Background"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth">
            <summary>
            Gets or sets the stroke width for a particular row's separator line, in local coordinates.
            </summary>
            <remarks>
            The default value is NaN, so that this RowDefinition
            does not supply any stroke width information for what is drawn before the row.
            The separator line may still be drawn if <see cref="P:Northwoods.Go.Panel.DefaultRowSeparatorStroke"/>
            is a real number (defaults to 1).
            </remarks>
            <seealso cref="P:Northwoods.Go.Panel.DefaultRowSeparatorStrokeWidth"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorPadding"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorStroke"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorDashArray"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.Background"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.SeparatorDashArray">
             <summary>
             Gets or sets the dash array for dashing the separator line, provided this
             row has a nonzero <see cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/> and non-null <see cref="P:Northwoods.Go.RowDefinition.SeparatorStroke"/>.
             </summary>
             <remarks>
             Must be an array of positive numbers and zeroes,
             or else null to indicate a solid line.
            
             For example, the array [5, 10] would create dashes of 5 pixels and spaces of 10 pixels.
            
             Setting an array with all zeroes will set the value to null.
            
             Default is null, so that this RowDefinition
             does not supply any stroke dash array information for what is drawn before the row.
             The separator line may still be drawn using dashes if <see cref="P:Northwoods.Go.Panel.DefaultRowSeparatorDashArray"/> is non-null.
             </remarks>
             <seealso cref="P:Northwoods.Go.Panel.DefaultRowSeparatorDashArray"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorPadding"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorStroke"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Background"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.Background">
            <summary>
            Gets or sets the background color for a particular row,
            which fills the entire span of the row, including any SeparatorPadding.
            </summary>
            <remarks>
            The default value is null, which means nothing is drawn in the background of the row.
            </remarks>
            <seealso cref="P:Northwoods.Go.GraphObject.Background"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.CoversSeparators">
            <summary>
            Gets or sets whether or not the <see cref="P:Northwoods.Go.RowDefinition.Background"/>, if there is one, is in front of or behind the separators.
            </summary>
            <remarks>
            The default value is false -- any background is drawn behind any separator lines.
            </remarks>>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.Sizing">
            <summary>
            Gets or sets how this row deals with a Table Panel's extra space.
            </summary>
            <remarks>
            The value must be one of: <see cref="F:Northwoods.Go.Sizing.None"/>, <see cref="F:Northwoods.Go.Sizing.ProportionalExtra"/>,
            or <see cref="F:Northwoods.Go.Sizing.Default"/>.
            The default value is <see cref="F:Northwoods.Go.Sizing.Default"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.Panel.RowSizing"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.ActualHeight"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.TotalHeight"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.Height"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.Row">
            <summary>
            Gets or sets which row this RowDefinition describes in the <see cref="P:Northwoods.Go.RowDefinition.Panel"/>.
            The value is a zero-based integer.
            </summary>
            <remarks>
            This property can only be set on init.
            </remarks>
            <seealso cref="M:Northwoods.Go.Panel.FindRowForLocalY(System.Double)"/>
            <seealso cref="P:Northwoods.Go.Panel.TopIndex"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.ActualY"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.MinHeight">
            <summary>
            Gets or sets the minimum row height, in local coordinates.
            </summary>
            <remarks>
            The value must be non-negative and finite.
            The default value is zero.
            The arranged height of all objects in this row will be no less than this value.
            </remarks>
            <seealso cref="P:Northwoods.Go.RowDefinition.Height"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.MaxHeight"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.Sizing"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.MaxHeight">
            <summary>
            Gets or sets the maximum row height, in local coordinates.
            </summary>
            <remarks>
            The value must be non-negative.
            The default value is Infinity.
            The arranged height of all objects in this row will be no greater than this value.
            </remarks>
            <seealso cref="P:Northwoods.Go.RowDefinition.Height"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.MinHeight"/>
            <seealso cref="P:Northwoods.Go.RowDefinition.Sizing"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.Height">
             <summary>
             Gets or sets the row height, in local coordinates.
             </summary>
             <remarks>
             The value must be non-negative and finite.
            
             The default value is NaN, which means this Row will get a height
             that is just big enough to hold all of the objects in the row.
            
             Setting this Value to a number will mean that all of the objects
             of this <see cref="P:Northwoods.Go.RowDefinition.Panel"/> in this Row will be allocated that
             amount of row height.
             Whether an object in the row is actually arranged to have that height
             depends on whether the <see cref="P:Northwoods.Go.GraphObject.Stretch"/> stretches vertically.
             </remarks>
             <seealso cref="P:Northwoods.Go.RowDefinition.MinHeight"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.MaxHeight"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Sizing"/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.GetEffectiveSizing">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.RowDefinition.ActualHeight">
             <summary>
             Gets or sets the usable row height, after arrangement, in local coordinates,
             that objects in this row can be arranged within.
             </summary>
             <remarks>
             This does not include <see cref="P:Northwoods.Go.RowDefinition.SeparatorPadding"/> or <see cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/>,
             as <see cref="P:Northwoods.Go.RowDefinition.TotalHeight"/> does.
            
             The value is meaningless until after the Table Panel using this
             RowDefinition has been arranged.
            
             It is very uncommon to set this property.
             </remarks>
             <seealso cref="P:Northwoods.Go.RowDefinition.TotalHeight"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Height"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Sizing"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.MeasuredHeight">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.TotalHeight">
             <summary>
             This read-only property returns the total arranged row height, after arrangement, in local coordinates.
             </summary>
             <remarks>
             This value gives the <see cref="P:Northwoods.Go.RowDefinition.ActualHeight"/> size plus the <see cref="P:Northwoods.Go.RowDefinition.SeparatorPadding"/>
             and <see cref="P:Northwoods.Go.RowDefinition.SeparatorStrokeWidth"/>.
            
             This value gives the vertical space occupied by the row.
             The value is meaningless until after the Table Panel using this
             RowDefinition has been arranged.
             </remarks>
             <seealso cref="P:Northwoods.Go.RowDefinition.ActualHeight"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Height"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Sizing"/>
        </member>
        <member name="P:Northwoods.Go.RowDefinition.ActualY">
             <summary>
             Gets or sets the actual arranged row starting Y position, after arrangement, in local coordinates.
             </summary>
             <remarks>
             The value is meaningless until after the Table Panel using this
             RowDefinition has been arranged.
            
             It is very uncommon to set this property.
             </remarks>
             <seealso cref="M:Northwoods.Go.Panel.FindRowForLocalY(System.Double)"/>
             <seealso cref="P:Northwoods.Go.Panel.TopIndex"/>
             <seealso cref="P:Northwoods.Go.RowDefinition.Row"/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition._Bind(Northwoods.Go.Models.Binding)">
            <summary>
            Add a data-binding of a property on this Object to a property on a data object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(Northwoods.Go.Models.Binding[])">
             <summary>
             Add a number of data-bindings to this RowDefinition.
             </summary>
             <remarks>
             Do not add, modify, or remove object Bindings after this object has been copied.
            
             Read more about <see cref="T:Northwoods.Go.Models.Binding"/>s at <a href="../../intro/dataBinding.Html">the Introduction page about Data Bindings</a>.
             </remarks>
             <param name="bindings">the Bindings</param>
             <returns>this RowDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
             <summary>
             Add a number of data-bindings to this RowDefinition.
             </summary>
             <remarks>
             Do not add, modify, or remove object Bindings after this object has been copied.
            
             Read more about <see cref="T:Northwoods.Go.Models.Binding"/>s at <a href="../../intro/dataBinding.Html">the Introduction page about Data Bindings</a>.
             </remarks>
             <param name="bindings">a collection of Bindings</param>
             <returns>this RowDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <summary>
            Add a data-binding to this RowDefinition for the given property name and optional conversion functions.
            </summary>
            <param name="prop">the source and target property name</param>
            <param name="conv">an optional conversion function</param>
            <param name="backconv">an optional back-conversion function</param>
            <returns>this RowDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.RowDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.RowDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.RowDefinition.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <summary>
            Add a data-binding to this RowDefinition for the given property names and conversion functions.
            </summary>
            <param name="targetprop">the target property on the RowDefinition</param>
            <param name="sourceprop">the source property on the data object</param>
            <param name="conv">an optional conversion function</param>
            <param name="backconv">an optional back-conversion function</param>
            <returns>this RowDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.RowDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.RowDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.RowDefinition.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Set(System.String,System.Object)">
            <summary>
            Set a property of this RowDefinition to a value.
            </summary>
            <remarks>
            <p class="boxread">
            Calling this method is much less efficient than setting properties directly.
            It's acceptable to call when constructing templates, as that will only happen once.
            </p>
            </remarks>
            <param name="propertyname">the name of the property to set</param>
            <param name="value">the value to set the property to</param>
            <returns>this RowDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Set(Northwoods.Go.RowDefinition)">
             <summary>
             Set properties of this RowDefinition to the values of a "partial" RowDefinition.
             </summary>
             <remarks>
             Only properties that are different from the default for the RowDefinition will be set in this manner.
            
             For example, the following will only set the Alignment and Stretch properties:
             <code language="cs">
             myColDef.Set(new RowDefinition {
               Alignment = Spot.Top,
               Stretch = Stretch.Vertical,
               MinHeight = 0  // won't be set, even if this RowDefinition's MinHeight isn't 0
             })
             </code>
            
             <p class="boxread">
             Calling this method is much less efficient than setting properties directly.
             It's acceptable to call when constructing templates, as that will only happen once.
             </p>
             </remarks>
             <param name="obj">the partial RowDefinition to use for setting properties</param>
             <returns>this RowDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Set(System.Object)">
            <summary>
            Set properties of this RowDefinition to the values of a given anonymous object.
            </summary>
            <remarks>
            <p class="boxread">
            Calling this method is much less efficient than setting properties directly.
            It's acceptable to call when constructing templates, as that will only happen once.
            </p>
            </remarks>
            <param name="props">the dynamic object of properties</param>
            <returns>this RowDefinition</returns>
        </member>
        <member name="M:Northwoods.Go.RowDefinition.Apply(System.Action{Northwoods.Go.RowDefinition})">
             <summary>
             Applies the given function to this RowDefinition and returns it.
             </summary>
             <remarks>
             This method is often used to apply some common styling to a number of templates.
            
             <code language="cs">
             // define some common property settings
             void tableStyle(RowDefinition cd) {
               cd.Bind("SeparatorStroke", "Color");
             }
            
             var template1 =
               new Node("Table") { ... }
                 .Add(
                   new RowDefinition().Apply(tableStyle)
                 );
            
             var template2 =
               new Node("Table") { ... }
                 .Add(
                   new RowDefinition().Apply(tableStyle)
                 );
             </code>
             </remarks>
             <param name="func">the function to apply to the RowDefinition</param>
             <returns>this RowDefinition</returns>
        </member>
        <member name="T:Northwoods.Go.LineCap">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Shape.StrokeCap"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LineCap.Butt">
            <summary>
            Specifies a flat line cap.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LineCap.Round">
            <summary>
            Specifies a round line cap.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LineCap.Square">
            <summary>
            Specifies a square line cap.
            </summary>
        </member>
        <member name="T:Northwoods.Go.LineJoin">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Shape.StrokeJoin"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LineJoin.Miter">
            <summary>
            Specifies a mitered join. This produces a sharp corner or a clipped corner, depending on whether the length of the miter exceeds the miter limit.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LineJoin.Bevel">
            <summary>
            Specifies a beveled join. This produces a diagonal corner.
            </summary>
        </member>
        <member name="F:Northwoods.Go.LineJoin.Round">
            <summary>
            Specifies a circular join. This produces a smooth, circular arc between the lines.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Shape">
             <summary>
             A Shape is a <see cref="T:Northwoods.Go.GraphObject"/> that shows a geometric figure.
             The <see cref="P:Northwoods.Go.Shape.Geometry"/> determines what is drawn;
             the properties <see cref="P:Northwoods.Go.Shape.Fill"/> and <see cref="P:Northwoods.Go.Shape.Stroke"/>
             (and other stroke properties) determine how it is drawn.
             </summary>
             <remarks>
             There are generally two types of shapes: Those that use a custom <see cref="P:Northwoods.Go.Shape.Geometry"/> by setting
             <see cref="P:Northwoods.Go.Shape.Geometry"/>, and those that receive an automatically generated Geometry using the value of
             <see cref="P:Northwoods.Go.Shape.Figure"/>, <see cref="P:Northwoods.Go.Shape.ToArrow"/>, or <see cref="P:Northwoods.Go.Shape.FromArrow"/>. An explicitly set Geometry always supersedes
             the figure and arrowhead properties.
            
             Some created Shapes:
             <code language="cs">
             // A shape with the figure set to RoundedRectangle:
             new Shape("RoundedRectangle") { Fill = "lightgreen" }
            
             // A shape with a custom geometry, using Geometry:
             new Shape { Geometry = Geometry.Parse("M120 0 L80 80 0 50z") }
            
             // A shape with a custom geometry, using GeometryString:
             new Shape { GeometryString = "F M120 0 L80 80 0 50z", Fill = "lightgreen" }
            
             // A common link template, using two shapes,
             // the first for the link path and the second for the arrowhead
             myDiagram.LinkTemplate =
               new Link()
                 .Add(
                   // The first shape in a link is special, its geometry is set by the Link's routing,
                   // so it does not need a geometry or figure set manually
                   new Shape { StrokeWidth = 2, Stroke = "gray" },
                   new Shape { ToArrow = "Standard", Fill = "gray", Stroke = null }
                 );
             </code>
            
             <p class="box">
             You can see more custom geometry examples and read about geometryString
             on the <a href="../../intro/geometry.html">Geometry Path Strings Introduction page.</a>
             </p>
            
             When automatically generating a Shape <see cref="P:Northwoods.Go.Shape.Geometry"/>, the value of <see cref="P:Northwoods.Go.Shape.ToArrow"/> takes precedence,
             then <see cref="P:Northwoods.Go.Shape.FromArrow"/>, then <see cref="P:Northwoods.Go.Shape.Figure"/>. If the value of <see cref="P:Northwoods.Go.Shape.ToArrow"/> or <see cref="P:Northwoods.Go.Shape.FromArrow"/> is "None"
             then it is ignored, and the "None" value of <see cref="P:Northwoods.Go.Shape.Figure"/> is identical to "Rectangle".
            
             All of the predefined figures are shown in the <a href="../../samples/shapes.Html">Shapes sample</a>.
             You can define your own named figures by calling the static function <see cref="M:Northwoods.Go.Shape.DefineFigureGenerator(System.String,System.Func{Northwoods.Go.Shape,System.Double,System.Double,Northwoods.Go.Geometry})"/>.
             Get a dictionary of named figures by calling the static function <see cref="M:Northwoods.Go.Shape.GetFigureGenerators"/>.
            
             All of the predefined arrowheads are shown in the <a href="../../samples/arrowheads.Html">Arrowheads sample</a>.
             You can define your own named arrowheads by calling the static function <see cref="M:Northwoods.Go.Shape.DefineArrowheadGeometry(System.String,Northwoods.Go.Geometry)"/>.
             Get a dictionary of named arrowheads by calling the static function <see cref="M:Northwoods.Go.Shape.GetArrowheadGeometries"/>.
            
             You can see a copy of all of the built-in arrowhead definitions in this file: <a href="https://github.com/NorthwoodsSoftware/GoDiagram/blob/main/Extensions/GraphObjects/Arrowheads/Arrowheads.cs">Arrowheads.cs</a>.
            
             The Shape properties <see cref="P:Northwoods.Go.Shape.Parameter1"/>, and <see cref="P:Northwoods.Go.Shape.Parameter2"/> determine details of the
             construction of some <see cref="P:Northwoods.Go.Shape.Figure"/> geometries.
             Specifically, they often set the <see cref="P:Northwoods.Go.Shape.Spot1"/>, <see cref="P:Northwoods.Go.Shape.Spot2"/> for the Shape.
             These spots determine the "inner area" of an Auto panel when a Shape is the main object.
             See the <a href="../../intro/panels.Html">Auto Panels section of the Panels Introduction page</a> for more details.
            
             Shapes use their geometric bounds when determining hit testing,
             but use rectangular bounds when participating in (panel) layouts.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Shape.#ctor">
            <summary>
            Constructs a <see cref="T:Northwoods.Go.Shape"/> with a <see cref="P:Northwoods.Go.Shape.Figure"/> of "None",
            which uses a rectangular geometry, and fills and strokes with a black brush.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Northwoods.Go.Shape"/> with the given <see cref="P:Northwoods.Go.Shape.Figure"/>,
            and fills and strokes with a black brush.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Copies properties to a cloned Shape.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Shape.DrawPathPattern(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
            <summary>
            Draws a GraphObject repeatedly along the path.
            </summary>
            <param name="context">A Canvas 2D Context for drawing.</param>
            <param name="diagram"></param>
        </member>
        <member name="M:Northwoods.Go.Shape.ComputeDashLength(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Return the interval distance by which drawing of the given object should be repeated.
            </summary>
            <remarks>
            If the OBJ is a Shape, the distance is reduced by the StrokeWidth,
            to allow for smooth lines crossing between drawings, especially diagonals.
            </remarks>
            <returns> will be at least 1</returns>
        </member>
        <member name="M:Northwoods.Go.Shape.DrawAlong(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram,System.Collections.Generic.List{System.Double},Northwoods.Go.GraphObject)">
            This is no longer used to draw dashed curves, only path
            This is a special implementation of drawDash used for drawing dashed curves
            It is slower, but it takes an array of points instead of a single point and
            faithfully dashes along the given chain of points,
            carrying over dash remainders properly from one segment to the next.
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Shape.DrawProtected(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
            <summary>
            Draw the shape to a specified context.
            </summary>
            <param name="context">A Canvas 2D Context for drawing.</param>
            <param name="diagram"></param>
        </member>
        <member name="M:Northwoods.Go.Shape.GetDocumentPoint(Northwoods.Go.Spot)">
            @hidden @internal
            <summary>
            This override takes the <see cref="P:Northwoods.Go.Shape.StrokeWidth"/> into account.
            </summary>
            <param name="local">a Spot.</param>
            <returns>in document coordinates</returns>
        </member>
        <member name="M:Northwoods.Go.Shape.GetDocumentBounds">
            @hidden @internal
            <summary>
            This override takes the <see cref="P:Northwoods.Go.Shape.StrokeWidth"/> into account.
            </summary>
            <returns>in document coordinates.</returns>
            <seealso cref="M:Northwoods.Go.Shape.GetDocumentPoint(Northwoods.Go.Spot)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.ContainsProtected(Northwoods.Go.Point)">
            <summary>
            For Paths, count intersections on the ray from outside bounding box to p.
            </summary>
            <param name="p"></param>
            <returns>true if p is in the geometry.</returns>
        </member>
        <member name="M:Northwoods.Go.Shape.ContainsProtected(Northwoods.Go.Point,System.Boolean)">
            <summary>
            For Paths, count intersections on the ray from outside bounding box to p.
            </summary>
            <param name="p"></param>
            <param name="precise">argument that forces the strokewidth to stay small.</param>
            <returns>true if p is in the geometry.</returns>
        </member>
        <member name="M:Northwoods.Go.Shape.MeasureProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Shape.GetGeometryStretch">
            @hidden @internal
            <summary>
            Some geometries have their own default stretch (like Circle, to keep its aspect ratio).
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape.ArrangeProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Arranges the GraphObject onto its panel.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape.GetNearestIntersectionPoint2(System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Point@)">
            @hidden @internal
            <summary>
            The closest intersection point of a shape with a line is the
            closest such point for each of its segments.
            This does not always(???) take into account any pen width.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape._TestDist(System.Double,System.Double,Northwoods.Go.Point,System.Double,Northwoods.Go.Point@)">
            @hidden @internal
            <summary>
            Helper for GetNearestIntersectionPoint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape._LineIntersection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Point@)">
            @hidden @internal
            <summary>
            Helper for GetNearestIntersectionPoint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape.FindElementInPath(Northwoods.Go.Rect,System.Boolean,Northwoods.Go.Transform)">
            @hidden @internal
            <param name="r">A Rect in container coordinates.</param>
            <param name="partialInclusion">True if objects are to be included when they intersect.</param>
            <param name="transform"></param>
            <returns>Whether or not this object is included.</returns>
        </member>
        <member name="M:Northwoods.Go.Shape.ContainedInRect(Northwoods.Go.Rect,Northwoods.Go.Transform)">
            @hidden @internal
            <summary>
            Determine if a given Rect is large enough to entirely contain this Shape.
            </summary>
            <param name="r">A Rect in container coordinates.</param>
            <param name="transform">A transform to use if something other than the Shape's own transform is desired.</param>
            <returns>true if rect r contains the entire object.</returns>
        </member>
        <member name="M:Northwoods.Go.Shape.IntersectsRect(Northwoods.Go.Rect,Northwoods.Go.Transform)">
            @hidden @internal
            <summary>
            Determines if a given rectangle intersects the Shape's bounds.
            </summary>
            <param name="rect">a rectangle in container coordinates.</param>
            <param name="transform">optional transform.</param>
        </member>
        <member name="M:Northwoods.Go.Shape._IntersectsSegment(Northwoods.Go.Point,Northwoods.Go.Point)">
            @hidden @internal
            <summary>
            Helper for IntersectsRect and IntersectsRectPath; uses container coordinates.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape.IntersectsRectPath(Northwoods.Go.Rect,Northwoods.Go.Transform)">
            @hidden @internal
            <summary>
            Determines if a given rectangle intersects the Shape's bounds.
            </summary>
            <param name="rect">a rectangle in container coordinates.</param>
            <param name="transform">optional transform.</param>
        </member>
        <member name="M:Northwoods.Go.Shape.FindElementNear(Northwoods.Go.Point,Northwoods.Go.Point,System.Boolean)">
            @hidden @internal
            <param name="p">A Point in container coordinates.</param>
            <param name="distp">A Point representing the distance from the point p.</param>
            <param name="partialInclusion"></param>
        </member>
        <member name="M:Northwoods.Go.Shape.NearestIntersectionOnEllipse(Northwoods.Go.Rect,System.Double,System.Double,System.Double,System.Double,Northwoods.Go.Point@)">
            @hidden @internal
            <summary>
            Find the intersection point of the elliptical path defined by rectangle
            rect and an infinite line p1-p2 that is closest to point p1.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Shape.ComputeMiterLength">
            @hidden @internal
            <summary>
            Returns actual miter length. May be used for drawing/drawnSize measurements.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Shape.Geometry">
             <summary>
             Gets or sets the Shape's <see cref="P:Northwoods.Go.Shape.Geometry"/> that defines the Shape's figure.
             </summary>
             <remarks>
             Setting a geometry is not necessary if a <see cref="P:Northwoods.Go.Shape.Figure"/> is specified,
             as that will construct a geometry instead.
            
             Setting this geometry property will freeze the supplied Geometry.
            
             Setting this geometry property always overrides any set figure.
             The default value is null.
             </remarks>
             <seealso cref="P:Northwoods.Go.Shape.GeometryString"/>
        </member>
        <member name="P:Northwoods.Go.Shape.GeometryString">
             <summary>
             When set, creates a <see cref="P:Northwoods.Go.Shape.Geometry"/> and normalizes it from a given path string,
             then sets the <see cref="P:Northwoods.Go.Shape.Geometry"/> property on this Shape and
             set the <see cref="P:Northwoods.Go.GraphObject.Position"/> to the amount computed by normalization.
             </summary>
             <remarks>
             The property getter simply returns the ToString value of the <see cref="P:Northwoods.Go.Shape.Geometry"/>,
             or the empty string if there is no Geometry value.
            
             See the <a href="../../intro/geometry.html">Geometry Path Strings Introduction page</a> for examples.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.IsGeometryPositioned">
            <summary>
            Gets or sets the whether the <see cref="P:Northwoods.Go.GraphObject.Position"/> of this shape denotes
            the top-left corner of this shape in panel coordinates or the origin of this geometry's coordinate system.
            </summary>
            <remarks>
            Basically, this determines whether the <see cref="P:Northwoods.Go.Shape.StrokeWidth"/> affects the rendered location.
            A true value allows multiple shapes to be positioned precisely in a "Position" Panel independent of the stroke width.
            The default is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Shape.InvalidateGeometry">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Shape.Fill">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Brush"/> that describes how the geometry is filled when drawn.
             </summary>
             <remarks>
             The default value is a solid black brush, causing the shape to be filled with solid black.
             Any valid CSS string can specify a solid color, and the <see cref="T:Northwoods.Go.Brush"/>
             class can be used to specify a gradient or pattern.
             A null fill will mean no fill is drawn and the filled portion
             of the Shape will not be pickable.
             A "transparent" fill is useful when wanting to allow a shape to be pickable
             without obscuring any other objects behind it.
             More information about the syntax of CSS color strings is available at:
             <a href="https://developer.Mozilla.Org/en-US/docs/Web/CSS/color">CSS colors (mozilla.Org)</a>.
            
             The geometry is filled before the <see cref="P:Northwoods.Go.Shape.Stroke"/> is drawn.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.Stroke">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Brush"/> that describes how the geometry is drawn as if by a pen.
             </summary>
             <remarks>
             The default value is a solid black brush, causing the shape to be outlined in black.
             Any valid CSS string can specify a solid color, and the <see cref="T:Northwoods.Go.Brush"/>
             class can be used to specify a gradient or pattern.
             A null stroke will mean no stroke is drawn.
             A "transparent" stroke is useful when wanting to allow a shape to be pickable
             without obscuring any other objects behind it.
             More information about the syntax of CSS color strings is available at:
             <a href="https://developer.Mozilla.Org/en-US/docs/Web/CSS/color">CSS colors (mozilla.Org)</a>.
            
             The stroke is drawn after the geometry is filled with the <see cref="P:Northwoods.Go.Shape.Fill"/> Brush.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.StrokeWidth">
             <summary>
             Gets or sets the thickness of the stroke's pen.
             </summary>
             <remarks>
             Value must be a real number greater than or equal to zero.
             The default value is 1.0.
            
             A value of zero will cause the stroke not to be drawn.
             However, main Shapes of Link Selection Adornments with a StrokeWidth of 0
             will inherit the StrokeWidth from the Link's main Shape.
            
             The stroke width will affect the <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> and <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> of this shape.
             The stroke is drawn centered on the path of the geometry.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Shape._GetStrokeWidth">
            <summary>
            For internal convenience, Shape adds its StrokeWidth.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Shape.StrokeCap">
            <summary>
            Gets or sets the style for how the ends of the stroke's line are drawn.
            </summary>
            <remarks>
            Possible values are <see cref="F:Northwoods.Go.LineCap.Butt"/>, <see cref="F:Northwoods.Go.LineCap.Round"/>, or <see cref="F:Northwoods.Go.LineCap.Square"/>.
            The default is <see cref="F:Northwoods.Go.LineCap.Butt"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.StrokeJoin">
            <summary>
            Gets or sets the type of corner that will be drawn for a stroke at the intersection of two straight segments of the geometry.
            </summary>
            <remarks>
            Possible values are <see cref="F:Northwoods.Go.LineJoin.Miter"/>, <see cref="F:Northwoods.Go.LineJoin.Bevel"/>, or <see cref="F:Northwoods.Go.LineJoin.Round"/>.
            The default is <see cref="F:Northwoods.Go.LineJoin.Miter"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.StrokeMiterLimit">
             <summary>
             Gets or sets the style for the stroke's mitre limit ratio.
             </summary>
             <remarks>
             The value must be a real number greater than or equal to one.
             The default is 10.0.
            
             For more information, see <a href="https://www.W3.Org/TR/2dcontext/#dom-context-2d-miterlimit">Stroke Miter Limit (w3.Org)</a>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.StrokeDashArray">
             <summary>
             Gets or sets the dash array for creating dashed or dotted lines.
             </summary>
             <remarks>
             The value must be an array of positive numbers and zeroes,
             or else null to indicate a solid line.
             For example, the array [5, 10] would create dashes of 5 pixels and spaces of 10 pixels.
             For more information, see <a href="https://www.W3.Org/TR/2dcontext/#dom-context-2d-setlinedash">Stroke Line Dash Array (w3.Org)</a>.
            
             The default value is null, resulting in a line without dashes or dots.
             Setting an array with all zeroes will set the value to null.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.StrokeDashOffset">
             <summary>
             Gets or sets the offset for dashed lines, used to start the drawing of the dash pattern with some space.
             </summary>
             <remarks>
             The value must be a real non-negative number. The default is zero.
            
             For more information, see <a href="https://www.W3.Org/TR/2dcontext/#dom-context-2d-linedashoffset">Stroke Line Dash Offset (w3.Org)</a>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.Figure">
             <summary>
             Gets or sets the figure name, used to construct a <see cref="P:Northwoods.Go.Shape.Geometry"/>.
             </summary>
             <remarks>
             The value must be a string. The default value is "None".
            
             The name can be any case.
             All of the predefined figures are shown in the <a href="../../samples/shapes.html">Shapes sample</a>.
            
             At most one of the following three properties may be set to a non-"None" value at the same time on the same shape:
             <see cref="P:Northwoods.Go.Shape.Figure"/>, <see cref="P:Northwoods.Go.Shape.ToArrow"/>, <see cref="P:Northwoods.Go.Shape.FromArrow"/>.
            
             You can define your own named figures by calling the static function <see cref="M:Northwoods.Go.Shape.DefineFigureGenerator(System.String,System.Func{Northwoods.Go.Shape,System.Double,System.Double,Northwoods.Go.Geometry})"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.ToArrow">
             <summary>
             Gets or sets the name of the kind of arrowhead that this shape should take
             when this shape is an element of a <see cref="T:Northwoods.Go.Link"/>.
             </summary>
             <remarks>
             Value must be a string.
            
             The default is "None", which means that this Shape is not an arrowhead, causing it to be the default Shape, a large filled Rectangle.
             If you want to have an arrowhead Shape but sometimes not show an arrowhead, you can set or bind
             the <see cref="P:Northwoods.Go.GraphObject.Visible"/> property, or you can set or bind this "toArrow" property to
             be the empty string.
             The arrowhead named "", an empty string, will display as nothing.
            
             The name can be any case.
             All of the predefined arrowheads are shown in the <a href="../../samples/arrowheads.html">Arrowheads sample</a>.
            
             Setting this property may also set the <see cref="P:Northwoods.Go.GraphObject.SegmentIndex"/>,
             <see cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/>, and <see cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/> properties.
             This shape should be an element of a <see cref="T:Northwoods.Go.Link"/>.
            
             At most one of the following three properties may be set to a non-"None" value at the same time on the same shape:
             <see cref="P:Northwoods.Go.Shape.Figure"/>, <see cref="P:Northwoods.Go.Shape.ToArrow"/>, <see cref="P:Northwoods.Go.Shape.FromArrow"/>.
            
             You can define your own named arrowheads by calling the static function <see cref="M:Northwoods.Go.Shape.DefineArrowheadGeometry(System.String,Northwoods.Go.Geometry)"/>.
            
             You can see a copy of all of the built-in arrowhead definitions in this file:
             <a href="https://github.com/NorthwoodsSoftware/GoDiagram/blob/main/Extensions/GraphObjects/Arrowheads/Arrowheads.cs">Arrowheads.cs</a>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.FromArrow">
             <summary>
             Gets or sets the name of the kind of arrowhead that this shape should take
             when this shape is an element of a <see cref="T:Northwoods.Go.Link"/>.
             </summary>
             <remarks>
             Value must be a string.
             For bi-directional links the arrowhead name often starts with "Backward...".
            
             The default is "None", which means that this Shape is not an arrowhead, causing it to be the default Shape, a large filled Rectangle.
             If you want to have an arrowhead Shape but sometimes not show an arrowhead, you can set or bind
             the <see cref="P:Northwoods.Go.GraphObject.Visible"/> property, or you can set or bind this "toArrow" property to
             be the empty string.
             The arrowhead named "", an empty string, will display as nothing.
            
             The name can be any case.
             All of the predefined arrowheads are shown in the <a href="../../samples/arrowheads.html">Arrowheads sample</a>.
            
             Setting this property may also set the <see cref="P:Northwoods.Go.GraphObject.SegmentIndex"/>,
             <see cref="P:Northwoods.Go.GraphObject.SegmentOrientation"/>, and <see cref="P:Northwoods.Go.GraphObject.AlignmentFocus"/> properties.
             This shape should be an element of a <see cref="T:Northwoods.Go.Link"/>.
            
             At most one of the following three properties may be set to a non-"None" value at the same time on the same shape:
             <see cref="P:Northwoods.Go.Shape.Figure"/>, <see cref="P:Northwoods.Go.Shape.ToArrow"/>, <see cref="P:Northwoods.Go.Shape.FromArrow"/>.
            
             You can define your own named arrowheads by calling the static function <see cref="M:Northwoods.Go.Shape.DefineArrowheadGeometry(System.String,Northwoods.Go.Geometry)"/>.
            
             You can see a copy of all of the built-in arrowhead definitions in this file:
             <a href="https://github.com/NorthwoodsSoftware/GoDiagram/blob/main/Extensions/GraphObjects/Arrowheads/Arrowheads.cs">Arrowheads.cs</a>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Shape._SetArrowheadPath">
            @hidden @internal
            <summary>
            Some shared code. More could go here later but its not urgent.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Shape.Spot1">
            <summary>
            Gets or sets the top-left Spot used by some <see cref="T:Northwoods.Go.Panel"/>s for determining where in the shape other objects may be placed.
            </summary>
            <remarks>
            The value is normally <see cref="F:Northwoods.Go.Spot.Default"/>, but you may want to set it to override the value that many <see cref="P:Northwoods.Go.Shape.Figure"/>s use.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.Spot2">
            <summary>
            Gets or sets the bottom-right Spot used by some <see cref="T:Northwoods.Go.Panel"/>s for determining where in the shape other objects may be placed.
            </summary>
            <remarks>
            The value is normally <see cref="F:Northwoods.Go.Spot.Default"/>, but you may want to set it to override the value that many <see cref="P:Northwoods.Go.Shape.Figure"/>s use.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.Parameter1">
            <summary>
            Gets or sets a property for parameterizing the construction of a <see cref="P:Northwoods.Go.Shape.Geometry"/> from a figure.
            </summary>
            <remarks>
            The meaning of this property depends on the particular figure.
            The value must be a number; the default value is NaN.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.Parameter2">
            <summary>
            Gets or sets a property for parameterizing the construction of a <see cref="P:Northwoods.Go.Shape.Geometry"/> from a figure.
            </summary>
            <remarks>
            The meaning of this property depends on the particular figure.
            The value must be a number; the default value is NaN.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.NaturalBounds">
            <summary>
            This read-only property returns the natural bounds of this Shape as determined by its <see cref="P:Northwoods.Go.Shape.Geometry"/>'s bounds.
            </summary>
            <remarks>
            The bounds will always include the (0,0) point.
            If the <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> is set, this returns a <see cref="T:Northwoods.Go.Rect"/> with the <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>.
            If no geometry is available, and no <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> is set, this may have NaN values for the width and height.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Shape.SetNaturalBounds">
            <summary>
            This is only used by Link panels because they specially-measure all Link main shapes.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Shape.PathPattern">
             <summary>
             Gets or sets a <see cref="T:Northwoods.Go.GraphObject"/> that is drawn repeatedly along the path of the stroke of this shape.
             </summary>
             <remarks>
             This property may be set to a shared GraphObject; the GraphObject should not belong to any Panel.
             Note that data bindings do <em>not</em> work in such shared GraphObjects, because they are not part of the visual tree.
             The default value is null, causing no object to be drawn repeatedly.
            
             Typically the object is a small <see cref="T:Northwoods.Go.Shape"/> or a <see cref="T:Northwoods.Go.Picture"/>.
             The larger the object is the worse the results will be, especially if the stroke has short segments or sharp curves.
             The pathPattern object is not part of the measured bounds of the Shape, it is a cosmetic element only.
            
             The stroke is always drawn normally -- having a value for this property will draw the value along the stroke as well,
             so it is commonplace to set the <see cref="P:Northwoods.Go.Shape.Stroke"/> to "transparent" and the <see cref="P:Northwoods.Go.Shape.StrokeWidth"/> to be as wide as
             the height of the GraphObject being drawn along the stroke.
            
             Examples of path patterns can be seen in the <a href="../../samples/relationships.Html">Relationships sample</a>.
            
             This property is ignored by Shapes in "Grid" or "Graduated" Panels.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.GeometryStretch">
            Later we could allow this to stretch Horizontally or Vertically ??
            <summary>
            Gets or sets how the shape's geometry is proportionally created given its computed size.
            </summary>
            <remarks>
            Possible values are <see cref="F:Northwoods.Go.GeometryStretch.None"/>, <see cref="F:Northwoods.Go.GeometryStretch.Fill"/>, <see cref="F:Northwoods.Go.GeometryStretch.Uniform"/>, and <see cref="F:Northwoods.Go.GeometryStretch.Default"/>.
            The default is <see cref="F:Northwoods.Go.GeometryStretch.Default"/>, which resolves to <see cref="F:Northwoods.Go.GeometryStretch.Fill"/> for most figures, though
            some regular figures such as "Circle" and "Square" default to <see cref="F:Northwoods.Go.GeometryStretch.Uniform"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.Interval">
            <summary>
            Gets or sets how frequently this shape should be drawn within a "Grid" or "Graduated" <see cref="T:Northwoods.Go.Panel"/>,
            in multiples of the <see cref="P:Northwoods.Go.Panel.GridCellSize"/> or <see cref="P:Northwoods.Go.Panel.GraduatedTickUnit"/>.
            </summary>
            <remarks>
            The default is 1.  Any new value must be a positive integer.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Shape.GraduatedSkip">
             <summary>
             Gets or sets the function to determine which values along a "Graduated" <see cref="T:Northwoods.Go.Panel"/> will be skipped.
             </summary>
             <remarks>
             The default is null and doesn't skip any ticks.
            
             The function takes a number argument, a value between <see cref="P:Northwoods.Go.Panel.GraduatedMin"/> and <see cref="P:Northwoods.Go.Panel.GraduatedMax"/>,
             and this Shape.
             The function will return a bool, whether the tick will be skipped at the value of the argument.
            
             Note that the second argument is *not* a particular tick that would be rendered at the given value.
             The function, if supplied, must not have any side-effects.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Shape.MakeGeometry(Northwoods.Go.Shape,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Shape.GetFigureGenerators">
             <summary>
             This static function returns a read-only dictionary of named geometry generators.
             </summary>
             <remarks>
             The keys are figure names.
             The values are functions that take a <see cref="T:Northwoods.Go.Shape"/> and a width and a height and return a <see cref="P:Northwoods.Go.Shape.Geometry"/>.
            
             The predefined shape figures can be seen in the <a href="../../samples/shapes.Html">Shapes sample</a>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Shape.DefineFigureGenerator(System.String,System.Func{Northwoods.Go.Shape,System.Double,System.Double,Northwoods.Go.Geometry})">
             <summary>
             This static function defines a named figure geometry generator for Shapes.
             Once this is called one can use the name as a value for <see cref="P:Northwoods.Go.Shape.Figure"/>.
             </summary>
             <remarks>
             The first argument is the new figure name and must be a non-empty string that is not "None".
            
             The <see cref="T:Northwoods.Go.Geometry"/> generator function's first argument is the <see cref="T:Northwoods.Go.Shape"/> for which the function is producing a Geometry.
             But this Shape argument may be null in some circumstances.
             The second and third arguments are the desired width and height.
             These will always be finite non-negative numbers.
             The function may look at the <see cref="P:Northwoods.Go.Shape.Parameter1"/> and <see cref="P:Northwoods.Go.Shape.Parameter2"/> properties, which may be NaN,
             to decide what geometry to create for the figure given its intended width and height.
            
             The function must return a Geometry; you may want to set <see cref="P:Northwoods.Go.Geometry.Spot1"/> and <see cref="P:Northwoods.Go.Geometry.Spot2"/> on it
             to indicate where content should be placed within the figure when using an "Auto" Panel.
             For some figures you may also want to set <see cref="P:Northwoods.Go.Geometry.DefaultStretch"/> to <see cref="F:Northwoods.Go.GeometryStretch.Uniform"/>
             in order to maintain the geometry's aspect ratio within the Shape.
            
             Generated figures must create a Geometry that is not larger than the supplied width and height. Doing so will signal an error.
             </remarks>
             <param name="name">a figure name ("RoundedRectangle"); must not be "" or "None"</param>
             <param name="func">A function that takes (Shape, width, height) and returns a Geometry</param>
        </member>
        <member name="M:Northwoods.Go.Shape.DefineFigureGenerator(System.String,System.String)">
             <summary>
             This static function defines a named figure geometry generator for Shapes.
             Once this is called one can use the name as a value for <see cref="P:Northwoods.Go.Shape.Figure"/>.
             </summary>
             <remarks>
             The first argument is the new figure name and must be a non-empty string that is not "None".
            
             If the second argument is a string this call defines a synonym for an existing figure generator.
             Do not define cycles of synonyms -- the behavior will be undefined.
             </remarks>
             <param name="name">a figure name ("RoundedRectangle"); must not be "" or "None"</param>
             <param name="synonym">An existing figure generator name for which the new name will be a synonym.</param>
        </member>
        <member name="M:Northwoods.Go.Shape.GetArrowheadGeometries">
             <summary>
             This static function returns a read-only dictionary of named arrowhead geometries.
             </summary>
             <remarks>
             The keys are arrowhead names.
             The values are <see cref="P:Northwoods.Go.Shape.Geometry"/> objects.
            
             The predefined arrowheads can be seen in the <a href="../../samples/arrowheads.Html">Arrowheads sample</a>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Shape.DefineArrowheadGeometry(System.String,Northwoods.Go.Geometry)">
            <summary>
            This static function defines a named arrowhead geometry.
            </summary>
            <remarks>
            Once this is called one can use the name as a value for <see cref="P:Northwoods.Go.Shape.ToArrow"/> or <see cref="P:Northwoods.Go.Shape.FromArrow"/>.
            </remarks>
            <param name="name">an arrowhead name ("OpenTriangle"); must not be "" or "None"</param>
            <param name="geo">a <see cref="P:Northwoods.Go.Shape.Geometry"/></param>
        </member>
        <member name="M:Northwoods.Go.Shape.DefineArrowheadGeometry(System.String,System.String)">
             <summary>
             This static function defines a named arrowhead geometry.
             </summary>
             <remarks>
             Once this is called one can use the name as a value for <see cref="P:Northwoods.Go.Shape.ToArrow"/> or <see cref="P:Northwoods.Go.Shape.FromArrow"/>.
            
             The second argument is converted into a <see cref="P:Northwoods.Go.Shape.Geometry"/> by calling
             `Geometry.Parse(pathstr, false)`,
             which may throw an error if there are problems with the syntax of the string.
             </remarks>
             <param name="name">an arrowhead name ("OpenTriangle"); must not be "" or "None"</param>
             <param name="pathstr">a Geometry path string, e.g. "m 0,0 l 8,4 -8,4"</param>
        </member>
        <member name="F:Northwoods.Go.Shape.ArrowheadGeometries">
            @hidden @internal
        </member>
        <member name="F:Northwoods.Go.Shape.PresetGeometries">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Shape._ArrowheadExists(System.String)">
            <summary>
            Check if an arrowhead exists and has an associated geometry.
            </summary>
            <param name="name">the arrowhead name</param>
            <returns>true if the arrowhead exists</returns>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Set(Northwoods.Go.Shape)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Apply(System.Action{Northwoods.Go.Shape})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.Shape.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="T:Northwoods.Go.TextAlign">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.TextBlock.TextAlign"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.TextAlign.Start">
            <summary>
            Specifies that text is aligned at the start of its given space.
            </summary>
        </member>
        <member name="F:Northwoods.Go.TextAlign.Left">
            <summary>
            Specifies that text is aligned to the left of its given space.
            </summary>
        </member>
        <member name="F:Northwoods.Go.TextAlign.Right">
            <summary>
            Specifies that text is aligned to the right of its given space.
            </summary>
        </member>
        <member name="F:Northwoods.Go.TextAlign.Center">
            <summary>
            Specifies that text is aligned in the center of its given space.
            </summary>
        </member>
        <member name="F:Northwoods.Go.TextAlign.End">
            <summary>
            Specifies that text is aligned at the end of its given space.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Wrap">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.TextBlock.Wrap"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Wrap.None">
            <summary>
            The TextBlock will not wrap its text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Wrap.Fit">
            <summary>
            The TextBlock will wrap text, making the width of the TextBlock equal to the width of the longest line.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Wrap.DesiredSize">
            <summary>
            The TextBlock will wrap text and the width of the TextBlock will be the DesiredSize's width, if any.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Wrap.BreakAll">
            <summary>
            The TextBlock will attempt to wrap at each character, allowing breaks within "words."
            </summary>
        </member>
        <member name="T:Northwoods.Go.Overflow">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.TextBlock.Overflow"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Overflow.Clip">
            <summary>
            The TextBlock will clip if the width is too small to display all text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Overflow.Ellipsis">
            <summary>
            The TextBlock will display an ellipsis if the width is too small to display all text.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Format">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.TextBlock.Formatting"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Format.Trim">
            <summary>
            The TextBlock will automatically trim any whitespace at the start
            or end of each line of text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Format.None">
            <summary>
            The TextBlock will *not* automatically trim any whitespace at the start
            or end of each line of text. This can be useful if your text is preformatted.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GraduatedMetrics">
            <summary>
            Used by graduated panels to transfer metrics from temp text to graduated labels.
            </summary>
        </member>
        <member name="T:Northwoods.Go.TextBlock">
             <summary>
             A TextBlock is a <see cref="T:Northwoods.Go.GraphObject"/> that displays a <see cref="P:Northwoods.Go.TextBlock.Text"/> string in a given <see cref="P:Northwoods.Go.TextBlock.Font"/>.
             </summary>
             <remarks>
             The size and appearance of the text is specified by <see cref="P:Northwoods.Go.TextBlock.Font"/>.
            
             Text is drawn using the <see cref="P:Northwoods.Go.TextBlock.Stroke"/> brush, which may be any CSS color string or a <see cref="T:Northwoods.Go.Brush"/>.
            
             A created TextBlock:
             <code language="cs">
             // A TextBlock with text and stroke properties set:
             new TextBlock("Hello World") { Stroke = "gray" }
             </code>
            
             TextBlocks typically receive a natural size based on their text and font strings,
             but often a width is given in order to cause the text to wrap at a certain place.
             In order for wrapping to occur, the <see cref="P:Northwoods.Go.TextBlock.Wrap"/> property must not be <see cref="F:Northwoods.Go.Wrap.None"/>.
            
             TextBlocks can be edited by users using the <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>.
             The <see cref="T:Northwoods.Go.IHostInfo"/> that a given TextBlock uses as its text editor can be customized
             by setting the <see cref="P:Northwoods.Go.TextBlock.TextEditor"/> property.
            
             <p class="boxread">
             For examples of TextBlock possibilities and functionality,
             see the <a href="../../intro/textBlocks.html">Introduction page on TextBlocks</a>.
             </p>
             </remarks>
             @extends GraphObject
             @unrestricted
        </member>
        <member name="M:Northwoods.Go.TextBlock.#ctor">
            <summary>
            Constructs a new <see cref="T:Northwoods.Go.TextBlock"/> with no string to show; if it had a string,
            it would draw the text, wrapping if needed, in the default font using a black stroke.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Northwoods.Go.TextBlock"/> with the given text string;
            draws the text, wrapping if needed, in the default font using a black stroke.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.CloneProtected(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Copies properties to a cloned TextBlock.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.CopyGraduatedLabelPropertiesFrom(Northwoods.Go.TextBlock)">
            @hidden @internal
            <summary>
            Called by Panel for graduated Panel labels.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.RestoreMeasurements(Northwoods.Go.PanelLayouts.GraduatedMark)">
            @hidden @internal
            <summary>
            Called by Panel for graduated Panel labels.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.GetEllipsis">
            <summary>
            (undocumented)
            This static function gets the current ellipsis character or string for
            TextBlocks that have <see cref="P:Northwoods.Go.TextBlock.Overflow"/> set to <see cref="F:Northwoods.Go.Overflow.Ellipsis"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.SetEllipsis(System.String)">
             <summary>
             (undocumented)
             This static function sets the ellipsis character or string for all
             TextBlocks that have <see cref="P:Northwoods.Go.TextBlock.Overflow"/> set to <see cref="F:Northwoods.Go.Overflow.Ellipsis"/>.
             </summary>
             <remarks>
             The default is `"..."`, which works with all fonts.
            
             Note when using the ellipsis character, you will need to specify a compatible
             character set, like UTF-8.
            
             Modifying the ellipsis character does not cause any TextBlocks to be remeasured or redrawn.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.TextBlock.GetBaseline">
             <summary>
             Gets the function that, given the TextBlock and numerical text height, computes the position to draw the baseline of a line of text in all TextBlocks.
             </summary>
             <remarks>
             By default this is null and default behavior returns `(textHeight * 0.75)`.
            
             This computation affects drawing only, and does not change TextBlock measurement calculations.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.TextBlock.SetBaseline(System.Func{Northwoods.Go.TextBlock,System.Double,System.Double})">
            <summary>
            Sets the function that, given the TextBlock and numerical text height, computes the position to draw the baseline of a line of text in all TextBlocks.
            </summary>
            <remarks>
            This computation affects drawing only, and does not change TextBlock measurement calculations.
            It is expected this method will be called before or during initialization of any Diagram.
            Diagrams will not redraw when this method has been called,
            and you should call `Diagram.Redraw()` if you are calling this method outside of your initialization.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.TextBlock.BaselineComputation">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.TextBlock.GetUnderline">
             <summary>
             Gets the function that, given the TextBlock and numerical text height, computes the position to draw the underline of a line of text in all TextBlocks.
             </summary>
             <remarks>
             By default this is null and default behavior returns `(textHeight * 0.75)`.
            
             This computation affects drawing only, and does not change TextBlock measurement calculations.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.TextBlock.SetUnderline(System.Func{Northwoods.Go.TextBlock,System.Double,System.Double})">
            <summary>
            Sets the function that, given the TextBlock and numerical text height, computes the position to draw the underline of a line of text in all TextBlocks.
            </summary>
            <remarks>
            This computation affects drawing only, and does not change TextBlock measurement calculations.
            It is expected this method will be called before or during initialization of any Diagram.
            Diagrams will not redraw when this method has been called,
            and you should call `Diagram.Redraw()` if you are calling this method outside of your initialization.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Font">
            <summary>
            Gets or sets the current font settings.
            </summary>
            <remarks>
            The default font is new Font("Segoe UI", 13).
            </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Text">
             <summary>
             Gets or sets the TextBlock's text string.
             </summary>
             <remarks>
             The default is an empty string.
             The text of a TextBlock, along with the values of <see cref="P:Northwoods.Go.TextBlock.Font"/>, <see cref="P:Northwoods.Go.TextBlock.Wrap"/>,
             <see cref="P:Northwoods.Go.TextBlock.IsMultiline"/> and sizing restrictions are what naturally determine
             the size of the TextBlock.
            
             The text in textblocks can include manual line-breaks by using the character escape, `\n`.
            
             Leading and trailing whitespace is eliminated in each line of TextBlock text.
            
             If <see cref="P:Northwoods.Go.TextBlock.Editable"/> is set to true, users can edit textblocks with the <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.TextAlign">
             <summary>
             Gets or sets the alignment location in the TextBlock's given space.
             </summary>
             <remarks>
             Possible values are <see cref="F:Northwoods.Go.TextAlign.Start"/>, <see cref="F:Northwoods.Go.TextAlign.End"/>,
             <see cref="F:Northwoods.Go.TextAlign.Left"/>, <see cref="F:Northwoods.Go.TextAlign.Right"/>, <see cref="F:Northwoods.Go.TextAlign.Center"/>.
            
             This property is most pertinent when the TextBlock has multiple lines of text,
             or when the TextBlock is given a size that differs from the text's natural size (such as with <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>).
            
             In left-to-right writing systems, <see cref="F:Northwoods.Go.TextAlign.Start"/> and <see cref="F:Northwoods.Go.TextAlign.Left"/> are synonymous,
             as are <see cref="F:Northwoods.Go.TextAlign.End"/> and <see cref="F:Northwoods.Go.TextAlign.Right"/>.
            
             The default is <see cref="F:Northwoods.Go.TextAlign.Start"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.TextBlock.VerticalAlignment"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Flip">
            <summary>
            Gets or sets how the TextBlock is displayed: Either normally or with a Horizontal or Vertical flip or both.
            </summary>
            <remarks>
            Possible values are <see cref="F:Northwoods.Go.Flip.None"/>, <see cref="F:Northwoods.Go.Flip.Horizontal"/>, <see cref="F:Northwoods.Go.Flip.Vertical"/>, or <see cref="F:Northwoods.Go.Flip.Both"/>.
            The default is <see cref="F:Northwoods.Go.Flip.None"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.VerticalAlignment">
             <summary>
             Gets or sets the vertical alignment <see cref="T:Northwoods.Go.Spot"/> of this TextBlock, used when
             the TextBlock has more available vertical space than it needs to draw all lines.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Spot.Top"/>, which aligns the TextBlock to the top of its available space.
            
             The <see cref="P:Northwoods.Go.TextBlock.TextAlign"/> is often used along with this property to specify
             where the should be positioned in its available space.
            
             This does not affect TextBlock coordinates or bounds, it only affects where text is drawn within the given area.
             </remarks>
             <seealso cref="P:Northwoods.Go.TextBlock.TextAlign"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.NaturalBounds">
            <summary>
            This read-only property returns the natural bounds of this TextBlock in local coordinates,
            as determined by its <see cref="P:Northwoods.Go.TextBlock.Font"/> and <see cref="P:Northwoods.Go.TextBlock.Text"/> string, and optionally its <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.TextBlock.IsMultiline">
            <summary>
            Gets or sets whether or not the text displays multiple lines or embedded newlines.
            </summary>
            <remarks>
            If this is false, all characters including and after the first newline will be omitted.
            The default is true.
            </remarks>
            <seealso cref="P:Northwoods.Go.TextBlock.MaxLines"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.IsUnderline">
            <summary>
            Gets or sets whether or not the text is underlined.
            </summary>
            <remarks>
            The default is false.
            </remarks>
            <seealso cref="P:Northwoods.Go.TextBlock.IsStrikethrough"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.IsStrikethrough">
            <summary>
            Gets or sets whether or not the text has a strikethrough line (line-through).
            </summary>
            <remarks>
            The default is false.
            </remarks>
            <seealso cref="P:Northwoods.Go.TextBlock.IsUnderline"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Wrap">
             <summary>
             Gets or sets whether the text should be wrapped if it is too long to fit on one line.
             </summary>
             <remarks>
             Possible values are <see cref="F:Northwoods.Go.Wrap.DesiredSize"/>, <see cref="F:Northwoods.Go.Wrap.Fit"/>, <see cref="F:Northwoods.Go.Wrap.BreakAll"/>,
             and <see cref="F:Northwoods.Go.Wrap.None"/>.
            
             The default value is <see cref="F:Northwoods.Go.Wrap.DesiredSize"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.TextBlock.Overflow"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Overflow">
             <summary>
             Gets or sets how text that is too long to display should be handled.
             </summary>
             <remarks>
             Possible values are <see cref="F:Northwoods.Go.Overflow.Clip"/> and <see cref="F:Northwoods.Go.Overflow.Ellipsis"/>.
             For OverflowEllipsis to work, you must constrain the available size of the TextBlock in some way,
             such as setting <see cref="P:Northwoods.Go.TextBlock.Wrap"/> to <see cref="F:Northwoods.Go.Wrap.None"/>,
             or limiting the number of lines with <see cref="P:Northwoods.Go.TextBlock.MaxLines"/> or a height constraint.
            
             The default value is <see cref="F:Northwoods.Go.Overflow.Clip"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.TextBlock.Wrap"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Stroke">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Brush"/> that describes the stroke (color) of the text that is drawn.
            </summary>
            <remarks>
            The default value is a solid black brush.
            Any valid CSS string can specify a solid color, and the <see cref="T:Northwoods.Go.Brush"/>
            class can be used to specify a gradient or pattern.
            More information about the syntax of CSS color strings is available at:
            <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color">CSS colors (mozilla.org)</a>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.LineCount">
            <summary>
            This read-only property returns the total number of lines in this TextBlock, including lines created
            from embedded newlines (`\n`), <see cref="P:Northwoods.Go.TextBlock.Wrap"/>ping, and <see cref="P:Northwoods.Go.TextBlock.MaxLines"/>.
            </summary>
            <remarks>
            This value may be meaningless before the TextBlock is measured.
            </remarks>
            <seealso cref="P:Northwoods.Go.TextBlock.LineHeight"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.LineHeight">
            <summary>
            This read-only property returns the height of a line of text in this TextBlock,
            not including any <see cref="P:Northwoods.Go.TextBlock.SpacingAbove"/> or <see cref="P:Northwoods.Go.TextBlock.SpacingBelow"/>.
            </summary>
            <seealso cref="P:Northwoods.Go.TextBlock.LineCount"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Editable">
             <summary>
             Gets or sets whether or not this TextBlock allows in-place editing of the <see cref="P:Northwoods.Go.TextBlock.Text"/>
             string by the user with the help of the <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>.
             </summary>
             <remarks>
             The default is false.
            
             See also <see cref="P:Northwoods.Go.Part.TextEditable"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.TextEditor">
            <summary>
            Gets or sets the IHostInfo that this TextBlock uses as its text editor in the TextEditingTool.
            </summary>
            <remarks>
            If null, the TextBlock will use the default text editor of the <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>.
            The default is null.
            The value should be set to an instance of <see cref="T:Northwoods.Go.IHostInfo"/>.
            Setting this property might not affect any ongoing text editing operation.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.ErrorFunction">
            <summary>
            Gets or sets the function to call if a text edit made with the <see cref="T:Northwoods.Go.Tools.TextEditingTool"/> is invalid.
            </summary>
            <remarks>
            The default is null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Interval">
            <summary>
            Gets or sets how frequently this text should be drawn within a "Graduated" <see cref="T:Northwoods.Go.Panel"/>,
            in multiples of the <see cref="P:Northwoods.Go.Panel.GraduatedTickUnit"/>.
            </summary>
            <remarks>
            The default is 1.  Any new value must be a positive integer.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.GraduatedFunction">
             <summary>
             Gets or sets the function to convert from a value along a "Graduated" <see cref="T:Northwoods.Go.Panel"/> to a string.
             </summary>
             <remarks>
             The default returns a string representing the value rounded to at most 2 decimals.
            
             The function takes a number argument, a value between <see cref="P:Northwoods.Go.Panel.GraduatedMin"/> and <see cref="P:Northwoods.Go.Panel.GraduatedMax"/>,
             and this TextBlock.
             The function will return a string, the text that will appear at the value of the argument.
            
             Note that the second argument is *not* a particular label that would be rendered at the given value.
             The function, if supplied, must not have any side-effects.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.GraduatedSkip">
             <summary>
             Gets or sets the function to determine which values along a "Graduated" <see cref="T:Northwoods.Go.Panel"/> will be skipped.
             </summary>
             <remarks>
             The default is null and doesn't skip any text labels.
            
             The function takes a number argument, a value between <see cref="P:Northwoods.Go.Panel.GraduatedMin"/> and <see cref="P:Northwoods.Go.Panel.GraduatedMax"/>,
             and this TextBlock.
             The function will return a bool, whether the text label will be skipped at the value of the argument.
            
             Note that the second argument is *not* a particular label that would be rendered at the given value.
             The function, if supplied, must not have any side-effects.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.TextBlock.DrawProtected(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram)">
            @hidden @internal
            <summary>
            Draw the TextBlock to a specified context.
            </summary>
            <param name="context">context for drawing.</param>
            <param name="diagram"></param>
        </member>
        <member name="M:Northwoods.Go.TextBlock.DrawPart(System.String,Northwoods.Go.IDrawingContext,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,Northwoods.Go.TextAlign,System.Boolean,System.Boolean)">
            @hidden @internal
            <summary>
            Draw one line of a string to a context.
            </summary>
            <param name="line"></param>
            <param name="context"></param>
            <param name="rx"></param>
            <param name="ry"></param>
            <param name="rw"></param>
            <param name="rh">line height</param>
            <param name="stringwidth"></param>
            <param name="simple">whether or not to draw a line (greeking) instead of text at small sizes.</param>
            <param name="align">left, right, or center</param>
            <param name="isUnderline"></param>
            <param name="isStrikethrough"></param>
        </member>
        <member name="M:Northwoods.Go.TextBlock.ResetMeasurements">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.TextBlock.MeasureProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.TextBlock.ArrangeProtected(System.Double,System.Double,System.Double,System.Double)">
            @hidden @internal
            <summary>
            Arranges the TextBlock onto its panel.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.AddLine(System.String,System.Double)">
            @hidden @internal
            <summary>
            Add to ArrText, ArrSize
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.MeasureString(System.String,System.Double,Northwoods.Go.ITextInfo)">
            @hidden @internal
            <param name="str">discrete line of text to measure, possibly splitting it into multiple lines.
            str has no embedded newlines.</param>
            <param name="ww">Wrapping Width, the maximum allowed width</param>
            <param name="textInfo"></param>
        </member>
        <member name="M:Northwoods.Go.TextBlock.MultiLineEllipsis(System.Double,System.Double,Northwoods.Go.ITextInfo)">
            @hidden @internal
            <summary>
            Modifies "lines" object when multiline and ellipsis are enabled.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.GetNextWord(System.String)">
            for manual wrapping
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.TextBlock.GetStringWidth(System.String,Northwoods.Go.ITextInfo)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.TextBlock.GetStringHeight(Northwoods.Go.ITextInfo)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.TextBlock.GetEllipsisSize(Northwoods.Go.Font,Northwoods.Go.ITextInfo)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.TextBlock.FindNextLineBreak(System.String,System.Int32)">
            @hidden @internal
            <param name="str">must be normalized to only contain \n, and not \r or \r\n</param>
            <param name="start"></param>
        </member>
        <member name="M:Northwoods.Go.TextBlock.ComputeHeight(System.Double,Northwoods.Go.ITextInfo)">
            @hidden @internal
            <summary>
            Computes the total height of the TextBlock (the height of all lines), and returns the total height.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.ComputeWidth(Northwoods.Go.ITextInfo)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.TextBlock.TextValidation">
             <summary>
             Gets or sets the predicate that determines whether or not a user-edited string of text is valid.
             </summary>
             <remarks>
             If this is non-null, the predicate is called in addition to any <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextValidation"/> predicate.
             See <see cref="M:Northwoods.Go.Tools.TextEditingTool.IsValidText(Northwoods.Go.TextBlock,System.String,System.String)"/> for more details.
            
             <code language="cs">
             (textBlock, oldString, newString) => { // return bool }
             </code>
            
             The default predicate is null, which is equivalent to simply returning true.
            
             The function, if supplied, must not have any side-effects, and must return true or false.
             </remarks>
             <seealso cref="P:Northwoods.Go.Tools.TextEditingTool.TextValidation"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.TextEdited">
             <summary>
             Gets or sets the function that is called after the TextBlock's text has been edited by the <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>.
             </summary>
             <remarks>
             The first argument is a reference to this TextBlock.
             The second argument is the previous text, before editing.
             The third argument is the current text, which is also TextBlock.Text.
            
             <code language="cs">
             (textBlock, previousText, currentText) => { ... }
             </code>
            
             The default value is null -- no function is called.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.SpacingAbove">
             <summary>
             (undocumented)
             Gets or sets additional spacing above each line of text.
             </summary>
             <remarks>
             The default is zero. The value may be negative.
            
             This can be useful when you need to adjust the font spacing on
             custom fonts or monospace fonts to suit your needs.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.SpacingBelow">
             <summary>
             (undocumented)
             Gets or sets additional spacing below each line of text.
             </summary>
             <remarks>
             The default is zero. The value may be negative.
            
             This can be useful when you need to adjust the font spacing on
             custom fonts or monospace fonts to suit your needs.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Formatting">
             <summary>
             Gets or sets the policy for trimming whitespace on each line of text.
             </summary>
             <remarks>
             Possible values are <see cref="F:Northwoods.Go.Format.Trim"/>, which trims whitespace before and after every line of text,
             or <see cref="F:Northwoods.Go.Format.None"/>, which will not trim any whitespace and may be useful for preformatted text.
            
             The default value is <see cref="F:Northwoods.Go.Format.Trim"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.TextBlock.Overflow"/>
        </member>
        <member name="P:Northwoods.Go.TextBlock.MaxLines">
             <summary>
             Gets or sets the maximum number of lines that this TextBlock can display.
             </summary>
             <remarks>
             Value must be a greater than zero whole number or `int.MaxValue`.
             The default is `int.MaxValue`.
            
             Modifying this value may modify the computed height of the TextBlock.
             If MaxLines is set, the value of <see cref="P:Northwoods.Go.TextBlock.LineCount"/> will never be larger than MaxLines.
             </remarks>
             <seealso cref="P:Northwoods.Go.TextBlock.IsMultiline"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.GetMetrics">
            @hidden @internal
            <summary>
            Used only by graduated panels to record a bunch of properties, possibly to transfer to another text block.
            </summary>
        </member>
        <member name="M:Northwoods.Go.TextBlock.SetMetrics(System.Nullable{Northwoods.Go.GraduatedMetrics})">
            @hidden @internal
            <summary>
            Used only by graduated panels to record a bunch of properties, possibly to transfer to another text block. ???
            </summary>
        </member>
        <member name="P:Northwoods.Go.TextBlock.Choices">
             <summary>
             Gets or sets the an array of possible choices for a custom <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>.
             </summary>
             <remarks>
             The value must be an array of strings.
            
             The default value is null.
             </remarks>
        </member>
        <member name="F:Northwoods.Go.TextBlock._WhitespaceRegex">
            @hidden @internal 
        </member>
        <member name="F:Northwoods.Go.TextBlock._FontHeightMap">
            @hidden @internal 
        </member>
        <member name="F:Northwoods.Go.TextBlock._FontHeightMapCount">
            @hidden @internal 
        </member>
        <member name="F:Northwoods.Go.TextBlock._FontEllipsisWidth">
            @hidden @internal 
        </member>
        <member name="F:Northwoods.Go.TextBlock._FontEllipsisWidthCount">
            @hidden @internal 
        </member>
        <member name="F:Northwoods.Go.TextBlock._EllipsisCharacter">
            @hidden @internal 
        </member>
        <member name="F:Northwoods.Go.TextBlock._SharedTempFont">
            @hidden @internal 
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(Northwoods.Go.Models.Binding[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.Collections.Generic.IEnumerable{Northwoods.Go.Models.Binding})"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Bind(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Bind(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Set(System.String,System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Set(Northwoods.Go.TextBlock)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Set(System.Object)">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Set(System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Apply(System.Action{Northwoods.Go.TextBlock})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Apply(System.Action{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Trigger(Northwoods.Go.AnimationTrigger[])">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(Northwoods.Go.AnimationTrigger[])"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})">
            <inheritdoc cref="M:Northwoods.Go.GraphObject.Trigger(System.Collections.Generic.IEnumerable{Northwoods.Go.AnimationTrigger})"/>
        </member>
        <member name="M:Northwoods.Go.TextBlock.Trigger(System.String,System.Nullable{System.ValueTuple{System.Nullable{System.Int32},System.Action{Northwoods.Go.Animation},Northwoods.Go.EasingFunction}},System.Nullable{Northwoods.Go.StartCondition})">
            can't inherit doc: https://github.com/dotnet/roslyn/issues/47268
        </member>
        <member name="T:Northwoods.Go.CommandHandler">
             <summary>
             The <see cref="P:Northwoods.Go.Diagram.CommandHandler"/> implements various
             commands such as <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/> or <see cref="M:Northwoods.Go.CommandHandler.Redo"/>.
             The CommandHandler includes keyboard event handling to interpret
             key presses as commands.
             </summary>
             <remarks>
             CommandHandlers cannot be shared amongst multiple Diagrams.
            
             You may define a CommandHandler subclass and override methods.
             However you must seriously consider calling the base method in order to get its default behavior.
             There may be situations where not calling the base method may cause subtle bugs,
             but that depends on the method.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call a base method.
            
             There is an example custom CommandHandler in the extensions directory: <a href="https://github.com/NorthwoodsSoftware/GoDiagram/blob/main/Extensions/Input/DrawCommandHandler/DrawCommandHandler.cs">DrawCommandHandler.cs</a>,
             which provides alignment commands and additional behaviors for the arrow keys.
            
             <p class="boxread">
             For additional discussion, please read the <a href="../../intro/commands.html">Introduction page on Commands</a>.
             </p>
            
             <h3>Keyboard Shortcuts</h3>
            
             The CommandHandler implements the following command bindings for keyboard input in <see cref="M:Northwoods.Go.CommandHandler.DoKeyDown"/>:
               - `Ctrl-X` and `Shift-Del` invoke <see cref="M:Northwoods.Go.CommandHandler.CutSelection"/>
               - `Ctrl-C` and `Ctrl-Insert` invoke <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/>
               - `Ctrl-V` and `Shift-Insert` invoke <see cref="M:Northwoods.Go.CommandHandler.PasteSelection(System.Nullable{Northwoods.Go.Point})"/>
               - `Del` and `Backspace` invoke <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/>
               - `Ctrl-A` invokes <see cref="M:Northwoods.Go.CommandHandler.SelectAll"/>
               - `Ctrl-Z` and `Alt-Backspace` invoke <see cref="M:Northwoods.Go.CommandHandler.Undo"/>
               - `Ctrl-Y` and `Alt-Shift-Backspace` invoke <see cref="M:Northwoods.Go.CommandHandler.Redo"/>
               - `Up` and `Down` and `Left` and `Right` (arrow keys) call <see cref="M:Northwoods.Go.Diagram.Scroll(System.String,System.String,System.Double)"/>
               - `PageUp` and `PageDown` call <see cref="M:Northwoods.Go.Diagram.Scroll(System.String,System.String,System.Double)"/>
               - `Home` and `End` call <see cref="M:Northwoods.Go.Diagram.Scroll(System.String,System.String,System.Double)"/>
               - `Space` invokes <see cref="M:Northwoods.Go.CommandHandler.ScrollToPart(Northwoods.Go.Part)"/>
               - `Ctrl--` and `Keypad--` (minus) invoke <see cref="M:Northwoods.Go.CommandHandler.DecreaseZoom(System.Double)"/>
               - `Ctrl-+` and `Keypad-+` (plus) invoke <see cref="M:Northwoods.Go.CommandHandler.IncreaseZoom(System.Double)"/>
               - `Ctrl-0` invokes <see cref="M:Northwoods.Go.CommandHandler.ResetZoom(System.Double)"/>
               - `Shift-Z` invokes <see cref="M:Northwoods.Go.CommandHandler.ZoomToFit"/>
               - `Ctrl-G` invokes <see cref="M:Northwoods.Go.CommandHandler.GroupSelection"/>
               - `Ctrl-Shift-G` invokes <see cref="M:Northwoods.Go.CommandHandler.UngroupSelection(Northwoods.Go.Group)"/>
               - `F2` invokes <see cref="M:Northwoods.Go.CommandHandler.EditTextBlock(Northwoods.Go.TextBlock)"/>
               - `Menu Key` invokes <see cref="M:Northwoods.Go.CommandHandler.ShowContextMenu(Northwoods.Go.Tools.IHasContextMenu)"/>
               - `Esc` invokes <see cref="M:Northwoods.Go.CommandHandler.StopCommand"/>
            
             On a Macintosh the Command key is used as the modifier instead of the Control key.
            
             On touch devices there is a default context menu that shows many commonly-used commands
             when you hold a finger down on the diagram.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.#ctor">
            <summary>
            The constructor produces a CommandHandler with the default key bindings.
            </summary>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.ToString">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.CommandHandler.Diagram">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Diagram"/> that is using this CommandHandler,
            after <see cref="P:Northwoods.Go.Diagram.CommandHandler"/> has been set to this object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.DoKeyDown">
             <summary>
             This is called by tools to handle keyboard commands.
             </summary>
             <remarks>
             For most commands, this calls the "Can..." predicate; if that returns true it calls the command method.
             If GoDiagram handles a key-down event as a keyboard command, the underlying event will not bubble.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            
             There is an example custom CommandHandler in the extensions directory: <a href="https://github.com/NorthwoodsSoftware/GoDiagram/blob/main/Extensions/Input/DrawCommandHandler/DrawCommandHandler.cs">DrawCommandHandler.cs</a>,
             which implements additional behaviors for the arrow keys by overriding this method.
             For additional discussion, please read the <a href="../../intro/commands.html">Introduction page on Commands</a>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.DoKeyUp">
            <summary>
            This is called by tools to handle keyboard commands.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.StopCommand">
            <summary>
            This command cancels the operation of the current tool.
            This is typically called when the user presses ESCAPE.
            </summary>
            <remarks>
            If the current tool is a <see cref="T:Northwoods.Go.Tools.ToolManager"/>, this clears the diagram's selection.
            This then calls <see cref="M:Northwoods.Go.Tools.Tool.DoCancel"/> on the current tool.
            </remarks>
            <seealso cref="M:Northwoods.Go.CommandHandler.CanStopCommand"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanStopCommand">
            <summary>
            This predicate controls whether the user may stop the current tool.
            This just returns true.
            </summary>
            <remarks>
            This method may be overridden, but probably should not be overridden.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>true.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.StopCommand"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.SelectAll">
             <summary>
             This command selects all of the selectable <see cref="T:Northwoods.Go.Part"/>s in the diagram by setting <see cref="P:Northwoods.Go.Part.IsSelected"/> to true on each one.
             This is normally invoked by the `Ctrl-A` keyboard shortcut.
             </summary>
             <remarks>
             This method raises the "ChangingSelection" and "ChangedSelection" diagram events.
             This ignores all parts in temporary layers.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanSelectAll"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanSelectAll">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.SelectAll"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>true if <see cref="P:Northwoods.Go.Diagram.AllowSelect"/> is true.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.SelectAll"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.DeleteSelection">
             <summary>
             This command deletes the currently selected parts from the diagram.
             This is normally invoked by the `Del` keyboard shortcut.
             </summary>
             <remarks>
             This will first start a "Delete" transaction, then
             raise the "SelectionDeleting" <see cref="T:Northwoods.Go.DiagramEvent"/>,
             call <see cref="M:Northwoods.Go.Diagram.RemoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/> on a perhaps extended collection of selected Parts,
             raise the "SelectionDeleted" diagram event,
             and finally commit the transaction.
            
             Because this command changes the selection,
             this method also raises the "ChangingSelection" and "ChangedSelection" diagram events.
             Changes are performed within a transaction, but the selection events are raised outside the transaction.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanDeleteSelection"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanDeleteSelection">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>This returns true:
            if the diagram is not <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.Go.Diagram.AllowDelete"/> is true, and
            if there are some selected <see cref="T:Northwoods.Go.Part"/>s.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CopySelection">
             <summary>
             This command copies the currently selected parts, <see cref="P:Northwoods.Go.Diagram.Selection"/>, from the <see cref="P:Northwoods.Go.CommandHandler.Diagram"/> into the clipboard.
             This is normally invoked by the `Ctrl-C` keyboard shortcut.
             </summary>
             <remarks>
             This makes a copy of the current selection by calling <see cref="M:Northwoods.Go.CommandHandler.CopyToClipboard(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>.
             This also raises the "ClipboardChanged" diagram event.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanCopySelection"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanCopySelection">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>This returns true:
            if <see cref="P:Northwoods.Go.Diagram.AllowCopy"/> is true,
            if <see cref="P:Northwoods.Go.Diagram.AllowClipboard"/> is true, and
            if there are some selected <see cref="T:Northwoods.Go.Part"/>s.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.CopySelection"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CutSelection">
            <summary>
            This command executes a <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> followed by a <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/>.
            This is normally invoked by the `Ctrl-X` keyboard shortcut.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <seealso cref="M:Northwoods.Go.CommandHandler.CanCutSelection"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanCutSelection">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.CutSelection"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>This returns true:
            if the diagram is not <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.Go.Diagram.AllowCopy"/> is true,
            if <see cref="P:Northwoods.Go.Diagram.AllowDelete"/> is true,
            if <see cref="P:Northwoods.Go.Diagram.AllowClipboard"/> is true, and
            if there are some selected <see cref="T:Northwoods.Go.Part"/>s.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.CutSelection"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CopyToClipboard(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
             <summary>
             Make a copy of the given collection of <see cref="T:Northwoods.Go.Part"/>s
             and stores it in a static variable acting as the clipboard.
             </summary>
             <remarks>
             The clipboard is initially null.
             It can hold a collection of copied <see cref="T:Northwoods.Go.Part"/>s.
             It also remembers the <see cref="P:Northwoods.Go.Models.IModel.DataFormat"/> of the diagram
             from which the parts were copied.
            
             This calls <see cref="M:Northwoods.Go.Diagram.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Diagram,System.Boolean)"/> in order to make a copy of the Parts for the clipboard.
             The values of <see cref="P:Northwoods.Go.CommandHandler.CopiesParentKey"/> and <see cref="P:Northwoods.Go.CommandHandler.CopiesGroupKey"/> affect whether
             a copied node data remembers its tree parent node (if in a <see cref="T:Northwoods.Go.Models.TreeModel`3"/>) or
             its containing group (if in a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>).
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="coll">A collection of <see cref="T:Northwoods.Go.Part"/>s.
             If the value is null, the clipboard is cleared of all data.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.PasteFromClipboard"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.PasteFromClipboard">
             <summary>
             If the clipboard holds a collection of <see cref="T:Northwoods.Go.Part"/>s,
             and if the <see cref="P:Northwoods.Go.Models.Model`3.DataFormat"/> matches that stored in the clipboard,
             this makes a copy of the clipboard's parts and adds the copies to this <see cref="P:Northwoods.Go.CommandHandler.Diagram"/>.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Diagram.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Diagram,System.Boolean)"/> in order to make a copy of the Parts in the clipboard and add them to this diagram.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>a collection of the newly pasted <see cref="T:Northwoods.Go.Part"/>s,
             or an empty Set if there was no data in the clipboard.</returns>
             <seealso cref="M:Northwoods.Go.CommandHandler.CopyToClipboard(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.PasteSelection(System.Nullable{Northwoods.Go.Point})">
             <summary>
             This command copies the contents of the clipboard into this diagram and makes those new parts the new selection.
             This is normally invoked by the `Ctrl-V` keyboard shortcut.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.CommandHandler.PasteFromClipboard"/> to add copies of <see cref="T:Northwoods.Go.Part"/>s
             into this diagram, and then selects all of the newly created parts.
             This also raises the "ClipboardPasted" diagram event.
             This method raises the "ChangingSelection" and "ChangedSelection" diagram events.
             Changes are performed in a transaction, but the selection events are raised outside the transaction.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="pos">Point at which to center the newly pasted parts; if not present the parts are not moved.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanPasteSelection(System.Nullable{Northwoods.Go.Point})"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanPasteSelection(System.Nullable{Northwoods.Go.Point})">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.PasteSelection(System.Nullable{Northwoods.Go.Point})"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="pos">Point at which to center the newly pasted parts; if not present the parts would not be moved.</param>
            <returns>This returns true:
            if the diagram is not <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.Go.Diagram.AllowInsert"/> is true,
            if <see cref="P:Northwoods.Go.Diagram.AllowClipboard"/> is true, and
            if the clipboard has parts in it.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.PasteSelection(System.Nullable{Northwoods.Go.Point})"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.Undo">
            <summary>
            This command calls <see cref="M:Northwoods.Go.Models.UndoManager.Undo"/>.
            This is normally invoked by the `Ctrl-Z` keyboard shortcut.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <seealso cref="M:Northwoods.Go.CommandHandler.CanUndo"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanUndo">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.Undo"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>This returns true:
            if the diagram is not <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.Go.Diagram.AllowUndo"/> is true, and
            if the <see cref="M:Northwoods.Go.Models.UndoManager.CanUndo"/> predicate returns true.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.Undo"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.Redo">
            <summary>
            This command calls <see cref="M:Northwoods.Go.Models.UndoManager.Redo"/>.
            This is normally invoked by the `Ctrl-Y` keyboard shortcut.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <seealso cref="M:Northwoods.Go.CommandHandler.CanRedo"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanRedo">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.Redo"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>This returns true:
            if the diagram is not <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.Go.Diagram.AllowUndo"/> is true, and
            if the <see cref="M:Northwoods.Go.Models.UndoManager.CanRedo"/> predicate returns true.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.Redo"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.DecreaseZoom(System.Double)">
            <summary>
            This command decreases the <see cref="P:Northwoods.Go.Diagram.Scale"/> by a given factor.
            This is normally invoked by the `Ctrl--` and `Keypad--` keyboard shortcuts.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="factor">This defaults to 1/<see cref="P:Northwoods.Go.CommandHandler.ZoomFactor"/>.  The value should be less than one and greater than zero.</param>
            <seealso cref="M:Northwoods.Go.CommandHandler.CanDecreaseZoom(System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanDecreaseZoom(System.Double)">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.DecreaseZoom(System.Double)"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="factor">This defaults to 1/<see cref="P:Northwoods.Go.CommandHandler.ZoomFactor"/>.  The value should be less than one and greater than zero.</param>
            <returns>This returns true if <see cref="P:Northwoods.Go.Diagram.AllowZoom"/> is true
            and if the new scale is within the range of <see cref="P:Northwoods.Go.Diagram.MinScale"/> and <see cref="P:Northwoods.Go.Diagram.MaxScale"/>.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.DecreaseZoom(System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.IncreaseZoom(System.Double)">
            <summary>
            This command increases the <see cref="P:Northwoods.Go.Diagram.Scale"/> by a given factor.
            This is normally invoked by the `Ctrl-+` and `Keypad-+` keyboard shortcuts.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="factor">This defaults to <see cref="P:Northwoods.Go.CommandHandler.ZoomFactor"/>.  The value should be greater than one.</param>
            <seealso cref="M:Northwoods.Go.CommandHandler.CanIncreaseZoom(System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanIncreaseZoom(System.Double)">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.IncreaseZoom(System.Double)"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="factor">This defaults to <see cref="P:Northwoods.Go.CommandHandler.ZoomFactor"/>.  The value should be greater than one.</param>
            <returns>This returns true if <see cref="P:Northwoods.Go.Diagram.AllowZoom"/> is true
            and if the new scale is within the range of <see cref="P:Northwoods.Go.Diagram.MinScale"/> and <see cref="P:Northwoods.Go.Diagram.MaxScale"/>.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.IncreaseZoom(System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.ResetZoom(System.Double)">
            <summary>
            This command sets the <see cref="P:Northwoods.Go.Diagram.Scale"/> to a new scale value, by default 1.
            This is normally invoked by the `Ctrl-0` keyboard shortcut.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="newscale">This defaults to <see cref="P:Northwoods.Go.Diagram.DefaultScale"/>, which is normally 1.0.  The value should be greater than zero.</param>
            <seealso cref="M:Northwoods.Go.CommandHandler.CanResetZoom(System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanResetZoom(System.Double)">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.ResetZoom(System.Double)"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="newscale">This defaults to <see cref="P:Northwoods.Go.Diagram.DefaultScale"/>, which is normally 1.0.  The value should be greater than zero.</param>
            <returns>This returns true if <see cref="P:Northwoods.Go.Diagram.AllowZoom"/> is true.
            and if the new scale is within the range of <see cref="P:Northwoods.Go.Diagram.MinScale"/> and <see cref="P:Northwoods.Go.Diagram.MaxScale"/>.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.ResetZoom(System.Double)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.ZoomToFit">
             <summary>
             This command changes the <see cref="P:Northwoods.Go.Diagram.Scale"/> so that the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> fits within the viewport.
             This is normally invoked by the `Shift-Z` keyboard shortcut.
             </summary>
             <remarks>
             This animates zooming by default. <see cref="M:Northwoods.Go.Diagram.ZoomToFit"/> does not animate.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanZoomToFit"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanZoomToFit">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.ZoomToFit"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>This returns true if <see cref="P:Northwoods.Go.Diagram.AllowZoom"/> is true.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.ZoomToFit"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.ScrollToPart(Northwoods.Go.Part)">
             <summary>
             This command scrolls the diagram to make a highlighted or selected Part visible in the viewport.
             This is normally invoked by the `Space` keyboard shortcut.
             </summary>
             <remarks>
             Call this command repeatedly to cycle through the <see cref="P:Northwoods.Go.Diagram.Highlighteds"/> collection,
             if there are any Parts in that collection, or else in the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection,
             scrolling to each one in turn by calling <see cref="M:Northwoods.Go.Diagram.CenterRect(Northwoods.Go.Rect)"/>.
            
             This method animates to the scrolled part, and <see cref="M:Northwoods.Go.Diagram.ScrollToRect(Northwoods.Go.Rect)"/> does not.
            
             If there is no argument and there is no highlighted or selected Part, this command does nothing.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="part">This defaults to the first highlighted Part of <see cref="P:Northwoods.Go.Diagram.Highlighteds"/>,
             or, if there are no highlighted Parts, the first selected Part.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanScrollToPart(Northwoods.Go.Part)"/>
             <seealso cref="M:Northwoods.Go.Diagram.ScrollToRect(Northwoods.Go.Rect)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.FollowCollapsedPart(Northwoods.Go.Part,System.Collections.Generic.Stack{Northwoods.Go.Part})">
            <summary>
            Return an Array of Parts that need to be expanded in order for the given part to become visible.
            </summary>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanScrollToPart(Northwoods.Go.Part)">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.ScrollToPart(Northwoods.Go.Part)"/> command.
            This returns false if there is no argument Part and there are no selected Parts.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="part">This defaults to the first selected Part of <see cref="P:Northwoods.Go.Diagram.Selection"/></param>
            <returns>This returns true if <see cref="P:Northwoods.Go.Diagram.AllowHorizontalScroll"/> and <see cref="P:Northwoods.Go.Diagram.AllowVerticalScroll"/> are true.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.ScrollToPart(Northwoods.Go.Part)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CollapseTree(Northwoods.Go.Node)">
             <summary>
             This command collapses all expanded selected <see cref="T:Northwoods.Go.Node"/>s.
             This currently has no default keyboard shortcut.
             </summary>
             <remarks>
             This operation is performed within a "Collapse Tree" transaction.
             Just before the end of the transaction this raises the "TreeCollapsed" <see cref="T:Northwoods.Go.DiagramEvent"/>,
             with a collection of collapsed <see cref="T:Northwoods.Go.Node"/>s as the subject.
            
             This calls <see cref="M:Northwoods.Go.Node.CollapseTree(System.Int32)"/> to perform the collapse, which will set <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/> to false.
             You may want to save the collapsed/expanded state to the model by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "IsTreeExpanded" property of your Nodes,
             and perhaps also on the <see cref="P:Northwoods.Go.Node.WasTreeExpanded"/> property.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="node">if supplied, ignore the selection and collapse this particular Node subtree.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanCollapseTree(Northwoods.Go.Node)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanCollapseTree(Northwoods.Go.Node)">
            <summary>
            This predicate controls whether the user can collapse expanded subtrees of <see cref="T:Northwoods.Go.Node"/>s.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="node">if supplied, ignore the selection and consider collapsing this particular Node.</param>
            <seealso cref="M:Northwoods.Go.CommandHandler.CollapseTree(Northwoods.Go.Node)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.ExpandTree(Northwoods.Go.Node)">
             <summary>
             This command expands all collapsed selected <see cref="T:Northwoods.Go.Node"/>s.
             This currently has no default keyboard shortcut.
             </summary>
             <remarks>
             This operation is performed within an "Expand Tree" transaction.
             Just before the end of the transaction this raises the "TreeExpanded" <see cref="T:Northwoods.Go.DiagramEvent"/>,
             with a collection of expanded <see cref="T:Northwoods.Go.Node"/>s as the subject.
            
            
             This calls <see cref="M:Northwoods.Go.Node.ExpandTree(System.Int32)"/> to perform the expand, which will set <see cref="P:Northwoods.Go.Node.IsTreeExpanded"/> to true.
             You may want to save the collapsed/expanded state to the model by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "IsTreeExpanded" property of your Nodes,
             and perhaps also on the <see cref="P:Northwoods.Go.Node.WasTreeExpanded"/> property.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="node">if supplied, ignore the selection and collapse this particular Node subtree.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanExpandTree(Northwoods.Go.Node)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanExpandTree(Northwoods.Go.Node)">
            <summary>
            This predicate controls whether the user can expand collapsed subtrees of <see cref="T:Northwoods.Go.Node"/>s.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="node">if supplied, ignore the selection and consider expanding this particular Node.</param>
            <seealso cref="M:Northwoods.Go.CommandHandler.ExpandTree(Northwoods.Go.Node)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.GroupSelection">
             <summary>
             This command adds a copy of <see cref="P:Northwoods.Go.CommandHandler.ArchetypeGroupData"/> to the diagram's model
             to create a new <see cref="T:Northwoods.Go.Group"/> and then adds the selected <see cref="T:Northwoods.Go.Part"/>s to that new group.
             This is normally invoked by the `Ctrl-G` keyboard shortcut.
             </summary>
             <remarks>
             This creates a new <see cref="T:Northwoods.Go.Group"/> by adding a copy of the <see cref="P:Northwoods.Go.CommandHandler.ArchetypeGroupData"/> to the model.
             Each of the selected parts for which <see cref="M:Northwoods.Go.Part.CanGroup"/> is true
             and for which <see cref="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)"/> is true
             is made a member of that new group.
             If all of the selected groupable parts were members of a pre-existing group,
             the new group also becomes a member of that pre-existing group,
             if <see cref="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)"/> is true for that existing group with the new group.
             The new group becomes the only selected part.
             This raises the "SelectionGrouped" diagram event.
             This method also raises the "ChangingSelection" and "ChangedSelection" diagram events.
             Changes are performed in a "Group" transaction, but the selection events are raised outside the transaction.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanGroupSelection"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanGroupSelection">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.GroupSelection"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>This returns true:
            if the <see cref="P:Northwoods.Go.CommandHandler.ArchetypeGroupData"/> is not null,
            if the diagram is not <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.Go.Diagram.AllowInsert"/> is true,
            if <see cref="P:Northwoods.Go.Diagram.AllowGroup"/> is true,
            if <see cref="P:Northwoods.Go.Diagram.Model"/> is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>, and
            if there is any selected <see cref="T:Northwoods.Go.Part"/> that can be <see cref="M:Northwoods.Go.Part.CanGroup"/>ed.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.GroupSelection"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)">
             <summary>
             This predicate is called to determine whether a Node may be added as a member of a Group.
             </summary>
             <remarks>
             This always checks to make sure no group might become a member of itself, either directly or indirectly.
             If the Group has a <see cref="P:Northwoods.Go.Group.MemberValidation"/> predicate and if it returns false, this method returns false.
             If this CommandHandler has a <see cref="P:Northwoods.Go.CommandHandler.MemberValidation"/> predicate and if it returns false, this method returns false.
             Otherwise this will return true.
            
             <p class="box">
             For a more general discussion of validation, see <a href="../../intro/validation.html">Introduction to Validation</a>.
             </p>
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="group">this may be null if the node is being added as a top-level node.</param>
             <param name="part">a Part, usually a Node, possibly another Group, but not a Link or an Adornment.</param>
             <returns>true if OK to add the node to the group.</returns>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.UngroupSelection(Northwoods.Go.Group)">
             <summary>
             This command removes selected groups from the diagram without removing their members from the diagram.
             This is normally invoked by the `Ctrl-Shift-G` keyboard shortcut.
             </summary>
             <remarks>
             For the given group, or if not supplied, each selected <see cref="T:Northwoods.Go.Group"/> that is <see cref="P:Northwoods.Go.Group.Ungroupable"/>,
             expand the subgraph and change all of its member parts to be members of the group that the selected group node is in.
             (If the selected group is a top-level node, i.e. not a member of any group node, its members become top-level parts too.)
             All of those selected groups are deleted.
             All of the reparented member parts are selected.
            
             This raises the "SelectionUngrouped" diagram event.
             This method also raises the "ChangingSelection" and "ChangedSelection" diagram events.
             Changes are performed in an "Ungroup" transaction, but the selection events are raised outside the transaction.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="group">if supplied, ignore the selection and consider ungrouping this particular Group.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanUngroupSelection(Northwoods.Go.Group)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanUngroupSelection(Northwoods.Go.Group)">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.UngroupSelection(Northwoods.Go.Group)"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="group">if supplied, ignore the selection and consider ungrouping this particular Group.</param>
            <returns>This returns true:
            if the diagram is not <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.Go.Diagram.AllowDelete"/> is true,
            if <see cref="P:Northwoods.Go.Diagram.AllowUngroup"/> is true,
            if <see cref="P:Northwoods.Go.Diagram.Model"/> is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>, and
            if there are any selected <see cref="T:Northwoods.Go.Group"/>s that are <see cref="P:Northwoods.Go.Group.Ungroupable"/>.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.UngroupSelection(Northwoods.Go.Group)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.AddTopLevelParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)">
             <summary>
             Make sure all of the unnested <see cref="T:Northwoods.Go.Part"/>s in the given collection
             are removed from any containing <see cref="T:Northwoods.Go.Group"/>s.
             </summary>
             <remarks>
             This sets <see cref="P:Northwoods.Go.Part.ContainingGroup"/> to null on each Part that is
             not a member of another Part in the argument collection.
             If the check argument to this method is supplied and true,
             this will call <see cref="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)"/> on each part, passing null as the first argument.
            
             This functionality is similar to <see cref="M:Northwoods.Go.CommandHandler.UngroupSelection(Northwoods.Go.Group)"/>,
             except that this is not a command (there is no transaction and this does not raise a <see cref="T:Northwoods.Go.DiagramEvent"/>)
             and the parts are necessarily becoming top-level parts
             (whereas ungrouping would add them to the Group containing the Group being ungrouped).
            
             This function is typically called in a <see cref="P:Northwoods.Go.Diagram.MouseDrop"/> event handler
             in order to remove the selected Parts from whatever <see cref="T:Northwoods.Go.Group"/> they had been in.
            
             If you want to add Parts to be members of a Group, call <see cref="M:Northwoods.Go.Group.AddMembers(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/>.
             If you want to remove Parts completely from a Diagram, call <see cref="M:Northwoods.Go.Diagram.RemoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean)"/>.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="coll">a collection of Parts.</param>
             <param name="check">check whether to call <see cref="M:Northwoods.Go.CommandHandler.IsValidMember(Northwoods.Go.Group,Northwoods.Go.Part)"/> to confirm that changing the Part to be a top-level Part is valid.</param>
             <returns>true if all non-Links were changed to be top-level Parts in this Diagram; false if some Parts or Nodes were not able to be added.</returns>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CollapseSubGraph(Northwoods.Go.Group)">
             <summary>
             This command collapses all expanded selected <see cref="T:Northwoods.Go.Group"/>s.
             This currently has no default keyboard shortcut.
             </summary>
             <remarks>
             This operation is performed within a "Collapse SubGraph" transaction.
             Just before the end of the transaction this raises the "SubGraphCollapsed" <see cref="T:Northwoods.Go.DiagramEvent"/>,
             with a collection of collapsed <see cref="T:Northwoods.Go.Group"/>s as the subject.
            
            
             This calls <see cref="M:Northwoods.Go.Group.CollapseSubGraph"/> to perform the collapse, which will set <see cref="P:Northwoods.Go.Group.IsSubGraphExpanded"/> to false.
             You may want to save the collapsed/expanded state to the model by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "IsSubGraphExpanded" property of your Groups,
             and perhaps also on the <see cref="P:Northwoods.Go.Group.WasSubGraphExpanded"/> property.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="group">if supplied, ignore the selection and collapse this particular Group.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanCollapseSubGraph(Northwoods.Go.Group)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanCollapseSubGraph(Northwoods.Go.Group)">
            <summary>
            This predicate controls whether the user can collapse expanded <see cref="T:Northwoods.Go.Group"/>s.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="group">if supplied, ignore the selection and consider collapsing this particular Group.</param>
            <seealso cref="M:Northwoods.Go.CommandHandler.CollapseSubGraph(Northwoods.Go.Group)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.ExpandSubGraph(Northwoods.Go.Group)">
             <summary>
             This command expands all collapsed selected <see cref="T:Northwoods.Go.Group"/>s.
             This currently has no default keyboard shortcut.
             </summary>
             <remarks>
             This operation is performed within an "Expand SubGraph" transaction.
             Just before the end of the transaction this raises the "SubGraphExpanded" <see cref="T:Northwoods.Go.DiagramEvent"/>,
             with a collection of expanded <see cref="T:Northwoods.Go.Group"/>s as the subject.
            
            
             This calls <see cref="M:Northwoods.Go.Group.ExpandSubGraph"/> to perform the collapse, which will set <see cref="P:Northwoods.Go.Group.IsSubGraphExpanded"/> to true.
             You may want to save the collapsed/expanded state to the model by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "IsSubGraphExpanded" property of your Groups,
             and perhaps also on the <see cref="P:Northwoods.Go.Group.WasSubGraphExpanded"/> property.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="group">if supplied, ignore the selection and expand this particular Group.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanExpandSubGraph(Northwoods.Go.Group)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanExpandSubGraph(Northwoods.Go.Group)">
            <summary>
            This predicate controls whether the user can expand collapsed <see cref="T:Northwoods.Go.Group"/>s.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="group">if supplied, ignore the selection and consider expanding this particular Group.</param>
            <seealso cref="M:Northwoods.Go.CommandHandler.ExpandSubGraph(Northwoods.Go.Group)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.EditTextBlock(Northwoods.Go.TextBlock)">
             <summary>
             This command starts in-place editing of a <see cref="T:Northwoods.Go.TextBlock"/> in the selected <see cref="T:Northwoods.Go.Part"/>.
             This is normally invoked by the `F2` keyboard shortcut.
             </summary>
             <remarks>
             This starts the <see cref="T:Northwoods.Go.Tools.TextEditingTool"/> to have the user enter or modify the text string and finally set the <see cref="P:Northwoods.Go.TextBlock.Text"/>.
             You may want to save the new string to the model by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "Text" property of your TextBlock.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="textblock">the <see cref="T:Northwoods.Go.TextBlock"/> to start editing.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanEditTextBlock(Northwoods.Go.TextBlock)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanEditTextBlock(Northwoods.Go.TextBlock)">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.EditTextBlock(Northwoods.Go.TextBlock)"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="textblock">the <see cref="T:Northwoods.Go.TextBlock"/> to consider editing.</param>
            <returns>This returns true:
            if the diagram is not <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.Go.Diagram.AllowTextEdit"/> is true,
            if there is a <see cref="P:Northwoods.Go.Tools.ToolManager.TextEditingTool"/>, and
            if there is any selected <see cref="T:Northwoods.Go.Part"/> for which <see cref="M:Northwoods.Go.Part.CanEdit"/> is true.</returns>
            <seealso cref="M:Northwoods.Go.CommandHandler.EditTextBlock(Northwoods.Go.TextBlock)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.ShowContextMenu(Northwoods.Go.Tools.IHasContextMenu)">
             <summary>
             This command opens the context menu for a selected Part or given GraphObject, or else for the whole Diagram.
             This is normally invoked by the `Menu` keyboard shortcut.
             </summary>
             <remarks>
             The given GraphObject must have a <see cref="P:Northwoods.Go.GraphObject.ContextMenu"/>
             defined in order to show anything.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="obj">a GraphObject or Diagram with a contextMenu defined.
             If none is given, this method will use the first selected object, or else the Diagram.
             The method will simulate a right-button click at the middle of the GraphObject or,
             if a Diagram, at the current mouse position if it is in the viewport.</param>
             <seealso cref="M:Northwoods.Go.CommandHandler.CanShowContextMenu(Northwoods.Go.Tools.IHasContextMenu)"/>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.CanShowContextMenu(Northwoods.Go.Tools.IHasContextMenu)">
            <summary>
            This predicate controls whether or not the user can invoke the <see cref="M:Northwoods.Go.CommandHandler.ShowContextMenu(Northwoods.Go.Tools.IHasContextMenu)"/> command.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            This method must not have any side-effects.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="obj">a GraphObject or Diagram with a ContextMenu defined.
            If none is given, this method will use the first selected object, or else the Diagram.</param>
            <seealso cref="M:Northwoods.Go.CommandHandler.ShowContextMenu(Northwoods.Go.Tools.IHasContextMenu)"/>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.CopiesClipboardData">
            @hidden @internal
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.CommandHandler.CopyToClipboard(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> should also copy any bound data objects.
            </summary>
            <remarks>
            The default value is true.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.CopiesConnectedLinks">
             <summary>
             Gets or sets whether <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> should also copy Links that connect with selected Nodes.
             </summary>
             <remarks>
             The default value is true.
             Setting this property does not raise any events.
            
             The <see cref="P:Northwoods.Go.Tools.DraggingTool.CopiesEffectiveCollection"/> property serves a similar role for the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>
             when the user holds down the control key to modify the drag into a copy operation.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.DeletesConnectedLinks">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/> should also delete links that are connected to nodes that are deleted.
            </summary>
            <remarks>
            The default value is true.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.CopiesTree">
             <summary>
             Gets or sets whether <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> should also copy subtrees.
             </summary>
             <remarks>
             The default value is false.
             Setting this property does not raise any events.
            
             The <see cref="P:Northwoods.Go.Tools.DraggingTool.DragsTree"/> property serves a similar role for the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>
             for both moving and copying operations.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.DeletesTree">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/> should also delete subtrees.
            </summary>
            <remarks>
            The default value is false.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.CopiesParentKey">
             <summary>
             Gets or sets whether <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> and <see cref="M:Northwoods.Go.CommandHandler.CopyToClipboard(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> copy the node data property
             whose value is the tree-parent node data's key.
             </summary>
             <remarks>
             Set this property to true if you want a copy/paste of a node to automatically have the new node be a tree-child of the original tree-parent node.
             Warning: this only has an effect if the Diagram's <see cref="P:Northwoods.Go.Diagram.Model"/> is an <see cref="T:Northwoods.Go.Models.ITreeModel"/>.
            
             The default value is false.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.CopiesGroupKey">
             <summary>
             Gets or sets whether <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> and <see cref="M:Northwoods.Go.CommandHandler.CopyToClipboard(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> copy the node data property
             whose value is the containing group data's key.
             </summary>
             <remarks>
             Set this property to true if you want a copy/paste of a node to automatically have the new node be a member of the original group.
             Warning: this only has an effect if the Diagram's <see cref="P:Northwoods.Go.Diagram.Model"/> is an <see cref="T:Northwoods.Go.Models.IGroupModel"/>.
            
             The default value is false.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.ArchetypeGroupData">
            <summary>
            Gets or sets a data object that is copied by <see cref="M:Northwoods.Go.CommandHandler.GroupSelection"/>
            when creating a new Group.
            </summary>
            <remarks>
            The default value is null.
            If you set this to an Object, be sure that <see cref="M:Northwoods.Go.Models.IGroupModel.IsGroupForData(System.Object)"/> is true for that object.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.MemberValidation">
             <summary>
             Gets or sets the predicate that determines whether or not a node may become a member of a group.
             </summary>
             <remarks>
             This predicate is called in addition to any existing group's <see cref="P:Northwoods.Go.Group.MemberValidation"/> predicate.
             The default predicate is null, which is equivalent to simply returning true.
             The predicate may be called passing null as the first argument (the Group) --
             this asks whether it is OK to make the second argument (the Part, but not a Link) a top-level Part of the diagram.
            
             <p class="box">
             For a more general discussion of validation, see <a href="../../intro/validation.html">Introduction to Validation</a>.
             </p>
            
             The function, if supplied, must not have any side-effects.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.ZoomFactor">
            <summary>
            Gets or sets the amount by which <see cref="M:Northwoods.Go.CommandHandler.DecreaseZoom(System.Double)"/> and <see cref="M:Northwoods.Go.CommandHandler.IncreaseZoom(System.Double)"/> change
            the <see cref="P:Northwoods.Go.Diagram.Scale"/>.
            </summary>
            <remarks>
            The default value is 1.05 (5%).
            The value must be a double larger than 1.0.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.CommandHandler.ScrollToPartPause">
            <summary>
            Gets or sets the delay used between each expansion step when <see cref="M:Northwoods.Go.CommandHandler.ScrollToPart(Northwoods.Go.Part)"/>
            needs to expand subtrees or subgraphs in order to make the given Part visible.
            </summary>
            <remarks>
            The default value is 200 -- there is a pause after each tree or subgraph expansion
            when trying to scroll to a hidden Part.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.CommandHandler.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.DraggingOptions)">
             <summary>
             Find the actual collection of nodes and links to be moved or copied,
             given an initial collection.
             </summary>
             <remarks>
             This includes links that connected at both ends to nodes being moved or copied,
             members of <see cref="T:Northwoods.Go.Group"/>s, and if <see cref="P:Northwoods.Go.Tools.DraggingTool.DragsTree"/> is true,
             this includes nodes and links that are "tree" descendants from selected nodes.
            
             Note that this does not return a simple collection of <see cref="T:Northwoods.Go.Part"/>s,
             but a Dictionary associating a chosen <see cref="T:Northwoods.Go.Part"/>
             with a <see cref="T:Northwoods.Go.DraggingInfo"/> holding its original location Points as the value of the "Point" property.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="parts">A collection of <see cref="T:Northwoods.Go.Part"/>s.</param>
             <param name="options">Potential options for the collection computation. If not specified, this uses the DraggingTool's drag options.</param>
             <returns>a Dictionary mapping <see cref="T:Northwoods.Go.Part"/>s to <see cref="T:Northwoods.Go.DraggingInfo"/>s
             that have a "point" property remembering the original location of that Part.</returns>
        </member>
        <member name="T:Northwoods.Go.DiagramEvent">
             <summary>
             A DiagramEvent represents a more abstract event than an <see cref="T:Northwoods.Go.InputEvent"/>.
             They are raised on the <see cref="T:Northwoods.Go.Diagram"/> class.
             </summary>
             <remarks>
             One can receive such events by registering a DiagramEvent listener on a Diagram.
             The listener function, when called, will be passed an instance of a <see cref="T:Northwoods.Go.DiagramEvent"/>.
             Use the <see cref="P:Northwoods.Go.DiagramEvent.Name"/> property to decide what kind of diagram event it is.
             The <see cref="P:Northwoods.Go.DiagramEvent.Diagram"/> property refers to the Diagram, and you can get additional information
             from that, such as the <see cref="P:Northwoods.Go.Diagram.LastInput"/>, which in turn provides information
             such as <see cref="P:Northwoods.Go.InputEvent.DocumentPoint"/> that may be relevant for that kind of DiagramEvent.
            
             The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> and <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> properties optionally provide additional information
             about the diagram event.  The subject could be a collection of <see cref="T:Northwoods.Go.Part"/>s or it could be
             an individual object such as a <see cref="T:Northwoods.Go.Link"/> or a <see cref="T:Northwoods.Go.GraphObject"/> within a <see cref="T:Northwoods.Go.Node"/>.
             Everything depends on the kind of diagram event that it is.
            
             Some DiagramEvents such as "ElementSingleClicked" or "BackgroundDoubleClicked" are normally
             associated with <see cref="T:Northwoods.Go.InputEvent"/>s.
             Some DiagramEvents such as "SelectionMoved" or "PartRotated" are associated with the
             results of <see cref="T:Northwoods.Go.Tools.Tool"/>-handled gestures or <see cref="T:Northwoods.Go.CommandHandler"/> actions.
             Some DiagramEvents are not necessarily associated with any input events at all,
             such as "ViewportBoundsChanged", which can happen due to programmatic
             changes to the <see cref="P:Northwoods.Go.Diagram.Position"/> and <see cref="P:Northwoods.Go.Diagram.Scale"/> properties.
            
             DiagramEvents that occur during a transaction may be called before the state of the whole diagram has settled down.
             This often means that such events occur before a layout, so nodes may not have their final positions,
             links may not have their final routes, and the <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/> and <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/>
             may not yet have been updated.
             Such events may make additional changes to the diagram, which may in turn result in additional side-effects.
            
             DiagramEvents that occur outside of a transaction require you to start and commit a transaction around any side-effects that you want to do.
             However, some DiagramEvents do not allow you to make any changes to the Diagram or Model.
            
             Currently defined diagram event names are part of the <see cref="T:Northwoods.Go.DiagramEventName"/> enumeration.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.DiagramEvent.Diagram">
            <summary>
            Gets or sets the diagram associated with the event.
            </summary>
        </member>
        <member name="P:Northwoods.Go.DiagramEvent.Name">
            <summary>
            Gets or sets the name of the kind of diagram event that this represents.
            </summary>
        </member>
        <member name="P:Northwoods.Go.DiagramEvent.Subject">
            <summary>
            Gets or sets an optional object that is the subject of the diagram event.
            </summary>
            <remarks>
            This property defaults to null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.DiagramEvent.Parameter">
            <summary>
            Gets or sets an optional object that describes the change to the subject of the diagram event.
            </summary>
            <remarks>
            This property defaults to null.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.DiagramEvent.#ctor">
            <summary>
            The DiagramEvent class constructor produces an empty DiagramEvent.
            </summary>
            <remarks>
            You should never need to call this constructor.
            But if you do, you must first set <see cref="P:Northwoods.Go.DiagramEvent.Diagram"/> to the Diagram before any other use.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.DiagramEvent.#ctor(Northwoods.Go.DiagramEvent)">
            <summary>
            Make a copy of a DiagramEvent.
            </summary>
        </member>
        <member name="M:Northwoods.Go.DiagramEvent.ToString">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.DiagramEventName">
            <summary>
            This enumeration specifies the various names for DiagramEvents.
            </summary>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.None">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.InitialAnimationStarting">
            <summary>
            The initial <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/> is about to start.
            </summary>
            <remarks>
            This can be useful for customizing the initial animation, see <see cref="P:Northwoods.Go.AnimationManager.InitialAnimationStyle"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.AnimationStarting">
            <summary>
            A <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/> is about to start.
            </summary>
            <remarks>
            Do not modify the Diagram or its Model in the event listener.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.AnimationFinished">
            <summary>
            A <see cref="P:Northwoods.Go.AnimationManager.DefaultAnimation"/> just completed.
            </summary>
            <remarks>
            Do not modify the Diagram or its Model in the event listener.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.BackgroundSingleClicked">
            <summary>
            A click that was not on any Part.
            </summary>
            <remarks>
            If you make any changes, start and commit your own transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.BackgroundDoubleClicked">
            <summary>
            A double-click that was not on any Part.
            </summary>
            <remarks>
            If you make any changes, start and commit your own transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.BackgroundContextClicked">
            <summary>
            A context-click that was not on any Part.
            </summary>
            <remarks>
            If you make any changes, start and commit your own transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.ChangingSelection">
            <summary>
            An operation is about to change the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection.
            Do not make any changes to the selection or the diagram in the event listener.
            Note that just setting <see cref="P:Northwoods.Go.Part.IsSelected"/> will not raise this event, but tools and commands will.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.ChangedSelection">
            <summary>
            An operation has just changed the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection.
            Do not make any changes to the selection or the diagram in the event listener.
            Note that just setting <see cref="P:Northwoods.Go.Part.IsSelected"/> will not raise this event, but tools and commands will.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.ClipboardChanged">
            <summary>
            Parts have been copied to the clipboard by <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the collection of <see cref="T:Northwoods.Go.Part"/>s.
            If you make any changes, start and commit your own transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.ClipboardPasted">
            <summary>
            Parts have been copied from the clipboard into the Diagram by <see cref="M:Northwoods.Go.CommandHandler.PasteSelection(System.Nullable{Northwoods.Go.Point})"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the <see cref="P:Northwoods.Go.Diagram.Selection"/>,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.DocumentBoundsChanged">
            <summary>
            The area of the diagram's Parts, <see cref="P:Northwoods.Go.Diagram.DocumentBounds"/>, has changed.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> is the old <see cref="T:Northwoods.Go.Rect"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.ExternalObjectsDropped">
            <summary>
            Parts have been copied into the Diagram by drag-and-drop from outside of the Diagram.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the set of <see cref="T:Northwoods.Go.Part"/>s that were dropped (which is also the <see cref="P:Northwoods.Go.Diagram.Selection"/>),
            the <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> is the source <see cref="T:Northwoods.Go.Diagram"/>,
            and this is called within a transaction. If you choose, you can cancel the drop by executing:
            <code>e.Diagram.ToolManager.DraggingTool.TransactionResult = null;</code>
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.GainedFocus">
            <summary>
            The diagram has gained keyboard focus, such as after a call to <see cref="M:Northwoods.Go.Diagram.Focus"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.InitialLayoutCompleted">
            <summary>
            The whole diagram layout has updated for the first time since a major change to the Diagram, such as replacing the Model.
            </summary>
            <remarks>
            If you make any changes, you do not need to perform a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.LayoutCompleted">
            <summary>
            The whole diagram layout has just been updated.
            </summary>
            <remarks>
            If you make any changes, you do not need to perform a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.LinkDrawn">
            <summary>
            The user has just created a new Link using <see cref="T:Northwoods.Go.Tools.LinkingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the new <see cref="T:Northwoods.Go.Link"/>,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.LinkRelinked">
            <summary>
            The user has just reconnected an existing Link using <see cref="T:Northwoods.Go.Tools.RelinkingTool"/> or <see cref="T:Northwoods.Go.Tools.DraggingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the modified <see cref="T:Northwoods.Go.Link"/>,
            the <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> is the <see cref="T:Northwoods.Go.GraphObject"/> port that the link was disconnected from,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.LinkReshaped">
            <summary>
            The user has just rerouted an existing Link using <see cref="T:Northwoods.Go.Tools.LinkReshapingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the modified <see cref="T:Northwoods.Go.Link"/>,
            the <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> is the list of Points of the link's original route,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.LostFocus">
            <summary>
            The diagram has lost keyboard focus, a.k.a. "blur".
            </summary>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.Modified">
            <summary>
            The <see cref="P:Northwoods.Go.Diagram.IsModified"/> property has been set to a new value --
            useful for marking a window as having been modified since the last save.
            </summary>
            <remarks>
            Do not modify the Diagram or its Model in the event listener.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.ElementSingleClicked">
            <summary>
            A click that occurred on a GraphObject.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the <see cref="T:Northwoods.Go.GraphObject"/>.
            If you make any changes, start and commit your own transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.ElementDoubleClicked">
            <summary>
            A double-click that occurred on a GraphObject.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the <see cref="T:Northwoods.Go.GraphObject"/>.
            If you make any changes, start and commit your own transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.ElementContextClicked">
            <summary>
            A context-click that occurred on a GraphObject.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the <see cref="T:Northwoods.Go.GraphObject"/>.
            If you make any changes, start and commit your own transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.PartCreated">
            <summary>
            The user inserted a new Part by <see cref="T:Northwoods.Go.Tools.ClickCreatingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the new <see cref="T:Northwoods.Go.Part"/>,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.PartResized">
            <summary>
            The user has changed the size of a GraphObject by <see cref="T:Northwoods.Go.Tools.ResizingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the <see cref="T:Northwoods.Go.GraphObject"/>,
            the <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> is the original Size,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.PartRotated">
            <summary>
            The user has changed the angle of a GraphObject by <see cref="T:Northwoods.Go.Tools.RotatingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the <see cref="T:Northwoods.Go.GraphObject"/>,
            the <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> is the original angle in degrees,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.SelectionMoved">
            <summary>
            The user has moved selected Parts by <see cref="T:Northwoods.Go.Tools.DraggingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is a Set of the moved Parts,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.SelectionCopied">
            <summary>
            The user has copied selected Parts by <see cref="T:Northwoods.Go.Tools.DraggingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is Set of the newly copied Parts,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.SelectionDeleted">
            <summary>
            The user has deleted selected Parts by <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the collection of <see cref="T:Northwoods.Go.Part"/>s that were deleted,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.SelectionDeleting">
            <summary>
            The user is about to delete selected Parts by <see cref="M:Northwoods.Go.CommandHandler.DeleteSelection"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection of Parts to be deleted,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.SelectionGrouped">
            <summary>
            The user has made a new Group out of the selected Parts by <see cref="M:Northwoods.Go.CommandHandler.GroupSelection"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the new <see cref="T:Northwoods.Go.Group"/>,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.SelectionUngrouped">
            <summary>
            The user has removed a selected Group but kept its members by <see cref="M:Northwoods.Go.CommandHandler.UngroupSelection(Northwoods.Go.Group)"/>.
            </summary>
            <remarks>
            the <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the collection of <see cref="T:Northwoods.Go.Group"/>s that were ungrouped,
            the <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> is the collection of former member <see cref="T:Northwoods.Go.Part"/>s that were ungrouped,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.SubGraphCollapsed">
            <summary>
            The user has collapsed selected Groups by <see cref="M:Northwoods.Go.CommandHandler.CollapseSubGraph(Northwoods.Go.Group)"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the collection of <see cref="T:Northwoods.Go.Group"/>s that were collapsed,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.SubGraphExpanded">
            <summary>
            The user has expanded selected Groups by <see cref="M:Northwoods.Go.CommandHandler.ExpandSubGraph(Northwoods.Go.Group)"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the collection of <see cref="T:Northwoods.Go.Group"/>s that were expanded,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.TextEdited">
            <summary>
            The user has changed the string value of a TextBlock by <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the edited <see cref="T:Northwoods.Go.TextBlock"/>,
            the <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> is the original string,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.TreeCollapsed">
            <summary>
            The user has collapsed selected Nodes with subtrees by <see cref="M:Northwoods.Go.CommandHandler.CollapseTree(Northwoods.Go.Node)"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the collection of <see cref="T:Northwoods.Go.Node"/>s that were collapsed,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.TreeExpanded">
            <summary>
            The user has expanded selected Nodes with subtrees by <see cref="M:Northwoods.Go.CommandHandler.ExpandTree(Northwoods.Go.Node)"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is the collection of <see cref="T:Northwoods.Go.Node"/>s that were expanded,
            and this is called within a transaction.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.ViewportBoundsChanged">
            <summary>
            The visible area of the Diagram, <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/>, has changed.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.DiagramEvent.Subject"/> is an object whose "Scale" property is the old <see cref="P:Northwoods.Go.Diagram.Scale"/> value,
            whose "Position" property is the old <see cref="P:Northwoods.Go.Diagram.Position"/> value,
            and whose "Bounds" property is the old <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/> value.
            The <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/> is also the old ViewportBounds <see cref="T:Northwoods.Go.Rect"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.DiagramEventName.InvalidateDraw">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IShowHidable">
            <summary>
            IShowHidable is used to show and hide elements, such as a context menus, tooltips, or text editors.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IShowHidable.Show(Northwoods.Go.GraphObject,Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)">
             <summary>
             Gets or sets the function to call when an IShowHidable is to be shown,
             such as when used as the <see cref="P:Northwoods.Go.GraphObject.ContextMenu"/>
             or <see cref="P:Northwoods.Go.Diagram.ToolTip"/> or <see cref="P:Northwoods.Go.TextBlock.TextEditor"/>.
             </summary>
             <remarks>
             If this is called by:
               - <see cref="M:Northwoods.Go.Tools.ContextMenuTool.ShowContextMenu(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)"/>,
                 the first argument is the <see cref="T:Northwoods.Go.GraphObject"/> for which the context menu is being shown,
                 or null for the diagram background.
               - <see cref="M:Northwoods.Go.Tools.ToolManager.ShowToolTip(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)"/>,
                 the first argument is the <see cref="T:Northwoods.Go.GraphObject"/> for which the tooltip is being shown,
                 or null for the diagram background.
               - <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/>, the first argument is the <see cref="T:Northwoods.Go.TextBlock"/> for which the text editor is being shown.
            
             If you need access to any bound data for the first argument, if it is non-null, you can get it via:
             `obj.Part.Data`
             and then you can look at any of the properties you have put on that data.
            
             When used as a context menu, typically shown elements, such as buttons, should call
             `diagram.CurrentTool.StopTool();` when their action is completed.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.IShowHidable.Hide(Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)">
             <summary>
             Gets or sets the function to call when an IShowHidable is to be hidden.
             </summary>
             <remarks>
             The function should "hide" the IShowHidable, either by removing any traces of it or otherwise
             returning the page state to one where the IShowHidable content is no longer considered active.
            
             Setting this is not strictly necessary, if no action is to be taken when hiding the IShowHidable.
            
             If this is called by:
               - <see cref="M:Northwoods.Go.Tools.ContextMenuTool.HideContextMenu"/>, the second argument is the <see cref="T:Northwoods.Go.Tools.ContextMenuTool"/>.
               - <see cref="M:Northwoods.Go.Tools.ToolManager.HideToolTip"/>, the second argument is the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
               - <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoDeactivate"/>, the second argument is the <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.IHostInfo">
             <summary>
             IHostInfo is used to show and hide custom elements with an associated value.
            
             Currently this is only used for text editing.
             </summary>
        </member>
        <member name="M:Northwoods.Go.IHostInfo.Value">
            <summary>
            A function that returns the primary value associated with this IHostInfo,
            such as the string value of a text editor, which would be solicited by the <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>.
            </summary>
            <remarks>
            This typically returns a string.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.InputEvent">
             <summary>
             An InputEvent represents a mouse or keyboard or touch event.
             </summary>
             <remarks>
             The principal properties hold information about a particular input event.
             These properties include the <see cref="P:Northwoods.Go.InputEvent.DocumentPoint"/> at which a mouse event
             occurred in document coordinates,
             the corresponding point in view/element coordinates, <see cref="P:Northwoods.Go.InputEvent.ViewPoint"/>,
             the <see cref="P:Northwoods.Go.InputEvent.Key"/> for keyboard events,
             and the <see cref="P:Northwoods.Go.InputEvent.Modifiers"/> and <see cref="P:Northwoods.Go.InputEvent.Button"/> at the time.
             Additional descriptive properties include <see cref="P:Northwoods.Go.InputEvent.ClickCount"/>, <see cref="P:Northwoods.Go.InputEvent.Delta"/>,
             <see cref="P:Northwoods.Go.InputEvent.Timestamp"/>, and the source event <see cref="P:Northwoods.Go.InputEvent.Event"/> (if available).
            
             Many of its properties are provided for convenient access to the state of the input event,
             such as asking whether the <see cref="P:Northwoods.Go.InputEvent.Control"/> key was held down at the time,
             or the <see cref="P:Northwoods.Go.InputEvent.TargetElement"/> (a <see cref="T:Northwoods.Go.GraphObject"/>) that the mouse was over .
            
             When real events fire on the Diagram, InputEvents are created automatically set update the value of <see cref="P:Northwoods.Go.Diagram.LastInput"/>.
             These events set the value of <see cref="P:Northwoods.Go.InputEvent.Event"/> with the backing browser-defined Event,
             which may be a MouseEvent, KeyboardEvent, PointerEvent, TouchEvent, and so on.
            
             InputEvents backed by MouseEvents set both <see cref="P:Northwoods.Go.InputEvent.Button"/>, the button that caused the action,
             and <see cref="P:Northwoods.Go.InputEvent.Buttons"/>, the set of buttons currently pressed after the action has happened.
             By default a user-created InputEvent sets <see cref="P:Northwoods.Go.InputEvent.Button"/> and <see cref="P:Northwoods.Go.InputEvent.Buttons"/> as if the event was a left-click.
            
             You can create InputEvents and set the value of <see cref="P:Northwoods.Go.Diagram.LastInput"/> in order to simulate user actions in tools.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.InputEvent.#ctor">
            <summary>
            The InputEvent class constructor produces an empty InputEvent.
            </summary>
            <remarks>
            You should never need to call this constructor.
            But if you do, you must first set <see cref="P:Northwoods.Go.InputEvent.Diagram"/> to the Diagram before any other use.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.InputEvent.#ctor(Northwoods.Go.InputEvent)">
            <summary>
            Make a copy of an InputEvent.
            </summary>
        </member>
        <member name="M:Northwoods.Go.InputEvent.Clone(Northwoods.Go.InputEvent)">
            <summary>
            Clone this InputEvent's state onto a given InputEvent
            </summary>
        </member>
        <member name="M:Northwoods.Go.InputEvent.ToString">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.InputEvent.Diagram">
            <summary>
            Gets or sets the source diagram associated with the event.
            </summary>
        </member>
        <member name="P:Northwoods.Go.InputEvent.ViewPoint">
            <summary>
            Gets or sets the point at which this input event occurred.
            </summary>
            <remarks>
            The Point is in view coordinates within the viewport, not in document coordinates.
            This should be valid for mouse events.
            For keyboard events, this is the last available mouse point.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.DocumentPoint"/>
            <seealso cref="M:Northwoods.Go.Diagram.TransformViewToDoc(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Diagram.TransformDocToView(Northwoods.Go.Point)"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.DocumentPoint">
            <summary>
            Gets or sets the point at which this input event occurred, in document coordinates.
            </summary>
            <remarks>
            The Point is in document coordinates, the same as the <see cref="P:Northwoods.Go.GraphObject.Position"/>
            for <see cref="T:Northwoods.Go.Part"/>s in the diagram.
            This should be valid for mouse events.
            For keyboard events, this is the last available mouse point.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.ViewPoint"/>
            <seealso cref="M:Northwoods.Go.Diagram.TransformViewToDoc(Northwoods.Go.Point)"/>
            <seealso cref="M:Northwoods.Go.Diagram.TransformDocToView(Northwoods.Go.Point)"/>
        </member>
        <member name="M:Northwoods.Go.InputEvent.GetMultiTouchViewPoint(System.Double,Northwoods.Go.Point)">
            <summary>
            Undocumented
            </summary>
            <param name="n">the touch double, starting from 0. Typical values are 0 or 1 for two-touch input.</param>
            <param name="p">a point to be modified</param>
        </member>
        <member name="M:Northwoods.Go.InputEvent.GetMultiTouchDocumentPoint(System.Double,Northwoods.Go.Point)">
            <summary>
            Undocumented
            </summary>
            <param name="n">the touch double, starting from 0. Typical values are 0 or 1 for two-touch input.</param>
            <param name="p">a point to be modified</param>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Modifiers">
            <summary>
            Gets or sets the modifier keys that were used with the mouse or keyboard event.
            </summary>
            <remarks>
            The int will be a combination of flags representing Control, Shift, Alt or Meta.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.Control"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Shift"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Alt"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Meta"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Button">
             <summary>
             Gets or sets the numerical value representing the mouse button that caused this event.
             </summary>
             <remarks>
             Only one mouse button can cause an event at a time,
             but the set of all buttons currently pressed is kept in <see cref="P:Northwoods.Go.InputEvent.Buttons"/>.
            
             This property describes nothing during a `mousemove` event,
             since no button press causes the event. Instead, use the convenience properties
             <see cref="P:Northwoods.Go.InputEvent.Left"/>, <see cref="P:Northwoods.Go.InputEvent.Middle"/>, or <see cref="P:Northwoods.Go.InputEvent.Right"/>, or use the value
             of <see cref="P:Northwoods.Go.InputEvent.Buttons"/> to determine which mouse buttons are
             held during `mousemove` events.
            
             Common values for this property:
               - 0: left mouse button
               - 1: middle mouse button
               - 2: right mouse button
            
             Other values are possible if the mouse has additional buttons.
            
             If there is no associated <see cref="P:Northwoods.Go.InputEvent.Event"/>, setting this also
             sets the <see cref="P:Northwoods.Go.InputEvent.Buttons"/> flags to only this button.
            
             This property is valid if this is a mouse event.
             </remarks>
             <seealso cref="P:Northwoods.Go.InputEvent.Buttons"/>
             <seealso cref="P:Northwoods.Go.InputEvent.Left"/>
             <seealso cref="P:Northwoods.Go.InputEvent.Middle"/>
             <seealso cref="P:Northwoods.Go.InputEvent.Right"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Buttons">
             <summary>
             Gets or sets the set of buttons that are currently being held down.
             </summary>
             <remarks>
             If this is a `mouseup` event, this set of buttons does not include
             the button that was just released, which will be the value of <see cref="P:Northwoods.Go.InputEvent.Button"/>.
            
             Common values for this property:
               - 0: not holding down any button
               - 1: left mouse button
               - 2: right mouse button
               - 3: both left and right mouse buttons
               - 4: middle mouse button
               - 5: middle and left mouse buttons
               - 6: middle and right mouse buttons
               - 7: all three common mouse buttons
            
             Other values are possible if the mouse has additional buttons.
            
             This property is valid if this is a mouse event.
             </remarks>
             <seealso cref="P:Northwoods.Go.InputEvent.Button"/>
             <seealso cref="P:Northwoods.Go.InputEvent.Left"/>
             <seealso cref="P:Northwoods.Go.InputEvent.Middle"/>
             <seealso cref="P:Northwoods.Go.InputEvent.Right"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Key">
            <summary>
            Gets or sets the key pressed or released as this event. If it is a letter, the value is the uppercase version.
            </summary>
            <remarks>
            This property is valid if this is a keyboard event.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Down">
            <summary>
            Gets or sets whether the InputEvent represents a mouse-down or a key-down event.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Up">
            <summary>
            Gets or sets whether the InputEvent represents a mouse-up or a key-up event.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.InputEvent.ClickCount">
            <summary>
            Gets or sets whether this event represents a click or a double-click.
            </summary>
            <remarks>
            It is zero if not a click; one if a single-click; two if a double-click.
            This property is valid if this is a mouse event.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Delta">
            <summary>
            Gets or sets the amount of change associated with a mouse-wheel rotation.
            </summary>
            <remarks>
            It is an abstract double, either positive or negative.
            This property is valid if this is a mouse-wheel event.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.InputEvent.DeltaX">
            Used in StandardMouseWheel
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="P:Northwoods.Go.InputEvent.DeltaY">
            Used in StandardMouseWheel
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="P:Northwoods.Go.InputEvent.DeltaMode">
            Used in StandardMouseWheel
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="P:Northwoods.Go.InputEvent.IsMultiTouch">
            <summary>
            This property is true when the InputEvent is caused by a touch event that registered more than one touch.
            </summary>
            <seealso cref="P:Northwoods.Go.InputEvent.IsTouchEvent"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Handled">
            <summary>
            Gets or sets whether an InputEvent that applies to a <see cref="T:Northwoods.Go.GraphObject"/> and bubbles
            up the chain of containing <see cref="T:Northwoods.Go.Panel"/>s is stopped from continuing up the chain.
            </summary>
            <remarks>
            Some event handlers may set this to true to avoid getting any behavior from the containing Panels.
            The default value is false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Bubbles">
             <summary>
             (undocumented)
             Gets or sets whether the underlying <see cref="P:Northwoods.Go.InputEvent.Event"/> is prevented from bubbling up
             the hierarchy of components outside of the Diagram and whether any default action is canceled.
             </summary>
             <remarks>
             Setting this is uncommon, but may be needed in some <see cref="T:Northwoods.Go.CommandHandler"/> overrides in order to
             pass along events, such as keystrokes, to parent components of the Diagram.
            
             Some event handlers may set this to true if the event should continue beyond the diagram's component
             and result in any default behaviors by the user-agent.
             The default value is false.
             </remarks>
             <seealso cref="P:Northwoods.Go.InputEvent.Handled"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Event">
            <summary>
            Gets or sets the platform's user-agent-supplied event for this event.
            </summary>
            <remarks>
            It may be null if no underlying event exists.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.Timestamp"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.IsTouchEvent">
            <summary>
            This read-only property is true when the InputEvent is caused by a touch event.
            </summary>
            <seealso cref="P:Northwoods.Go.InputEvent.IsMultiTouch"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Timestamp">
            <summary>
            Gets or sets the time at which the event occurred, in milliseconds.
            </summary>
        </member>
        <member name="P:Northwoods.Go.InputEvent.TargetDiagram">
            <summary>
            Gets or sets the diagram associated with the canvas that the event is currently targeting.
            </summary>
        </member>
        <member name="P:Northwoods.Go.InputEvent.TargetElement">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GraphObject"/> that is at the current mouse point, if any.
            </summary>
            <remarks>
            For those events that are bubbled up the chain of parent <see cref="T:Northwoods.Go.Panel"/>s,
            this property provides access to the original <see cref="T:Northwoods.Go.GraphObject"/> where the input event occurred.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.Handled"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Control">
            <summary>
            Gets or sets whether the control key is being held down.
            </summary>
            <remarks>
            This is true if the key was pressed at the time of the event.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.Modifiers"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Shift"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Alt"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Meta"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Shift">
            <summary>
            Gets or sets whether the shift key is being held down.
            </summary>
            <remarks>
            This is true if the key was pressed at the time of the event.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.Modifiers"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Control"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Alt"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Meta"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Alt">
            <summary>
            Gets or sets whether the alt key is being held down.
            </summary>
            <remarks>
            This is true if the key was pressed at the time of the event.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.Modifiers"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Control"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Shift"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Meta"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Meta">
            <summary>
            Gets or sets whether the meta key is being held down.
            </summary>
            <remarks>
            This is true if the key was pressed at the time of the event.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.Modifiers"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Control"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Shift"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Alt"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Left">
             <summary>
             Gets or sets whether the logical left mouse button is being held down.
             </summary>
             <remarks>
             This is true if the button was pressed at the time of the event.
            
             If this InputEvent was a "mouseup" or "mousedown",
             this property uses the value of <see cref="P:Northwoods.Go.InputEvent.Button"/>. Otherwise, it uses the value of <see cref="P:Northwoods.Go.InputEvent.Buttons"/>.
            
             When setting, this sets the value of <see cref="P:Northwoods.Go.InputEvent.Buttons"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.InputEvent.Button"/>
             <seealso cref="P:Northwoods.Go.InputEvent.Middle"/>
             <seealso cref="P:Northwoods.Go.InputEvent.Right"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.EventType">
            Only used for the Left property
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Right">
            <summary>
            Gets or sets whether the logical right mouse button is being held down.
            </summary>
            <remarks>
            This is true if the button was pressed at the time of the event.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.Button"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Left"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Middle"/>
        </member>
        <member name="P:Northwoods.Go.InputEvent.Middle">
            <summary>
            Gets or sets whether the logical middle mouse button is being held down.
            </summary>
            <remarks>
            This is true if the button was pressed at the time of the event.
            </remarks>
            <seealso cref="P:Northwoods.Go.InputEvent.Button"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Left"/>
            <seealso cref="P:Northwoods.Go.InputEvent.Right"/>
        </member>
        <member name="T:Northwoods.Go.Layer">
             <summary>
             Layers are how named collections of <see cref="T:Northwoods.Go.Part"/>s are drawn in front or behind other collections of Parts in a <see cref="T:Northwoods.Go.Diagram"/>.
             </summary>
             <remarks>
             Layers can only contain <see cref="T:Northwoods.Go.Part"/>s, such as <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s. They cannot hold <see cref="T:Northwoods.Go.GraphObject"/>s directly.
            
             You put a Part into a Layer by assigning <see cref="P:Northwoods.Go.Part.LayerName"/> with the name of the Layer.
             You can use data binding to initialize and remember a Part's layer's name.
             You can change a Part's layer by modifying its <see cref="P:Northwoods.Go.Part.LayerName"/>, which changes its <see cref="P:Northwoods.Go.Part.Layer"/>.
            
             Each Diagram starts off with the following list of Layers:
             "Grid", "Background", "" (the default layer), "Foreground", "Adornment", "Tool".
             Parts are normally put in the default layer.
             The "Grid", "Adornment", and "Tool" layers are considered <see cref="P:Northwoods.Go.Layer.IsTemporary"/>.
             Changes to objects in temporary layers are not recorded by the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             Parts in temporary layers are not selected and are not considered to be part of the document.
             Objects in temporary layers do not receive click events unless you set their <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> to true.
             The "Grid" layer is the furthest back; it also contains "temporary" parts that cannot be selected.
             Furthermore the "Grid" layer has <see cref="P:Northwoods.Go.Layer.Pickable"/> set to false so that mouse or touch events
             and calls to the "Find..." methods do not even consider any parts in that layer.
            
             Layers have many properties that control what actions users are permitted to perform involving the parts in the layer.
             These properties are very much like the similarly named properties on <see cref="T:Northwoods.Go.Diagram"/>.
            
             <h3>Z-ordering</h3>
             Layers are drawn and presented in order.
             You can add your own layers by calling <see cref="M:Northwoods.Go.Diagram.AddLayerBefore(Northwoods.Go.Layer,Northwoods.Go.Layer)"/> or <see cref="M:Northwoods.Go.Diagram.AddLayerAfter(Northwoods.Go.Layer,Northwoods.Go.Layer)"/>
             to insert a new layer at a particular place in the z-order, or to re-order existing layers.
             Use <see cref="M:Northwoods.Go.Diagram.FindLayer(System.String)"/> to get the Layer with a particular name.
             <see cref="T:Northwoods.Go.Part"/>s can be individually z-ordered within a layer by setting <see cref="P:Northwoods.Go.Part.ZOrder"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layer.#ctor">
            <summary>
            This constructs an empty Layer; you should set the <see cref="P:Northwoods.Go.Layer.Name"/> before adding the Layer to a Diagram.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.Clear">
            <summary>
            Remove all Parts from this layer -- only called by internal method Diagram.ClearAllParts.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.ToString">
            <summary>
            Undocumented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Layer.ToString(System.Int32)">
            <summary>
            Undocumented
            </summary>
            <param name="details">int Optional: If greater than zero, this includes descriptions of each part in the layer.</param>
        </member>
        <member name="M:Northwoods.Go.Layer.FindElementAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})">
            <summary>
            Find the front-most <see cref="T:Northwoods.Go.GraphObject"/> in this layer
            at the given point in document coordinates.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any elements in this layer.
            However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            </remarks>
            <param name="p">A Point in document coordinates.</param>
            <param name="navig">A function taking a GraphObject and
            returning a GraphObject, defaulting to the identity.</param>
            <param name="pred">A function taking the GraphObject
            returned by navig and returning true if that element should be returned,
            defaulting to a predicate that always returns true.</param>
            <returns>The first GraphObject in the Z-order, or else null.</returns>
        </member>
        <member name="M:Northwoods.Go.Layer.FindElementAt(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Layer.FindElementAt``1(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0})"/>,
            returning a GraphObject rather than a specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.FindElementsAt``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)">
            <summary>
            Return a collection of the <see cref="T:Northwoods.Go.GraphObject"/>s of this layer
            at the given point in document coordinates.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any elements in this layer.
            However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            </remarks>
            <param name="p">A Point in document coordinates.</param>
            <param name="navig">A function taking a GraphObject and
            returning a GraphObject, defaulting to the identity.
            If this function returns null, the given GraphObject will not be included in the results.</param>
            <param name="pred">A function taking the GraphObject
            returned by navig and returning true if that element should be returned,
            defaulting to a predicate that always returns true.</param>
            <param name="coll">An optional collection to add the results to.</param>
            <returns>a collection of GraphObjects that will contain all GraphObjects
            located at Point p, or else an empty collection.
            If a collection was passed in, it is returned.</returns>
        </member>
        <member name="M:Northwoods.Go.Layer.FindElementsAt(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject},System.Collections.Generic.ICollection{Northwoods.Go.GraphObject})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Layer.FindElementsAt``2(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},``1)"/>,
            returning a collection of GraphObjects rather than a collection of the specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)">
            <summary>
            Returns a collection of all <see cref="T:Northwoods.Go.GraphObject"/>s that are inside or that intersect
            a given <see cref="T:Northwoods.Go.Rect"/> in document coordinates.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any elements in this layer.
            However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            </remarks>
            <param name="r">A Rect in document coordinates.</param>
            <param name="navig">A function taking a GraphObject and
            returning a GraphObject, defaulting to the identity.
            If this function returns null, the given GraphObject will not be included in the results.</param>
            <param name="pred">A function taking the GraphObject
            returned by navig and returning true if that element should be returned,
            defaulting to a predicate that always returns true.</param>
            <param name="partialInclusion">Whether an element can match if it merely intersects the rectangular area (true) or
            if it must be entirely inside the rectangular area (false).  The default value is false.</param>
            <param name="coll">An optional collection to add the results to.</param>
            <returns>a collection of GraphObjects that will contain all GraphObjects
            located in or near Rect r, or else an empty collection.
            If a collection was passed in, it is returned.</returns>
        </member>
        <member name="M:Northwoods.Go.Layer.FindElementsIn(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject},System.Boolean,System.Collections.Generic.ICollection{Northwoods.Go.GraphObject})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Layer.FindElementsIn``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>,
            returning a collection of GraphObjects rather than a collection of the specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.FindElementsIn2``2(Northwoods.Go.Rect,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1,System.Predicate{``0},System.Boolean)">
            <summary>
            Special internal findElementsIn that checks an extra predicate, in order to short-circuit some lookups
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)">
            <summary>
            Returns a collection of all <see cref="T:Northwoods.Go.GraphObject"/>s that are within a certain distance
            of a given point in document coordinates.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.Layer.Visible"/> is false, this method will not find any elements in this layer.
            However, <see cref="P:Northwoods.Go.Layer.Opacity"/> does not affect this method.
            </remarks>
            <param name="p">A Point in document coordinates.</param>
            <param name="dist">The distance from the point.</param>
            <param name="navig">A function taking a GraphObject and
            returning a GraphObject, defaulting to the identity.
            If this function returns null, the given GraphObject will not be included in the results.</param>
            <param name="pred">A function taking the GraphObject
            returned by navig and returning true if that element should be returned,
            defaulting to a predicate that always returns true.</param>
            <param name="partialInclusion">Whether an element can match if it merely intersects the circular area (true) or
            if it must be entirely inside the circular area (false).  The default value is true.</param>
            <param name="coll">An optional collection to add the results to.</param>
            <returns>a collection of GraphObjects that will contain all GraphObjects
            located at Point p, or else an empty collection.
            If a collection was passed in, it is returned.</returns>
        </member>
        <member name="M:Northwoods.Go.Layer.FindElementsNear(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject},System.Boolean,System.Collections.Generic.ICollection{Northwoods.Go.GraphObject})">
            <summary>
            A convenience function for <see cref="M:Northwoods.Go.Layer.FindElementsNear``2(Northwoods.Go.Point,System.Double,System.Func{Northwoods.Go.GraphObject,``0},System.Predicate{``0},System.Boolean,``1)"/>,
            returning a collection of GraphObjects rather than a collection of the specified type.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.GetOrthoLinksArray">
            <summary>
            Called from Link
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.SetInView(Northwoods.Go.Diagram,Northwoods.Go.Rect)">
            <summary>
            Sets flags to draw only the parts in the exclusive set or map.
            </summary>
            <param name="diagram"></param>
            <param name="viewRect">an alternative viewport rectangle.</param>
        </member>
        <member name="M:Northwoods.Go.Layer.Draw(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram,System.Boolean)">
            @hidden @internal
            <summary>
            Draws each Part in this layer.
            </summary>
            <param name="context"></param>
            <param name="diagram"></param>
            <param name="showTemporary">true if everything should be drawn, false if temporary objects should be omitted.</param>
        </member>
        <member name="M:Northwoods.Go.Layer.DrawExclusion(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram,System.Collections.Generic.HashSet{Northwoods.Go.Part})">
            @hidden @internal
            <summary>
            Draws each Part in this layer.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.DrawOnly(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram,System.Collections.Generic.HashSet{Northwoods.Go.Part},System.Boolean)">
            @hidden @internal
            <summary>
            Draws only the parts in the exclusive set or map.
            </summary>
            <param name="context"></param>
            <param name="diagram"></param>
            <param name="exclusive"></param>
            <param name="showTemporary">show temporary layers or not</param>
        </member>
        <member name="M:Northwoods.Go.Layer.DrawForOverview(Northwoods.Go.IDrawingContext,Northwoods.Go.Rect,Northwoods.Go.Diagram,System.Boolean,System.Boolean)">
            @hidden @internal
            <summary>
            Draws each Part in this layer that intersects a given rect.
            </summary>
            <remarks>
            No invalidation information is changed with the layer"s diagram.
            This is only used by overviews
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layer.DrawIntersection(Northwoods.Go.IDrawingContext,Northwoods.Go.Diagram,System.Collections.Generic.List{Northwoods.Go.Rect})">
            @hidden @internal
            <summary>
            Draws only the parts that intersect with the given rectangles
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.DrawPart(Northwoods.Go.IDrawingContext,Northwoods.Go.Part,Northwoods.Go.Diagram,System.Collections.Generic.List{Northwoods.Go.Link},System.Double,Northwoods.Go.Rect,System.Boolean)">
            @hidden @internal
            <summary>
            This internal method is responsible for drawing a single Part.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.DrawSimple(Northwoods.Go.IDrawingContext,Northwoods.Go.Part)">
            <summary>
            Simplistic drawing (gray rectangles) for objects smaller than one pixel
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.IntersectsAnyRect(Northwoods.Go.Rect,System.Collections.Generic.List{Northwoods.Go.Rect},System.Int32,System.Double)">
            <summary>
            Draws only the parts that intersect with the given rectangles
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layer.RaiseChanged(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Call this method to notify about a property having changed value.
            </summary>
            <param name="propertyname">the name of the property.</param>
            <param name="oldval">the previous or old value for the property.</param>
            <param name="newval">the next or new value for the property.</param>
            <param name="oldparam">an optional value additionally describing the old value.</param>
            <param name="newparam">an optional value additionally describing the new value.</param>
        </member>
        <member name="M:Northwoods.Go.Layer.SortZOrderIndividual(System.Int32,Northwoods.Go.Part)">
            <summary>
            Undocumented
            </summary>
            <param name="i">can be -1 if the index of N in this layer is not known</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.Layer.MoveGroupBehind(System.Int32,Northwoods.Go.Group)">
            <summary>
            Make sure the given Group is behind all of its immediate members.
            </summary>
            <remarks>
            Assumes the Group is also in this Layer.
            </remarks>
            <param name="idx">index of sg</param>
            <param name="sg"></param>
        </member>
        <member name="P:Northwoods.Go.Layer.Parts">
            <summary>
            This read-only property returns a read-only collection for this Layer's <see cref="T:Northwoods.Go.Part"/>s.
            </summary>
            <remarks>
            The Parts can be <see cref="T:Northwoods.Go.Node"/>s, <see cref="T:Northwoods.Go.Link"/>s, <see cref="T:Northwoods.Go.Group"/>s, <see cref="T:Northwoods.Go.Adornment"/>s, or simple <see cref="T:Northwoods.Go.Part"/>s.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.Diagram">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Diagram"/> that is using this Layer.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layer.Name">
            <summary>
            Gets or sets the name for this layer.
            </summary>
            <remarks>
            The initial value is an empty string, which is also the name of the default layer.
            The name should be unique among the diagram's <see cref="P:Northwoods.Go.Diagram.Layers"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.Opacity">
             <summary>
             Gets or sets the opacity for all parts in this layer.
             </summary>
             <remarks>
             The value must be between 0.0 (fully transparent) and 1.0 (no additional transparency).
             This value is multiplicative with any existing transparency,
             for instance from a <see cref="T:Northwoods.Go.Brush"/> or image transparency.
             The default value is 1.
            
             This property, unlike <see cref="P:Northwoods.Go.Layer.Visible"/>, does not change whether any objects are found by the "Find..." methods.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Opacity"/>
             <seealso cref="P:Northwoods.Go.Diagram.Opacity"/>
        </member>
        <member name="P:Northwoods.Go.Layer.IsTemporary">
             <summary>
             Gets or sets whether the objects in this layer are considered temporary.
             </summary>
             <remarks>
             Parts in temporary layers are not selectable,
             and changes to Parts in temporary layers are not recorded in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             Objects in temporary layers do not receive click events unless you set their <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> to true.
            
             Temporary layers are excluded from bounds calculations, with the exception of the "Tool" layer,
             so that temporary objects created while dragging are included in the bounds.
            
             Default value is false.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.Visible">
            <summary>
            Gets or sets whether the user may view any of the objects in this layer.
            </summary>
            <remarks>
            The default value is true -- all visible Parts are drawn.
            When this property is false, all of the "Find..." methods will fail to find parts that are in this layer.
            </remarks>
            <seealso cref="P:Northwoods.Go.GraphObject.Visible"/>
        </member>
        <member name="P:Northwoods.Go.Layer.Pickable">
             <summary>
             Gets or sets whether methods such as <see cref="M:Northwoods.Go.Layer.FindElementAt(Northwoods.Go.Point,System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject})"/> find any of the objects in this layer.
             </summary>
             <remarks>
             The default value is true.
             When this property is false, all of the "Find..." methods will fail to find parts that are in this layer.
            
             Note that setting pickable to false does not prevent users from selecting nodes.
             It does prevent them from selecting nodes by clicking on them,
             but does not prevent selection through other mechanisms such as the <see cref="T:Northwoods.Go.Tools.DragSelectingTool"/> or
             <see cref="M:Northwoods.Go.CommandHandler.SelectAll"/> or calls to <see cref="M:Northwoods.Go.Diagram.Select(Northwoods.Go.Part)"/>.
            
             You can control whether individual GraphObjects are "hittable" by setting <see cref="P:Northwoods.Go.GraphObject.Pickable"/>.
             </remarks>
             <seealso cref="P:Northwoods.Go.GraphObject.Pickable"/>
        </member>
        <member name="P:Northwoods.Go.Layer.IsInDocumentBounds">
            <summary>
            Gets or sets whether or not a layer is included in the DocumentBounds computation.
            </summary>
            <remarks>
            Default value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowCopy">
            <summary>
            Gets or sets whether the user may copy objects in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowDelete">
            <summary>
            Gets or sets whether the user may delete objects in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowTextEdit">
            <summary>
            Gets or sets whether the user may do in-place text editing in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowGroup">
            <summary>
            Gets or sets whether the user may group parts together in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowUngroup">
            <summary>
            Gets or sets whether the user may ungroup existing groups in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowLink">
            <summary>
            Gets or sets whether the user may draw new links in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowRelink">
            <summary>
            Gets or sets whether the user may reconnect existing links in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowMove">
            <summary>
            Gets or sets whether the user may move objects in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowReshape">
            <summary>
            Gets or sets whether the user may reshape parts in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowResize">
            <summary>
            Gets or sets whether the user may resize parts in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowRotate">
            <summary>
            Gets or sets whether the user may rotate parts in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layer.AllowSelect">
            <summary>
            Gets or sets whether the user may select objects in this layer.
            </summary>
            <remarks>
            The initial value is true.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Layouts.Network`3">
             <summary>
             This provides an abstract view of a diagram as a
             network (graph) of vertexes and directed edges.
             The network contains vertexes and edges corresponding to <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s.
             </summary>
             <remarks>
             This class provides a framework for manipulating the
             state of nodes and links without modifying the structure of the diagram.
             Having a separate representation also permits adding or removing vertexes or edges
             from the network so that the graph that is laid out is not isomorphic to the diagram's graph.
            
             For each kind of layout that uses a Network there is a subclass of <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> and a subclass of <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>:
               - <see cref="!:CircularLayout"/>: <see cref="!:CircularVertex"/> and <see cref="!:CircularEdge"/>
               - <see cref="!:ForceDirectedLayout"/>: <see cref="!:ForceDirectedVertex"/> and <see cref="!:ForceDirectedEdge"/>
               - <see cref="!:LayeredDigraphLayout"/>: <see cref="!:LayeredDigraphVertex"/> and <see cref="!:LayeredDigraphEdge"/>
               - <see cref="!:TreeLayout"/>: <see cref="!:TreeVertex"/> and <see cref="!:TreeEdge"/>
            
             Modifying a <see cref="T:Northwoods.Go.Layouts.Network`3"/> or a <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> or an <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> does not
             invalidate the <see cref="P:Northwoods.Go.Layouts.Network`3.Layout"/> or raise any changed events.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.#ctor(`2)">
            <summary>
            This constructs an empty network associated with a given layout.
            </summary>
            <remarks>
            It is commonplace to call <see cref="M:Northwoods.Go.Layouts.Network`3.AddParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean,System.Predicate{Northwoods.Go.Part})"/> to build up the network
            to have the same structure as a <see cref="T:Northwoods.Go.Diagram"/>'s or <see cref="T:Northwoods.Go.Group"/>'s nodes and links.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Clear">
            @hidden @internal
            <summary>
            Removes all vertexes and edges from the network, resulting in an empty network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.ToString(System.Int32)">
            @hidden @internal
            <param name="details">int Optional: If greater than zero, this includes descriptions of each vertex and edge in the network.</param>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Layout">
            <summary>
            Gets the <see cref="T:Northwoods.Go.Layouts.Layout"/> that uses this network
            of <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>es and <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>s.
            </summary>
            <remarks>
            The default value is null.
            It is set automatically for you when setting <see cref="P:Northwoods.Go.Layouts.NetworkLayout`4.Network"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertexes">
            <summary>
            Gets a collection of all of the <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>es in this network.
            </summary>
            <remarks>
            Do not modify this collection directly.
            Instead, call <see cref="M:Northwoods.Go.Layouts.Network`3.AddVertex(`0)"/>, <see cref="M:Northwoods.Go.Layouts.Network`3.DeleteVertex(`0)"/>, <see cref="M:Northwoods.Go.Layouts.Network`3.AddNode(Northwoods.Go.Node)"/>, or <see cref="M:Northwoods.Go.Layouts.Network`3.DeleteNode(Northwoods.Go.Node)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Edges">
            <summary>
            Gets a collection of all of the <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>s in this network.
            </summary>
            <remarks>
            Do not modify this collection directly.
            Instead, call <see cref="M:Northwoods.Go.Layouts.Network`3.AddEdge(`1)"/>, <see cref="M:Northwoods.Go.Layouts.Network`3.DeleteEdge(`1)"/>, <see cref="M:Northwoods.Go.Layouts.Network`3.AddLink(Northwoods.Go.Link)"/>, or <see cref="M:Northwoods.Go.Layouts.Network`3.DeleteLink(Northwoods.Go.Link)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.CreateVertex">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>.
            </summary>
            <remarks>
            This is overridden in Network subclasses to create instances of subclasses of <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.CreateEdge">
            <summary>
            Allocate a new instance of <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>.
            </summary>
            <remarks>
            This is overridden in Network subclasses to create instances of subclasses of <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.AddParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean,System.Predicate{Northwoods.Go.Part})">
            <summary>
            Creates a network of <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>es and <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>s
            corresponding to the given <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s.
            </summary>
            <remarks>
            This is usually more convenient than repeatedly calling <see cref="M:Northwoods.Go.Layouts.Network`3.AddNode(Northwoods.Go.Node)"/> and <see cref="M:Northwoods.Go.Layouts.Network`3.AddLink(Northwoods.Go.Link)"/>.
            This method ignores all instances of <see cref="T:Northwoods.Go.Part"/>s that are not Nodes or Links.
            This will recurse through <see cref="T:Northwoods.Go.Group"/>s that have no <see cref="P:Northwoods.Go.Group.Layout"/>.
            </remarks>
            <param name="parts">A collection of <see cref="T:Northwoods.Go.Node"/>s or <see cref="T:Northwoods.Go.Link"/>s.</param>
            <param name="toplevelonly">whether to skip Parts in the given collection that are contained by Groups; default is false</param>
            <param name="pred">optional predicate to apply to each Part --
                   if it returns false do not include Vertex or Edge in the network;
                   default ignores link label nodes or links connecting with them</param>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.FindGroupVertex(Northwoods.Go.Node)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.AddVertex(`0)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> to the network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.AddNode(Northwoods.Go.Node)">
            <summary>
            This convenience method makes sure there is a <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>
            in this network corresponding to a <see cref="T:Northwoods.Go.Node"/>.
            </summary>
            <returns>a vertex in this network.</returns>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.DeleteVertex(`0)">
            <summary>
            Removes a <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> from the network.
            </summary>
            <remarks>
            This function also deletes all edges to or from the vertex.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3._RemoveVertex(`0)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.DeleteNode(Northwoods.Go.Node)">
            <summary>
            This convenience method deletes any <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>
            corresponding to a <see cref="T:Northwoods.Go.Node"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.FindVertex(Northwoods.Go.Node)">
            <summary>
            Returns the <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> that was constructed for the <see cref="T:Northwoods.Go.Node"/>.
            </summary>
            <returns>a vertex in this network, or null if no such vertex exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.AddEdge(`1)">
            <summary>
            Adds an <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> to the network.
            </summary>
            <remarks>
            Although this method is provided for completeness,
            <see cref="M:Northwoods.Go.Layouts.Network`3.LinkVertexes(`0,`0,Northwoods.Go.Link)"/> provides a more efficient manner of linking
            vertexes already in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3._AddEdge(`1)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.AddLink(Northwoods.Go.Link)">
            <summary>
            This convenience method makes sure there is an <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>
            in this network corresponding to a <see cref="T:Northwoods.Go.Link"/>.
            </summary>
            <remarks>
            If <see cref="M:Northwoods.Go.Layouts.Network`3.FindEdge(Northwoods.Go.Link)"/> returns null, this method creates a new <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>,
            makes sure the <see cref="P:Northwoods.Go.Link.FromNode"/> and <see cref="P:Northwoods.Go.Link.ToNode"/> have
            corresponding <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>es in the network, and adds the edge itself
            to the network.
            </remarks>
            <returns>an edge in this network.</returns>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.DeleteEdge(`1)">
            <summary>
            Removes an <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> from the network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3._RemoveEdge(`1)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.DeleteLink(Northwoods.Go.Link)">
            <summary>
            This convenience method deletes from this network any <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>
            corresponding to a <see cref="T:Northwoods.Go.Link"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.FindEdge(Northwoods.Go.Link)">
            <summary>
            Returns the <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> that was constructed for the <see cref="T:Northwoods.Go.Link"/>.
            </summary>
            <returns>an edge in this network, or null if no such edge exists.</returns>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.LinkVertexes(`0,`0,Northwoods.Go.Link)">
            <summary>
            Links two vertexes already in the network and returns the created <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>.
            </summary>
            <returns>an edge in this network, or null if both vertexes don't exist.</returns>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.ReverseEdge(`1)">
            <summary>
            Reverses the direction of a <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> in the network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.DeleteSelfEdges">
            <summary>
            Deletes all <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>s whose "to vertex" and "from vertex" are the same vertex.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.DeleteArtificialVertexes">
            <summary>
            Deletes all vertexes and edges that have no <see cref="T:Northwoods.Go.Part"/> associated with them.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.DeleteUselessEdges">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.IsSingleton(`0)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.SplitIntoSubNetworks``1(System.Boolean)">
            <summary>
            Modify this network by splitting it up into separate subnetworks,
            each of which has all of its vertexes connected to each other, but not
            to any vertexes in any other subnetworks.
            </summary>
            <remarks>
            This method will first delete from this network all artificial vertexes and
            all edges that do not connect two different vertexes.
            Afterwards, this original network may be empty or may contain all of the
            singleton vertexes, each of which had no edges connecting it to any other vertexes.
            </remarks>
            <param name="clean">whether to delete artificial vertexes and edges, disconnected edges, and reflexive edges; default is true</param>
            <returns>a collection of <see cref="T:Northwoods.Go.Layouts.Network`3"/>s, sorted in order of decreasing vertex count.</returns>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3._TraverseSubnet(Northwoods.Go.Layouts.Network{`0,`1,`2},`0)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.FindAllParts">
            <summary>
            Retrieve all of the <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s from the
            <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>es and <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>s that are in this network.
            </summary>
            <returns>A collection of <see cref="T:Northwoods.Go.Part"/>s.</returns>
        </member>
        <member name="T:Northwoods.Go.Layouts.Network`3.Vertex">
             <summary>
             A vertex represents a <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/> in a <see cref="T:Northwoods.Go.Layouts.Network`3"/>,
             along with its <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Focus"/> and collections of <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>s that come into and go out of the vertex.
             </summary>
             <remarks>
             The <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/> property may be null for vertexes that represent "dummy" nodes,
             when the layout wants to work with a network that is not isomorphic with the collection of Nodes and Links being laid out.
            
             This holds layout-specific data for the node.
             For each kind of layout that uses a Network there is a subclass of <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> and a subclass of <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>:
               - <see cref="!:CircularLayout"/>: <see cref="!:CircularVertex"/> and <see cref="!:CircularEdge"/>
               - <see cref="!:ForceDirectedLayout"/>: <see cref="!:ForceDirectedVertex"/> and <see cref="!:ForceDirectedEdge"/>
               - <see cref="!:LayeredDigraphLayout"/>: <see cref="!:LayeredDigraphVertex"/> and <see cref="!:LayeredDigraphEdge"/>
               - <see cref="!:TreeLayout"/>: <see cref="!:TreeVertex"/> and <see cref="!:TreeEdge"/>
            
             Modifying a <see cref="T:Northwoods.Go.Layouts.Network`3"/> or a <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> or an <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> does not
             invalidate the <see cref="P:Northwoods.Go.Layouts.Network`3.Layout"/> or raise any changed events.
             </remarks>
        </member>
        <member name="F:Northwoods.Go.Layouts.Network`3.Vertex.SourceEdgesList">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layouts.Network`3.Vertex.DestinationEdgesList">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Vertex.#ctor(Northwoods.Go.Layouts.Network{`0,`1,`2})">
            <summary>
            This constructs a vertex that does not know about any <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/> and sets its network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Vertex.Clear">
            @hidden @internal
            <summary>
            Remove all references to other objects, besides the owner network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Vertex.ToString(System.Int32)">
            @hidden @internal
            <param name="details">int Optional: If greater than zero, this includes more details about the vertex</param>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Data">
            <summary>
            Gets or sets the data object in the model that should be associated with this vertex, if any.
            </summary>
            <remarks>
            The value will be non-null if this vertex is virtualized,
            not represented by a real <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/> in the <see cref="T:Northwoods.Go.Diagram"/>.
            Each data object should have a "Bounds" property that is a <see cref="T:Northwoods.Go.Rect"/>
            or any Object with "X", "Y", "Width", and "Height" properties that are real numbers,
            and non-negative numbers for the width and the height.
            Setting this data property will also set the <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Focus"/> properties.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Node">
             <summary>
             Gets or sets the <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/> associated with this vertex, if any.
             </summary>
             <remarks>
             The value may be null if this vertex is a "dummy" vertex,
             not represented by a real <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/> in the <see cref="T:Northwoods.Go.Diagram"/>.
            
             This property setter also sets the <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Focus"/> properties
             according to the value of the Node's ActualBounds and its <see cref="P:Northwoods.Go.Part.LocationElement"/>'s center point.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds">
            <summary>
            Gets or sets the bounds of this vertex, in document coordinates.
            </summary>
            <remarks>
            Setting this property does not directly modify the position of any <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/>,
            but it will modify the value of <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.CenterX"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.CenterY"/>,
            as well as the subsidiary convenience properties <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.X"/>, <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Y"/>, <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Width"/>, and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Height"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Focus">
             <summary>
             Gets or sets the offset of the <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.FocusX"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.FocusY"/>
             from the <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds"/> position.
             </summary>
             <remarks>
             Setting this property does not directly modify the position of any <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/>,
             but it does affect the value of <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.CenterX"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.CenterY"/>.
            
             The "focus" is normally the center of the Node's <see cref="P:Northwoods.Go.Part.LocationElement"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.CenterX">
            <summary>
            Gets or sets the center <see cref="P:Northwoods.Go.Point.X"/> of this vertex, in document coordinates.
            </summary>
            <remarks>
            This property depends on both <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Focus"/>.
            Setting this property does not modify the position of any <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/>,
            but it will modify the value of <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.CenterY">
            <summary>
            Gets or sets the center <see cref="P:Northwoods.Go.Point.Y"/> of this vertex, in document coordinates.
            </summary>
            <remarks>
            This property depends on both <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Focus"/>.
            Setting this property does not modify the position of any <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/>,
            but it will modify the value of <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.FocusX">
            <summary>
            Gets or sets the relative X position of the "center" point, the focus.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.FocusY">
            <summary>
            Gets or sets the relative Y position of the "center" point, the focus.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.X">
            <summary>
            Gets or sets the left point of this vertex.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Y">
            <summary>
            Gets or sets the top point of this vertex.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Width">
            <summary>
            Gets or sets the width of this vertex.
            </summary>
            <remarks>
            This is always the horizontal distance reserved for the node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Height">
            <summary>
            Gets or sets the height of this vertex.
            </summary>
            <remarks>
            This is always the vertical distance reserved for the node.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Vertex.Commit">
            <summary>
            Moves the <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/> corresponding to this vertex
            so that its position is at the current <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Bounds"/> point.
            </summary>
            <remarks>
            To make the most common cases look right, the Node's <see cref="P:Northwoods.Go.Part.LocationElement"/>
            is centered. Thus iconic nodes will have the center of the icon be positioned
            according to the center of this vertex, ignoring any labels.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Vertex.AddSourceEdge(`1)">
            <summary>
            Adds an <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> to the list of predecessors
            (the edge will be coming into this vertex).
            </summary>
            <remarks>
            Calling this method does not modify the <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.ToVertex"/> of the Edge.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Vertex.DeleteSourceEdge(`1)">
            <summary>
            Deletes an <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> from the list of predecessors
            (the edge was coming into this vertex).
            </summary>
            <remarks>
            Calling this method does not modify the <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.ToVertex"/> of the Edge.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Vertex.AddDestinationEdge(`1)">
            <summary>
            Adds a <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> to the list of successors
            (the edge will be going out from this vertex).
            </summary>
            <remarks>
            Calling this method does not modify the <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.FromVertex"/> of the Edge.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Vertex.DeleteDestinationEdge(`1)">
            <summary>
            Deletes a <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> from the list of successors
            (the edge was going out from this vertex).
            </summary>
            <remarks>
            Calling this method does not modify the <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.FromVertex"/> of the Edge.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Network">
            <summary>
            Gets the <see cref="T:Northwoods.Go.Layouts.Network`3"/> that owns this vertex.
            </summary>
            <remarks>
            The default value is null.
            It is set automatically for you in <see cref="M:Northwoods.Go.Layouts.Network`3.CreateVertex"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.SourceVertexes">
            <summary>
            This read-only property returns an iterator for all of the vertexes that are connected with edges coming into this vertex.
            </summary>
            <remarks>
            Note that this is inefficient compared to iterating over the edges (<see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.SourceEdges"/>) due to the need
            to avoid duplicate vertexes if there happen to be multiple edges connecting with the same vertex.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.DestinationVertexes">
            <summary>
            This read-only property returns an iterator for all of the vertexes that are connected with edges going out of this vertex.
            </summary>
            <remarks>
            Note that this is inefficient compared to iterating over the edges (<see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.DestinationEdges"/>) due to the need
            to avoid duplicate vertexes if there happen to be multiple edges connecting with the same vertex.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Vertexes">
            <summary>
            This read-only property returns an iterator for all of the vertexes that are connected in either direction with this vertex.
            </summary>
            <remarks>
            Note that this is inefficient compared to iterating over the edges (<see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.SourceEdges"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.DestinationEdges"/>) due to the need
            to avoid duplicate vertexes if there happen to be multiple edges connecting with the same vertex.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.SourceEdges">
            <summary>
            This read-only property returns an iterator for all of the edges that come into this vertex.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.DestinationEdges">
            <summary>
            This read-only property returns an iterator for all of the edges that go out of this vertex.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Edges">
            <summary>
            This read-only property returns an iterator for all of the edges that are connected with this vertex in either direction.
            </summary>
            <remarks>
            Note that this is inefficient compared to iterating over the edges: <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.SourceEdges"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.DestinationEdges"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Vertex.Item(System.String)">
            <summary>
            This index operator allows for access to programmer-defined properties stored in a Dictionary&lt;string, object&gt;.
            </summary>
            <param name="prop">the property name, which must begin with a _</param>
        </member>
        <member name="F:Northwoods.Go.Layouts.Network`3.Vertex.StandardComparer">
            <summary>
            This static comparer is used to compare the <see cref="P:Northwoods.Go.Part.Text"/> values of the <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/>s of
            the argument <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>es. This just does a simple case-sensitive string comparison.
            </summary>
            <remarks>
            Alternatively you may wish to use <see cref="F:Northwoods.Go.Layouts.Network`3.Vertex.SmartComparer"/> or write your own comparison function.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layouts.Network`3.Vertex.SmartComparer">
            <summary>
            This static comparer is used to compare the <see cref="P:Northwoods.Go.Part.Text"/> values of the <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.Node"/>s of
            the argument <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>es. If the text ends in a number, the values are compared as numbers rather than lexicographically.
            </summary>
            <remarks>
            Naturally this comparison is significantly slower than <see cref="F:Northwoods.Go.Layouts.Network`3.Vertex.StandardComparer"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Layouts.Network`3.Edge">
             <summary>
             An edge represents a Link in a <see cref="T:Northwoods.Go.Layouts.Network`3"/>,
             along with its <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.FromVertex"/> and <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.ToVertex"/>.
             </summary>
             <remarks>
             The <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.Link"/> property may be null for edges that represent "dummy" links,
             when the layout wants to work with a network that is not isomorphic with the collection of Nodes and Links being laid out.
            
             It holds layout-specific data for the link.
             For each kind of layout that uses a Network there is a subclass of <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> and a subclass of <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>:
               - <see cref="!:CircularLayout"/>: <see cref="!:CircularVertex"/> and <see cref="!:CircularEdge"/>
               - <see cref="!:ForceDirectedLayout"/>: <see cref="!:ForceDirectedVertex"/> and <see cref="!:ForceDirectedEdge"/>
               - <see cref="!:LayeredDigraphLayout"/>: <see cref="!:LayeredDigraphVertex"/> and <see cref="!:LayeredDigraphEdge"/>
               - <see cref="!:TreeLayout"/>: <see cref="!:TreeVertex"/> and <see cref="!:TreeEdge"/>
            
             Modifying a <see cref="T:Northwoods.Go.Layouts.Network`3"/> or a <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> or an <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/> does not
             invalidate the <see cref="P:Northwoods.Go.Layouts.Network`3.Layout"/> or raise any changed events.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Edge.#ctor(Northwoods.Go.Layouts.Network{`0,`1,`2})">
            <summary>
            This constructs an edge that does not know about any <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.Link"/> and sets its network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Edge.Clear">
            @hidden @internal
            <summary>
            Remove all references to other objects, besides the owner network.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Edge.ToString(System.Int32)">
            @hidden @internal
            <param name="details">int Optional: If greater than zero, this includes more details about the edge</param>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Edge.ReverseEdge">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Edge.Commit">
            <summary>
            Commits the route of this edge to the corresponding <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.Link"/>, if any.
            </summary>
            <remarks>
            By default this does nothing.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Network`3.Edge.GetOtherVertex(`0)">
            <summary>
            Returns the edge's vertex at the other of this edge from the given vertex.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Edge.Network">
            <summary>
            Gets the <see cref="T:Northwoods.Go.Layouts.Network`3"/> that owns this edge.
            </summary>
            <remarks>
            The default value is null.
            It is set automatically for you in <see cref="M:Northwoods.Go.Layouts.Network`3.CreateEdge"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Edge.Data">
            <summary>
            For virtualized layouts working on model data instead of a Link.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Edge.Link">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.Link"/> associated with this edge, if any.
            </summary>
            <remarks>
            The value may be null if this edge is a "dummy" edge,
            not represented by a real <see cref="P:Northwoods.Go.Layouts.Network`3.Edge.Link"/> in the <see cref="T:Northwoods.Go.Diagram"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Edge.FromVertex">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> that this edge comes from.
            </summary>
            <remarks>
            Setting this property does not change any <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.DestinationEdges"/> collection.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Edge.ToVertex">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/> that this edge goes to.
            </summary>
            <remarks>
            Setting this property does not change any <see cref="P:Northwoods.Go.Layouts.Network`3.Vertex.SourceEdges"/> collection.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Network`3.Edge.Item(System.String)">
            <summary>
            This index operator allows for access to programmer-defined properties stored in a Dictionary&lt;string, object&gt;.
            </summary>
            <param name="prop">the property name, which must begin with a _</param>
        </member>
        <member name="T:Northwoods.Go.Layouts.GridLayout">
             <summary>
             This simple layout places all of the Parts in a grid-like arrangement, ordered, spaced apart,
             and wrapping as needed.  It ignores any Links connecting the Nodes being laid out.
             </summary>
             <remarks>
             There are many samples that use GridLayout.
             Every Palette uses a GridLayout by default.
            
             <p class="box">
             If you want to experiment interactively with most of the properties, try the Grid Layout sample.
             See samples that make use of GridLayout in the <a href="../../samples/index.Html#gridlayout">samples index</a>.
             </p>
            
             By default this layout will sort all of the Parts alphabetically
             (comparing <see cref="P:Northwoods.Go.Part.Text"/> values, respecting case)
             and position them left-to-right, separated by <see cref="P:Northwoods.Go.Layouts.GridLayout.Spacing"/>`.Width`,
             until they do not fit in the current row.
             At that time it starts a new row, separated from the previous row by <see cref="P:Northwoods.Go.Layouts.GridLayout.Spacing"/>`.Height`.
             There is a uniform cell size equal to the maximum Part width (plus spacing width)
             and the maximum part height (plus spacing height).
             At least one part is placed in each row, even if the part by itself is wider than the wrapping width.
            
             You can specify values for the <see cref="P:Northwoods.Go.Layouts.GridLayout.CellSize"/> `Width` and `Height`.
             If a part is wider than the cell size, it spans more than one cell in the row.
             You can also specify a value for the <see cref="P:Northwoods.Go.Layouts.GridLayout.WrappingWidth"/>,
             which will be used instead of the diagram's viewport width, to control when each row is considered "full".
             The value of <see cref="P:Northwoods.Go.Layouts.Layout.IsViewportSized"/> will be true when
             the value of <see cref="P:Northwoods.Go.Layouts.GridLayout.WrappingWidth"/> is `NaN`.
             This causes the layout to be performed again automatically as the viewport changes size.
            
             You can also set <see cref="P:Northwoods.Go.Layouts.GridLayout.WrappingColumn"/> to limit the double of items in each row.
             Both the <see cref="P:Northwoods.Go.Layouts.GridLayout.WrappingWidth"/> and the <see cref="P:Northwoods.Go.Layouts.GridLayout.WrappingColumn"/> are respected when deciding when to wrap to the next row.
            
             This layout is sufficiently simple that it does not extend <see cref="T:Northwoods.Go.Layouts.NetworkLayout`4"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.GridLayout.#ctor">
            <summary>
            Constructs a <see cref="T:Northwoods.Go.Layouts.GridLayout"/> with no owning <see cref="P:Northwoods.Go.Layouts.Layout.Diagram"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.GridLayout.CloneProtected(Northwoods.Go.Layouts.Layout)">
            <summary>
            Copies properties to a cloned Layout.
            </summary>
            <param name="c"></param>
        </member>
        <member name="P:Northwoods.Go.Layouts.GridLayout.WrappingWidth">
            <summary>
            Gets or sets the wrapping width.
            </summary>
            <remarks>
            The default is NaN, meaning to use the width of the diagram's panel's viewport.
            Must be a value greater than 0.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.GridLayout.WrappingColumn">
            <summary>
            Gets or sets the maximum number of columns.
            </summary>
            <remarks>
            The default is 0, meaning not to limit the number of columns.
            1 is a common value to produce a single column of parts.
            Must be greater than or equal to 0.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.GridLayout.CellSize">
             <summary>
             Gets or sets the minimum part size by which each part is positioned in the grid.
             </summary>
             <remarks>
             The default value is NaN x NaN.
             The units are in document coordinates.
            
             When the cell size is smaller than a part, the part will occupy more than one cell.
             This allows parts to be positioned closer to each other, but then variations in part
             sizes may cause them not to be aligned in perfect rows or columns.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.GridLayout.Spacing">
            <summary>
            Gets or sets the minimum horizontal and vertical space between parts.
            </summary>
            <remarks>
            The default value is 10 x 10.
            The units are in document coordinates.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.GridLayout.Alignment">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.Go.Part.Location"/> or the position should be used
            to arrange each part.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.Layouts.GridAlignment.Location"/> -- the <see cref="P:Northwoods.Go.Part.Location"/>s will
            be aligned in a grid.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.GridLayout.Arrangement">
            <summary>
            Gets or sets how to arrange the parts.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.Layouts.GridArrangement.LeftToRight"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.GridLayout.Sorting">
            <summary>
            Gets or sets what order to place the parts.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.Layouts.GridSorting.Ascending"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.GridLayout.Comparer">
            <summary>
            Gets or sets the comparison function used to sort the parts.
            </summary>
            <remarks>
            The default value is a case-insensitive alphabetic comparison
            using the <see cref="P:Northwoods.Go.Part.Text"/> property of each part.
            <code language="cs">
              new GridLayout {
                Sorting = GridSorting.Ascending,
                Comparer = (pa, pb) => {
                  var da = pa.Data as NodeData;
                  var db = pb.Data as NodeData;
                  if (da.SomeProperty &lt; db.SomeProperty) return -1;
                  if (da.SomeProperty &gt; db.SomeProperty) return 1;
                  return 0;
                }
              }
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.GridLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
            <summary>
            Assign the positions of the parts, ignoring any links.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.GridLayout.DoPositionLayout(Northwoods.Go.Part[],System.Double,System.Int32,System.Double,System.Double,System.Collections.Generic.List{Northwoods.Go.Rect})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.GridLayout.DoLocationLayout(Northwoods.Go.Part[],System.Double,System.Int32,System.Double,System.Double,System.Collections.Generic.List{Northwoods.Go.Rect})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.GridLayout.CommitLayers(System.Collections.Generic.IList{Northwoods.Go.Rect},Northwoods.Go.Point)">
             @hidden @internal
             <summary>
             This overridable method is called by <see cref="M:Northwoods.Go.Layouts.GridLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>
             to support custom arrangement of bands or labels across each layout layer.
             </summary>
             <remarks>
             By default this method does nothing.
            
             The coordinates used in the resulting Rects may need to be offset by the <see cref="P:Northwoods.Go.Layouts.Layout.ArrangementOrigin"/>.
             </remarks>
             <param name="layerRects">an list of <see cref="T:Northwoods.Go.Rect"/>s with the bounds of each of the "layers"</param>
             <param name="offset">the position of the top-left corner of the banded area relative to the coordinates given by the layerRects</param>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridLayout.StandardComparer">
            <summary>
            This static comparer is used to compare the <see cref="P:Northwoods.Go.Part.Text"/> values of the argument <see cref="T:Northwoods.Go.Part"/>s.
            This just does a simple case-sensitive string comparison.
            </summary>
            <remarks>
            Alternatively you may wish to use <see cref="F:Northwoods.Go.Layouts.GridLayout.SmartComparer"/> or write your own comparison function.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridLayout.SmartComparer">
            <summary>
            This static comparer is used to compare the <see cref="P:Northwoods.Go.Part.Text"/> values of the argument <see cref="T:Northwoods.Go.Part"/>s.
            If the text ends in a number, the values are compared as numbers rather than lexicographically.
            </summary>
            <remarks>
            Alternatively you may wish to use <see cref="F:Northwoods.Go.Layouts.GridLayout.StandardComparer"/> or write your own comparison function.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Layouts.GridAlignment">
            <summary>
            This enumeration specifies whether to position each part by
            its location or by its position. Used for <see cref="P:Northwoods.Go.Layouts.GridLayout.Alignment"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridAlignment.Position">
            <summary>
            Position the top-left corner of each part at a grid point.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridAlignment.Location">
            <summary>
            Position the part's <see cref="P:Northwoods.Go.Part.Location"/> at a grid point.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layouts.GridArrangement">
            <summary>
            This enumeration specifies how to fill each row. Used for <see cref="P:Northwoods.Go.Layouts.GridLayout.Arrangement"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridArrangement.LeftToRight">
            <summary>
            Fill each row from left to right.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridArrangement.RightToLeft">
            <summary>
            Fill each row from right to left.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layouts.GridSorting">
            <summary>
            This enumeration specifies whether to sort the children of a part,
            and in what order to position them. Used for <see cref="P:Northwoods.Go.Layouts.GridLayout.Sorting"/>.
            </summary>
            <remarks>
            The default <see cref="P:Northwoods.Go.Layouts.GridLayout.Comparer"/> does a case-insensitive comparison
            of the value of each node's <see cref="P:Northwoods.Go.Part.Text"/> property.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridSorting.Forwards">
            <summary>
            Lay out each item in the order in which the nodes were given.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridSorting.Reverse">
            <summary>
            Lay out each item in reverse order from which the nodes were given.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridSorting.Ascending">
            <summary>
            Lay out each item according to the sort order given by <see cref="P:Northwoods.Go.Layouts.GridLayout.Comparer"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Layouts.GridSorting.Descending">
            <summary>
            Lay out each item in reverse sort order given by <see cref="P:Northwoods.Go.Layouts.GridLayout.Comparer"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Layouts.Layout">
             <summary>
             This is the base class for all of the predefined diagram layout implementations.
             They only arrange <see cref="T:Northwoods.Go.Part"/>s (primarily <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s) in a <see cref="P:Northwoods.Go.Layouts.Layout.Diagram"/>,
             not to <see cref="T:Northwoods.Go.GraphObject"/>s in <see cref="T:Northwoods.Go.Panel"/>s (i.e. panel layout).
             </summary>
             <remarks>
             The layout classes include <see cref="!:TreeLayout"/>, <see cref="!:ForceDirectedLayout"/>,
             <see cref="!:LayeredDigraphLayout"/>, <see cref="!:CircularLayout"/>, and <see cref="T:Northwoods.Go.Layouts.GridLayout"/>.
             This base class is not abstract -- in fact an instance of this base class is the default
             value for <see cref="P:Northwoods.Go.Diagram.Layout"/> and for <see cref="P:Northwoods.Go.Group.Layout"/>.
            
             An instance of a Layout class will be the value of <see cref="P:Northwoods.Go.Diagram.Layout"/>.
             That layout positions the graph of top-level nodes and links.
             Nodes and links that belong to a <see cref="T:Northwoods.Go.Group"/> are laid out by that group's <see cref="P:Northwoods.Go.Group.Layout"/>.
             The Diagram will automatically perform all nested group layouts before laying out the whole diagram.
            
             If you have position information for all of the nodes when you load a model,
             you will typically have data bound the <see cref="P:Northwoods.Go.Part.Location"/> to some property on your node data.
             In order to avoid an initial layout causing those saved node positions to be discarded,
             you can either not set the <see cref="P:Northwoods.Go.Diagram.Layout"/> to a predefined layout or you can
             set <see cref="P:Northwoods.Go.Layouts.Layout.IsInitial"/> to false.
            
             Because performing layouts can be expensive in space and time, automatic layouts
             are performed only on "invalid" layouts, and only well after a layout has been invalidated.
             This state is held by the <see cref="P:Northwoods.Go.Layouts.Layout.IsValidLayout"/> property.
             Many standard operations, such as adding or removing nodes or links, will cause
             the layout that is responsible for positioning those nodes or routing those links
             to be invalidated.
             Such invalidation is performed by calling <see cref="M:Northwoods.Go.Layouts.Layout.InvalidateLayout"/>,
             which not only clears the <see cref="P:Northwoods.Go.Layouts.Layout.IsValidLayout"/> state but also requests that the diagram
             do an automatic layout soon.
             You can avoid such invalidations by setting <see cref="P:Northwoods.Go.Layouts.Layout.IsOngoing"/> to false.
            
             Layouts will ignore parts that have <see cref="P:Northwoods.Go.Part.IsLayoutPositioned"/> set to false
             or parts that are not <see cref="P:Northwoods.Go.GraphObject.Visible"/>.
             Layouts will also ignore parts that are in layers that are <see cref="P:Northwoods.Go.Layer.IsTemporary"/>.
            
             Various operations on <see cref="T:Northwoods.Go.Part"/>s will cause the responsible Layout to be invalidated.
             This includes adding or removing parts, changing their visibility, and changing their size.
             You can disable such automatic layout invalidations by setting <see cref="P:Northwoods.Go.Part.LayoutConditions"/>
             to the combination of Part flags named "Layout..." that you want.
            
             But operations on parts are not the only way in which layouts become invalidated.
             Setting most properties on the layouts, thereby changing their behavior, will invalidate that layout.
             Replacing the <see cref="P:Northwoods.Go.Diagram.Layout"/> or <see cref="P:Northwoods.Go.Group.Layout"/> will automatically invalidate the new layout.
             If <see cref="P:Northwoods.Go.Layouts.Layout.IsViewportSized"/> is true, when a diagram's <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/> changes size,
             the <see cref="P:Northwoods.Go.Diagram.Layout"/> is invalidated.
             (This is normally only true for <see cref="T:Northwoods.Go.Layouts.GridLayout"/>s when its <see cref="P:Northwoods.Go.Layouts.GridLayout.WrappingWidth"/> is `NaN`.
             Most layouts do not care about the size of the viewport.)
            
             You can also explicitly call <see cref="M:Northwoods.Go.Diagram.LayoutDiagram(System.Boolean)"/>, which can invalidate all layouts and
             then perform them all.
             But we recommend that you avoid doing so, to allow the normal updating process perform layouts as needed.
            
             If an automatic layout is the first time that a layout has been performed for the model,
             the diagram first raises the <see cref="T:Northwoods.Go.DiagramEvent"/> named "InitialLayoutCompleted".
             Whenever a Diagram finishes an automatic layout, it raises the DiagramEvent named "LayoutCompleted".
            
             It is also possible to call <see cref="M:Northwoods.Go.Layouts.Layout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> explicitly, but this is uncommon and only used with
             instances of Layout that are not the <see cref="P:Northwoods.Go.Diagram.Layout"/> or <see cref="P:Northwoods.Go.Group.Layout"/>.
             It should only be needed when you want to layout a collection of nodes and links that is not
             the normal graph of top-level parts of a Diagram or a subgraph of a Group.
            
             An instance of this base class provides a rudimentary default layout that will position
             all of the parts that have no position (i.e. the <see cref="P:Northwoods.Go.Part.Location"/> is (NaN,NaN)).
             Parts that already have a position are ignored.
             This primitive layout class does not make use of a <see cref="T:Northwoods.Go.Layouts.Network`3"/> because
             it ignores all links.
            
             To implement your own custom layouts, you can inherit from either this class, <see cref="T:Northwoods.Go.Layouts.NetworkLayout`4"/>, or
             from one of the other predefined layout classes.
             If you inherit from this base class, you will want to override the <see cref="M:Northwoods.Go.Layouts.Layout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> methods.
             You can call the <see cref="M:Northwoods.Go.Part.Move(Northwoods.Go.Point,System.Boolean)"/> method to re-position a part, including whole groups.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call a base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.#ctor">
            <summary>
            Create a minimal layout that only positions <see cref="T:Northwoods.Go.Node"/>s that do not have a location.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.CloneProtected(Northwoods.Go.Layouts.Layout)">
            <summary>
            Copies properties from this object to the given object, which is of the same class.
            </summary>
            <remarks>
            This is called by <see cref="M:Northwoods.Go.Layouts.Layout.Copy"/> and should be overridden for each class that adds properties.
            There are examples of such overrides in the samples.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="c"></param>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.Copy">
            <summary>
            Creates a copy of this Layout and returns it.
            </summary>
            <remarks>
            When a <see cref="T:Northwoods.Go.Group"/> is copied that has a <see cref="P:Northwoods.Go.Group.Layout"/>, the <see cref="T:Northwoods.Go.Layouts.Layout"/> must also be copied.
            This calls <see cref="M:Northwoods.Go.Layouts.Layout.CloneProtected(Northwoods.Go.Layouts.Layout)"/> on a newly constructed Layout.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.ToString">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.Diagram">
            <summary>
            Gets the <see cref="T:Northwoods.Go.Diagram"/> that owns this layout, if it is the value of <see cref="P:Northwoods.Go.Diagram.Layout"/>.
            </summary>
            <remarks>
            If this property and <see cref="P:Northwoods.Go.Layouts.Layout.Group"/> are non-null, the Group should be in this Diagram.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layouts.Layout.Group"/>
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.Group">
            <summary>
            Gets the <see cref="T:Northwoods.Go.Group"/> that uses this layout, if it is the value of a group's <see cref="P:Northwoods.Go.Group.Layout"/>.
            </summary>
            <remarks>
            If this property is set to a Group, <see cref="P:Northwoods.Go.Layouts.Layout.Diagram"/> is automatically set to be the Group's Diagram.
            </remarks>
            <seealso cref="P:Northwoods.Go.Layouts.Layout.Diagram"/>
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.IsOngoing">
             <summary>
             Gets or sets whether this layout can be invalidated by <see cref="M:Northwoods.Go.Layouts.Layout.InvalidateLayout"/>.
             </summary>
             <remarks>
             Set this to false to prevent actions such as adding or removing Parts from invalidating this layout.
             The default value is true.
             Setting this property does not invalidate this layout.
            
             If you set both <see cref="P:Northwoods.Go.Layouts.Layout.IsInitial"/> and <see cref="P:Northwoods.Go.Layouts.Layout.IsOngoing"/> to false,
             there will be no automatic layout invalidation, because <see cref="M:Northwoods.Go.Layouts.Layout.InvalidateLayout"/>
             will not set <see cref="P:Northwoods.Go.Layouts.Layout.IsValidLayout"/> to false.
             To get your nodes to appear, you will need to explicitly set or data-bind their <see cref="P:Northwoods.Go.Part.Location"/>
             or <see cref="P:Northwoods.Go.GraphObject.Position"/> to real Point values, because automatic layout will not assign any positions.
            
             Another way of controlling when layouts are invalidated is by setting
             <see cref="P:Northwoods.Go.Part.IsLayoutPositioned"/> or <see cref="P:Northwoods.Go.Part.LayoutConditions"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.IsInitial">
             <summary>
             Gets or sets whether this layout is performed on an initial layout.
             </summary>
             <remarks>
             The default value is true.
             Setting this property to false causes <see cref="P:Northwoods.Go.Layouts.Layout.IsValidLayout"/> to be set to true
             so that the diagram does not perform this layout.
            
             If you set both <see cref="P:Northwoods.Go.Layouts.Layout.IsInitial"/> and <see cref="P:Northwoods.Go.Layouts.Layout.IsOngoing"/> to false,
             there will be no automatic layout invalidation, because <see cref="M:Northwoods.Go.Layouts.Layout.InvalidateLayout"/>
             will not set <see cref="P:Northwoods.Go.Layouts.Layout.IsValidLayout"/> to false.
             To get your nodes to appear, you will need to explicitly set or data-bind their <see cref="P:Northwoods.Go.Part.Location"/>
             or <see cref="P:Northwoods.Go.GraphObject.Position"/> to real Point values, because automatic layout will not assign any positions.
            
             Another way of controlling when layouts are invalidated is by setting
             <see cref="P:Northwoods.Go.Part.IsLayoutPositioned"/> or <see cref="P:Northwoods.Go.Part.LayoutConditions"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.IsViewportSized">
             <summary>
             Gets or sets whether this layout depends on the <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/>'s size.
             </summary>
             <remarks>
             If set to true, the layout will invalidate when the Diagram's viewport changes size.
             This only applies to diagram layouts, not to group layouts,
             and only when <see cref="P:Northwoods.Go.Diagram.AutoScale"/> is set to <see cref="F:Northwoods.Go.AutoScale.None"/>.
            
             The default value is false.
             Setting this property to true will invalidate this layout.
            
             It is possible that a viewport-sized layout will trigger the Diagram to require scrollbars,
             which modifies the <see cref="P:Northwoods.Go.Diagram.ViewportBounds"/>, which will in turn trigger another layout.
             This is uncommon, but possible with <see cref="T:Northwoods.Go.Layouts.GridLayout"/> if the results require a vertical scrollbar,
             and that vertical scrollbar shrinks the viewport width enough that a grid column can no longer fit.
             When designing custom layouts, one should be careful that this behavior does not result in an infinite loop.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.IsRouting">
             <summary>
             Gets or sets whether this layout routes <see cref="T:Northwoods.Go.Link"/>s.
             </summary>
             <remarks>
             The default value is true.
             When false, this layout will not explicitly set the <see cref="P:Northwoods.Go.Link.Points"/>,
             and the default routing of each individual Link will take place after the Nodes are moved by <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CommitLayout"/>.
             Setting this property does not invalidate this layout.
            
             Some layouts ignore links, in which case this property is ignored.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.IsRealtime">
            <summary>
            Gets or sets whether this layout be performed in real-time, before the end of a transaction.
            </summary>
            <remarks>
            All layouts that are invalidated will be performed at the end of a transaction.
            The default value is null.
            A null value is treated as true for a <see cref="P:Northwoods.Go.Diagram.Layout"/> but false for a <see cref="P:Northwoods.Go.Group.Layout"/>.
            Setting this property does not invalidate this layout.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.IsValidLayout">
            <summary>
            Gets or sets whether this layout needs to be performed again (if false).
            </summary>
            <remarks>
            Instead of setting this property directly, it is normal to set it to false by calling <see cref="M:Northwoods.Go.Layouts.Layout.InvalidateLayout"/>,
            since that also requests performing a layout in the near future.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.InvalidateLayout">
             <summary>
             If <see cref="P:Northwoods.Go.Layouts.Layout.IsOngoing"/> is true and if an initial layout has not yet been performed,
             set the <see cref="P:Northwoods.Go.Layouts.Layout.IsValidLayout"/> property to false, and ask to perform another layout in the near future.
             </summary>
             <remarks>
             If <see cref="P:Northwoods.Go.Layouts.Layout.IsInitial"/> is true, this layout is invalidated only when the <see cref="P:Northwoods.Go.Diagram.Model"/> is replaced,
             not under the normal circumstances such as when parts are added or removed or
             due to other calls to <see cref="M:Northwoods.Go.Layouts.Layout.InvalidateLayout"/>.
            
             If you set both <see cref="P:Northwoods.Go.Layouts.Layout.IsInitial"/> and <see cref="P:Northwoods.Go.Layouts.Layout.IsOngoing"/> to false,
             there will be no automatic layout invalidation, because this method
             will not set <see cref="P:Northwoods.Go.Layouts.Layout.IsValidLayout"/> to false.
             However you can still set <see cref="P:Northwoods.Go.Layouts.Layout.IsValidLayout"/> explicitly.
            
             This is typically called when a layout property value has changed,
             or when a Part is added or removed or changes visibility, if <see cref="P:Northwoods.Go.Part.LayoutConditions"/> includes the pertinent flags.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
             <summary>
             Position all of the nodes that do not have an assigned <see cref="P:Northwoods.Go.Part.Location"/>
             in the manner of a simple rectangular array.
             </summary>
             <remarks>
             The default implementation ignores all <see cref="P:Northwoods.Go.Layouts.Layout.Group"/>s and <see cref="T:Northwoods.Go.Link"/>s;
             many subclasses of <see cref="T:Northwoods.Go.Layouts.Layout"/> ignore all instances of <see cref="T:Northwoods.Go.Part"/>s
             that are not <see cref="T:Northwoods.Go.Node"/>s or <see cref="T:Northwoods.Go.Link"/>s.
            
             You can override this method to do whatever node positioning and link routing
             that you wish.
            
             When the layout extends <see cref="T:Northwoods.Go.Layouts.NetworkLayout`4"/>,
             this method should call <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> and <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.UpdateParts"/>.
             The <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.UpdateParts"/> method will call <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CommitLayout"/> within a transaction.
             The outline of such an override should be like:
             <code language="cs">
             public override void DoLayout(IEnumerable&lt;Part&gt; coll = null) {
               if (Network == null) Network = MakeNetwork(coll);
               // assign Bounds to all vertexes in the network:
               foreach (var v in Network.Vertexes) {
                 v.CenterX = ...
                 v.CenterY = ...
               }
               UpdateParts();
               Network = null;
             }
             </code>
             Override <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CommitLayout"/> to actually position nodes and route links.
            
             When the layout does <em>not</em> extend <see cref="T:Northwoods.Go.Layouts.NetworkLayout`4"/>,
             this method should make direct changes to <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s
             within a transaction, and it should call <see cref="M:Northwoods.Go.Layouts.Layout.CollectParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> on the argument in order
             to get the proper set of Nodes and Links to work on.
             Examples are provided in the Extensions directory.
            
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.NeedsLocation(Northwoods.Go.Part)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.CollectAllParts(System.Collections.Generic.HashSet{Northwoods.Go.Part},System.Collections.Generic.IEnumerable{Northwoods.Go.Part},System.Boolean,System.Predicate{Northwoods.Go.Part},System.Boolean,System.Boolean,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.MaybeEnsureBounds(Northwoods.Go.Part)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.GetLayoutBounds(Northwoods.Go.Part)">
            <summary>
            This method is called by layouts to determine the size and initial position of the nodes that it is laying out.
            </summary>
            <remarks>
            Normally this just returns the part's <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> plus its <see cref="P:Northwoods.Go.GraphObject.Margin"/>.
            However, if <see cref="P:Northwoods.Go.Layouts.Layout.BoundsComputation"/> has been set to a function, that function will be called
            in order to return the bounds of the given Part in document coordinates that the layout should pretend it has.
            </remarks>
            <param name="part"> the Part being laid out</param>
            <returns>a Rect in document coordinates</returns>
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.BoundsComputation">
             <summary>
             Gets or sets a function that determines the initial size and position in document coordinates of a LayoutVertex corresponding to a Node.
             </summary>
             <remarks>
             This function is called by <see cref="M:Northwoods.Go.Layouts.Layout.GetLayoutBounds(Northwoods.Go.Part)"/>.
             The default value for this property is null, in which case the <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/> of the Node is used.
             Setting this property to a new value invalidates this layout.
            
             The non-null value must be a function that takes 2 arguments.
             The first argument will be the Part whose bounds the Layout should use.
             The second argument will be this Layout.
             The return value must be in document coordinates.  You may find it convenient to call <see cref="M:Northwoods.Go.GraphObject.GetDocumentBounds"/>
             to get the bounds in document coordinates of an object within the node.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.CollectParts(Northwoods.Go.Diagram)">
             <summary>
             A convenient way of converting the argument to DoLayout to an actual collection of eligible Parts.
             </summary>
             <remarks>
             The resulting set will not include any Nodes or Links for which <see cref="M:Northwoods.Go.Part.CanLayout"/> is false.
             If the argument includes a Group for which <see cref="P:Northwoods.Go.Group.Layout"/> is null, the resulting set
             will include the member parts of that group rather than that group itself.
             You will not need to call CollectParts if you call <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>,
             because that method does effectively the same thing when building the <see cref="T:Northwoods.Go.Layouts.Network`3"/>.
            
             Typical usage:
             <code language="cs">
             public override void DoLayout(IEnumerable&lt;Part&gt; coll = null) {
               HashSet&lt;Part&gt; allparts = null;
               if (coll != null) {
                 allparts = CollectParts(coll);
               } else if (Group != null) {
                 allparts = CollectParts(Group);
               } else if (Diagram != null) {
                 allparts = CollectParts(Diagram);
               } else {
                 return; // Nothing to layout!
               }
               foreach (var node in allparts) {
                 if (node is Node) {
                   // . . . position the node . . .
                 }
               }
             }
             </code>
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.CollectParts(Northwoods.Go.Group)">
            <inheritdoc cref="M:Northwoods.Go.Layouts.Layout.CollectParts(Northwoods.Go.Diagram)"/>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.CollectParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
            <inheritdoc cref="M:Northwoods.Go.Layouts.Layout.CollectParts(Northwoods.Go.Diagram)"/>
        </member>
        <member name="P:Northwoods.Go.Layouts.Layout.ArrangementOrigin">
            <summary>
            Gets or sets the top-left point for where the graph should be positioned when laid out.
            </summary>
            <remarks>
            The default value for this property is the Point(0, 0).
            Setting this property to a new value invalidates this layout.
            This property is likely to be set by many Layouts that belong to a Group when the layout is performed.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.Layout.InitialOrigin(Northwoods.Go.Point)">
            <summary>
            Compute the desired value of <see cref="P:Northwoods.Go.Layouts.Layout.ArrangementOrigin"/> if this Layout is being performed for a Group.
            </summary>
            <remarks>
            This is typically called near the beginning of the implementation of <see cref="M:Northwoods.Go.Layouts.Layout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>:
            `this.ArrangementOrigin = this.InitialOrigin(this.ArrangementOrigin);`
            if the layout wants to respect the pre-layout location of the Group when deciding where to position its member nodes.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Layouts.NetworkLayout`4">
             <summary>
             NetworkLayouts can be used to create more complicated layouts using <see cref="T:Northwoods.Go.Layouts.Network`3"/>s.
             </summary>
             <remarks>
             More complicated layouts make use of a separate <see cref="T:Northwoods.Go.Layouts.Network`3"/> -
             consisting of <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>es and <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>s -
             that normally holds a graph that is isomorphic to the graph consisting of <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s in the <see cref="T:Northwoods.Go.Diagram"/> or <see cref="T:Northwoods.Go.Group"/>.
             <see cref="M:Northwoods.Go.Layouts.Layout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> will call <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> and remember the result as the <see cref="P:Northwoods.Go.Layouts.NetworkLayout`4.Network"/>.
             <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> will call <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CreateNetwork"/> and initialize it by adding new instances of vertexes and edges
             corresponding to the given collection of Nodes and Links.
            
             When <see cref="M:Northwoods.Go.Layouts.Layout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> is finished with its work it will call <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.UpdateParts"/>, which will call <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CommitLayout"/>
             to set new node locations and route links. It then normally discards the <see cref="P:Northwoods.Go.Layouts.NetworkLayout`4.Network"/>.
            
             The vertex and edge instances allow the layout to work with more information about each Node and Link without
             actually modifying those Nodes and Links until <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CommitLayout"/> is called to actually set the Node locations and route the Links.
             The use of a network also allows the layout to work with a graph that is not isomorphic to the given collection of Nodes and Links.
             This is useful when needing to use dummy vertexes and/or edges to achieve certain layout behaviors,
             or when one wants to ignore certain vertexes or edges, without actually modifying or adding or removing the diagram's nodes or links.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.NetworkLayout`4.#ctor">
            <summary>
            This constructs a NetworkLayout with no initial network.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Layouts.NetworkLayout`4.Network">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Layouts.Network`3"/> used by this Layout, if any.
            </summary>
            <remarks>
            The default value is null.
            Setting this property does not invalidate this layout.
            Call <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CreateNetwork"/> or <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/> to create a network.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.NetworkLayout`4.CreateNetwork">
            <summary>
            Create a new <see cref="T:Northwoods.Go.Layouts.Network`3"/> of <see cref="T:Northwoods.Go.Layouts.Network`3.Vertex"/>es and <see cref="T:Northwoods.Go.Layouts.Network`3.Edge"/>s.
            </summary>
            <remarks>
            This may be overridden in subclasses to create instances of subclasses of <see cref="T:Northwoods.Go.Layouts.Network`3"/>.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>a new instance of a <see cref="T:Northwoods.Go.Layouts.Network`3"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Layouts.NetworkLayout`4.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
            <summary>
            Create and initialize a <see cref="T:Northwoods.Go.Layouts.Network`3"/>.
            This is called by <see cref="M:Northwoods.Go.Layouts.Layout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>.
            </summary>
            <remarks>
            This method calls <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CreateNetwork"/> to allocate the network.
            This may be overridden in NetworkLayout subclasses to customize the initialization.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="coll">the collection of Parts for initialization. If none is supplied,
            this will build a network from the <see cref="T:Northwoods.Go.Diagram"/>, or <see cref="T:Northwoods.Go.Group"/>, if one is set.</param>
            <returns>the value of a call to <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CreateNetwork"/> initialized by vertexes and edges from the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.Layouts.NetworkLayout`4.UpdateParts">
            <summary>
            Update the "physical" node positionings and link routings.
            This should be called by <see cref="M:Northwoods.Go.Layouts.Layout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})"/>.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.CommitLayout"/> to actually set <see cref="T:Northwoods.Go.Node"/> positions and route <see cref="T:Northwoods.Go.Link"/>s.
            This performs the changes within a transaction.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Layouts.NetworkLayout`4.CommitLayout">
             <summary>
             Commit changes to the diagram by setting <see cref="T:Northwoods.Go.Node"/> positions and by routing the <see cref="T:Northwoods.Go.Link"/>s.
             This is called by <see cref="M:Northwoods.Go.Layouts.NetworkLayout`4.UpdateParts"/> within a transaction.
             </summary>
             <remarks>
             You should not call this method -- it is a "protected virtual" method.
             This may be overridden by subclasses of NetworkLayout.
             By default this method is implemented as follows:
             <code language="cs">
             protected virtual void CommitLayout() {
               if (Network == null) return;
               foreach (var vert in Network.Vertexes) {
                 vert.Commit();
               }
               if (IsRouting) {
                 foreach (var edge in Network.Edges) {
                   edge.Commit();
                 }
               }
             }
             </code>
            
             Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.Models.BindingMode">
            <summary>
            This enumeration specifies in which direction bindings will be evaluated.
            Used for <see cref="P:Northwoods.Go.Models.Binding.Mode"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.BindingMode.OneWay">
            <summary>
            Uses data source values and sets <see cref="T:Northwoods.Go.GraphObject"/> properties.
            </summary>
            <remarks>
            Bindings are evaluated when <see cref="M:Northwoods.Go.Panel.UpdateTargetBindings(System.String)"/> is called.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Models.BindingMode.TwoWay">
            <summary>
            Uses data source values and <see cref="T:Northwoods.Go.GraphObject"/> properties and keeps them in sync.
            </summary>
            <remarks>
            When <see cref="M:Northwoods.Go.Panel.UpdateTargetBindings(System.String)"/> is called, the <see cref="T:Northwoods.Go.GraphObject"/> properties are set.
            When <see cref="T:Northwoods.Go.GraphObject"/> properties are modified, the <see cref="P:Northwoods.Go.Panel.Data"/> properties are set.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Models.SimpleConversion">
             <summary>
             For <see cref="T:Northwoods.Go.Models.Binding"/>s: A side-effect-free delegate converting a value.
            
             This delegate can be provided as either the converter or back converter of a Binding.
             </summary>
             <param name="value">the value from the source or target</param>
             <returns>the value to set to a target or data property</returns>
        </member>
        <member name="T:Northwoods.Go.Models.TargetConversion">
            <summary>
            For <see cref="T:Northwoods.Go.Models.Binding"/>s: A side-effect-free delegate converting the data property value to the value to set the target property.
            </summary>
            <param name="value">the value from the source</param>
            <param name="target">the binding target object</param>
            <returns>the value to set to a target property</returns>
            <seealso cref="P:Northwoods.Go.Models.Binding.Converter"/>
        </member>
        <member name="T:Northwoods.Go.Models.BackConversion">
            <summary>
            For <see cref="T:Northwoods.Go.Models.Binding"/>s: A side-effect-free delegate converting property values back to data property values.
            </summary>
            <param name="value">the value from the target</param>
            <param name="source">the source <see cref="P:Northwoods.Go.Panel.Data"/> object</param>
            <param name="model">the <see cref="T:Northwoods.Go.Models.Model`3"/></param>
            <returns>the value to set to a data property</returns>
            <seealso cref="P:Northwoods.Go.Models.Binding.BackConverter"/>
        </member>
        <member name="T:Northwoods.Go.Models.Binding">
             <summary>
             A Binding describes how to automatically set a property on a <see cref="T:Northwoods.Go.GraphObject"/>
             to a value of a property of data in the model.
             The target property name and the data source property name are strings.
             All name matching is case-sensitive.
             </summary>
             <remarks>
             Register bindings by calling <see cref="M:Northwoods.Go.GraphObject.Bind(Northwoods.Go.Models.Binding[])"/>.
             Existing bindings become read-only, and no new bindings may be added,
             when a template (a <see cref="T:Northwoods.Go.Part"/>) is copied.
             Bindings will be shared by all copies of the template's GraphObjects.
            
             For example, your node data might be like:
             <code language="cs">
               { Key = 23, Say = "hello!" }
             </code>
            
             Your simple node template might be like:
             <code language="cs">
               var template = new Node(PanelLayoutAuto.Instance);
               // . . . define the rest of the Node's visual tree . . .
               var txt = new TextBlock();
               txt.Bind("Text", "Say");
               template.Add(txt);
               myDiagram.NodeTemplate = template;
             </code>
            
             The data binding causes the <see cref="P:Northwoods.Go.TextBlock.Text"/> property of
             the TextBlock to be set to the value of the data's "Say" property.
             If the value of the "Say" property of a particular data object is null,
             the binding is not evaluated: the target property is not set.
             If there is an error with the binding, you may see a message in the console log.
             For this reason you may want to explicitly set the initial value for a property
             when defining the GraphObject, since that value will remain as the default value
             if the Binding is not evaluated.
            
             Bindings are not necessarily evaluated in any particular order.
             Binding sources should not be (or depend in a conversion function on) the category of the data
             if you might be modifying the category (e.g. by calling <see cref="M:Northwoods.Go.Models.Model`3.SetCategoryForNodeData(`0,System.String)"/>),
             because then some bindings might be evaluated before or after the category has been changed.
            
             <h4>Conversions</h4>
             Sometimes the data value needs to be modified or converted in order
             to be used as the new value of a <see cref="T:Northwoods.Go.GraphObject"/> property.
             The most common conversion functions are provided for you --
             they convert a string to a geometric class:
             <see cref="M:Northwoods.Go.Point.Parse(System.String)"/>, <see cref="M:Northwoods.Go.Size.Parse(System.String)"/>, <see cref="M:Northwoods.Go.Rect.Parse(System.String)"/>,
             <see cref="M:Northwoods.Go.Margin.Parse(System.String)"/>, <see cref="M:Northwoods.Go.Spot.Parse(System.String)"/>, and <see cref="M:Northwoods.Go.Geometry.Parse(System.String,System.Boolean)"/>.
             But you can easily define your own conversion function.
            
             As an example of a conversion function, let's use a function that adds some
             text prefixing the data property value:
             <code language="cs">
               .Bind("Text", "Say", (v, _) => { return "I say: " + v; })
             </code>
             Although simple conversions cover almost all binding cases, there are some infrequent uses
             that are covered by "Advanced Conversions", discussed below.
             Conversion functions must not have any side-effects.
             Conversion functions may be called frequently, so they should be fast and avoid allocating memory.
             The order in which conversion functions are called is not specified and may vary.
            
             <h4>OneWay and TwoWay Bindings</h4>
             By default bindings are <see cref="F:Northwoods.Go.Models.BindingMode.OneWay"/>.
             OneWay bindings are evaluated when the <see cref="P:Northwoods.Go.Panel.Data"/> property is set
             or when you call <see cref="M:Northwoods.Go.Panel.UpdateTargetBindings(System.String)"/> or <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>.
             OneWay bindings only transfer values from the source to the target.
            
             TwoWay bindings are evaluated in the source-to-target direction just as OneWay
             bindings are evaluated.
             However when the <see cref="T:Northwoods.Go.GraphObject"/> target property is set, the TwoWay
             bindings are evaluated in the target-to-source direction.
             There is no point in having a TwoWay binding on a GraphObject property that cannot be set.
             For efficiency, avoid TwoWay bindings on GraphObject properties that do not change value in your app.
            
             You should not have a TwoWay binding with a source that is a data object's key property,
             i.e. on the data property whose name is the same as the value of <see cref="P:Northwoods.Go.Models.Model`3.NodeKeyProperty"/> or
             <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/>.
             Unintentionally changing the key value to be the same as another data's key value
             may cause indeterminate behavior.
             Furthermore, changing a data key without changing any references to that Part
             using the key value will result in "dangling" references and inconsistent relationships.
             You can make that change safely by calling <see cref="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)"/> or
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetKeyForLinkData(`3,`4)"/>,
             but not via a data binding.
            
             The target-to-source update can also go through a conversion function.
             The most common back-conversion functions are provided for you.
             They convert a geometric class to a string:
             <see cref="M:Northwoods.Go.Point.Stringify(Northwoods.Go.Point)"/>, <see cref="M:Northwoods.Go.Size.Stringify(Northwoods.Go.Size)"/>, <see cref="M:Northwoods.Go.Rect.Stringify(Northwoods.Go.Rect)"/>,
             <see cref="M:Northwoods.Go.Margin.Stringify(Northwoods.Go.Margin)"/>, <see cref="M:Northwoods.Go.Spot.Stringify(Northwoods.Go.Spot)"/>, and <see cref="M:Northwoods.Go.Geometry.Stringify(Northwoods.Go.Geometry)"/>.
            
             It is common to want to update some data properties based on changes to the diagram.
             For example, as the user changes the <see cref="P:Northwoods.Go.Part.Location"/> by dragging a Node,
             you can automatically keep the node's model data in sync using a TwoWay binding.
             <code language="cs">
               new Binding("Location", "Loc", Point.Parse, Point.Stringify)
             </code>
             The call to <see cref="M:Northwoods.Go.Models.Binding.MakeTwoWay(Northwoods.Go.Models.BackConversion)"/> changes the <see cref="P:Northwoods.Go.Models.Binding.Mode"/>
             to be <see cref="F:Northwoods.Go.Models.BindingMode.TwoWay"/> and specifies the <see cref="P:Northwoods.Go.Models.Binding.BackConverter"/>
             function to be the <see cref="M:Northwoods.Go.Point.Stringify(Northwoods.Go.Point)"/> static function.
            
             Because the Binding is on the whole node (`template`),
             the target object is the whole <see cref="T:Northwoods.Go.Node"/> and the target property is "Location".
             The value of `Data.Loc` will be a string representation of the `Node.Location` value.
            
             <h4>Binding Sources</h4>
             The target of a Binding is always a property of a <see cref="T:Northwoods.Go.GraphObject"/> or a <see cref="T:Northwoods.Go.RowDefinition"/>/<see cref="T:Northwoods.Go.ColumnDefinition"/>.
             The source of a Binding is normally a property of a data object in the model.
             But it is also possible to have the source of a Binding be the shared object that is the value of <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/>.
             You can specify such a binding by calling <see cref="M:Northwoods.Go.Models.Binding.OfModel"/>, meaning "a binding of a source that is a property of the Model.SharedData".
            
             As an example, you might want all Nodes to use the same color.
             It would be possible but not natural to bind to a property on the node data object, because that property would have to be
             duplicated on all of the node data objects in the model, and updating the property would mean calling <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>
             on each node data object with the same new value.  Furthermore if there happened to be no nodes at all in the model,
             there would be no place to save the data.  Hence using the shared <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/> object
             would be the sensible place for that shared information.
             <code language="cs">
               .Bind(new Binding("Stroke", "StrokeColor").OfModel())
             </code>
             and to set or modify that color one would just call, within a transaction:
             <code language="cs">
               model.Set(model.SharedData, "StrokeColor", "red");
             </code>
             That would cause all nodes with that model data binding to be re-evaluated.
             It is not commonplace to have a TwoWay Binding on "OfModel" Bindings, but that should work.
             Converters also work with "OfModel" Bindings.
            
             And it is also possible to have the source of a Binding be another GraphObject that is in the same Part.
             You can enable such a binding by calling <see cref="M:Northwoods.Go.Models.Binding.OfElement(System.String)"/>, meaning "a binding of a source that is a property of a GraphObject".
             You just have to make sure that element has a unique <see cref="P:Northwoods.Go.GraphObject.Name"/> or is the Part itself.
             The source property on the GraphObject has to be settable, and the Part must have a value for <see cref="P:Northwoods.Go.Panel.Data"/>.
             (If the source property setter does not notify about property value changes, the binding mechanism will not be invoked.
             Similarly, if there is no Panel.Data, the binding mechanism is not active.)
            
             As a common kind of example of data binding between two properties of GraphObjects,
             consider this Binding on a <see cref="T:Northwoods.Go.Shape"/> which changes the color of the <see cref="P:Northwoods.Go.Shape.Stroke"/>
             depending on whether the Node is selected (<see cref="P:Northwoods.Go.Part.IsSelected"/>):
             <code language="cs">
               .Bind(new Binding("Stroke", "IsSelected", (s, _) => { return (bool)s ? "dodgerblue" : "gray"; }).OfElement())
             </code>
             Note the call to <see cref="M:Northwoods.Go.Models.Binding.OfElement(System.String)"/>, which tells the Binding that it should use as the source
             a GraphObject with a particular name.  However that name argument is optional -- supplying no name
             (or supplying an empty string) will cause the binding to operate with the root GraphObject.
             In this case that would be the Node itself.
             Now with this binding whenever the value of <see cref="P:Northwoods.Go.Part.IsSelected"/> changes, this Shape's stroke changes color.
             The conversion function is what changes the boolean "IsSelected" value to a brush color specifier.
            
             <h4>Advanced Conversions</h4>
             The binding functionality also has more advanced features for less common situations.
             The source property name may be an empty string, to convert the object as a whole.
             Conversion functions may take a second argument that takes the object that is bound.
             For source-to-target conversions, the second argument will be the <see cref="T:Northwoods.Go.GraphObject"/> whose property is bound.
             For target-to-source (back-)conversions, the second argument will be the source data object and
             the third argument will be the <see cref="T:Northwoods.Go.Models.Model`3"/>.
            
             Here's an example of a two-way data-binding using two custom conversion functions working with two separate data properties.
             First we define the two conversion functions.
             <code language="cs">
              object ToLocation(object data, object node) {
                var nd = (MyNodeData)data;
                return new Point(nd.X, nd.Y);
              }
            
              object FromLocation(object loc, object data, IModel model) {
                var pt = (Point)loc;
                model.Set(data, "X", pt.X);
                model.Set(data, "Y", pt.Y);
                return null;
              }
             </code>
            
             Then to data-bind the default template's <see cref="P:Northwoods.Go.Part.Location"/> property
             to two separate data properties, "x" and "y":
             <code language="cs">
               .Bind("Location", "", ToLocation, FromLocation)
             </code>
            
             An empty string argument for the *sourceprop* parameter indicates
             that the whole data object should be passed to the `ToLocation` function,
             rather than the value of some property of that data.
             The return value is used as the new value for the <see cref="P:Northwoods.Go.Part.Location"/> property.
             In almost all cases the second argument is not used.
             Caution: for efficiency reasons you should try to avoid using an empty source property name.
             Such bindings will be evaluated much more frequently than ones whose source is a particular property name.
            
             The binding works normally for the source-to-target direction.
             But when the target property is modified it is the source property that is
             set with the back-converted property value from the target object.
             Because in this example the source property name is the empty string,
             and because one cannot replace the whole source data object,
             any return value from the conversion function is ignored.
             Instead the conversion function has to modify the data object directly,
             as this example `FromLocation` function does.
            
             Note that because the source property name is the empty string, the binding system will not know
             which properties are modified in the call to `FromLocation`.
             Hence to support undo and redo, in order to make the data changes we have to call
             <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/> so that the <see cref="T:Northwoods.Go.Models.UndoManager"/> can record the change,
             including the previous value.
            
             <h4>Replacing Items in Arrays</h4>
             However, although a TwoWay Binding cannot replace the node data object in the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/>,
             it is possible to replace an item in an <see cref="P:Northwoods.Go.Panel.ItemList"/>.
             So if your node data were:
            
             <code language="cs">
               { Key = 1, Items = ["one", "two", "three"] }
             </code>
            
             And if your node template included something like:
             <code language="cs">
               new Panel(PanelLayoutVertical.Instance) {
                 ItemTemplate =
                   new Panel().Add(
                     new TextBlock { Editable = true }.Bind(new Binding("Text").MakeTwoWay())
                   )
               }.Bind("ItemList", "Items")
             </code>
            
             Then the user would be able to edit any of the <see cref="T:Northwoods.Go.TextBlock"/>s, causing the item list to be modified,
             for example resulting in this node data:
             <code language="cs">
               { Key = 1, Items = ["one", "SOME NEW TEXT HERE", "three"] }
             </code>
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.#ctor(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)">
            <summary>
            The constructor creates a binding.
            </summary>
            <remarks>
            By default, a one way binding will be created.
            If a back converter function is supplied, the binding will be made two way.
            </remarks>
            <param name="targetprop">A string naming the target property on the target object.
              This should not be the empty string.</param>
            <param name="sourceprop">A string naming the source property on the bound data object.
              If this is the empty string, the whole <see cref="P:Northwoods.Go.Panel.Data"/> object is used.</param>
            <param name="conv">A side-effect-free function converting the data property value to the value to set the target property.
              If the function is null or not supplied, no conversion takes place.</param>
            <param name="backconv">An optional conversion function to convert property values back to data values.
              If the function is null or not supplied, no conversion takes place, and <see cref="P:Northwoods.Go.Models.Binding.Mode"/> will be <see cref="F:Northwoods.Go.Models.BindingMode.OneWay"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.#ctor(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.Models.Binding.#ctor(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)" />
        </member>
        <member name="M:Northwoods.Go.Models.Binding.#ctor(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.BackConversion)">
            <inheritdoc cref="M:Northwoods.Go.Models.Binding.#ctor(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)" />
        </member>
        <member name="M:Northwoods.Go.Models.Binding.#ctor(System.String,System.String,Northwoods.Go.Models.SimpleConversion,Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.Models.Binding.#ctor(System.String,System.String,Northwoods.Go.Models.TargetConversion,Northwoods.Go.Models.BackConversion)" />
        </member>
        <member name="M:Northwoods.Go.Models.Binding.#ctor(System.String)">
            <summary>
            The constructor creates a one-way binding with the same target and source properties.
            </summary>
            <param name="prop">A string naming the target/source property on the target object/data.
              This should not be the empty string.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.#ctor(Northwoods.Go.Models.Binding)">
            <summary>
            Create a copy of this Binding, with the same property values.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.ToString">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.Binding.Freeze">
            @hidden @internal
            <summary>
            Make this object "frozen" or immutable.
            </summary>
            <remarks>
            Future attempts to change its state, for example by setting any of its properties,
            may result in an exception, until it is thaw()'ed.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.Thaw">
            @hidden @internal
            <summary>
            Make this object "thawed" or mutable.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.Binding.TargetId">
            @hidden @internal
            <summary>
            Gets or sets the id of the <see cref="T:Northwoods.Go.GraphObject"/> whose property should be set
            by this data binding.
            </summary>
            <remarks>
            Because Bindings may be shared, the TargetId is needed to find in the Part
            the actual object whose property is data-bound.
            The default value is -1, which would match no GraphObject id.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Binding.TargetProperty">
            <summary>
            Gets or sets the name of the property to be set on the target <see cref="T:Northwoods.Go.GraphObject"/>.
            </summary>
            <remarks>
            The default value is the empty string; you should set this to be the name of a property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Binding.TargetPropertyInfo">
            <summary>
            Gets or sets the PropertyInfo of the property to be set on the target <see cref="T:Northwoods.Go.GraphObject"/>.
            </summary>
            <remarks>
            The default value is null; it will be set during Panel.FreezeBindings.
            Do not set this property anywhere aside from FreezeBindings!
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Binding.SourceName">
             <summary>
             Gets or sets the name of the <see cref="T:Northwoods.Go.GraphObject"/> that should act as a source object
             whose property should be gotten by this data binding.
             </summary>
             <remarks>
             The default value is null, which uses the bound <see cref="P:Northwoods.Go.Panel.Data"/> as the source.
             If the value is a string, it should be the name of a <see cref="T:Northwoods.Go.GraphObject"/> in the
             visual tree of the <see cref="T:Northwoods.Go.Panel"/> that is bound to the data.
             Use the empty string to refer to the root panel, which is typically the whole <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Link"/>,
             but will be a <see cref="T:Northwoods.Go.Panel"/> if used in a <see cref="P:Northwoods.Go.Panel.ItemTemplate"/>.
             The name must not contain a period.
            
             Binding only works if the source property is settable, not on computed or read-only properties,
             and if it supports notification.
             The documentation for the GraphObject (or subclass of GraphObject) property will indicate if the property is settable
             and if it does not notify.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Binding.IsToModel">
            <summary>
            Gets or sets whether the source data is <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/> rather than a node data or link data object in the model.
            </summary>
            <remarks>
            The default value is false -- the source data object will not be the Model.SharedData object.
            </remarks>
            <seealso cref="M:Northwoods.Go.Models.Binding.OfModel"/>
        </member>
        <member name="P:Northwoods.Go.Models.Binding.SourceProperty">
            <summary>
            Gets or sets the name of the property to get from the bound data object,
            the value of <see cref="P:Northwoods.Go.Panel.Data"/>.
            </summary>
            <remarks>
            The default value is the empty string, which results in setting the target
            property to the whole data object, rather than to a property value of the data object.
            If <see cref="P:Northwoods.Go.Models.Binding.SourceName"/> is not null, then this property names the settable
            property on the <see cref="T:Northwoods.Go.GraphObject"/> or <see cref="T:Northwoods.Go.RowDefinition"/>/<see cref="T:Northwoods.Go.ColumnDefinition"/>
            that acts as the source.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Binding.Converter">
             <summary>
             Gets or sets a converter function to apply to the data property value
             in order to produce the value to set to the target property.
             </summary>
             <remarks>
             This conversion function is used in both OneWay and TwoWay bindings,
             when transferring a value from the source to the target.
             The default value is null -- no conversion takes place.
             Otherwise the value should be a function that takes two arguments
             and returns the desired value.
             However, the return value is ignored when the <see cref="P:Northwoods.Go.Models.Binding.TargetProperty"/>
             is the empty string.
            
             Conversion functions must not have any side-effects other than setting
             the target property.  In particular you should not try to modify the
             structure of the visual tree in the target GraphObject's Part's visual tree.
            
             The function is passed the value from the source
             (the first argument) and the target <see cref="T:Northwoods.Go.GraphObject"/> (the second argument).
             If the <see cref="P:Northwoods.Go.Models.Binding.TargetProperty"/> is a property name, that property is set to
             the function's return value.
             If the <see cref="P:Northwoods.Go.Models.Binding.TargetProperty"/> is the empty string, the function should
             set a property on the second argument, which will be the target GraphObject.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Binding.BackConverter">
             <summary>
             Gets or sets a converter function to apply to the <see cref="T:Northwoods.Go.GraphObject"/> property value
             in order to produce the value to set to a data property.
             </summary>
             <remarks>
             This conversion function is only used in a TwoWay binding,
             when transferring a value from the target to the source.
             The default value is null -- no conversion takes place.
             Otherwise the value should be a function that takes three arguments
             and returns the desired value.
             However, the return value is ignored when the <see cref="P:Northwoods.Go.Models.Binding.SourceProperty"/>
             is the empty string.
            
             Conversion functions must not have any side-effects other than setting
             the source property.
            
             The function is passed the value from the target
             (the first argument), the source <see cref="P:Northwoods.Go.Panel.Data"/> object (the second argument),
             and the <see cref="T:Northwoods.Go.Models.Model`3"/> (the third argument).
             If the <see cref="P:Northwoods.Go.Models.Binding.SourceProperty"/> is a property name, that property is set to
             the function's return value.
             If the <see cref="P:Northwoods.Go.Models.Binding.SourceProperty"/> is the empty string, the function should
             modify the second argument, which will be the source data object.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Binding.Mode">
             <summary>
             Gets or sets the directions and frequency in which the binding may be evaluated.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Models.BindingMode.OneWay"/>.
             <see cref="F:Northwoods.Go.Models.BindingMode.TwoWay"/> is the other choice.
            
             Use OneWay bindings to initialize GraphObject properties based on model data,
             or to modify GraphObject properties when the model data changes with a call to <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>.
             Use TwoWay bindings to keep model data in sync with changes to GraphObject properties.
             For efficiency, avoid TwoWay bindings on GraphObject properties that do not change value in your app.
            
             You should not have a TwoWay binding on a data object's key property.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.MakeTwoWay(Northwoods.Go.Models.BackConversion)">
             <summary>
             Modify this Binding to set its <see cref="P:Northwoods.Go.Models.Binding.Mode"/> to be <see cref="F:Northwoods.Go.Models.BindingMode.TwoWay"/>, and
             provide an optional conversion function to convert <see cref="T:Northwoods.Go.GraphObject"/> property
             values back to data values, as the value of <see cref="P:Northwoods.Go.Models.Binding.BackConverter"/>.
             </summary>
             <remarks>
             Use TwoWay bindings to keep model data in sync with changes to GraphObject properties.
             For efficiency, avoid TwoWay bindings on GraphObject properties that do not change value in your app.
             It is typical only to use TwoWay bindings on properties that are modified by tools or commands.
             Examples include <see cref="P:Northwoods.Go.Part.Location"/> by <see cref="T:Northwoods.Go.Tools.DraggingTool"/> and
             <see cref="P:Northwoods.Go.TextBlock.Text"/> by <see cref="T:Northwoods.Go.Tools.TextEditingTool"/> (only if <see cref="P:Northwoods.Go.TextBlock.Editable"/> is true).
            
             You should not have a TwoWay binding on a data object's key property.
             </remarks>
             <returns>this two-way Binding.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.MakeTwoWay(Northwoods.Go.Models.SimpleConversion)">
            <inheritdoc cref="M:Northwoods.Go.Models.Binding.MakeTwoWay(Northwoods.Go.Models.BackConversion)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.OfElement(System.String)">
            <summary>
            Modify this Binding to set its <see cref="P:Northwoods.Go.Models.Binding.SourceName"/> property so as to identify
            a <see cref="T:Northwoods.Go.GraphObject"/> in the visual tree of the bound <see cref="T:Northwoods.Go.Panel"/> as the data source,
            instead of the <see cref="P:Northwoods.Go.Panel.Data"/> as the data source.
            </summary>
            <remarks>
            This permits data binding on GraphObject properties, such as <see cref="P:Northwoods.Go.Part.IsSelected"/>.
            Remember that you can reliably data bind only on settable properties, not on read-only or computed properties.
            </remarks>
            <param name="srcname">the <see cref="P:Northwoods.Go.GraphObject.Name"/> of an element in the visual tree of the bound <see cref="T:Northwoods.Go.Panel"/>;
            use an empty string to refer to the root panel of that visual tree, whose <see cref="P:Northwoods.Go.Panel.Data"/> is the bound data.</param>
            <returns>this Binding to another GraphObject.</returns>
            <seealso cref="P:Northwoods.Go.Models.Binding.SourceName"/>
            <seealso cref="M:Northwoods.Go.Models.Binding.OfModel"/>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.OfModel">
            <summary>
            Modify this Binding so that the source is the <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/> object,
            not a regular data object or another <see cref="T:Northwoods.Go.GraphObject"/> in the <see cref="T:Northwoods.Go.Part"/>.
            </summary>
            <returns>this Binding to the <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/> object.</returns>
            <seealso cref="P:Northwoods.Go.Models.Binding.IsToModel"/>
            <seealso cref="M:Northwoods.Go.Models.Binding.OfElement(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.FindSourceGraphObject(Northwoods.Go.Panel,Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.Binding.UpdateTarget(System.Object,System.Object,System.String)">
            @hidden @internal
            <param name="elt">the normal target element whose property will be modified.</param>
            <param name="data">the normal source data object that provides the property value.</param>
            <param name="srcprop">an optional property name on the DATA that should be copied;
              if supplied this will update the ELT only if the property name matches.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Binding.UpdateSource(System.Object,System.Object,System.String,Northwoods.Go.Panel)">
            @hidden @internal
            <summary>
            Apply this Binding to given element in order to update
            a property on a given source data object.
            </summary>
            <param name="elt">the normal target element whose property will be copied.</param>
            <param name="data">the normal source data object that will be modified.</param>
            <param name="trgtprop">a property name on the ELT that should be copied;
              if supplied this will update the DATA only if the property name matches.</param>
            <param name="binder"></param>
        </member>
        <member name="T:Northwoods.Go.Models.ChangeType">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Models.ChangedEvent.Change"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ChangeType.Transaction">
            <summary>
            For informational events, such as transactions and undo/redo operations.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/> refers the the <see cref="T:Northwoods.Go.Models.Transaction"/> affected, if any.
            The <see cref="P:Northwoods.Go.Models.ChangedEvent.PropertyName"/> distinguishes the different transaction or undo or redo stages.
            The <see cref="P:Northwoods.Go.Models.ChangedEvent.OldValue"/> may provide the transaction name, if available, as given to <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Models.ChangeType.Property">
             <summary>
             For simple property changes.
             </summary>
             <remarks>
             The name of the property is given by <see cref="P:Northwoods.Go.Models.ChangedEvent.PropertyName"/>.
             The modified object is given by <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/>.
             Use the <see cref="P:Northwoods.Go.Models.ChangedEvent.OldValue"/> and <see cref="P:Northwoods.Go.Models.ChangedEvent.NewValue"/> properties for the previous and next property values.
            
             For model changes, the <see cref="P:Northwoods.Go.Models.ChangedEvent.ModelChange"/> may be non-empty, indicating a structural change to the model.
             </remarks>
        </member>
        <member name="F:Northwoods.Go.Models.ChangeType.Insert">
            <summary>
            For inserting into collections.
            </summary>
            <remarks>
            The modified object is given by <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/>.
            Use the optional <see cref="P:Northwoods.Go.Models.ChangedEvent.PropertyName"/> to distinguish between different collections on the object.
            Use the <see cref="P:Northwoods.Go.Models.ChangedEvent.NewValue"/> property to indicate the value that was inserted.
            Use the optional <see cref="P:Northwoods.Go.Models.ChangedEvent.NewParam"/> property to indicate where or how, such as an array index or dictionary key.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.Models.ChangeType.Remove">
            <summary>
            For removing from collections.
            </summary>
            <remarks>
            The modified object is given by <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/>.
            Use the optional <see cref="P:Northwoods.Go.Models.ChangedEvent.PropertyName"/> to distinguish between different collections on the object.
            Use the <see cref="P:Northwoods.Go.Models.ChangedEvent.OldValue"/> property to indicate the value that was removed.
            Use the optional <see cref="P:Northwoods.Go.Models.ChangedEvent.OldParam"/> property to indicate where or how, such as an array index or dictionary key.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Models.ModelChangeType">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Models.ChangedEvent.ModelChange"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.None">
            <summary>
            For changes that don't affect the Model's structure.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.NodeDataSource">
            <summary>
            After the model's <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> is replaced, inserted into or removed from
            (setting <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> or calling <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.NodeKey">
            <summary>
            After changing a node data's unique key (<see cref="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.NodeCategory">
            <summary>
            After changing a node data's category (<see cref="M:Northwoods.Go.Models.Model`3.SetCategoryForNodeData(`0,System.String)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.LinkDataSource">
            <summary>
            After the model's <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> is replaced, inserted into or removed from
            (setting <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> or calling <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>
            or <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(`3)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.LinkKey">
            <summary>
            After changing a link data's unique key (<see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetKeyForLinkData(`3,`4)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.LinkCategory">
            <summary>
            After changing a link data's category (<see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetCategoryForLinkData(`3,System.String)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.LinkFromKey">
            <summary>
            After changing a link data's "From" node key (<see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromKeyForLinkData(`3,`1)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.LinkToKey">
            <summary>
            After changing a link data's "To" node key (<see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.LinkFromPortId">
            <summary>
            After changing a link data's "From" port identifier string (<see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromPortIdForLinkData(`3,`5)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.LinkToPortId">
            <summary>
            After changing a link data's "To" port identifier string (<see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToPortIdForLinkData(`3,`5)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.LinkLabelKeys">
            <summary>
            After replacing, inserting into, or removing from a link data's collection of keys to label nodes
            (calling <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetLabelKeysForLinkData(`3,System.Collections.Generic.ICollection{`1})"/>, <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLabelKeyForLinkData(`3,`1)"/>,
            or <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLabelKeyForLinkData(`3,`1)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.NodeGroupKey">
            <summary>
            After changing a node data's key for a containing group data (<see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.NodeParentKey">
            <summary>
            After changing a node data's "Parent" node key (<see cref="M:Northwoods.Go.Models.TreeModel`3.SetParentKeyForNodeData(`0,`1)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.ParentLinkCategory">
            <summary>
            After changing a node data's "Parent" link's category(<see cref="M:Northwoods.Go.Models.TreeModel`3.SetParentLinkCategoryForNodeData(`0,System.String)"/>).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.SourceChanged">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Models.ModelChangeType.ModelDisplaced">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Models.ChangedEvent">
             <summary>
             A ChangedEvent represents a change to an object, typically a <see cref="T:Northwoods.Go.GraphObject"/>,
             but also for model data, a <see cref="T:Northwoods.Go.Models.Model`3"/>, or a <see cref="P:Northwoods.Go.Models.ChangedEvent.Diagram"/>.
             The most common case is for remembering the name of a property
             and the before-and-after values for that property.
             </summary>
             <remarks>
             You can listen for changed events on the model using <see cref="E:Northwoods.Go.Models.Model`3.Changed"/>
             or <see cref="E:Northwoods.Go.Diagram.ModelChanged"/>, and on the Diagram using <see cref="E:Northwoods.Go.Diagram.Changed"/>.
            
             There are four kinds of changes, represented by enumerated values:
             <see cref="F:Northwoods.Go.Models.ChangeType.Property"/> (the most common), <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/> and <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>
             (to represent inserting or removing objects from collections),
             and <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/> (to notify about beginning or ending transactions or undo or redo).
            
             The most common kind of ChangedEvent is a Property change.
             The name of the property is given by <see cref="P:Northwoods.Go.Models.ChangedEvent.PropertyName"/>.
             The modified object is given by <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/>.
             Use the <see cref="P:Northwoods.Go.Models.ChangedEvent.OldValue"/> and <see cref="P:Northwoods.Go.Models.ChangedEvent.NewValue"/> properties for the before and after property values.
            
             For an Insert ChangedEvent, the modified collection (often an Array) is a property value on the <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/>.
             The <see cref="P:Northwoods.Go.Models.ChangedEvent.PropertyName"/> helps distinguish between different collections on the object.
             Use the <see cref="P:Northwoods.Go.Models.ChangedEvent.NewValue"/> property to indicate the value that was inserted.
             Use the <see cref="P:Northwoods.Go.Models.ChangedEvent.NewParam"/> property to indicate where or how, such as an array index or dictionary key.
            
             For a Remove ChangedEvent, the modified collection is a property value on the <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/>.
             The <see cref="P:Northwoods.Go.Models.ChangedEvent.PropertyName"/> helps distinguish between different collections on the object.
             Use the <see cref="P:Northwoods.Go.Models.ChangedEvent.OldValue"/> property to indicate the value that was removed.
             Use the <see cref="P:Northwoods.Go.Models.ChangedEvent.OldParam"/> property to indicate where or how, such as an array index or dictionary key.
            
             Transaction ChangedEvents are generated by the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             The <see cref="P:Northwoods.Go.Models.ChangedEvent.PropertyName"/> names the nature of the ChangeType.
             For the very first transaction, the property name is "StartingFirstTransaction".
             This ChangedEvent precedes a ChangedEvent whose property name is "StartedTransaction",
             which occurs for every top-level transaction.
            
             When ending a transaction, there is first a ChangedEvent whose name is "ComittingTransaction".
             This is followed by one with either "CommittedTransaction" or "RolledBackTransaction",
             depending on how the transaction is ending.
             The <see cref="P:Northwoods.Go.Models.ChangedEvent.OldValue"/> provides the transaction name and the <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/> is the <see cref="T:Northwoods.Go.Models.Transaction"/> being finished.
             (Note that the Transaction value may be null if no Transaction is available at that time,
             perhaps because there were no changes made during the transaction.)
             That Transaction can be scanned to look for ChangedEvents that you may wish to record in a database,
             all within a single database transaction.
            
             There are also Transaction ChangedEvents corresponding to "StartingUndo", "FinishedUndo",
             "StartingRedo", and "FinishedRedo".
             The <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/> property provides the <see cref="T:Northwoods.Go.Models.Transaction"/> that is about-to-be or just-was undone or redone.
            
             Non-Transaction ChangedEvents are remembered by the <see cref="T:Northwoods.Go.Models.UndoManager"/>, if <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/>,
             and held in the <see cref="P:Northwoods.Go.Models.UndoManager.History"/> as <see cref="T:Northwoods.Go.Models.Transaction"/>s which hold lists of ChangedEvents.
             That is why ChangedEvent implements <see cref="M:Northwoods.Go.Models.ChangedEvent.Undo"/> and <see cref="M:Northwoods.Go.Models.ChangedEvent.Redo"/> of the change that it remembers.
            
             When the ChangedEvent represents a change to a <see cref="T:Northwoods.Go.Models.Model`3"/>, the value of <see cref="P:Northwoods.Go.Models.ChangedEvent.Model"/> is non-null
             and the value of <see cref="P:Northwoods.Go.Models.ChangedEvent.Diagram"/> is meaningless.
             If the change is a structural change to the model,
             the value of <see cref="P:Northwoods.Go.Models.ChangedEvent.ModelChange"/> indicates the kind of change, a <see cref="T:Northwoods.Go.Models.ModelChangeType"/> value.
            
             The value of <see cref="P:Northwoods.Go.Models.ChangedEvent.PropertyName"/> indicates the actual name of the property that was modified.
             <see cref="P:Northwoods.Go.Models.ChangedEvent.ModelChange"/> is not <see cref="F:Northwoods.Go.Models.ModelChangeType.None"/> only when there is a known structural change to the model,
             not just the setting of some property on some object.
            
             When the ChangedEvent represents a change to a <see cref="P:Northwoods.Go.Models.ChangedEvent.Diagram"/> or a <see cref="T:Northwoods.Go.GraphObject"/> within a diagram,
             the value of <see cref="P:Northwoods.Go.Models.ChangedEvent.Diagram"/> is non-null and
             the values of <see cref="P:Northwoods.Go.Models.ChangedEvent.Model"/> and <see cref="P:Northwoods.Go.Models.ChangedEvent.ModelChange"/> are meaningless.
            
             Please note that ChangedEvents can be raised for many different causes.
             You may not be interested in changes to temporary objects -- in that case ignore the ChangedEvent when
             <see cref="P:Northwoods.Go.Models.Model`3.SkipsUndoManager"/> or <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> is true.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.#ctor">
            <summary>
            The ChangedEvent class constructor produces an empty ChangedEvent object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.Clear">
            <summary>
            Forget any object references that this ChangedEvent may have.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.Copy">
            <summary>
            Make a copy of this ChangedEvent.
            </summary>
            <remarks>
            ChangedEvents are copied when the <see cref="T:Northwoods.Go.Models.UndoManager"/> adds to a <see cref="T:Northwoods.Go.Models.Transaction"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.ToString">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.GetValue(System.Boolean)">
            <summary>
            This is a convenient method to get the right value, depending on the value of undo,
            when implementing a state change as part of an undo or a redo.
            </summary>
            <param name="undo">If true, returns the OldValue, otherwise returns the NewValue.</param>
            <returns>Either the OldValue or the NewValue.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.GetParam(System.Boolean)">
            <summary>
            This is a convenient method to get the right parameter value, depending on the value of undo,
            when implementing a state change as part of an undo or a redo.
            </summary>
            <param name="undo">If true, returns the OldParam, otherwise returns the NewParam.</param>
            <returns>Either the OldParam or the NewParam.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.CanUndo">
            <summary>
            This predicate returns true if you can call Undo().
            </summary>
            <returns>True if ready for Undo() to be called.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.Undo">
            <summary>
            Reverse the effects of this object change.
            </summary>
            <remarks>
            CanUndo() must be true for this method to have any effect.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.CanRedo">
            <summary>
            This predicate returns true if you can call Redo().
            </summary>
            <returns>True if ready for Redo() to be called.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.ChangedEvent.Redo">
            <summary>
            Re-perform this object change after an Undo().
            </summary>
            <remarks>
            CanRedo() must be true for this method to have any effect.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.Model">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Models.IModel"/> that was modified.
            </summary>
            <remarks>
            When this property is non-null, the <see cref="P:Northwoods.Go.Models.ChangedEvent.Diagram"/> property will be null.
            However this property and the <see cref="P:Northwoods.Go.Models.ChangedEvent.Diagram"/> property may both be null simultaneously,
            when no particular model or diagram applies.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.Diagram">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Diagram"/> that was modified.
            </summary>
            <remarks>
            When this property is non-null, the <see cref="P:Northwoods.Go.Models.ChangedEvent.Model"/> property will be null.
            However this property and the <see cref="P:Northwoods.Go.Models.ChangedEvent.Model"/> property may both be null simultaneously,
            when no particular model or diagram applies.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.Change">
            <summary>
            Gets or sets the nature of change that occurred.
            </summary>
            <remarks>
            The default is <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>.
            Other values are <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>, <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>,
            and <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.ModelChange">
            <summary>
            Gets or sets the type of the model change, reflecting a change to
            model data in addition to a change to the model itself.
            </summary>
            <remarks>
            The default is <see cref="F:Northwoods.Go.Models.ModelChangeType.None"/>, which indicates that this is just
            a regular change to some object's state, probably its property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.PropertyName">
            <summary>
            Gets or sets the name of the property change.
            </summary>
            <remarks>
            The default is an empty string, which is not a valid property name.
            This property can be useful even when the type of change is
            not <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>, because it can help identify
            the collection in the <see cref="P:Northwoods.Go.Models.ChangedEvent.Object"/> that was modified
            (for <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/> or <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>)
            or the stage of the current transaction (for <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>).
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.IsTransactionFinished">
            <summary>
            This read-only property is true when this ChangedEvent is of type <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/> and represents the end of a transactional change.
            </summary>
            <remarks>
            It is implemented as:
            <code language="cs">
            return (Change == ChangeType.Transaction &amp;&amp; (PropertyName == "CommittedTransaction" || PropertyName == "FinishedUndo" || PropertyName == "FinishedRedo"));
            </code>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.Object">
             <summary>
             Gets or sets the object that was modified.
             </summary>
             <remarks>
             The default is null.
            
             For <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/> changes, this may be the <see cref="T:Northwoods.Go.Models.Transaction"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.OldValue">
            <summary>
            Gets or sets the previous or old value that the property had.
            </summary>
            <remarks>
            The default is null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.OldParam">
            <summary>
            Gets or sets an optional value associated with the old value.
            </summary>
            <remarks>
            Most properties do not require any parameter to describe the change.
            This is typically a value that helps distinguish the old value, such as an index into an array.
            It is null if it is not used.
            The default is null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.NewValue">
            <summary>
            Gets or sets the next or current value that the property has.
            </summary>
            <remarks>
            The default is null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ChangedEvent.NewParam">
            <summary>
            Gets or sets an optional value associated with the new value.
            </summary>
            <remarks>
            Most properties do not require any parameter to describe the change.
            This is typically a value that helps distinguish the new value, such as an index into an array.
            It is null if it is not used.
            The default is null.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Models.GraphLinksModel`6">
             <summary>
             GraphLinksModels support links between nodes and grouping nodes and links into subgraphs.
             GraphLinksModels hold node data and link data in separate collections.
             </summary>
             <remarks>
             Node data is normally represented in a <see cref="T:Northwoods.Go.Diagram"/> by instances of <see cref="T:Northwoods.Go.Node"/>,
             but they could be represented by simple <see cref="T:Northwoods.Go.Part"/>s or by <see cref="T:Northwoods.Go.Group"/>s.
             Link data should be represented by instances of <see cref="T:Northwoods.Go.Link"/>.
            
             Each link data object is assumed to have two values, one referring to the node that the
             link is coming from and one that the link is going to.
             The <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromKeyProperty"/> property names the property on the link data whose value
             is the key of the "from" node.
             The <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToKeyProperty"/> property names the property on the link data whose value
             is the key of the "to" node.
             The default values for these properties are "From" and "To" respectively.
            
             For example, one can define a graph consisting of two nodes with one link connecting them:
             <code language="cs">
               model.NodeDataSource = new List&lt;MyNodeData&gt; {
                 new MyNodeData { Key = "Alpha" },
                 new MyNodeData { Key = "Beta" }
               };
               model.LinkDataSource = new List&lt;MyLinkData&gt; {
                 new MyLinkData { From = "Alpha", To = "Beta" }
               };
             </code>
            
             If you want to have subgraphs in your diagram, where a group node contains some number of nodes and links,
             you need to declare that some node data actually represent groups,
             and you need to provide a reference from a member node data to its containing group node data.
             The <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.NodeIsGroupProperty"/> property names the property on a node data that is true
             if that node data represents a group.
             The <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.NodeGroupKeyProperty"/> property names the property on a node data whose value
             is the key of the containing group's node data.
             The default values for these properties are "IsGroup" and "Group" respectively.
            
             For example, one can define a graph consisting of one group containing a subgraph of
             two nodes connected by a link, with a second link from that group to a third node
             that is not a member of that group:
             <code language="cs">
               model.NodeDataSource = new List&lt;MyNodeData&gt; {
                 new MyNodeData { Key = "Group1", IsGroup = true },
                 new MyNodeData { Key = "Alpha", Group = "Group1" },
                 new MyNodeData { Key = "Beta", Group = "Group1" },
                 new MyNodeData { Key = "Gamma" }
               };
               model.LinkDataSource = new List&lt;MyLinkData&gt; {
                 new MyLinkData { From = "Alpha", To = "Beta" },
                 new MyLinkData { From = "Group1", To = "Gamma" }
               ];
             </code>
            
             GraphLinksModels also support distinguishing the "port" element of a node to which
             a link can connect, at either end of the link.
             This identification is a string that names the "port" element in the node.
             However, you need to set the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromPortIdProperty"/> and/or
             <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToPortIdProperty"/> properties before the model is able to
             get the "port id" information from the link data.
            
             For example, one can define a graph consisting of a "subtraction" node and two inputs and one output.
             The "subtraction" node has two distinct inputs called "subtrahend" and "minuend";
             the output is called "difference".
             <code language="cs">
               model.LinkFromPortIdProperty = "FromPort";  // necessary to remember port ids
               model.LinkToPortIdProperty = "ToPort";
               model.NodeDataSource = new List&lt;MyNodeData&gt; {
                 new MyNodeData { Key = 1, Constant = 5 },  // a constant input node
                 new MyNodeData { Key = 2, Constant = 2 },  // another constant node
                 new MyNodeData { Key = 3, Operation = "subtract" },
                 new MyNodeData { Key = 4, Value = 3 }  // the output node
               };
               model.LinkDataSource = new List&lt;MyLinkData&gt; {
                 new MyLinkData { From = 1, To = 3, ToPort = "subtrahend" },
                 new MyLinkData { From = 2, To = 3, ToPort = "minuend" },
                 new MyLinkData { From = 3, To = 4, FromPort = "difference" }
               };
             </code>
             In this case links connected to node 3 (which is the subtraction operation)
             are distinguished by port id.
             The connections to the other nodes do not have any port identification,
             presumably because there is only one port on those nodes, representing the node value.
            
             Each link data object is assumed to have a unique key value.
             The <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> property names the property on the link data whose value
             is the unique key for that link data object.
             The default value for this property is "Key".
             You should not have a TwoWay data binding on the link key property,
             because that might cause the property value to be set to a duplicate key value.
            
             If the key is undefined, or if there are duplicate key values,
             the model will automatically try to assign a new unique key value.
            
             Just as with the assignment of node keys, you can customize the assignment of link keys by setting
             <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.MakeUniqueLinkKeyFunction"/> to a function that returns a unique identifier.
            
             This model does not support the modification of whether a node data object is a group.
            
             This model cannot detect the modification of the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> array
             or the modification of any link data object.
             If you want to add or remove link data from the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/>,
             call the <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/> or <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(`3)"/> methods.
             If you want to modify the node a link connects to, call the
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromKeyForLinkData(`3,`1)"/> and/or <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)"/> methods.
             If you want to change the membership of a node data in a group,
             call the <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)"/> method.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.Models.GraphLinksModel`6.NodeData">
             <summary>
             A simple representation of node data that supports property copying
             via the <c>ICloneable</c> interface.
             </summary>
             <example>
             public class BasicModel : GraphLinksModel&lt;BasicNodeData, string, object, BasicLinkData, string, string&gt; { }
             public class BasicNodeData : BasicModel.NodeData {
               public string Color { get; set; }
             }
             public class BasicLinkData: BasicModel.LinkData { }
             </example>
             <remarks>
             You should override the <see cref="M:Northwoods.Go.Models.Model`3.NodeData.Clone"/> method
             if the fields contain data that should not be shared between copies.
            
             Normally, each <see cref="P:Northwoods.Go.Models.Model`3.NodeData.Key"/> should have a unique value within the model.
             You can maintain that yourself, by setting the <see cref="P:Northwoods.Go.Models.Model`3.NodeData.Key"/> to unique values
             before adding the node data to the model's collection of nodes.
             Or you can ensure this by overriding the
             <see cref="M:Northwoods.Go.Models.Model`3.MakeNodeDataKeyUnique(`0)"/> method
             or providing a <see cref="P:Northwoods.Go.Models.Model`3.MakeUniqueKeyFunction"/> function.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.NodeData.Group">
            <summary>
            Gets or sets the containing group key for this node data.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.NodeData.IsGroup">
            <summary>
            Gets or sets whether this node data represents a group.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.NodeData.IsSubGraphExpanded">
            <summary>
            Gets or sets whether this node data's subgraph is expanded.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.NodeData.WasSubGraphExpanded">
            <summary>
            Gets or sets whether this node data's subgraph was expanded.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Models.GraphLinksModel`6.LinkData">
             <summary>
             A simple representation of link data that supports property copying
             via the <c>ICloneable</c> interface.
             </summary>
             <example>
             public class BasicModel : GraphLinksModel&lt;BasicNodeData, string, object, BasicLinkData, string, string&gt; { }
             public class BasicNodeData : BasicModel.NodeData {
               public string Color { get; set; }
             }
            
             public class BasicLinkData : BasicModel.LinkData {
               public string Color { get; set; }
             }
             </example>
             <remarks>
             You should override the <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.LinkData.Clone"/> method
             if the fields contain data that should not be shared between copies.
            
             Normally, each <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkData.Key"/> should have a unique value within the model.
             You can maintain that yourself, by setting the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkData.Key"/> to unique values
             before adding the node data to the model's collection of nodes.
             Or you can ensure this by overriding the
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.MakeLinkDataKeyUnique(`3)"/> method
             or providing a <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.MakeUniqueLinkKeyFunction"/> function.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkData.Key">
            <summary>
            Gets or sets the key for this link data.
            </summary>
            <value>
            The type is the parameterized type <typeparamref name="TLinkKey"/>
            used for the model, <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkData.Category">
            <summary>
            Gets or sets the category for this link data.
            </summary>
            <remarks>
            The default value is the empty string.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkData.From">
            <summary>
            Gets or sets the from node key for this link data.
            </summary>
            <value>
            The type is the parameterized type <typeparamref name="TNodeKey"/>
            used for the model, <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkData.FromPort">
            <summary>
            Gets or sets the from port for this link data.
            </summary>
            <value>
            The type is the parameterized type <typeparamref name="TPort"/>
            used for the model, <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkData.To">
            <summary>
            Gets or sets the to node key for this link data.
            </summary>
            <value>
            The type is the parameterized type <typeparamref name="TNodeKey"/>
            used for the model, <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkData.ToPort">
            <summary>
            Gets or sets the to port for this link data.
            </summary>
            <value>
            The type is the parameterized type <typeparamref name="TPort"/>
            used for the model, <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkData.Text">
            <summary>
            Gets or sets the text for this link data.
            </summary>
            <remarks>
            The default value is null, which will use any text set on the template.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.LinkData.Clone">
            <summary>
            Create a copy of this data; this implements the <c>ICloneable</c> interface.
            </summary>
            <remarks>
            The default implementation just calls MemberwiseClone.
            Custom link data classes should override this method if they need to perform any special copying behavior such as deep copying.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Models.GraphLinksModel`6.IncrementalGLData">
            <summary>
            Stores incremental data output from <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.ToIncrementalData(Northwoods.Go.Models.ChangedEvent)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.IncrementalGLData.InsertedLinkKeys">
            <inheritdoc cref="P:Northwoods.Go.Models.IIncrementalData.InsertedLinkKeys"/>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.IncrementalGLData.ModifiedLinkData">
            <inheritdoc cref="P:Northwoods.Go.Models.IIncrementalData.ModifiedLinkData"/>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.IncrementalGLData.RemovedLinkKeys">
            <inheritdoc cref="P:Northwoods.Go.Models.IIncrementalData.RemovedLinkKeys"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.IncrementalGLData.#ctor">
            <summary>
            Constructs incremental data. You will not normally call this constructor.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Constructs an empty GraphLinksModel unless one provides arguments as the initial data collection values
            for the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> and <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> properties.
            </summary>
            <param name="nodedatasource">an optional collection containing objects to be represented by Nodes.</param>
            <param name="linkdatasource">an optional collection containing objects to be represented by Links.</param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.#ctor(Northwoods.Go.Models.GraphLinksModel{`0,`1,`2,`3,`4,`5})">
            <summary>
            Constructs a copy of a given GraphLinksModel, without copying the data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.Clear">
            @hidden @internal
            <summary>
            Clear out all references to any model data.
            </summary>
            <remarks>
            This also clears out the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.Models.Model`3.Clear"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ToString(System.Int32)">
            @hidden @internal
            <param name="details">Optional: If greater than zero, this includes descriptions of each node data and link data.</param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ToIncrementalData(Northwoods.Go.Models.ChangedEvent)">
            <inheritdoc cref="M:Northwoods.Go.Models.Model`3.ToIncrementalData(Northwoods.Go.Models.ChangedEvent)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.WriteIncrementalModelData(Northwoods.Go.Models.Transaction,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.FindDataInLinkData(System.Object)">
            @hidden @internal
            <summary>
            Search for a nested data item within the link data array.
            This is used when we can't map nested data to link data via diagram panel changes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ReadIncrementalData(Northwoods.Go.Models.GraphLinksModel{`0,`1,`2,`3,`4,`5}.IncrementalGLData)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)">
            <inheritdoc cref="M:Northwoods.Go.Models.Model`3.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ApplyIncrementalJson(System.String)">
            <inheritdoc cref="M:Northwoods.Go.Models.Model`3.ApplyIncrementalJson(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ChangeState(Northwoods.Go.Models.ChangedEvent,System.Boolean)">
            @hidden @internal
            <param name="e">This describes the change that needs to be done.</param>
            <param name="undo">If true, this method should restore the older state, otherwise the newer state.</param>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.ArchetypeNodeData">
            <summary>
            Gets or sets a data object that will be copied and added to the model as a new node data each time there
            is a link reference (either the "to" or the "from" of a link data) to a node key that does not yet exist in the model.
            </summary>
            <remarks>
            The default value is null -- node data is not automatically copied and added to the model
            when there is an unresolved reference in a link data.
            When adding or modifying a link data if there is a "from" or "to" key value
            for which <see cref="M:Northwoods.Go.Models.Model`3.FindNodeDataForKey(`1)"/> returns null,
            it will call <see cref="M:Northwoods.Go.Models.Model`3.CopyNodeData(`0)"/>
            on this property value and <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/> on the result.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.MaybeEnsureLinkReference(`1)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromKeyProperty">
             <summary>
             Gets or sets the name of the data property that returns
             the key of the node data that the link data is coming from.
             </summary>
             <remarks>
             The default value is the name "From", meaning that it expects the data to have a property named "From" to refer to the link's source node.
             The name must not be null.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromKeyForLinkData(`3)"/> will return the default <typeparamref name="TNodeKey"/> for all link data objects.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromKeyForLinkData(`3)"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromKeyForLinkData(`3,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromKeyForLinkData(`3)">
            <summary>
            From a link data retrieve a value uniquely identifying the node data
            from which this link is connected.
            </summary>
            <param name="linkdata">an object represented by a link.</param>
            <returns> This may return the default <typeparamref name="TNodeKey"/> if
            the link is not coming from any node.</returns>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromKeyProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromKeyForLinkData(`3,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromKeyForLinkData(`3,`1)">
            <summary>
            Change the node key that the given link data references as the
            source of the link.
            </summary>
            <param name="linkdata">an object represented by a link.</param>
            <param name="key">This may be the default <typeparamref name="TNodeKey"/> if
            the link should no longer come from any node.</param>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromKeyProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromKeyForLinkData(`3)"/>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToKeyProperty">
             <summary>
             Gets or sets the name of the data property that returns
             the key of the node data that the link data is going to.
             </summary>
             <remarks>
             The default value is the name "To", meaning that it expects the data to have a property named "To" to refer to the link's destination node.
             The name must not be null.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetToKeyForLinkData(`3)"/> will return the default <typeparamref name="TNodeKey"/> for all link data objects.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetToKeyForLinkData(`3)"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetToKeyForLinkData(`3)">
            <summary>
            From a link data retrieve a value uniquely identifying the node data
            to which this link is connected.
            </summary>
            <param name="linkdata">an object represented by a link.</param>
            <returns> This may return the default <typeparamref name="TNodeKey"/> if
            the link is not going to any node.</returns>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToKeyProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)">
            <summary>
            Change the node key that the given link data references as the
            destination of the link.
            </summary>
            <param name="linkdata">an object represented by a link.</param>
            <param name="key">This may be the default <typeparamref name="TNodeKey"/> if
            the link should no longer go to any node.</param>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToKeyProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetToKeyForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetNodeKeyForLinkData(`3,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetNodeKeyForLinkData(`3,`1,System.Boolean)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromPortIdProperty">
             <summary>
             Gets or sets the name of the data property that returns
             the optional parameter naming a "port" element on the node that the link data is connected from.
             </summary>
             <remarks>
             The default value is the empty string indicating that one cannot distinguish
             different logical connection points for any links.
             The name must not be null nor the value of <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromKeyProperty"/> or <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToKeyProperty"/>.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromPortIdForLinkData(`3)"/> will return the default <typeparamref name="TPort"/> for all link data objects.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromPortIdForLinkData(`3)"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromPortIdForLinkData(`3,`5)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromPortIdForLinkData(`3)">
            <summary>
            From a link data retrieve a value identifying the port object of the node
            from which this link is connected.
            </summary>
            <param name="linkdata">an object represented by a link.</param>
            <returns> This may return the default <typeparamref name="TPort"/> if
            there is no particular port parameter information.</returns>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromPortIdProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromPortIdForLinkData(`3,`5)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromPortIdForLinkData(`3,`5)">
            <summary>
            Change the information that the given link data uses to identify the
            particular "port" that the link is coming from.
            </summary>
            <param name="linkdata">an object represented by a link.</param>
            <param name="portid">This may be the default <typeparamref name="TPort"/> if
            the link should no longer be associated with any particular "port".</param>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromPortIdProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromPortIdForLinkData(`3)"/>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToPortIdProperty">
             <summary>
             Gets or sets the name of the data property that returns
             the optional parameter naming a "port" element on the node that the link data is connected to.
             </summary>
             <remarks>
             The default value is the empty string indicating that one cannot distinguish
             different logical connection points for any links.
             The name must not be null nor the value of <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromKeyProperty"/> or <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToKeyProperty"/>.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetToPortIdForLinkData(`3)"/> will return the default <typeparamref name="TPort"/> for all link data objects.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetToPortIdForLinkData(`3)"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToPortIdForLinkData(`3,`5)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetToPortIdForLinkData(`3)">
            <summary>
            From a link data retrieve a value identifying the port object of the node
            to which this link is connected.
            </summary>
            <param name="linkdata">an object represented by a link.</param>
            <returns> This may return the default <typeparamref name="TPort"/> if
            there is no particular port parameter information.</returns>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToPortIdProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToPortIdForLinkData(`3,`5)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetToPortIdForLinkData(`3,`5)">
            <summary>
            Change the information that the given link data uses to identify the
            particular "port" that the link is going to.
            </summary>
            <param name="linkdata">an object represented by a link.</param>
            <param name="portid">This may be the default <typeparamref name="TPort"/> if
            the link should no longer be associated with any particular "port".</param>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToPortIdProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetToPortIdForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetPortIdForLinkData(`3,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetPortIdForLinkData(`3,`5,System.Boolean)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkLabelKeysProperty">
             <summary>
             Gets or sets the name of the data property that returns
             a list of keys of node data that are labels on that link data.
             </summary>
             <remarks>
             The default value is the empty string: "", meaning that the model does not support links owning label nodes.
            
             The name must not be null.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetLabelKeysForLinkData(`3)"/> will return an empty list for all link data objects.
             You will need to set this property in order to support nodes as link labels.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetLabelKeysForLinkData(`3)"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetLabelKeysForLinkData(`3,System.Collections.Generic.ICollection{`1})"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetLabelKeysForLinkData(`3)">
            <summary>
            Gets a collection of node key values that identify node data acting as labels on the given link data.
            </summary>
            <remarks>
            This method only works if <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkLabelKeysProperty"/> has been set to something other than an empty string.
            </remarks>
            <param name="linkdata">an object represented by a link.</param>
            <returns>a collection of node keys; an empty list if the property was not present.</returns>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkLabelKeysProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetLabelKeysForLinkData(`3,System.Collections.Generic.ICollection{`1})"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLabelKeyForLinkData(`3,`1)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLabelKeyForLinkData(`3,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetLabelKeysForLinkData(`3,System.Collections.Generic.ICollection{`1})">
            <summary>
            Replaces an Array of node key values that identify node data acting as labels on the given link data.
            </summary>
            <remarks>
            This method only works if <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkLabelKeysProperty"/> has been set to something other than an empty string.
            </remarks>
            <param name="linkdata">an object represented by a link.</param>
            <param name="arr">a list of node keys</param>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkLabelKeysProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetLabelKeysForLinkData(`3)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLabelKeyForLinkData(`3,`1)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLabelKeyForLinkData(`3,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.AddLabelKeyForLinkData(`3,`1)">
            <summary>
            Adds a node key value that identifies a node data acting as a new label node on the given link data.
            </summary>
            <remarks>
            This method only works if <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkLabelKeysProperty"/> has been set to something other than an empty string.
            </remarks>
            <param name="linkdata">an object represented by a link.</param>
            <param name="key">the key of the new label node.</param>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLabelKeyForLinkData(`3,`1)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetLabelKeysForLinkData(`3,System.Collections.Generic.ICollection{`1})"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLabelKeyForLinkData(`3,`1)">
             <summary>
             Removes a node key value that identifies a node data acting as a former label node on the given link data.
             </summary>
             <remarks>
             Removing a reference to a node data from the collection of link label keys
             does not automatically remove any node data from the model.
            
             This method only works if <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkLabelKeysProperty"/> has been set to something other than an empty string.
             </remarks>
             <param name="linkdata">an object represented by a link.</param>
             <param name="key">key of the label node being removed from the link.</param>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLabelKeyForLinkData(`3,`1)"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetLabelKeysForLinkData(`3,System.Collections.Generic.ICollection{`1})"/>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource">
            <summary>
            Gets or sets the collection of link data objects that correspond to <see cref="T:Northwoods.Go.Link"/>s in the <see cref="T:Northwoods.Go.Diagram"/>.
            </summary>
            <remarks>
            The initial value is an empty list.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty">
             <summary>
             Gets or sets the name of the data property that returns a unique key for each link data object.
             </summary>
             <remarks>
             The default value is "Key".
             The name must not be null.
            
             When this property has a value of an empty string,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetKeyForLinkData(`3)"/> will return the default <typeparamref name="TLinkKey"/>, and <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.FindLinkDataForKey(`4)"/> will always return null.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetKeyForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetKeyForLinkData(`3)">
             <summary>
             Given a link data object return its unique key.
             </summary>
             <remarks>
             This returns the default <typeparamref name="TLinkKey"/> if there is no key value.
            
             It is possible to change the key for a link data object by calling <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetKeyForLinkData(`3,`4)"/>.
             </remarks>
             <param name="linkdata">an object represented by a link</param>
             <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetKeyForLinkData(`3,`4)"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.FindLinkDataForKey(`4)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetKeyForLinkData(`3,`4)">
             <summary>
             Change the unique key of a given link data that is already in this model.
             </summary>
             <remarks>
             The new key value must be unique -- i.e. not in use by another link data object.
             You can call <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.FindLinkDataForKey(`4)"/> to check if a proposed new key is already in use.
            
             If this is called when <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> is the empty string,
             this method has no effect.
             If this is called on a link data object that is not (yet) in this model,
             this unconditionally modifies the property to the new key value.
             </remarks>
             <param name="linkdata">an object represented by a link</param>
             <param name="key"></param>
             <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetKeyForLinkData(`3)"/>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.MakeUniqueLinkKeyFunction">
             <summary>
             Gets or sets a function that returns a unique key for a link data object.
             </summary>
             <remarks>
             This function is called by <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.MakeLinkDataKeyUnique(`3)"/>
             when a link data object is added to the model, either as part of a new
             <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> or by a call to <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>, to make sure the value of
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetKeyForLinkData(`3)"/> is unique within the model.
             However it will not be called when <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> is the empty string.
            
             The value may be null in order to cause <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.MakeLinkDataKeyUnique(`3)"/> behave in the standard manner.
             (The default value is null.)
             You may want to supply a function here in order to make sure all of the automatically generated keys
             are in a particular format.
             Setting this property after setting <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> has no real effect until there is a call
             to <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>.
            
             If a link data object is already in the model and you want to change its key value,
             call <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetKeyForLinkData(`3,`4)"/> with a new and unique key.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.FindLinkDataForKey(`4)">
            <summary>
            Given a key, find the link data object in this model
            that uses the given value as its unique key.
            </summary>
            <remarks>
            Unless <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> is set to a non-empty string, this model
            will not automatically assign unique key values for link data objects,
            and thus this method will always return null.
            </remarks>
            <param name="key">a key.</param>
            <returns>null if the key is not present in the model.</returns>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.ContainsLinkData(`3)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetKeyForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.MakeLinkDataKeyUnique(`3)">
             <summary>
             This method is called when a link data object is added to the model to make sure that
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetKeyForLinkData(`3)"/> returns a unique key value.
             </summary>
             <remarks>
             The key value should be unique within the set of data managed by this model:
             <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/>.
             If the key is already in use, this will assign an unused key to the
             <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> property on the data when possible.
            
             If you want to customize the way in which link data gets a unique key,
             you can set the <see cref="P:Northwoods.Go.Models.Model`3.MakeUniqueKeyFunction"/> functional property.
            
             If the link data object is already in the model and you want to change its key value,
             call <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetKeyForLinkData(`3,`4)"/> and give it a new unique key value.
             </remarks>
             <param name="linkdata">an object represented by a link</param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ContainsLinkData(`3)">
            <summary>
            Decide if a given link data object is in this model.
            </summary>
            <remarks>
            If you do not have a reference to the particular data object that is in the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/>,
            you may need to search for it by iterating through that collection, or (more likely),
            by finding the desired <see cref="T:Northwoods.Go.Link"/> in a <see cref="T:Northwoods.Go.Diagram"/> and getting that link's <see cref="P:Northwoods.Go.Panel.Data"/>.
            </remarks>
            <param name="linkdata">an object represented by a link.</param>
            <returns></returns>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)">
             <summary>
             When you want to add a link to the diagram, call this method with a new data object.
             </summary>
             <remarks>
             This will add that data to the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> and
             notify all listeners that a new link data object has been inserted into the collection.
            
             Presumably the link data object will already have its "from" and "to" node key references set,
             but it is also possible to set them after the link data is in the model
             by calling <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromKeyForLinkData(`3,`1)"/> and <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)"/>.
            
             This operation does nothing if the link data is already part of this model's <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/>.
             </remarks>
             <param name="linkdata">an object represented by a link.</param>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Add to this model all of the link data held in a collection of link data objects.
            </summary>
            <param name="coll">a collection of link data objects to add to the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/></param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.DoAddLinkData(`3,System.Boolean)">
            @hidden @internal
            <param name="linkdata"></param>
            <param name="addtoarray">whether to add to the .LinkDataSource</param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(`3)">
             <summary>
             When you want to remove a link from the diagram, call this method with an existing link data object.
             </summary>
             <remarks>
             This will remove that data object from the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> and
             notify all listeners that a link data object has been removed from the collection.
            
             If you do not have a reference to the particular data object that is in the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/>,
             you may need to search for it by iterating through that collection, or (more likely),
             by finding the desired <see cref="T:Northwoods.Go.Link"/> in a <see cref="T:Northwoods.Go.Diagram"/> and getting that link's <see cref="P:Northwoods.Go.Panel.Data"/>.
            
             Removing a link data from a model does not automatically remove
             any associated label node data from the model.
            
             This operation does nothing if the link data is not present in the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/>.
             </remarks>
             <param name="linkdata">an object represented by a link.</param>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Remove from this model all of the link data held in a collection of link data objects.
            </summary>
            <param name="coll">a collection of link data objects to remove from the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/></param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.DoRemoveLinkData(`3,System.Boolean)">
            @hidden @internal
            <param name="linkdata"></param>
            <param name="removefromarray">whether to remove from .LinkDataSource</param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.CreateLinkData">
            <summary>
            Create a new TLinkData object by calling its default constructor.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.MergeLinkData(System.Collections.Generic.IEnumerable{`3})">
             <summary>
             Take a collection of link data objects and update <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> without replacing
             the collection and without replacing any existing link data objects that are identified by key.
             </summary>
             <remarks>
             This depends on <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> being a non-empty string.
            
             For link data objects that have the same key value, this makes calls to <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.Set(System.Object,System.String,System.Object)"/>
             to update the existing link data object.
             For new keys, this calls the object's clone method to copy the data and then <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/> to add a new link to the model.
             For existing links that have keys that are not present in the given collection,
             this calls <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(`3)"/> to remove the existing link from the model.
            
             This method will error if a new key is added and the TLinkData type is not ICloneable.
            
             This method is typically used when GoDiagram is being used within an application that is maintaining state
             related to the diagram model. When state is updated, this method can be called to keep the GoDiagram model synchronized.
             Any updates to the data should use new references since this method will use reference equality to check
             if a link data object needs to be updated.
            
             This method does not conduct a transaction.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ResolveReferencesInLinkData(`3)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.UnresolveReferencesInLinkData(`3)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.CopyLinkDataFunction">
            <summary>
            Gets or sets a function that makes a copy of a link data object.
            </summary>
            <remarks>
            You may need to set this property in order to ensure that a copied <see cref="T:Northwoods.Go.Link"/> is bound
            to data that does not share certain data structures between the original link data and the copied link data.
            This property value may be null in order to cause <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.CopyLinkData(`3)"/> to make a shallow copy of an Object.
            The default value is null.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.CopyLinkData(`3)">
             <summary>
             Make a copy of a link data object.
             </summary>
             <remarks>
             This uses the value of <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.CopyLinkDataFunction"/> to actually perform the copy,
             unless it is null, in which case this method just makes a shallow copy of the object.
            
             This does not modify the model -- the returned data object is not added to this model.
             This assumes that the data's constructor can be called with no arguments.
             This also makes sure there is no reference to either the "from" or the "to" node of the original data.
             </remarks>
             <param name="linkdata">an object represented by a link.</param>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.NodeIsGroupProperty">
             <summary>
             Gets or sets the name of the boolean property on node data that indicates
             whether the data should be represented as a group of nodes and links or as a simple node.
             </summary>
             <remarks>
             The default value is the name "IsGroup", meaning that it expects the data to have a property named "IsGroup" on those node data objects that should be represented by Groups.
            
             The value must not be null.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.IsGroupForNodeData(`0)"/> will return false for all node data objects.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.IsGroupForNodeData(`0)">
            <summary>
            See if the given node data should be represented as a group or as a simple node.
            </summary>
            <remarks>
            This value must not change as long as the node data is part of the model.
            At the current time there is no `SetIsGroupForNodeData` method.
            </remarks>
            <param name="nodedata">an object represented by a node, group, or non-link.</param>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.NodeIsGroupProperty"/>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.NodeGroupKeyProperty">
             <summary>
             Gets or sets the name of the property on node data that specifies
             the key of the group data that "owns" that node data.
             </summary>
             <remarks>
             The default value is the name "Group", meaning that it expects the data to have a property named "Group" to refer to any containing group.
            
             The value must not be null.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetGroupKeyForNodeData(`0)"/> will return the default <typeparamref name="TNodeKey"/> for all node data objects.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetGroupKeyForNodeData(`0)"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)"/>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.CopiesGroupKeyOfNodeData">
            @hidden @internal
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.CopyNodeData(`0)"/> copies the property that is the reference to the containing group data.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetGroupKeyForNodeData(`0)">
            <summary>
            If there is a container group for the given node data, return the group's key.
            </summary>
            <param name="nodedata">an object represented by a node, group, or non-link.</param>
            <returns>This returns the default <typeparamref name="TNodeKey"/> if there is no containing group data.</returns>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.NodeGroupKeyProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)">
            <summary>
            Change the container group for the given node data, given a key for the new group.
            </summary>
            <param name="nodedata">an object represented by a node, group, or non-link.</param>
            <param name="key">This may be the default <typeparamref name="TNodeKey"/> if there should be no containing group data.</param>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.NodeGroupKeyProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetGroupKeyForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.CopyNodeData(`0)">
            <summary>
            This override also makes sure any copied node data does not have a reference to the containing group.
            </summary>
            <param name="nodedata">an object represented by a node, group, or non-link.</param>
            <seealso cref="M:Northwoods.Go.Models.Model`3.CopyNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.Set(System.Object,System.String,System.Object)">
             <summary>
             This override changes the value of some property of a node data, a link data, or an item data, given a string naming the property
             and the new value, in a manner that can be undone/redone and that automatically updates any bindings.
             </summary>
             <remarks>
             This override handles link data as well as node data.
            
             This gets the old value of the property; if the value is the same as the new value, no side-effects occur.
             </remarks>
             <param name="data">an object typically the value of a <see cref="P:Northwoods.Go.Panel.Data"/> and represented by a Node, Link, Group, simple Part,
             or item in a <see cref="P:Northwoods.Go.Panel.ItemList"/>; or this model's <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/>.</param>
             <param name="propname">a string that is not null or the empty string.</param>
             <param name="val">the new value for the property.</param>
             <seealso cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.AssignAllDataProperties(System.Object,System.Object)">
            @hidden
            <summary>
            This override safely calls <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.Set(System.Object,System.String,System.Object)"/> for each property other than a key property.
            </summary>
            <param name="data">a data object</param>
            <param name="props">an object holding various properties whose values are to be assigned to the data object</param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ReplaceAllKeyReferences(`1,`1)">
            @hidden @internal
            <summary>
            When a node data changes its key, we need to update all data references to that node data
            that are using the old key value by replacing them with the new key value.
            The goal is to maintain all of the original relationships in all of the data maintained by the model.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ReplaceKeyReferencesInNodeData(`0,`1,`1)">
            @hidden @internal
            <summary>
            When a node data changes its key, we need to update all data references to that node data
            that are using the old key value by replacing them with the new key value.
            </summary>
            <param name="d">a node data object</param>
            <param name="oldkey"></param>
            <param name="newkey"></param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ReplaceKeyReferencesInLinkData(`3,`1,`1)">
            @hidden @internal
            <summary>
            When a link data changes its key, we need to update all data references to that node data
            that are using the old key value by replacing them with the new key value.
            </summary>
            <param name="d">a link data object.</param>
            <param name="oldkey"></param>
            <param name="newkey"></param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.UnresolveAllReferencesToNodeData">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ResolveReferencesToNodeData(`0)">
            @hidden @internal
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.ResolveReferencesInNodeData(`0)">
            @hidden @internal
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.UnresolveReferencesInNodeData(`0)">
            @hidden @internal
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.GraphLinksModel`6.LinkCategoryProperty">
             <summary>
             Gets or sets the name of the data property that returns a string naming that data's category.
             </summary>
             <remarks>
             The default value is the name "Category", meaning that it expects the data to have a property named "Category" if it cares to name the category for the Link.
             This is used by the diagram to distinguish between different kinds of links.
             The name must not be null.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetCategoryForLinkData(`3)"/> will return an empty string for all link data objects.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetCategoryForLinkData(`3)"/>
             <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetCategoryForLinkData(`3,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.GetCategoryForLinkData(`3)">
            <summary>
            Find the category of a given link data, a string naming the link template
            that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the link data.
            </summary>
            <param name="linkdata">an object represented by a link.</param>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkCategoryProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetCategoryForLinkData(`3,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetCategoryForLinkData(`3,System.String)">
            <summary>
            Change the category of a given link data, a string naming the link template
            that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the link data.
            </summary>
            <remarks>
            Changing the link template for a link data will cause the existing <see cref="T:Northwoods.Go.Link"/>
            to be removed from the <see cref="T:Northwoods.Go.Diagram"/> and be replaced with a new <see cref="T:Northwoods.Go.Link"/>
            created by copying the new link template and applying any data-bindings.
            Note that the new template must be an instance of the same class as the original link.
            Thus one cannot change the category of a link from an instance of <see cref="T:Northwoods.Go.Link"/>
            to an instance of a subclass of Link, nor vice-versa.
            </remarks>
            <param name="linkdata">an object represented by a link.</param>
            <param name="cat">must not be null.</param>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkCategoryProperty"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetCategoryForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetKnownNodeDataProperties(`0,`0)">
            <summary>
            Set known node data properties by getting them from input in case they're now undefined.
            Called by applyIncrementalJson and merge...methods, inside a transaction.
            </summary>
            <param name="obj">the input node data object</param>
            <param name="ndata">the corresponding node data object in the model</param>
        </member>
        <member name="M:Northwoods.Go.Models.GraphLinksModel`6.SetKnownLinkDataProperties(`3,`3)">
            <summary>
            Set known link data properties by getting them from input in case they're now undefined.
            Called by applyIncrementalJson and merge...methods, inside a transaction.
            </summary>
            <param name="obj">the input link data object</param>
            <param name="ldata">the corresponding link data object in the model</param>
        </member>
        <member name="T:Northwoods.Go.Models.IModel">
            <summary>
            Interface describing a <see cref="T:Northwoods.Go.Models.Model`3"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.IModel.Name">
            <summary>
            Gets or sets the name of this model.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.Model`3.Name"/>
        </member>
        <member name="P:Northwoods.Go.Models.IModel.IsReadOnly">
            <summary>
            Gets or sets whether this model may be modified, such as adding nodes.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.Model`3.IsReadOnly"/>
        </member>
        <member name="P:Northwoods.Go.Models.IModel.SharedData">
            <summary>
            Gets an object that can hold programmer-defined property values for the model as a whole,
            rather than just for one node or one link.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.Model`3.SharedData"/>
        </member>
        <member name="P:Northwoods.Go.Models.IModel.UndoManager">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Models.UndoManager"/> for this Model.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.Model`3.UndoManager"/>
        </member>
        <member name="P:Northwoods.Go.Models.IModel.SkipsUndoManager">
            <summary>
            Gets or sets whether <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s are not recorded by the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.Model`3.SkipsUndoManager"/>
        </member>
        <member name="P:Northwoods.Go.Models.IModel.NodeDataSource">
            <summary>
            Gets or sets the collection of node data objects that correspond to <see cref="T:Northwoods.Go.Node"/>s,
            <see cref="T:Northwoods.Go.Group"/>s, or non-Link <see cref="T:Northwoods.Go.Part"/>s in the <see cref="T:Northwoods.Go.Diagram"/>.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/>
        </member>
        <member name="P:Northwoods.Go.Models.IModel.NodeKeyProperty">
            <summary>
            Gets or sets the name of the data property that returns a unique key for each node data object.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.Model`3.NodeKeyProperty"/>
        </member>
        <member name="P:Northwoods.Go.Models.IModel.DataFormat">
            <summary>
            Gets or sets the name of the format of the diagram data.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.Model`3.DataFormat"/>
        </member>
        <member name="P:Northwoods.Go.Models.IModel.AfterCopyFunction">
             This function (if not null) is called towards the end of <see cref="M:Northwoods.Go.Diagram.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Diagram,System.Boolean)"/>
             in order to support custom data copying operations that depend on references between the parts.
            
             The first argument to the function is a dictionary mapping original data objects to copied data objects.
             The second argument to the function is this Model, the destination model for the copied parts.
             The third argument to the function is the source Model, of the original data objects.
             <summary>
             Undocumented
             </summary>
        </member>
        <member name="E:Northwoods.Go.Models.IModel.Changed">
            <summary>
            Register or unregister an event handler that is called when there is a ChangedEvent.
            </summary>
            <seealso cref="E:Northwoods.Go.Models.Model`3.Changed"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.Clear">
            <summary>
            Clear out all references to any model data.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.Clear"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.GetKeyForNodeData(System.Object)">
            <summary>
            Given a node data object return its unique key.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.GetKeyForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.SetKeyForNodeData(System.Object,System.Object)">
            <summary>
            Change the unique key of a given node data that is already in this model.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.ContainsNodeData(System.Object)">
            <summary>
            Decide if a given node data object is in this model, using reference equality.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.ContainsNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.FindNodeDataForKey(System.Object)">
            <summary>
            Given a key, find the node data object in this model
            that uses the given value as its unique key.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.FindNodeDataForKey(`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.AddNodeData(System.Object)">
            <summary>
            When you want to add a node or group to the diagram,
            call this method with a new data object.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.RemoveNodeData(System.Object)">
            <summary>
            When you want to remove a node or group from the diagram,
            call this method with an existing data object.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.CopyNodeData(System.Object)">
            <summary>
            Make a copy of a node data object.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.CopyNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.Set(System.Object,System.String,System.Object)">
            <summary>
            Change the value of some property of a node data, a link data, an item data, or the <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/>,
            given a string naming the property and the new value,
            in a manner that can be undone/redone and that automatically updates any bindings.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.InsertListItem(System.Collections.IList,System.Int32,System.Object)">
            <summary>
            Add an item to a data list that may be data bound by a <see cref="T:Northwoods.Go.Panel"/> as its <see cref="P:Northwoods.Go.Panel.ItemList"/>,
            given a new data value and the index at which to insert the new value, in a manner that can be undone/redone and that automatically updates any bindings.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.RemoveListItem(System.Collections.IList,System.Int32)">
            <summary>
            Remove an item from a data list that may be data bound by a <see cref="T:Northwoods.Go.Panel"/> as its <see cref="P:Northwoods.Go.Panel.ItemList"/>,
            given the index at which to remove a data value, in a manner that can be undone/redone and that automatically updates any bindings.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.RemoveListItem(System.Collections.IList,System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.GetCategoryForNodeData(System.Object)">
            <summary>
            Find the category of a given node data, a string naming the node template
            or group template or part template
            that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the node data.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.GetCategoryForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.SetCategoryForNodeData(System.Object,System.String)">
            <summary>
            Change the category of a given node data, a string naming the node template
            or group template or part template
            that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the node data.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.SetCategoryForNodeData(`0,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.Commit(System.Action{Northwoods.Go.Models.IModel},System.String)">
            <summary>
            Starts a new transaction, calls the provided function, and commits the transaction.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.Commit(System.Action{Northwoods.Go.Models.Model{`0,`1,`2}},System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.StartTransaction(System.String)">
            <summary>
            Begin a transaction, where the changes are held by a <see cref="T:Northwoods.Go.Models.Transaction"/> object
            in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.StartTransaction(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.CommitTransaction(System.String)">
            <summary>
            Commit the changes of the current transaction.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.CommitTransaction(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.RollbackTransaction">
            <summary>
            Rollback the current transaction, undoing any recorded changes.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.RollbackTransaction"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.ToJson">
            <summary>
            Generate a string representation of the persistent data in this model, in JSON format,
            that can be read in later with a call to <see cref="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)"/>.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.ToJson"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)">
            <summary>
            Produce a JSON-format string representing the changes in the most recent <see cref="T:Northwoods.Go.Models.Transaction"/>.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IModel.ApplyIncrementalJson(System.String)">
            <summary>
            Modify this model by applying the changes given in an "incremental" model change in JSON format
            generated by <see cref="M:Northwoods.Go.Models.IModel.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)"/>.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.Model`3.ApplyIncrementalJson(System.String)"/>
        </member>
        <member name="T:Northwoods.Go.Models.IInternalModel">
            Holds methods that are required internally but shouldn't be on the public model API.
        </member>
        <member name="T:Northwoods.Go.Models.IInternalLinkDataModel">
            Holds methods that are required internally but shouldn't be on the public model API.
        </member>
        <member name="T:Northwoods.Go.Models.IGraphLinksModel">
            <summary>
            See <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Models.ITreeModel">
            <summary>
            See <see cref="T:Northwoods.Go.Models.TreeModel`3"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.ITreeModel.NodeParentKeyProperty">
            <summary>
            Gets or sets the name of the property on node data that specifies
            the key of the node data that acts as the "parent" for this "child" node data.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.TreeModel`3.NodeParentKeyProperty"/>
        </member>
        <member name="P:Northwoods.Go.Models.ITreeModel.CopiesParentKeyOfNodeData">
            <summary>
            (undocumented)
            Gets or sets whether <see cref="M:Northwoods.Go.Models.TreeModel`3.CopyNodeData(`0)"/> copies the property that is the reference to the tree-parent node data.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.ITreeModel.ParentLinkCategoryProperty">
            <summary>
            Gets or sets the name of the data property that returns a string describing that node data's parent link's category.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.TreeModel`3.ParentLinkCategoryProperty"/>
        </member>
        <member name="M:Northwoods.Go.Models.ITreeModel.GetParentKeyForNodeData(System.Object)">
            <summary>
            If there is a parent node for the given node data, return the parent's key.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.GetParentKeyForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ITreeModel.SetParentKeyForNodeData(System.Object,System.Object)">
            <summary>
            Change the parent node for the given node data, given a key for the new parent.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.SetParentKeyForNodeData(`0,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ITreeModel.GetParentLinkCategoryForNodeData(System.Object)">
            <summary>
            Find the category for the parent link of a given child node data, a string naming the link template
            that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the link.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.GetParentLinkCategoryForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ITreeModel.SetParentLinkCategoryForNodeData(System.Object,System.String)">
            <summary>
            Change the category for the parent link of a given child node data, a string naming the link template
            that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the link.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.SetParentLinkCategoryForNodeData(`0,System.String)"/>
        </member>
        <member name="T:Northwoods.Go.Models.ILinkModel">
            <summary>
            Interface for a model containing link data or parent link information in node data.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.ILinkModel.LinkCategoryProperty">
            <summary>
            Gets or sets the name of the data property that returns a string naming that data's category.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkCategoryProperty"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkModel.GetLinkCategoryForData(System.Object)">
            <summary>
            Find the category of a given link data or parent link of a given child node data,
            a string naming the link template that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the link data.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetCategoryForLinkData(`3)"/>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.GetParentLinkCategoryForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkModel.SetLinkCategoryForData(System.Object,System.String)">
            <summary>
            Change the category of a given link data or parent link of a given child node data,
            a string naming the link template that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the link data.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetCategoryForLinkData(`3,System.String)"/>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.SetParentLinkCategoryForNodeData(`0,System.String)"/>
        </member>
        <member name="T:Northwoods.Go.Models.ILinkDataModel">
            <summary>
            Interface for a model containing link data.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.ILinkDataModel.LinkKeyProperty">
            <summary>
            Gets or sets the name of the data property that returns a unique key for each link data object.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/>
        </member>
        <member name="P:Northwoods.Go.Models.ILinkDataModel.LinkDataSource">
            <summary>
            Gets or sets the collection of link data objects that correspond to <see cref="T:Northwoods.Go.Link"/>s in the <see cref="T:Northwoods.Go.Diagram"/>.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/>
        </member>
        <member name="P:Northwoods.Go.Models.ILinkDataModel.ArchetypeNodeData">
            <summary>
            Gets or sets a data object that will be copied and added to the model as a new node data each time there
            is a link reference (either the "to" or the "from" of a link data) to a node key that does not yet exist in the model.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.ArchetypeNodeData"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkDataModel.GetKeyForLinkData(System.Object)">
            <summary>
            Given a link data object return its unique key.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetKeyForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkDataModel.ContainsLinkData(System.Object)">
            <summary>
            Decide if a given link data object is in this model.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.ContainsLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkDataModel.FindLinkDataForKey(System.Object)">
            <summary>
            Given a key, find the link data object in this model
            that uses the given value as its unique key.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.FindLinkDataForKey(`4)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkDataModel.AddLinkData(System.Object)">
            <summary>
            When you want to add a link to the diagram, call this method with a new data object.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkDataModel.RemoveLinkData(System.Object)">
            <summary>
            When you want to remove a link from the diagram, call this method with an existing link data object.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkDataModel.CreateLinkData">
            Create a new LinkData object by calling its default constructor.
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkDataModel.CopyLinkData(System.Object)">
            <summary>
            Make a copy of a link data object.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.CopyLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkDataModel.GetNodeKeyForLinkData(System.Object,System.Boolean)">
            <summary>
            From a link data retrieve a value uniquely identifying the node data
            to/from which this link is connected.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromKeyForLinkData(`3)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetToKeyForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkDataModel.SetNodeKeyForLinkData(System.Object,System.Object,System.Boolean)">
            <summary>
            Change the node key that the given link data references as the
            source/destination of the link.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromKeyForLinkData(`3,`1)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)"/>
        </member>
        <member name="T:Northwoods.Go.Models.ILinkPortsModel">
            <summary>
            Interface for a model containing link data with port information.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkPortsModel.GetPortIdForLinkData(System.Object,System.Boolean)">
            <summary>
            From a link data retrieve a value identifying the port object of the node
            to/from which this link is connected.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetFromPortIdForLinkData(`3)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetToPortIdForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkPortsModel.SetPortIdForLinkData(System.Object,System.Object,System.Boolean)">
            <summary>
            Change the information that the given link data uses to identify the
            particular "port" that the link is coming from/going to.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetFromPortIdForLinkData(`3,`5)"/>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToPortIdForLinkData(`3,`5)"/>
        </member>
        <member name="T:Northwoods.Go.Models.ILinkLabelsModel">
            <summary>
            Interface for a model containing link data with label information.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkLabelsModel.GetLabelKeysForLinkData(System.Object)">
            <summary>
            Gets a collection of node key values that identify node data acting as labels on the given link data.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetLabelKeysForLinkData(`3)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkLabelsModel.AddLabelKeyForLinkData(System.Object,System.Object)">
            <summary>
            Adds a node key value that identifies a node data acting as a new label node on the given link data.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLabelKeyForLinkData(`3,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.ILinkLabelsModel.RemoveLabelKeyForLinkData(System.Object,System.Object)">
            <summary>
            Removes a node key value that identifies a node data acting as a former label node on the given link data.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.RemoveLabelKeyForLinkData(`3,`1)"/>
        </member>
        <member name="T:Northwoods.Go.Models.IGroupModel">
            <summary>
            Interface for a model containing node data with group information.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.IGroupModel.CopiesGroupKeyOfNodeData">
             Gets or sets whether <see cref="M:Northwoods.Go.Models.Model`3.CopyNodeData(`0)"/> copies the property that is the reference to the containing group data.
            
             The default value is false.
             <summary>
             Undocumented.
             </summary>
        </member>
        <member name="P:Northwoods.Go.Models.IGroupModel.NodeIsGroupProperty">
            <summary>
            Gets or sets the name of the boolean property on node data that indicates
            whether the data should be represented as a group of nodes and links or as a simple node.
            </summary>
            <seealso cref="P:Northwoods.Go.Models.GraphLinksModel`6.NodeIsGroupProperty"/>
        </member>
        <member name="M:Northwoods.Go.Models.IGroupModel.IsGroupForData(System.Object)">
            <summary>
            See if the given node data should be represented as a group or as a simple node.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.IsGroupForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IGroupModel.GetGroupKeyForData(System.Object)">
            <summary>
            If there is a container group for the given node data, return the group's key.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.GetGroupKeyForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.IGroupModel.SetGroupKeyForData(System.Object,System.Object)">
            <summary>
            Change the container group for the given node data, given a key for the new group.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)"/>
        </member>
        <member name="T:Northwoods.Go.Models.IIncrementalData">
            <summary>
            Interface for the output object of <see cref="M:Northwoods.Go.Models.Model`3.ToIncrementalData(Northwoods.Go.Models.ChangedEvent)"/>.
            </summary>
            <remarks>
            Any shared or cyclic references within the model data will be maintained on the data included on this output object.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.IIncrementalData.SharedData">
            <summary>
            Object containing the modified <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.IIncrementalData.InsertedNodeKeys">
            <summary>
            Collection of node keys added. Any key included will also be included in the ModifiedNodeData collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.IIncrementalData.ModifiedNodeData">
            <summary>
            Collection of node data objects modified.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.IIncrementalData.RemovedNodeKeys">
            <summary>
            Collection of node keys deleted.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.IIncrementalData.InsertedLinkKeys">
            <summary>
            Collection of link keys added. Any key included will also be included in the ModifiedLinkData collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.IIncrementalData.ModifiedLinkData">
            <summary>
            Collection of link data objects modified.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.IIncrementalData.RemovedLinkKeys">
            <summary>
            Collection of link keys deleted.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Models.Model`3">
             <summary>
             Models hold the essential data of a diagram, describing the basic entities and their properties and relationships
             without specifying the appearance and behavior of the Nodes and Links and Groups that represent them visually.
             Models tend to hold only relatively simple data, making them easy to persist by serialization as JSON formatted text.
             </summary>
             <remarks>
             Models hold simple data objects, not <see cref="T:Northwoods.Go.Part"/>s such as <see cref="T:Northwoods.Go.Node"/>s or <see cref="T:Northwoods.Go.Link"/>s.
             Node data is normally represented in a <see cref="T:Northwoods.Go.Diagram"/> by instances of <see cref="T:Northwoods.Go.Node"/>,
             but they could be represented by simple <see cref="T:Northwoods.Go.Part"/>s or by <see cref="T:Northwoods.Go.Group"/>s.
             A Diagram constructs Parts for its <see cref="P:Northwoods.Go.Diagram.Model"/>'s data by copying templates.
             Templates are <see cref="T:Northwoods.Go.Panel"/>s of <see cref="T:Northwoods.Go.GraphObject"/>s that get some property values from the model data,
             accessible via the <see cref="P:Northwoods.Go.Panel.Data"/> property, using data <see cref="T:Northwoods.Go.Models.Binding"/>.
             See <a href="../../intro/usingModels.Html">Using Models</a> and <a href="../../intro/dataBinding.Html">Data Binding</a> for an introduction.
            
             This Model class only supports holding an array of node data
             and interpreting properties on that data to be able to refer to them
             using unique key values.
             To support simple tree-structured graphs, use a <see cref="T:Northwoods.Go.Models.TreeModel`3"/>, which inherits from this class.
             To support links and grouping, use a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
            
             Each node data object is assumed to have a unique key value.
             The <see cref="P:Northwoods.Go.Models.Model`3.NodeKeyProperty"/> property names the property on the node data whose value
             is the unique key for that node data object.
             The default value for this property is "Key".
             You should not have a TwoWay data binding on the node key property,
             because that might cause the property value to be set to a duplicate key value.
            
             The key values type is specified by <typeparamref name="TNodeKey"/>.
             If there are duplicate key values,
             the model will automatically try to assign a new unique key value.
            
             For example, one can define a graph consisting of just two nodes:
             <code language="cs">
              model.NodeDataSource = new List&lt;MyNodeData&gt; {
                new MyNodeData { Key = "Alpha" },
                new MyNodeData { Key = "Beta" }
              };
             </code>
            
             This model cannot detect the modification of the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> array
             or the modification of any node data object.
             If you want to add or remove node data from the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/>,
             call the <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/> or <see cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/> methods.
            
             If you want to modify a node data object, it depends on whether the property you want to change
             is a structural property that the model needs to know about, or whether it is a property
             that is only used for data binding or other application-specific purposes.
            
             For the former case, call the appropriate method, such as
             <see cref="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)"/>, <see cref="M:Northwoods.Go.Models.Model`3.SetCategoryForNodeData(`0,System.String)"/>,
             <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetToKeyForLinkData(`3,`1)"/>,
             or <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetGroupKeyForNodeData(`0,`1)"/>.
             These methods have names that start with "Set", "Add", "Insert", or "Remove".
            
             For the latter case, when setting an application-specific property, typically for data binding,
             and to support undo/redo, call <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>.
            
             The <see cref="M:Northwoods.Go.Models.Model`3.CopyNodeData(`0)"/> method can be called to make a shallow copy of a node data object.
            
             Each model raises <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s that you can follow by registering a listener via <see cref="E:Northwoods.Go.Models.Model`3.Changed"/>.
             Read more at the Introduction page: <a href="../../intro/changedEvents.Html">Changed Events</a>.
            
             Each model comes with its own <see cref="T:Northwoods.Go.Models.UndoManager"/> that is initially not enabled.
             You will need to set <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> to true in order for the
             UndoManager to record model changes and for your users to perform undo and redo.
            
             You can temporarily turn off the recording of changes by setting <see cref="P:Northwoods.Go.Models.Model`3.SkipsUndoManager"/> to true.
             A number of places within the system do that routinely in order to avoid recording temporary changes,
             so be sure to remember the original value beforehand and restore it afterwards.
             Note that in a <see cref="T:Northwoods.Go.Models.ChangedEvent"/> listener you may want to ignore events that happen when <see cref="P:Northwoods.Go.Models.Model`3.SkipsUndoManager"/> is true.
            
             One normally saves a diagram by just saving its model.
             If you can use JSON-formatted text, this is easy to do -- just call <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/>
             to get the string representation of the model, and save that string.
             Load the diagram by replacing the <see cref="P:Northwoods.Go.Diagram.Model"/> with one created by calling
             the static function <see cref="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)"/>:
             <code language="cs">
               myDiagram.Model = Model.FromJson&lt;MyModel&gt;(loadedString);
             </code>
             Note that JSON and other textual data formats cannot faithfully store all functions.
             <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/> and <see cref="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)"/> do not try to save and load functional property values.
             You should arrange that all such functions, including event handlers, are established by your app.
             <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/> and <see cref="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)"/> also cannot handle circular references; any sharing of
             references will be lost too.
            
             Note that models also do not store the templates used by diagrams,
             nor any transient or temporary parts such as <see cref="T:Northwoods.Go.Adornment"/>s, nor any tools,
             nor any <see cref="T:Northwoods.Go.Models.UndoManager"/> state, nor any event listeners.
             These objects and all other properties of diagrams must be established by your app.
            
             You can add any number of properties to the <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/> object, which is serialized and deserialized
             into JSON just like any other model data for nodes or links.
             However <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/> is associated with the model as a whole and does not depend on the existence
             of any node data or link data.
            
             It is also easy to save the changes that were recorded in the most recent transaction.
             Call <see cref="M:Northwoods.Go.Models.Model`3.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)"/> to generate a JSON-format string that holds the current state of modified data
             plus the keys of inserted or removed data.
             That method requires as an argument a <see cref="T:Northwoods.Go.Models.ChangedEvent"/> that represents a transaction that completed or
             an undo or a redo that just finished.
            
             It is also possible to use such "incremental" JSON to modify an existing model.
             Call <see cref="M:Northwoods.Go.Models.Model`3.ApplyIncrementalJson(System.String)"/>, giving it a string generated by <see cref="M:Northwoods.Go.Models.Model`3.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)"/>,
             to modify this model by making all of the changes recorded in the JSON text.
             Note how this method is a regular instance method, whereas <see cref="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)"/> is a static function.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.Models.Model`3.NodeData">
             <summary>
             A simple representation of node data that supports property copying
             via the <c>ICloneable</c> interface.
             </summary>
             <example>
             public class BasicModel : Model&lt;BasicNodeData, string, object&gt; { }
             public class BasicNodeData : BasicModel.NodeData {
               public string Color { get; set; }
             }
             </example>
             <remarks>
             You should override the <see cref="M:Northwoods.Go.Models.Model`3.NodeData.Clone"/> method
             if the fields contain data that should not be shared between copies.
            
             Normally, each <see cref="P:Northwoods.Go.Models.Model`3.NodeData.Key"/> should have a unique value within the model.
             You can maintain that yourself, by setting the <see cref="P:Northwoods.Go.Models.Model`3.NodeData.Key"/> to unique values
             before adding the node data to the model's collection of nodes.
             Or you can ensure this by overriding the
             <see cref="M:Northwoods.Go.Models.Model`3.MakeNodeDataKeyUnique(`0)"/> method
             or providing a <see cref="P:Northwoods.Go.Models.Model`3.MakeUniqueKeyFunction"/> function.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.NodeData.Key">
            <summary>
            Gets or sets the key for this node data.
            </summary>
            <value>
            The type is the parameterized type <typeparamref name="TNodeKey"/>
            used for the model, <see cref="T:Northwoods.Go.Models.Model`3"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.NodeData.Category">
            <summary>
            Gets or sets the category for this node data.
            </summary>
            <remarks>
            The default value is the empty string.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.NodeData.Text">
            <summary>
            Gets or sets the text for this node data.
            </summary>
            <remarks>
            The default value is null, which will use any text set on the template.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.NodeData.Location">
            <summary>
            Gets or sets the location for this node data.
            </summary>
            <remarks>
            The default value is (NaN, NaN).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.NodeData.Clone">
            <summary>
            Create a copy of this data; this implements the <c>ICloneable</c> interface.
            </summary>
            <remarks>
            The default implementation just calls MemberwiseClone.
            Custom node data classes should override this method if they need to perform any special copying behavior such as deep copying.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Models.Model`3.IncrementalData">
            <summary>
            Stores incremental data output from <see cref="M:Northwoods.Go.Models.Model`3.ToIncrementalData(Northwoods.Go.Models.ChangedEvent)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.IncrementalData.SharedData">
            <inheritdoc cref="P:Northwoods.Go.Models.IIncrementalData.SharedData"/>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.IncrementalData.InsertedNodeKeys">
            <inheritdoc cref="P:Northwoods.Go.Models.IIncrementalData.InsertedNodeKeys"/>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.IncrementalData.ModifiedNodeData">
            <inheritdoc cref="P:Northwoods.Go.Models.IIncrementalData.ModifiedNodeData"/>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.IncrementalData.RemovedNodeKeys">
            <inheritdoc cref="P:Northwoods.Go.Models.IIncrementalData.RemovedNodeKeys"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.IncrementalData.#ctor">
            <summary>
            Constructs incremental data. You will not normally call this constructor.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.#ctor">
            <summary>
            Constructs an empty Model.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            You probably don't want to call this constructor, because this class
            does not support links (relationships between nodes) or groups (nodes and links and subgraphs as nodes):
            instead, create instances of a subclass such as <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>
            or <see cref="T:Northwoods.Go.Models.TreeModel`3"/>
            or a custom subclass of one of those.
            </summary>
            <param name="nodedatasource">a collection containing objects to be represented by <see cref="T:Northwoods.Go.Part"/>s.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.#ctor(Northwoods.Go.Models.Model{`0,`1,`2})">
            <summary>
            Constructs a copy of a given Model, without copying the data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.Clear">
             <summary>
             Clear out all references to any model data.
             </summary>
             <remarks>
             This also clears out the <see cref="T:Northwoods.Go.Models.UndoManager"/>, so this operation is not undoable.
             This method is called by <see cref="M:Northwoods.Go.Diagram.Clear"/>; it does not notify any <see cref="T:Northwoods.Go.Diagram"/>s or other listeners.
             This method does not unregister any Changed event listeners.
            
             Instead of calling this method, you may prefer to set <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> to an empty collection.
             If this model is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>,
             you would also want to set <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkDataSource"/> to a separate empty collection.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ToString(System.Int32)">
            @hidden @internal
            <param name="details">Optional: If greater than zero, this includes descriptions of each node data.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ToIncrementalData(Northwoods.Go.Models.ChangedEvent)">
             <summary>
             Produce an object representing the changes in the most recent <see cref="T:Northwoods.Go.Models.Transaction"/>.
             </summary>
             <remarks>
             The structure of the object follows the same format as the JSON output from <see cref="M:Northwoods.Go.Models.Model`3.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)"/>.
            
             Note that these incremental changes include the results of undo and redo operations.
            
             For <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>s,
             this method requires that <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> is not an empty string.
            
             Any node or link data objects contained in the "Modified..." properties will be deep copies of the data in the model.
             When using this method, we suggest all data classes implement a Clone method such that faithful copies
             are made in the expected manner.
            
             This method is most commonly used when GoDiagram must communicate with some external data source
             and maintain integrity between the two while avoiding serialization/deserialization.
            
             <code language="cs">
               myDiagram.ModelChanged += (object sender, ChangedEvent e) => {
                 if (e.IsTransactionFinished) {
                   var dataChanges = e.Model.ToIncrementalData(e);
                   ... update application state/save to database ...
                 }
               };
             </code>
             </remarks>
             <param name="e">a Transaction ChangedEvent for which <see cref="P:Northwoods.Go.Models.ChangedEvent.IsTransactionFinished"/> is true</param>
             <returns>returns either null if no changes occurred, or an object containing incremental model changes for the given Transaction</returns>
             <seealso cref="M:Northwoods.Go.Models.Model`3.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.WriteIncrementalModelData(Northwoods.Go.Models.Transaction,System.Boolean)">
            @hidden @internal
            <summary>
            For a given transaction, build an object with all data changes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ReadSharedModelData(Northwoods.Go.Models.Model{`0,`1,`2}.IncrementalData)">
            @hidden @internal
        </member>
        <member name="F:Northwoods.Go.Models.Model`3._NestedDataPartDataMap">
            @hidden @internal 
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.MapDataToPartData(Northwoods.Go.Models.Transaction)">
            @hidden @internal
            <summary>
            For a given transaction, use diagram changes to map nested data to top level data.
            We do this by finding the panel for a given change, looking at its data, and getting the associated part's data.
            </summary>
            @this {Model}
            <param name="txn"></param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.FindDataInNodeData(System.Object)">
            @hidden @internal
            <summary>
            Search for a nested data item within the node data collection.
            This is used when we can't map nested data to node data via diagram panel changes.
            </summary>
            @this {Model}
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.RecurseData``1(System.Object,System.Object,``0,System.Collections.Generic.HashSet{``0})">
            @hidden @internal
            <summary>
            Recurse into a data object in search of some nested data.
            </summary>
            <param name="data">the data we're looking for</param>
            <param name="parent">the object we're searching in</param>
            <param name="toplevel">the top-level data we started on</param>
            <param name="set">the Set of top level parts this nested data belongs to, which we modify if we find it</param>
            <returns>whether the data was found</returns>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ReadIncrementalData(Northwoods.Go.Models.Model{`0,`1,`2}.IncrementalData)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)">
             <summary>
             Produce a JSON-format string representing the changes in the most recent <see cref="T:Northwoods.Go.Models.Transaction"/>.
             </summary>
             <remarks>
             This writes out JSON for a model, but recording only changes in the given Transaction.
             Instead of the "NodeDataSource" property (and "LinkDataSource" property for <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>s),
             this will have "Inserted...", "Modified...", and "Removed..." properties.
            
             The "ModifiedNodeData" collection holds node data objects.
             The "InsertedNodeKeys" and "RemovedNodeKeys" collections hold keys of data,
             not whole objects, that have been added and/or deleted.
             The "SharedData" property holds the <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/> object, if it was modified.
            
             Note that it is entirely plausible for the same object be in or referenced by all three collections,
             because a single <see cref="T:Northwoods.Go.Models.Transaction"/> can include adding a node, modifying it, and removing it.
            
             The purpose of this method is to make it easier to send incremental changes to the server/database,
             instead of sending the whole model.
             Whereas it has always been easy to perform "batch" updates or "file saves":
             <code language="cs">
               myDiagram.ModelChanged += (object sender, ChangedEvent e) => {
                 if (e.IsTransactionFinished) {
                   var json = e.Model.ToJson();
                   // save the whole model upon each transaction completion or undo/redo
                   ... send to server/database ...
                 }
               };
             </code>
             You can now easily send "incremental" updates:
             <code language="cs">
               myDiagram.ModelChanged += (object sender, ChangedEvent e) => {
                 if (e.IsTransactionFinished) {
                   var json = e.Model.ToIncrementalJson(e);
                   // record each Transaction as a JSON-format string
                   ... send to server/database ...
                 }
               };
             </code>
             Note that these incremental changes include the results of undo and redo operations.
             Also, when you might call <see cref="M:Northwoods.Go.Models.Model`3.ApplyIncrementalJson(System.String)"/>, you will need to disable your Changed listener,
             so that it does not send spurious changes to your database during the process of applying incremental changes from the database.
            
             For <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>s,
             this method requires that <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/> is not an empty string.
             The incremental JSON for GraphLinksModels will include "ModifiedLinkData", "InsertedLinkKeys", and "RemovedLinkKeys" properties.
            
             The same restrictions on data property names and data property values apply to this method as they do to <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/>.
             </remarks>
             <param name="e">a Transaction ChangedEvent for which <see cref="P:Northwoods.Go.Models.ChangedEvent.IsTransactionFinished"/> is true</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ToJson">
             <summary>
             Generate a string representation of the persistent data in this model, in JSON format,
             that can be read in later with a call to <see cref="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)"/>.
             </summary>
             <remarks>
             Functions are not able to be written in JSON format, so any properties that have function values
             will not be saved in the JSON string.
            
             There must not be any circular references within the model data.
             Any sharing of object references will be lost in the written JSON.
            
             The <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/> and <see cref="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)"/> methods automatically process numbers that are NaN
             and objects that are of class <see cref="T:Northwoods.Go.Point"/>, <see cref="T:Northwoods.Go.Size"/>, <see cref="T:Northwoods.Go.Rect"/>, <see cref="T:Northwoods.Go.Margin"/>, <see cref="T:Northwoods.Go.Spot"/>,
             <see cref="T:Northwoods.Go.Brush"/> (but not for brush patterns), and for <see cref="T:Northwoods.Go.Geometry"/>.
             However, we recommend that you use Binding converters (static functions named "Parse" and "Stringify")
             to represent Points, Sizes, Rects, Margins, Spots, and Geometries as string values in your data, rather than as Objects.
             This makes the JSON text smaller and simpler and easier to read.
            
             Note that this is a method on the <see cref="T:Northwoods.Go.Models.Model`3"/> class.
             It cannot render unmodeled Parts such as the background grid or any Parts that you have added directly to a Diagram.
            
             Typical usage:
             <code language="cs">
               var modelAsText = myDiagram.Model.ToJson();
               // now save this text string by sending it to your database
             </code>
             </remarks>
             <returns>a string in JSON format containing all of the persistent properties of the model.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ApplyIncrementalJson(System.String)">
             <summary>
             Modify this model by applying the changes given in an "incremental" model change in JSON format
             generated by <see cref="M:Northwoods.Go.Models.Model`3.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)"/>.
             </summary>
             <remarks>
             The expected properties of the argument are described at <see cref="M:Northwoods.Go.Models.Model`3.ToIncrementalJson(Northwoods.Go.Models.ChangedEvent)"/>.
             Incremental changes must be applied in the same order that the changes occurred in the original model.
            
             All of the top-level properties in the JSON, such as <see cref="P:Northwoods.Go.Models.Model`3.NodeKeyProperty"/>, must be the same as for this model.
             Note that if the model is a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>,
             you will have to have set <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkKeyProperty"/>
             to the name of a property, the same both in the <see cref="P:Northwoods.Go.Diagram.Model"/> as well as in the data that you pass to this method.
            
             This conducts a transaction.
             </remarks>
             <param name="s">a string in JSON format containing modifications to be performed to the model</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.DeserializeIncrementalJson``1(System.String)">
            <summary>
            Deserialize some incremental JSON into IncrementalData that can be applied to the model.
            </summary>
            <typeparam name="T">the IncrementalData type to deserialize to</typeparam>
            <param name="s">a JSON-formatted string</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)">
             <summary>
             This static function parses a string in JSON format that was written by <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/>,
             and then constructs, initializes, and returns a model with that information.
             </summary>
             <remarks>
             Note that properties with values that are functions are not written out by <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/>,
             so reading in such a model will require constructing such a model, initializing its functional property values,
             and explicitly passing it in as the second argument.
            
             Typical usage:
             <code language="cs">
               var modelAsText = ...;  // fetch the model in textual format from a database
               myDiagram.Model = Model.FromJson&lt;MyModel&gt;(modelAsText);
             </code>
             </remarks>
             <typeparam name="T">the model type to deserialize into</typeparam>
             <param name="s">a string in JSON format containing all of the persistent properties of the model.</param>
             <returns>the created model loaded with data from the given string.</returns>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.Name">
            <summary>
            Gets or sets the name of this model.
            </summary>
            <remarks>
            The initial name is an empty string.
            The value must not be null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.DataFormat">
            <summary>
            Gets or sets the name of the format of the diagram data.
            </summary>
            <remarks>
            The default value is the empty string.
            The value must not be null.
            Use different values to prevent parts from one model to be copy/pasted or drag-and-dropped into another diagram/model.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.IsReadOnly">
             <summary>
             Gets or sets whether this model may be modified, such as adding nodes.
             </summary>
             <remarks>
             By default this value is false.
             Setting the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> to something that is not a true collection
             or is a read-only collection will cause this to be set to true.
            
             Model methods and property setters do not heed this property.
             It is up to code that uses a model to check this property when it might want to
             prevent changes to the model.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.SharedData">
             <summary>
             Gets an object that can hold programmer-defined property values for the model as a whole,
             rather than just for one node or one link.
             </summary>
             <remarks>
             By default this is the default <typeparamref name="TSharedData"/>.
            
             Most object classes cannot be serialized into JSON without special knowledge and processing at both ends.
             The <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/> and <see cref="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)"/> methods automatically do such processing for numbers that are NaN
             and for objects that are of class <see cref="T:Northwoods.Go.Point"/>, <see cref="T:Northwoods.Go.Size"/>, <see cref="T:Northwoods.Go.Rect"/>, <see cref="T:Northwoods.Go.Margin"/>, <see cref="T:Northwoods.Go.Spot"/>,
             <see cref="T:Northwoods.Go.Brush"/> (but not for brush patterns), and for <see cref="T:Northwoods.Go.Geometry"/>.
            
             At the current time one cannot have a <see cref="T:Northwoods.Go.Diagram"/> as a binding target.
             Calling <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/> will work to change a property value, but there are no target bindings in any Diagrams to be updated.
             Because the binding mechanism is unavailable for this object, we recommend that when you want to save a model
             that you explicitly set properties on this object just before calling <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/>.
             When loading a model, call <see cref="M:Northwoods.Go.Models.Model`3.FromJson``1(System.String)"/> and explicitly get the properties that you want to set on a Diagram.
             </remarks>
        </member>
        <member name="E:Northwoods.Go.Models.Model`3.Changed">
             <summary>
             Register or unregister an event handler that is called when there is a ChangedEvent.
             </summary>
             <remarks>
             This registration does not raise a <see cref="T:Northwoods.Go.Models.ChangedEvent"/>.
             In case a Diagram's Model may be replaced, you may prefer using <see cref="E:Northwoods.Go.Diagram.ModelChanged"/> instead.
            
             Event listeners are not written out by <see cref="M:Northwoods.Go.Models.Model`3.ToJson"/>.
            
             Do not add or remove Changed listeners during the execution of a Changed listener.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.CallChangedListeners(Northwoods.Go.Models.ChangedEvent)">
            @hidden @internal
            <summary>
            Notify any ChangedEvent listeners.
            </summary>
            <remarks>
            This is called by <see cref="M:Northwoods.Go.Models.Model`3.RaiseModelChangedEvent(Northwoods.Go.Models.ModelChangeType,Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/>.
            Each listener function registered to <see cref="E:Northwoods.Go.Models.Model`3.Changed"/> is called with the given event.
            Unless <see cref="P:Northwoods.Go.Models.Model`3.SkipsUndoManager"/> is true, this then calls <see cref="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)"/>
            so that the UndoManager gets the opportunity to record the change.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Call this method to notify that the model or its objects have changed.
            This constructs a <see cref="T:Northwoods.Go.Models.ChangedEvent"/> and calls all Changed listeners.
            </summary>
            <param name="change">specifies the general nature of the change; typically the value is <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>.</param>
            <param name="propertyname">names the property that was modified.</param>
            <param name="obj">the object that was modified, typically a <see cref="T:Northwoods.Go.GraphObject"/>, <see cref="T:Northwoods.Go.Diagram"/>, or a <see cref="T:Northwoods.Go.Models.Model`3"/>.</param>
            <param name="oldval">the previous or older value.</param>
            <param name="newval">the next or newer value.</param>
            <param name="oldparam">an optional value that helps describe the older value.</param>
            <param name="newparam">an optional value that helps describe the newer value.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.RaiseChanged(System.String,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <summary>
            Call this method to notify about a model property having changed value.
            This constructs a <see cref="T:Northwoods.Go.Models.ChangedEvent"/> and calls all Changed listeners.
            </summary>
            <param name="propertyname">the name of the property, or a function that takes an Object and returns the property value.</param>
            <param name="oldval">the previous or old value for the property.</param>
            <param name="newval">the next or new value for the property.</param>
            <param name="oldparam">an optional value additionally describing the old value.</param>
            <param name="newparam">an optional value additionally describing the new value.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.RaiseDataChanged(System.Object,System.String,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Call this method to notify about a data property having changed value.
             </summary>
             <remarks>
             This constructs a <see cref="T:Northwoods.Go.Models.ChangedEvent"/> and calls all Changed listeners.
            
             You should call this method only if the property value actually changed.
             This method is called by <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>.
             </remarks>
             <param name="data">the data object whose property changed value.</param>
             <param name="propertyname">the name of the property, or a function that takes an Object and returns the property value.</param>
             <param name="oldval">the previous or old value for the property.</param>
             <param name="newval">the next or new value for the property.</param>
             <param name="oldparam">an optional value additionally describing the old value.</param>
             <param name="newparam">an optional value additionally describing the new value.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.RaiseModelChangedEvent(Northwoods.Go.Models.ModelChangeType,Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            @hidden @internal
            <summary>
            This is an internal method for notifying about changes to the model structure.
            </summary>
            <param name="modelchange">the kind of model change;
              use <see cref="F:Northwoods.Go.Models.ModelChangeType.None"/> for regular property changes that do not affect the model.</param>
            <param name="change">specifies the general nature of the change;
            permissible values de <see cref="F:Northwoods.Go.Models.ChangeType.Property"/>, <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>,
            <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>, and <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.</param>
            <param name="propertyname">names the property that was modified.</param>
            <param name="obj">the object that was modified, typically a <see cref="T:Northwoods.Go.GraphObject"/>, <see cref="T:Northwoods.Go.Models.Model`3"/>, or a <see cref="T:Northwoods.Go.Layer"/>.</param>
            <param name="oldval">the previous or older value.</param>
            <param name="newval">the next or newer value.</param>
            <param name="oldparam">helps describe the older value.</param>
            <param name="newparam">helps describe the newer value.</param>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.UndoManager">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Models.UndoManager"/> for this Model.
             </summary>
             <remarks>
             The default UndoManager has its <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> property set to false.
             If you want users to undo and redo, you should set that property to true once you have initialized the Diagram or its Model.
            
             This property setter does not raise a <see cref="T:Northwoods.Go.Models.ChangedEvent"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.SkipsUndoManager">
             <summary>
             Gets or sets whether <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s are not recorded by the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
             </summary>
             <remarks>
             The initial and normal value is false.
             WARNING: while this property is true do not perform any changes that cause any previous transactions
             to become impossible to undo.
            
             When this property is true, changing the Model or any data object does not call <see cref="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)"/>.
             Even when this property is true,
             transactions (such as calls to <see cref="M:Northwoods.Go.Models.Model`3.StartTransaction(System.String)"/>) and undo/redo (such as calls to <see cref="M:Northwoods.Go.CommandHandler.Undo"/>)
             are still delegated to the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
            
             You should set this to true only temporarily, and you should remember its previous value before setting this to true.
             When finishing the period for which you want the UndoManager to be disabled,
             do not blindly set this property to false.
             You should set this back to the value it had before you set it to true.
             For more permanent disabling of the <see cref="T:Northwoods.Go.Models.UndoManager"/>, set <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> to false.
            
             This property is also set when setting <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/>.
             Setting this property does not raise a <see cref="T:Northwoods.Go.Models.ChangedEvent"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ChangeState(Northwoods.Go.Models.ChangedEvent,System.Boolean)">
             <summary>
             (undocumented)
             This is called during an undo or redo to modify the model or its objects.
            
             This does not raise a <see cref="T:Northwoods.Go.Models.ChangedEvent"/>.
             </summary>
             <param name="e">This describes the change that needs to be done.</param>
             <param name="undo">If true, this method should restore the older state, otherwise the newer state.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.StartTransaction(System.String)">
            <summary>
            Begin a transaction, where the changes are held by a <see cref="T:Northwoods.Go.Models.Transaction"/> object
            in the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>.
            </remarks>
            <param name="tname">a descriptive name for the transaction.</param>
            <returns>the value returned by <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>.</returns>
            <seealso cref="M:Northwoods.Go.Models.Model`3.Commit(System.Action{Northwoods.Go.Models.Model{`0,`1,`2}},System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.CommitTransaction(System.String)">
            <summary>
            Commit the changes of the current transaction.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>.
            </remarks>
            <param name="tname">a descriptive name for the transaction.</param>
            <returns>the value returned by <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.RollbackTransaction">
            <summary>
            Rollback the current transaction, undoing any recorded changes.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>.
            </remarks>
            <returns>the value returned by <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.Commit(System.Action{Northwoods.Go.Models.Model{`0,`1,`2}},System.String)">
            <summary>
            Starts a new transaction, calls the provided function, and commits the transaction.
            </summary>
            <remarks>
            Code is called within a try-finally loop.
            If the function does not return normally, this rolls back the transaction rather than committing it.
            Example usage:
            <code language="cs">
              myModel.Commit(m => m.AddNodeData(new MyNodeData { Key = "Zeta" } ), "Added Node");
            </code>
            </remarks>
            <param name="func">the function to call as the transaction body</param>
            <param name="tname">a descriptive name for the transaction, or null to temporarily set <see cref="P:Northwoods.Go.Models.Model`3.SkipsUndoManager"/> to true;
            if no string transaction name is given, an empty string is used as the transaction name</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.UpdateTargetBindings(System.Object,System.String)">
            <summary>
            Find a <see cref="T:Northwoods.Go.Part"/> corresponding to the given data and
            call its <see cref="M:Northwoods.Go.Panel.UpdateTargetBindings(System.String)"/> method, in each <see cref="T:Northwoods.Go.Diagram"/>
            that uses this Model.
            </summary>
            <remarks>
            Caution: setting a data property without calling <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>
            and then calling this UpdateTargetBindings method will update GraphObjects that are bound to the property,
            but such data settings will not be recorded in the UndoManager and therefore will not be undone/redone,
            causing an inconsistency between the GraphObjects and the part data.
            </remarks>
            <param name="data">The data object in this model that was modified.</param>
            <param name="srcpropname">If not present or the empty string,
              update all bindings on the target <see cref="T:Northwoods.Go.Part"/> or item <see cref="T:Northwoods.Go.Panel"/>
              otherwise update only those bindings using this source property name.</param>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.NodeKeyProperty">
             <summary>
             Gets or sets the name of the data property that returns a unique key for each node data object.
             </summary>
             <remarks>
             The default value is the name "Key", meaning that it expects the data to have a property named "Key" if it has a key value.
             The name must not be null or the empty string.
             You must set this property before assigning the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/>.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.Model`3.GetKeyForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.GetKeyForNodeData(`0)">
             <summary>
             Given a node data object return its unique key: a number or a string.
             </summary>
             <remarks>
             This returns the default <typeparamref name="TNodeKey"/> if there is no key value.
            
             It is possible to change the key for a node data object by calling <see cref="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)"/>.
             </remarks>
             <param name="nodedata">an object represented by a node, group, or non-link.</param>
             <seealso cref="P:Northwoods.Go.Models.Model`3.NodeKeyProperty"/>
             <seealso cref="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)"/>
             <seealso cref="M:Northwoods.Go.Models.Model`3.FindNodeDataForKey(`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)">
             <summary>
             Change the unique key of a given node data that is already in this model.
             </summary>
             <remarks>
             The new key value must be unique -- i.e. not in use by another node data object.
             You can call <see cref="M:Northwoods.Go.Models.Model`3.FindNodeDataForKey(`1)"/> to check if a proposed new key is already in use.
            
             This operation will check all data objects in the model and replace all references
             using the old key value with the new one.
            
             If this is called on a node data object that is not (yet) in this model,
             this unconditionally modifies the property to the new key value.
             </remarks>
             <param name="nodedata">an object represented by a node, group, or non-link.</param>
             <param name="key"></param>
             <seealso cref="P:Northwoods.Go.Models.Model`3.NodeKeyProperty"/>
             <seealso cref="M:Northwoods.Go.Models.Model`3.GetKeyForNodeData(`0)"/>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.MakeUniqueKeyFunction">
             <summary>
             Gets or sets a function that returns a unique key for a node data object.
             </summary>
             <remarks>
             This function is called by <see cref="M:Northwoods.Go.Models.Model`3.MakeNodeDataKeyUnique(`0)"/>
             when a node data object is added to the model, either as part of a new
             <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> or by a call to <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>, to make sure the value of
             <see cref="M:Northwoods.Go.Models.Model`3.GetKeyForNodeData(`0)"/> is unique within the model.
            
             The value may be null in order to cause <see cref="M:Northwoods.Go.Models.Model`3.MakeNodeDataKeyUnique(`0)"/> behave in the standard manner.
             (The default value is null.)
             You may want to supply a function here in order to make sure all of the automatically generated keys
             are in a particular format.
             Setting this property after setting <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> has no real effect until there is a call
             to <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>.
            
             If a node data object is already in the model and you want to change its key value,
             call <see cref="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)"/> with a new and unique key.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ContainsNodeData(`0)">
            <summary>
            Decide if a given node data object is in this model, using reference equality.
            </summary>
            <remarks>
            If you do not have a reference to the particular data object that is in the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/>,
            you may need to search for it by iterating through that collection,
            or by finding the desired <see cref="T:Northwoods.Go.Node"/> or simple <see cref="T:Northwoods.Go.Part"/> in a <see cref="T:Northwoods.Go.Diagram"/> and getting that node's <see cref="P:Northwoods.Go.Panel.Data"/>,
            or most likely by calling <see cref="M:Northwoods.Go.Models.Model`3.FindNodeDataForKey(`1)"/>.
            </remarks>
            <param name="nodedata">an object represented by a node, group, or non-link.</param>
            <returns>true if it is a node data object in this model; false otherwise.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.FindNodeDataForKey(`1)">
            <summary>
            Given a key, find the node data object in this model
            that uses the given value as its unique key.
            </summary>
            <param name="key">a key.</param>
            <returns>null if the key is not present in the model.</returns>
            <seealso cref="M:Northwoods.Go.Models.Model`3.ContainsNodeData(`0)"/>
            <seealso cref="M:Northwoods.Go.Models.Model`3.GetKeyForNodeData(`0)"/>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.NodeDataSource">
             <summary>
             Gets or sets the collection of node data objects that correspond to <see cref="T:Northwoods.Go.Node"/>s,
             <see cref="T:Northwoods.Go.Group"/>s, or non-Link <see cref="T:Northwoods.Go.Part"/>s in the <see cref="T:Northwoods.Go.Diagram"/>.
             </summary>
             <remarks>
             The initial value is an empty list.
            
             For each object in the collection, <see cref="M:Northwoods.Go.Models.Model`3.GetKeyForNodeData(`0)"/> should return a key
             uniquely identifying the node data within the model.
             If it returns null or is a duplicate, this calls <see cref="M:Northwoods.Go.Models.Model`3.MakeNodeDataKeyUnique(`0)"/>,
             to make sure the node data has a unique key.
             These key values may be used by other objects to refer to that particular node data object.
             If more than one node data object has the same key,
             there may be some confusion about which object to reference.
            
             If you want to use a custom data property for holding the unique key value on a node data object,
             you should set <see cref="P:Northwoods.Go.Models.Model`3.NodeKeyProperty"/> before you set this `NodeDataSource` property.
            
             Adding or removing data from this collection will not notify this model or the diagram
             that there are any new nodes or that any nodes have been deleted.
             Instead you should call <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/> or <see cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.MakeNodeDataKeyUnique(`0)">
             <summary>
             This method is called when a node data object is added to the model to make sure that
             <see cref="M:Northwoods.Go.Models.Model`3.GetKeyForNodeData(`0)"/> returns a unique key value.
             </summary>
             <remarks>
             The key value should be unique within the set of data managed by this model:
             <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/>.
             If the key is already in use, this will assign an unused key to the
             <see cref="P:Northwoods.Go.Models.Model`3.NodeKeyProperty"/> property on the data when possible.
            
             If you want to customize the way in which node data gets a unique key,
             you can set the <see cref="P:Northwoods.Go.Models.Model`3.MakeUniqueKeyFunction"/> functional property.
            
             If the node data object is already in the model and you want to change its key value,
             call <see cref="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)"/> and give it a new unique key value.
             </remarks>
             <param name="nodedata">an object represented by a node, group, or non-link.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)">
             <summary>
             When you want to add a node or group to the diagram,
             call this method with a new data object.
             </summary>
             <remarks>
             This will add that data to the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> and
             notify all listeners that a new node data object has been inserted into the collection.
            
             To remove a node from the diagram, you can remove its data object by calling <see cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/>.
            
             To add or remove an object or value from an item list, call <see cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/> or <see cref="M:Northwoods.Go.Models.Model`3.RemoveListItem(System.Collections.IList,System.Int32)"/>.
             </remarks>
             <param name="nodedata">an object represented by a node, group, or non-link.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.AddNodeData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add to this model all of the node data held in a collection of node data objects.
            </summary>
            <param name="coll">a collection of node data objects to add to the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/></param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.DoAddNodeData(`0,System.Boolean)">
            @hidden @internal
            <param name="nodedata"></param>
            <param name="addtoarray">whether to add to .NodeDataSource</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)">
             <summary>
             When you want to remove a node or group from the diagram,
             call this method with an existing data object.
             </summary>
             <remarks>
             This will remove that data from the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> and
             notify all listeners that a node data object has been removed from the collection.
            
             If you do not have a reference to the particular data object that is in the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/>,
             you may need to search for it by iterating through that collection,
             or by finding the desired <see cref="T:Northwoods.Go.Node"/> or simple <see cref="T:Northwoods.Go.Part"/> in a <see cref="T:Northwoods.Go.Diagram"/> and getting that node's <see cref="P:Northwoods.Go.Panel.Data"/>,
             or most likely by calling <see cref="M:Northwoods.Go.Models.Model`3.FindNodeDataForKey(`1)"/>.
            
             Removing a node data from a model does not automatically remove
             any connected link data from the model.
             Removing a node data that represents a group does not automatically remove
             any member node data or link data from the model.
            
             To add a node to the diagram, you can add its data object by calling <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>.
            
             To add or remove an object or value from an item list, call <see cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/> or <see cref="M:Northwoods.Go.Models.Model`3.RemoveListItem(System.Collections.IList,System.Int32)"/>.
             </remarks>
             <param name="nodedata">an object represented by a node, group, or non-link.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.RemoveNodeData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove from this model all of the node data held in a collection of node data objects.
            </summary>
            <param name="coll">a collection of node data objects to remove from the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/></param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.DoRemoveNodeData(`0,System.Boolean)">
            @hidden @internal
            <param name="nodedata"></param>
            <param name="removefromarray">whether to remove from .NodeDataSource</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.MergeNodeData(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Take a collection of node data objects and update <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> without replacing
             the collection and without replacing any existing node data objects that are identified by key.
             </summary>
             <remarks>
             For node data objects that have the same key value, this makes calls to <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>
             to update the existing node data object.
             For new keys, this calls the object's Clone method to copy the data and then <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/> to add a new node to the model.
             For existing nodes that have keys that are not present in the given collection,
             this calls <see cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/> to remove the existing node from the model.
            
             This method will error if a new key is added and the TNodeData type is not ICloneable.
            
             This method is typically used when GoDiagram is being used within an application that is maintaining state
             related to the diagram model. When state is updated, this method can be called to keep the GoDiagram model synchronized.
             Any updates to the data should use new references since this method will use reference equality to check
             if a node data object needs to be updated.
            
             This method does not conduct a transaction.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ReplaceAllKeyReferences(`1,`1)">
            @hidden @internal
            <summary>
            When a node data changes its key, we need to update all data references to that node data
            that are using the old key value by replacing them with the new key value.
            The goal is to maintain all of the original relationships in all of the data maintained by the model.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.UnresolveAllReferencesToNodeData">
            @hidden @internal
            <summary>
            This is overridden by GraphLinksModel, since that is the only kind of model that
            has data objects other than node data to have key references to node data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ResolveReferencesToNodeData(`0)">
            @hidden @internal
            <summary>
            Find any delayed references to the given node data by its key,
            notify listeners that that reference now exists,
            and finally forget that there were any delayed references to this data/key.
            This is overridden by subclasses.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ResolveReferencesInNodeData(`0)">
            @hidden @internal
            <summary>
            For each reference in the given node data to node data that does not (yet?) exist in this model,
            delay that reference by remembering it, by calling <see cref="M:Northwoods.Go.Models.Model`3.DelayReference(`1,System.Object)"/>.
            This is overridden by subclasses.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.UnresolveReferencesInNodeData(`0)">
            @hidden @internal
            <summary>
            Forget any delayed references to node data that this node data has within it,
            by calling <see cref="M:Northwoods.Go.Models.Model`3.ForgetDelayedReference(`1,System.Object)"/> on them.
            This is overridden by subclasses.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.DelayReference(`1,System.Object)">
            @hidden @internal
            <summary>
            Remember that a given object has a node reference using a given key,
            but that the node data is not presently in the model.
            </summary>
            <param name="key"></param>
            <param name="data">Either node data or link data.</param>
            <seealso cref="M:Northwoods.Go.Models.Model`3.ForgetDelayedReference(`1,System.Object)"/>
            <seealso cref="M:Northwoods.Go.Models.Model`3.FindDelayedReferences(`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ForgetDelayedReference(`1,System.Object)">
            @hidden @internal
            <summary>
            Forget a data object that may have had a reference to a node using the given key.
            This is called when the data is being removed from the model,
            and we want to make sure there is no memory of that data object.
            </summary>
            <param name="key"></param>
            <param name="data">Either node data or link data.</param>
            <seealso cref="M:Northwoods.Go.Models.Model`3.DelayReference(`1,System.Object)"/>
            <seealso cref="M:Northwoods.Go.Models.Model`3.FindDelayedReferences(`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.FindDelayedReferences(`1)">
            @hidden @internal
            <returns>a set of data objects that each have one or more references to the given key.</returns>
            <seealso cref="M:Northwoods.Go.Models.Model`3.DelayReference(`1,System.Object)"/>
            <seealso cref="M:Northwoods.Go.Models.Model`3.ForgetDelayedReference(`1,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.ClearUnresolvedReferences(`1)">
            @hidden @internal
            <seealso cref="M:Northwoods.Go.Models.Model`3.DelayReference(`1,System.Object)"/>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.CopyNodeDataFunction">
             <summary>
             Gets or sets a function that makes a copy of a node data object.
             </summary>
             <remarks>
             You may need to set this property in order to ensure that a copied <see cref="T:Northwoods.Go.Node"/> is bound
             to data that does not share certain data structures between the original node data and the copied node data.
             This property value may be null in order to cause <see cref="M:Northwoods.Go.Models.Model`3.CopyNodeData(`0)"/> to make a copy of an object.
             The default value is null.
            
             The first argument to the function will be a node data object (potentially a <see cref="T:Northwoods.Go.Part"/>'s <see cref="P:Northwoods.Go.Panel.Data"/>).
             The second argument to the function will be this Model itself.
            
             It is common to implement a copying function when the node data has a list of data
             and that list needs to be copied rather than shared.
             Often the objects that are in the list also need to be copied.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.CopyNodeData(`0)">
             <summary>
             Make a copy of a node data object.
             </summary>
             <remarks>
             This uses the value of <see cref="P:Northwoods.Go.Models.Model`3.CopyNodeDataFunction"/> to actually perform the copy, unless that property is null.
             When it is null the default behavior is to just make a copy of the object via Clone()
             or via JSON serialization.
            
             This does not modify the model -- the returned data object is not added to this model.
             This assumes that the data's constructor can be called with no arguments.
            
             Models should not have any references to Diagrams or GraphObjects or Tools or Layouts or other objects
             that form a <see cref="T:Northwoods.Go.Diagram"/>.
            
             Warning: there should not be any cyclical references within the model data, unless you have
             supplied your own <see cref="P:Northwoods.Go.Models.Model`3.CopyNodeDataFunction"/> that can handle cyclical references.
             </remarks>
             <param name="nodedata">an object represented by a node, group, or non-link.</param>
             <seealso cref="M:Northwoods.Go.Models.Model`3.AddNodeData(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.InternalCopyData``1(``0,System.Boolean)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.AfterCopyFunction">
            <summary>
            (undocumented)
            This function (if not null) is called towards the end of <see cref="M:Northwoods.Go.Diagram.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Diagram,System.Boolean)"/>
            in order to support custom data copying operations that depend on references between the parts.
            </summary>
            <remarks>
            The first argument to the function is a dictionary mapping original data objects to copied data objects.
            The second argument to the function is this Model, the destination model for the copied parts.
            The third argument to the function is the source Model, of the original data objects.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.CheckDataReference(System.Object,System.String,System.Object)">
            @hidden @internal
            <summary>
            Check that there aren't any references to Diagrams in model data.
            </summary>
            <returns>true if val is a Diagram or a part of a Diagram</returns>
        </member>
        <member name="F:Northwoods.Go.Models.Model`3._WarnedAboutModifyingGraphObject">
            @hidden @internal 
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)">
             <summary>
             Change the value of some property of a node data, a link data, an item data, or the <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/>,
             given a string naming the property and the new value,
             in a manner that can be undone/redone and that automatically updates any bindings.
             </summary>
             <remarks>
             This gets the old value of the property; if the value is the same as the new value, no side-effects occur.
             This calls <see cref="M:Northwoods.Go.Models.Model`3.RaiseDataChanged(System.Object,System.String,System.Object,System.Object,System.Object,System.Object)"/> to notify about the change.
            
             Note that it is insufficient to modify an item list (for example by pushing a new item onto the list) and
             then call `Set(data, "Items", data.Items)` because the value of
             `data.Items` is still the same reference.
             Instead you will want to call <see cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/>, <see cref="M:Northwoods.Go.Models.Model`3.AddListItem(System.Collections.IList,System.Object)"/>, or <see cref="M:Northwoods.Go.Models.Model`3.RemoveListItem(System.Collections.IList,System.Int32)"/>.
            
             If you modify the property that is the <see cref="P:Northwoods.Go.Models.Model`3.NodeKeyProperty"/>, this will call <see cref="M:Northwoods.Go.Models.Model`3.SetKeyForNodeData(`0,`1)"/>.
            
             If you modify the property that is the <see cref="P:Northwoods.Go.Models.Model`3.NodeCategoryProperty"/>
             or the <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkCategoryProperty"/>,
             this will call <see cref="M:Northwoods.Go.Models.Model`3.SetCategoryForNodeData(`0,System.String)"/>
             or <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.SetCategoryForLinkData(`3,System.String)"/>.
             But if the category might change, <see cref="T:Northwoods.Go.Models.Binding"/> sources should not be (or depend in a conversion function on) the category of the data,
             because then some bindings might be evaluated before or after the category has been changed.
             </remarks>
             <param name="data">an object typically the value of a <see cref="P:Northwoods.Go.Panel.Data"/> and represented by a Node, Link, Group, simple Part,
             or item in a <see cref="P:Northwoods.Go.Panel.ItemList"/>; or this model's <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/>.</param>
             <param name="propname">a string that is not null or the empty string.</param>
             <param name="val">the new value for the property.</param>
             <seealso cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.AssignAllDataProperties(System.Object,System.Object)">
            <summary>
            This safely calls <see cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/> for each property other than a key property.
            </summary>
            <remarks>
            This does not delete any properties on the data object,
            although properties may be set to default if they are set that way on the props object.
            </remarks>
            <param name="data">a data object</param>
            <param name="props">an object holding various properties whose values are to be assigned to the data object</param>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.AddListItem(System.Collections.IList,System.Object)">
             <summary>
             Add an item at the end of a data list that may be data bound by a <see cref="T:Northwoods.Go.Panel"/> as its <see cref="P:Northwoods.Go.Panel.ItemList"/>,
             in a manner that can be undone/redone and that automatically updates any bindings.
             </summary>
             <remarks>
             This also calls <see cref="M:Northwoods.Go.Models.Model`3.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/> to notify all listeners about the <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>.
            
             If you want to add a new node or part to the diagram, call <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>.
             </remarks>
             <param name="coll">a list that is the value of some <see cref="T:Northwoods.Go.Panel"/>'s <see cref="P:Northwoods.Go.Panel.ItemList"/>.</param>
             <param name="val">the new value to be pushed onto the array.</param>
             <seealso cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)">
             <summary>
             Add an item to a data list that may be data bound by a <see cref="T:Northwoods.Go.Panel"/> as its <see cref="P:Northwoods.Go.Panel.ItemList"/>,
             given a new data value and the index at which to insert the new value, in a manner that can be undone/redone and that automatically updates any bindings.
             </summary>
             <remarks>
             This also calls <see cref="M:Northwoods.Go.Models.Model`3.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/> to notify all listeners about the <see cref="F:Northwoods.Go.Models.ChangeType.Insert"/>.
            
             If you want to add a new node or part to the diagram, call <see cref="M:Northwoods.Go.Models.Model`3.AddNodeData(`0)"/>.
             </remarks>
             <param name="list">a list that is the value of some <see cref="T:Northwoods.Go.Panel"/>'s <see cref="P:Northwoods.Go.Panel.ItemList"/>.</param>
             <param name="idx">the zero-based list index where the new value will be inserted; use -1 to push the new value on the end of the list.</param>
             <param name="val">the new value to be inserted into the list.</param>
             <seealso cref="M:Northwoods.Go.Models.Model`3.RemoveListItem(System.Collections.IList,System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.RemoveListItem(System.Collections.IList,System.Int32)">
             <summary>
             Remove an item from a data list that may be data bound by a <see cref="T:Northwoods.Go.Panel"/> as its <see cref="P:Northwoods.Go.Panel.ItemList"/>,
             given the index at which to remove a data value, in a manner that can be undone/redone and that automatically updates any bindings.
             </summary>
             <remarks>
             This also calls <see cref="M:Northwoods.Go.Models.Model`3.RaiseChangedEvent(Northwoods.Go.Models.ChangeType,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/> to notify all listeners about the <see cref="F:Northwoods.Go.Models.ChangeType.Remove"/>.
            
             If you want to remove a node from the diagram, call <see cref="M:Northwoods.Go.Models.Model`3.RemoveNodeData(`0)"/>.
            
             Note that there is no version of this method that takes an item value instead of an index into the list.
             Because item lists may hold any value, including numbers and strings, there may be duplicate entries with that value in the list.
             To avoid ambiguity, removing an item from an list requires an index.
             </remarks>
             <param name="list">a list that is the value of some <see cref="T:Northwoods.Go.Panel"/>'s <see cref="P:Northwoods.Go.Panel.ItemList"/>.</param>
             <param name="idx">the zero-based list index of the data item to be removed from the list;
               if not supplied it will remove the last item of the list.</param>
             <seealso cref="M:Northwoods.Go.Models.Model`3.InsertListItem(System.Collections.IList,System.Int32,System.Object)"/>
        </member>
        <member name="P:Northwoods.Go.Models.Model`3.NodeCategoryProperty">
             <summary>
             Gets or sets the name of the node data property that returns a string naming that data's category.
             </summary>
             <remarks>
             The default value is the string "Category", meaning that it expects the data to have a property named "Category" if it cares to name a category.
             This is used by the diagram to distinguish between different kinds of nodes.
             The name must not be null.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.Model`3.GetCategoryForNodeData(`0)"/> will return an empty string for all node data objects.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.Model`3.GetCategoryForNodeData(`0)"/>
             <seealso cref="M:Northwoods.Go.Models.Model`3.SetCategoryForNodeData(`0,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.GetCategoryForNodeData(`0)">
            <summary>
            Find the category of a given node data, a string naming the node template
            or group template or part template
            that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the node data.
            </summary>
            <param name="nodedata">an object represented by a node, group, or non-link.</param>
            <seealso cref="P:Northwoods.Go.Models.Model`3.NodeCategoryProperty"/>
            <seealso cref="M:Northwoods.Go.Models.Model`3.SetCategoryForNodeData(`0,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.SetCategoryForNodeData(`0,System.String)">
             <summary>
             Change the category of a given node data, a string naming the node template
             or group template or part template
             that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the node data.
             </summary>
             <remarks>
             Changing the node template for a node data will cause the existing <see cref="T:Northwoods.Go.Node"/>, <see cref="T:Northwoods.Go.Group"/>, or <see cref="T:Northwoods.Go.Part"/>
             to be replaced with a new instance of the same class
             created by copying the new node template and applying any data-bindings.
             That means that the templates in the <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/> or <see cref="P:Northwoods.Go.Diagram.GroupTemplateMap"/>
             must be instances of the same class -- one cannot convert a <see cref="T:Northwoods.Go.Node"/> into a <see cref="T:Northwoods.Go.Group"/> or vice-versa
             by setting the category.
            
             Binding sources should not be (or depend in a conversion function on) the category of the data
             if you might be modifying the category, because then some bindings might be evaluated
             before or after the category has been changed.
             </remarks>
             <param name="nodedata">an object represented by a node, group, or non-link.</param>
             <param name="cat">Must not be null.</param>
             <seealso cref="P:Northwoods.Go.Models.Model`3.NodeCategoryProperty"/>
             <seealso cref="M:Northwoods.Go.Models.Model`3.GetCategoryForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.Model`3.SetKnownNodeDataProperties(`0,`0)">
            <summary>
            Set known node data properties by getting them from input in case they're now undefined.
            Called by ApplyIncrementalJson and Merge... methods, inside a transaction.
            </summary>
            <param name="obj">the input node data object</param>
            <param name="ndata">the corresponding node data object in the model</param>
        </member>
        <member name="M:Northwoods.Go.Models.ModelHelper.ToString(System.Object)">
            <summary>
            This static function can be used to convert an object to a string,
            looking for commonly defined data properties, such as "text", "name", "key", or "id".
            </summary>
        </member>
        <member name="T:Northwoods.Go.Models.ReadOnlyModel">
            <summary>
            This is a basic implementation of a model that does not allow any modification.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Models.Transaction">
             <summary>
             A Transaction holds a list of <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s collected during a transaction,
             as the value of the read-only <see cref="P:Northwoods.Go.Models.Transaction.Changes"/> property.
             </summary>
             <remarks>
             Start a transaction by calling <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>
             (or <see cref="M:Northwoods.Go.Models.Model`3.StartTransaction(System.String)"/> or <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/>, which call that method).
             Be sure to finish a transaction with a matching call to <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>
             (or <see cref="M:Northwoods.Go.Models.Model`3.CommitTransaction(System.String)"/> or <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>),
             or a call to <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>
             (or the same named methods on <see cref="T:Northwoods.Go.Models.Model`3"/> or <see cref="T:Northwoods.Go.Diagram"/>).
            
             If you are performing multiple or repeated changes to a model or diagram,
             surround all of the code with calls to start and commit the transaction --
             do not perform repeated calls to start-commit-start-commit.
             Typically each change caused by the user, such as a button click or a change of focus or a mouse drag,
             should perform one transaction in which all changes are made.
             All of the predefined commands and tools perform transactions.
            
             Undoing or redoing a transaction is done by calling <see cref="M:Northwoods.Go.Models.UndoManager.Undo"/> or <see cref="M:Northwoods.Go.Models.UndoManager.Redo"/>.
             Those methods call the <see cref="M:Northwoods.Go.Models.Transaction.Undo"/> or <see cref="M:Northwoods.Go.Models.Transaction.Redo"/> methods here.
            
             The <see cref="T:Northwoods.Go.Models.UndoManager"/> holds a list of Transactions in its <see cref="P:Northwoods.Go.Models.UndoManager.History"/>.
             </remarks>
             @category Model
        </member>
        <member name="M:Northwoods.Go.Models.Transaction.#ctor">
            <summary>
            Construct an object holding an empty list of <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s
            and no <see cref="P:Northwoods.Go.Models.Transaction.Name"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Transaction.ToString(System.Nullable{System.Double})">
            <summary>
            Includes count and complete by default.
            </summary>
            <param name="details">Optional: If greater than zero, this also includes information about each <see cref="T:Northwoods.Go.Models.ChangedEvent"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Models.Transaction.Clear">
            <summary>
            Clear all of the saved changes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Transaction.CanUndo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.Go.Models.Transaction.Undo"/>,
            namely when <see cref="P:Northwoods.Go.Models.Transaction.IsComplete"/> is true.
            </summary>
            <returns>true if ready for <see cref="M:Northwoods.Go.Models.Transaction.Undo"/> to be called.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.Transaction.Undo">
            <summary>
            Undo all of the changes, in reverse order.
            </summary>
            <remarks>
            This is normally called only by the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
            <see cref="M:Northwoods.Go.Models.Transaction.CanUndo"/> must be true for this method to have any effect.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Transaction.CanRedo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.Go.Models.Transaction.Redo"/>,
            namely when <see cref="P:Northwoods.Go.Models.Transaction.IsComplete"/> is true.
            </summary>
            <returns>true if ready for <see cref="M:Northwoods.Go.Models.Transaction.Redo"/> to be called.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.Transaction.Redo">
            <summary>
            Re-perform these changes after an <see cref="M:Northwoods.Go.Models.Transaction.Undo"/>.
            </summary>
            <remarks>
            This is normally called only by the <see cref="T:Northwoods.Go.Models.UndoManager"/>.
            <see cref="M:Northwoods.Go.Models.Transaction.CanRedo"/> must be true for this method to have any effect.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.Transaction.RollbackTo(System.Int32)">
            <summary>
            Partial undo, to implement rollback for nested rollbackTransaction() calls.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.Transaction.Optimize">
            <summary>
            Remove all but the first and last Property ChangedEvents for each property for each object.
            </summary>
            <remarks>
            This is called by <see cref="T:Northwoods.Go.Tools.DraggingTool"/>'s <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/>
            in order to reduce the memory saved by each dragging transaction.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Transaction.Changes">
             <summary>
             This read-only property returns the list of <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s.
             </summary>
             <remarks>
             The changes are stored in order of occurrence.
            
             You should not modify this list.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Transaction.Name">
            <summary>
            Gets or sets the transaction name for this collection of changes.
            </summary>
            <remarks>
            This is set by a top-level call to <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.Transaction.IsComplete">
            <summary>
            Gets or sets whether we can add more <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s to this list of changes.
            </summary>
            <remarks>
            This is initially false.
            It is set to true by <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Models.TreeModel`3">
             <summary>
             TreeModels support tree-structured graphs of nodes and links.
             Each node can have at most one "tree parent"; cycles are not permitted.
             The reference to the parent node's key is a property of the child node data.
             </summary>
             <remarks>
             TreeModels, unlike <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>s,
             do not support arbitrary link relationships between nodes,
             nor is there a separate link data object for each parent-child relationship.
             Furthermore there is no support for grouping or label nodes.
            
             The <see cref="P:Northwoods.Go.Models.TreeModel`3.NodeParentKeyProperty"/> property names the property on the node data whose value
             is the key of the "tree parent" node.
             The default value for this property is "Parent".
            
             For example, one can define a graph consisting of one parent node with two child nodes:
             <code language="cs">
              model.NodeDataSource = new List&lt;MyNodeData&gt; {
                new MyNodeData { Key = "Alpha" },
                new MyNodeData { Key = "Beta", Parent = "Alpha" },
                new MyNodeData { Key = "Gamma", Parent = "Alpha" }
              };
             </code>
            
             If you need to show a more complicated graph structure than a tree, use a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
             If you want to have multiple links between the same pair of nodes,
             or if you want to associate more information with each link and cannot put the information on the child node,
             you will need to have a separate link data object for each link,
             and that would require the use of <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
             </remarks>
             @category Model
        </member>
        <member name="T:Northwoods.Go.Models.TreeModel`3.NodeData">
             <summary>
             A simple representation of node data that supports property copying
             via the <c>ICloneable</c> interface.
             </summary>
             <example>
             public class BasicModel : TreeModel&lt;BasicNodeData, string, object&gt; { }
             public class BasicNodeData : BasicModel.NodeData {
               public string Color { get; set; }
             }
             </example>
             <remarks>
             You should override the <see cref="M:Northwoods.Go.Models.Model`3.NodeData.Clone"/> method
             if the fields contain data that should not be shared between copies.
            
             Normally, each <see cref="P:Northwoods.Go.Models.Model`3.NodeData.Key"/> should have a unique value within the model.
             You can maintain that yourself, by setting the <see cref="P:Northwoods.Go.Models.Model`3.NodeData.Key"/> to unique values
             before adding the node data to the model's collection of nodes.
             Or you can ensure this by overriding the
             <see cref="M:Northwoods.Go.Models.Model`3.MakeNodeDataKeyUnique(`0)"/> method
             or providing a <see cref="P:Northwoods.Go.Models.Model`3.MakeUniqueKeyFunction"/> function.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.TreeModel`3.NodeData.Parent">
            <summary>
            The parent key for this node data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This constructs an empty TreeModel unless one provides arguments as the initial data array values
            for the <see cref="P:Northwoods.Go.Models.Model`3.NodeDataSource"/> property.
            </summary>
            <param name="nodedatasource">an optional collection containing objects to be represented by Nodes.</param>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.#ctor(Northwoods.Go.Models.TreeModel{`0,`1,`2})">
            <summary>
            Constructs a copy of a given TreeModel, without copying the data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.ToString(System.Int32)">
            @hidden @internal
            <param name="details">Optional: If greater than zero, this includes descriptions of each node data and link data.</param>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.MaybeEnsureLinkReference(`1)">
            @hidden @internal
            <summary>
            Not really needed, but maybe some day there might be a use....
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.TreeModel`3.NodeParentKeyProperty">
             <summary>
             Gets or sets the name of the property on node data that specifies
             the key of the node data that acts as the "parent" for this "child" node data.
             </summary>
             <remarks>
             The default value is the name "Parent", meaning that it expects the data to have a property named "Parent" if the node wants to refer to the parent node by its key.
             The value must not be null nor an empty string.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.TreeModel`3.GetParentKeyForNodeData(`0)"/>
             <seealso cref="M:Northwoods.Go.Models.TreeModel`3.SetParentKeyForNodeData(`0,`1)"/>
        </member>
        <member name="P:Northwoods.Go.Models.TreeModel`3.CopiesParentKeyOfNodeData">
            <summary>
            (undocumented)
            Gets or sets whether <see cref="M:Northwoods.Go.Models.TreeModel`3.CopyNodeData(`0)"/> copies the property that is the reference to the tree-parent node data.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.GetParentKeyForNodeData(`0)">
            <summary>
            If there is a parent node for the given node data, return the parent's key.
            </summary>
            <param name="nodedata">an object represented by a node.</param>
            <returns>This returns the default <typeparamref name="TNodeKey"/> if there is no parent node data object.</returns>
            <seealso cref="P:Northwoods.Go.Models.TreeModel`3.NodeParentKeyProperty"/>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.SetParentKeyForNodeData(`0,`1)"/>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.SetParentKeyForNodeData(`0,`1)">
            <summary>
            Change the parent node for the given node data, given a key for the new parent.
            </summary>
            <param name="nodedata">an object represented by a node.</param>
            <param name="key">This may be the default <typeparamref name="TNodeKey"/> if there should be no parent node data.</param>
            <seealso cref="P:Northwoods.Go.Models.TreeModel`3.NodeParentKeyProperty"/>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.GetParentKeyForNodeData(`0)"/>
        </member>
        <member name="P:Northwoods.Go.Models.TreeModel`3.ParentLinkCategoryProperty">
             <summary>
             Gets or sets the name of the data property that returns a string describing that node data's parent link's category.
             </summary>
             <remarks>
             The default value is the name "ParentLinkCategory".
             This is used by the diagram to distinguish between different kinds of links.
             The name must not be null.
             If the value is an empty string,
             <see cref="M:Northwoods.Go.Models.TreeModel`3.GetParentLinkCategoryForNodeData(`0)"/> will return an empty string for all node data objects.
            
             If you want to set this property you must do so before using the model, and especially before you assign <see cref="P:Northwoods.Go.Diagram.Model"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.Models.TreeModel`3.GetParentLinkCategoryForNodeData(`0)"/>
             <seealso cref="M:Northwoods.Go.Models.TreeModel`3.SetParentLinkCategoryForNodeData(`0,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.GetParentLinkCategoryForNodeData(`0)">
            <summary>
            Find the category for the parent link of a given child node data, a string naming the link template
            that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the link.
            </summary>
            <param name="childdata">an object represented by a node data.</param>
            <seealso cref="P:Northwoods.Go.Models.TreeModel`3.ParentLinkCategoryProperty"/>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.SetParentLinkCategoryForNodeData(`0,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.SetParentLinkCategoryForNodeData(`0,System.String)">
            <summary>
            Change the category for the parent link of a given child node data, a string naming the link template
            that the <see cref="T:Northwoods.Go.Diagram"/> should use to represent the link.
            </summary>
            <remarks>
            Changing the link template will cause any existing <see cref="T:Northwoods.Go.Link"/>
            to be removed from the <see cref="T:Northwoods.Go.Diagram"/> and replaced with a new <see cref="T:Northwoods.Go.Link"/>
            created by copying the new link template and applying any data-bindings.
            Note that the new template must be an instance of the same class as the original link.
            Thus one cannot change the category of a link from an instance of <see cref="T:Northwoods.Go.Link"/>
            to an instance of a subclass of Link, nor vice-versa.
            </remarks>
            <param name="childdata">an object represented by a node data.</param>
            <param name="cat">Must not be null.</param>
            <seealso cref="P:Northwoods.Go.Models.TreeModel`3.ParentLinkCategoryProperty"/>
            <seealso cref="M:Northwoods.Go.Models.TreeModel`3.GetParentLinkCategoryForNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.CopyNodeData(`0)">
            <summary>
            This override also makes sure any copied node data does not have a reference to a parent node.
            </summary>
            <param name="nodedata">an object represented by a node, group, or non-link.</param>
            <seealso cref="M:Northwoods.Go.Models.Model`3.CopyNodeData(`0)"/>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.Set(System.Object,System.String,System.Object)">
            <summary>
            This override changes the value of some property of a node data or an item data, given a string naming the property
            and the new value, in a manner that can be undone/redone and that automatically updates any bindings.
            </summary>
            <remarks>
            This gets the old value of the property; if the value is the same as the new value, no side-effects occur.
            </remarks>
            <param name="data">an object typically the value of a <see cref="P:Northwoods.Go.Panel.Data"/> and represented by a Node, Link, Group, simple Part,
            or item in a <see cref="P:Northwoods.Go.Panel.ItemList"/>; or this model's <see cref="P:Northwoods.Go.Models.Model`3.SharedData"/>.</param>
            <param name="propname">a string that is not null or the empty string.</param>
            <param name="val">the new value for the property.</param>
            <seealso cref="M:Northwoods.Go.Models.Model`3.Set(System.Object,System.String,System.Object)"/>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.ReplaceAllKeyReferences(`1,`1)">
            @hidden @internal
            <summary>
            When a node data changes its key, we need to update all data references to that node data
            that are using the old key value by replacing them with the new key value.
            </summary>
            <remarks>
            The goal is to maintain all of the original relationships in all of the data maintained by the model.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.ReplaceKeyReferencesInNodeData(`0,`1,`1)">
            @hidden @internal
            <summary>
            When a node key has changed its key, we need to update all data references to that node data
            that are using the old key value by replacing them with the new key value.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.ResolveReferencesToNodeData(`0)">
            @hidden @internal
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.ResolveReferencesInNodeData(`0)">
            @hidden @internal
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.UnresolveReferencesInNodeData(`0)">
            @hidden @internal
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.TreeModel`3.SetKnownNodeDataProperties(`0,`0)">
            <summary>
            Set known node data properties by getting them from input in case they're now undefined.
            Called by ApplyIncrementalJson and Merge...methods, inside a transaction.
            </summary>
            <param name="obj">the input node data object</param>
            <param name="ndata">the corresponding node data object in the model</param>
        </member>
        <member name="T:Northwoods.Go.Models.UndoManager">
             <summary>
             An UndoManager observes and records model and diagram changes in transactions and
             supports undo/redo operations.
             </summary>
             <remarks>
             You will need to set the <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> property to true in order for
             the UndoManager to record changes and for users to perform an undo or a redo.
            
             Typically an operation will call <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>,
             make some changes to the <see cref="T:Northwoods.Go.Models.Model`3"/> and/or <see cref="T:Northwoods.Go.Diagram"/>,
             and then call <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>.
             Any <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s that occur will be recorded in a
             <see cref="T:Northwoods.Go.Models.Transaction"/> object.
             If for some reason you do not wish to complete the transaction
             successfully, you can call <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/> instead
             of <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>.
            
             For convenience the <see cref="M:Northwoods.Go.Diagram.Commit(System.Action{Northwoods.Go.Diagram},System.String)"/> and <see cref="M:Northwoods.Go.Models.IModel.Commit(System.Action{Northwoods.Go.Models.IModel},System.String)"/> methods
             execute a function within a transaction and then perform a commit,
             or else a rollback upon an error.
            
             The <see cref="P:Northwoods.Go.Models.UndoManager.History"/> property is a list of <see cref="T:Northwoods.Go.Models.Transaction"/>s.
             <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/> will add the <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/>
             to the <see cref="P:Northwoods.Go.Models.UndoManager.History"/> list.
             <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/> will undo the changes remembered in the
             <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/> and then discard it, without changing the <see cref="P:Northwoods.Go.Models.UndoManager.History"/>.
             You can limit how many transactions are remembered in the history
             by setting <see cref="P:Northwoods.Go.Models.UndoManager.MaxHistoryLength"/>.
            
             Transactions may be nested.
             Be sure to call either <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/> or <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>
             for each call to <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>.
             Avoid repeated start-commit-start-commit calls as a result of a user's actions.
             Instead, start, make all changes, and then commit.
            
             If you want to restore the diagram to the state before the latest complete
             transaction, call <see cref="M:Northwoods.Go.Models.UndoManager.Undo"/>.
             Call <see cref="M:Northwoods.Go.Models.UndoManager.Redo"/> to change the diagram to a later state.
             If after some number of undos you start a transaction,
             all of the history after the current state is discarded,
             and a new transaction may be recorded.
             You cannot undo or redo during a transaction.
            
             Initially each <see cref="T:Northwoods.Go.Models.IModel"/> has its own UndoManager.
             UndoManagers may be shared by multiple Models by replacing
             the standard <see cref="P:Northwoods.Go.Models.IModel.UndoManager"/> created by the model constructor.
            
             There are several informational properties:
               - <see cref="P:Northwoods.Go.Models.UndoManager.IsInTransaction"/> is true when a top-level transaction has been started that has not yet been committed or rolled-back.
               - <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/> holds the flattened list of all <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s
                 that have happened within the current transaction.
               - <see cref="P:Northwoods.Go.Models.UndoManager.TransactionLevel"/> indicates the current depth of nesting.
               - <see cref="P:Northwoods.Go.Models.UndoManager.NestedTransactionNames"/> holds the stack of transaction names supplied to
                 <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/> calls.
               - <see cref="P:Northwoods.Go.Models.UndoManager.History"/> holds only complete top-level transactions.
               - <see cref="P:Northwoods.Go.Models.UndoManager.IsUndoingRedoing"/> is true during a call to <see cref="M:Northwoods.Go.Models.UndoManager.Undo"/> or <see cref="M:Northwoods.Go.Models.UndoManager.Redo"/>.
               - <see cref="P:Northwoods.Go.Models.UndoManager.HistoryIndex"/> indicates which <see cref="T:Northwoods.Go.Models.Transaction"/> in the <see cref="P:Northwoods.Go.Models.UndoManager.History"/> is the next to be "undone";
                 this is decremented by each undo and incremented by each redo.
               - <see cref="P:Northwoods.Go.Models.UndoManager.TransactionToUndo"/> and <see cref="P:Northwoods.Go.Models.UndoManager.TransactionToRedo"/> indicate which <see cref="T:Northwoods.Go.Models.Transaction"/> may be undone or redone next, if any.
               - <see cref="P:Northwoods.Go.Models.UndoManager.Models"/> returns an iterator over all of the <see cref="T:Northwoods.Go.Models.IModel"/>s that this UndoManager is handling.
            
             A transaction may not be ongoing when replacing a <see cref="P:Northwoods.Go.Diagram.Model"/>,
             because it would not make sense to be replacing the UndoManager (the <see cref="P:Northwoods.Go.Models.Model`3.UndoManager"/>)
             while changes are being recorded.
            
             Replacing a <see cref="P:Northwoods.Go.Diagram.Model"/> copies certain properties from the old UndoManager to the new one,
             including <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> and <see cref="P:Northwoods.Go.Models.UndoManager.MaxHistoryLength"/>.
             </remarks>
             @category Model
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.#ctor">
            <summary>
            The constructor produces an empty UndoManager
            with no transaction history.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.ToString(System.Nullable{System.Double})">
            <summary>For debugging</summary>
            <param name="details">Optional: If greater than zero, this includes descriptions of each <see cref="T:Northwoods.Go.Models.Transaction"/> in its <see cref="P:Northwoods.Go.Models.UndoManager.History"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.Clear">
             <summary>
             Clear all of the <see cref="T:Northwoods.Go.Models.Transaction"/>s and clear all other state,
             including any ongoing transaction without rolling back.
             </summary>
             <remarks>
             However, this maintains its references to its <see cref="T:Northwoods.Go.Models.IModel"/>s.
            
             You should not call this method during a transaction.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.CopyProperties(Northwoods.Go.Models.UndoManager)">
            <summary>
            (undocumented)
            Copy persistent properties from an old UndoManager to this new one.
            </summary>
            <remarks>
            This is called by the <see cref="P:Northwoods.Go.Diagram.Model"/> property setter.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.AddModel(Northwoods.Go.Models.IModel)">
             <summary>
             Make sure this UndoManager knows about a <see cref="T:Northwoods.Go.Models.IModel"/> for which
             it may receive <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s when the given <see cref="T:Northwoods.Go.Models.IModel"/> is changed.
             </summary>
             <remarks>
             The model will also receive notifications about transactions and undo or redo operations.
            
             You should not call this method during a transaction.
             </remarks>
             <param name="model">A <see cref="T:Northwoods.Go.Models.IModel"/> that this UndoManager is managing.</param>
             <seealso cref="P:Northwoods.Go.Models.UndoManager.Models"/>
             <seealso cref="M:Northwoods.Go.Models.UndoManager.RemoveModel(Northwoods.Go.Models.IModel)"/>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.RemoveModel(Northwoods.Go.Models.IModel)">
             <summary>
             Inform this UndoManager that it will no longer be receiving <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s
             when the given <see cref="T:Northwoods.Go.Models.IModel"/> is changed.
             </summary>
             <remarks>
             The model will no longer receive notifications about transactions and undo or redo operations.
            
             You should not call this method during a transaction.
             If you call this method between transactions when there is a transaction history,
             you should be careful that there are no <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s referring to that model in any <see cref="T:Northwoods.Go.Models.Transaction"/>s.
             </remarks>
             <param name="model">A <see cref="T:Northwoods.Go.Models.IModel"/> that this UndoManager should no longer manage.</param>
             <seealso cref="P:Northwoods.Go.Models.UndoManager.Models"/>
             <seealso cref="M:Northwoods.Go.Models.UndoManager.AddModel(Northwoods.Go.Models.IModel)"/>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)">
             <summary>
             Begin a transaction, where the changes are held by a <see cref="T:Northwoods.Go.Models.Transaction"/> object
             as the value of <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/>.
             </summary>
             <remarks>
             You must call either <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/> or <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/> afterwards.
            
             For convenience, this method is called by <see cref="M:Northwoods.Go.Models.IModel.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/>.
            
             Transactions can be nested.
             Starting or ending a nested transaction will return false.
             Nested transactions will share the same <see cref="T:Northwoods.Go.Models.Transaction"/> list of <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s.
            
             Starting a transaction will not necessarily cause <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/> to be non-null.
             A <see cref="T:Northwoods.Go.Models.Transaction"/> object is usually only created by <see cref="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)"/> when a <see cref="T:Northwoods.Go.Models.ChangedEvent"/> first occurs.
             </remarks>
             <param name="tname">a short string describing the transaction, pushed onto the <see cref="P:Northwoods.Go.Models.UndoManager.NestedTransactionNames"/> stack.</param>
             <returns>true if starting a top-level transaction.</returns>
             <seealso cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>
             <seealso cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)">
             <summary>
             Commit the current transaction started by a call to <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>.
             </summary>
             <remarks>
             For convenience, this method is called by <see cref="M:Northwoods.Go.Models.IModel.CommitTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>.
            
             If this call stops a top-level transaction,
             we mark the <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/> as complete (<see cref="P:Northwoods.Go.Models.Transaction.IsComplete"/>),
             we add the <see cref="T:Northwoods.Go.Models.Transaction"/> to the <see cref="P:Northwoods.Go.Models.UndoManager.History"/> list,
             and we return true.
             Committing a transaction when there have been some undos without corresponding
             redos will throw away the <see cref="T:Northwoods.Go.Models.Transaction"/>s holding changes that happened
             after the current state, before adding the new <see cref="T:Northwoods.Go.Models.Transaction"/> to the
             <see cref="P:Northwoods.Go.Models.UndoManager.History"/> list.
             </remarks>
             <param name="tname">a short string describing the transaction;
             this is recorded as the <see cref="P:Northwoods.Go.Models.Transaction.Name"/> and need not be the same as the string passed to <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>.
             If the value is an empty string or not supplied, this will use the name given to <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>.</param>
             <returns>true if ending a top-level transaction.</returns>
             <seealso cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>
             <seealso cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.RollbackTransaction">
             <summary>
             Rollback the current transaction started by a call to <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>, undoing any changes.
             </summary>
             <remarks>
             For convenience, this method is called by <see cref="M:Northwoods.Go.Models.IModel.RollbackTransaction"/> and <see cref="M:Northwoods.Go.Diagram.RollbackTransaction"/>.
            
             This undoes and then discards the changes in the <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/>.
             You must have started a transaction previously.
             </remarks>
             <returns>true if ending a top-level transaction.</returns>
             <seealso cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>
             <seealso cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager._EndTransaction(System.Boolean,System.String)">
            <param name="commit"></param>
            <param name="tname">a short string describing the transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.CanUndo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.Go.Models.UndoManager.Undo"/>.
            </summary>
            <remarks>
            This will return false if <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> is false (as it is by default),
            if any transaction is ongoing, or
            if there is no <see cref="P:Northwoods.Go.Models.UndoManager.TransactionToUndo"/> that can be undone.
            </remarks>
            <returns>true if ready for <see cref="M:Northwoods.Go.Models.UndoManager.Undo"/> to be called.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.Undo">
             <summary>
             Reverse the effects of the <see cref="P:Northwoods.Go.Models.UndoManager.TransactionToUndo"/>.
             </summary>
             <remarks>
             <see cref="M:Northwoods.Go.Models.UndoManager.CanUndo"/> must be true for this method to have any effect.
            
             This is called by <see cref="M:Northwoods.Go.CommandHandler.Undo"/>.
            
             This will raise a "StartingUndo" <see cref="T:Northwoods.Go.Models.ChangedEvent"/> of type <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>,
             perform the <see cref="M:Northwoods.Go.Models.Transaction.Undo"/> on the <see cref="P:Northwoods.Go.Models.UndoManager.TransactionToUndo"/>, and then
             raise a "FinishedUndo" <see cref="T:Northwoods.Go.Models.ChangedEvent"/> of type <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.
             The two ChangedEvents are to let model listeners know that an undo is about to take place
             and that it just finished.
             <see cref="P:Northwoods.Go.Models.UndoManager.IsUndoingRedoing"/> will temporarily be set to true during this operation.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.CanRedo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.Go.Models.UndoManager.Redo"/>.
            </summary>
            <remarks>
            This will return false if <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> is false (as it is by default),
            if any transaction is ongoing, or
            if there is no <see cref="P:Northwoods.Go.Models.UndoManager.TransactionToRedo"/> that can be redone.
            </remarks>
            <returns>true if ready for <see cref="M:Northwoods.Go.Models.UndoManager.Redo"/> to be called.</returns>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.Redo">
             <summary>
             After an <see cref="M:Northwoods.Go.Models.UndoManager.Undo"/>, re-perform the changes in <see cref="P:Northwoods.Go.Models.UndoManager.TransactionToRedo"/>.
             </summary>
             <remarks>
             <see cref="M:Northwoods.Go.Models.UndoManager.CanRedo"/> must be true for this method to have any effect.
            
             This is called by <see cref="M:Northwoods.Go.CommandHandler.Redo"/>.
            
             This will raise a "StartingRedo" <see cref="T:Northwoods.Go.Models.ChangedEvent"/> of type <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>,
             perform the <see cref="M:Northwoods.Go.Models.Transaction.Redo"/> on the <see cref="P:Northwoods.Go.Models.UndoManager.TransactionToRedo"/>, and then
             raise a "FinishedRedo" <see cref="T:Northwoods.Go.Models.ChangedEvent"/> of type <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>.
             The two ChangedEvents are to let model listeners know that a redo is about to take place
             and that it just finished.
             <see cref="P:Northwoods.Go.Models.UndoManager.IsUndoingRedoing"/> will temporarily be set to true during this operation.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager._RaiseChanged(System.String,System.String,Northwoods.Go.Models.Transaction)">
            <summary>
            An internal method for raising Transaction ChangedEvents.
            </summary>
            <param name="ch">the transaction type.</param>
            <param name="tname">the Transaction name, or "Undo" or "Redo", or the property name for Property changes.</param>
            <param name="val">the Transaction itself, if available.</param>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)">
             <summary>
             Maybe record a <see cref="T:Northwoods.Go.Models.ChangedEvent"/> in the <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/>.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Models.UndoManager.SkipsEvent(Northwoods.Go.Models.ChangedEvent)"/> to see if this should ignore the change.
             If <see cref="M:Northwoods.Go.Models.UndoManager.SkipsEvent(Northwoods.Go.Models.ChangedEvent)"/> returns false, this creates a copy of the <see cref="T:Northwoods.Go.Models.ChangedEvent"/>
             and adds it to the <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/>.
             If there is no <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/>, this first creates and remembers it.
            
             This method always ignores all changes while performing
             an <see cref="M:Northwoods.Go.Models.UndoManager.Undo"/> or <see cref="M:Northwoods.Go.Models.UndoManager.Redo"/>.
             This method is also a no-op if <see cref="P:Northwoods.Go.Models.UndoManager.IsEnabled"/> is false.
             </remarks>
             <param name="e">a <see cref="T:Northwoods.Go.Models.ChangedEvent"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Models.UndoManager.SkipsEvent(Northwoods.Go.Models.ChangedEvent)">
             <summary>
             This predicate is called by <see cref="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)"/> to decide if a <see cref="T:Northwoods.Go.Models.ChangedEvent"/>
             is not interesting enough to be remembered.
             </summary>
             <remarks>
             Transactional events (of change type <see cref="F:Northwoods.Go.Models.ChangeType.Transaction"/>) are always skipped.
             Changed events for <see cref="T:Northwoods.Go.GraphObject"/>s that are in <see cref="P:Northwoods.Go.Layer.IsTemporary"/> layers are also skipped.
            
             Sometimes changed events do not even get to <see cref="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)"/> because
             <see cref="P:Northwoods.Go.Models.Model`3.SkipsUndoManager"/> or <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/> is true.
             </remarks>
             <param name="e">the <see cref="T:Northwoods.Go.Models.ChangedEvent"/> received by <see cref="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)"/>.</param>
             <returns>true to not record the change.</returns>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.Models">
            <summary>
            This read-only property returns an iterator for all of the <see cref="T:Northwoods.Go.Models.Model`3"/>s that this UndoManager is handling.
            </summary>
            <seealso cref="M:Northwoods.Go.Models.UndoManager.AddModel(Northwoods.Go.Models.IModel)"/>
            <seealso cref="M:Northwoods.Go.Models.UndoManager.RemoveModel(Northwoods.Go.Models.IModel)"/>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.IsEnabled">
             <summary>
             Gets or sets whether this UndoManager records any changes.
             </summary>
             <remarks>
             The default value is false -- you need to set this to true if
             you want the user to be able to undo or redo.
            
             You can temporarily turn off recording by setting <see cref="P:Northwoods.Go.Diagram.SkipsUndoManager"/>
             and <see cref="P:Northwoods.Go.Models.IModel.SkipsUndoManager"/> to true.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.TransactionToUndo">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Models.Transaction"/> in the <see cref="P:Northwoods.Go.Models.UndoManager.History"/> to be undone next.
            </summary>
            <remarks>
            The value may be null if the UndoManager is not ready to perform an undo.
            </remarks>
            <seealso cref="P:Northwoods.Go.Models.UndoManager.TransactionToRedo"/>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.TransactionToRedo">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Models.Transaction"/> in the <see cref="P:Northwoods.Go.Models.UndoManager.History"/> to be redone next.
            </summary>
            <remarks>
            The value may be null if the UndoManager is not ready to perform a redo.
            </remarks>
            <seealso cref="P:Northwoods.Go.Models.UndoManager.TransactionToUndo"/>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.IsUndoingRedoing">
            <summary>
            This read-only property is true during a call to <see cref="M:Northwoods.Go.Models.UndoManager.Undo"/> or <see cref="M:Northwoods.Go.Models.UndoManager.Redo"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.History">
            <summary>
            This read-only property returns the whole history, a list of all of the <see cref="T:Northwoods.Go.Models.Transaction"/>s,
            each representing a transaction with some number of <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s.
            </summary>
            <remarks>
            You should not modify this List.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.MaxHistoryLength">
             <summary>
             Gets or sets the maximum number of transactions that this undo manager will remember.
             </summary>
             <remarks>
             When a transaction is committed and the number exceeds this value,
             the UndoManager will discard the oldest transaction(s) in order to meet this limit.
             The initial value is 999.
             Any new value must be an integer.
             A negative value is treated as if there were no limit.
             A zero value will not remember any Transactions in the <see cref="P:Northwoods.Go.Models.UndoManager.History"/>,
             but will allow commits and rollbacks to occur normally,
             including raising "Transaction" type <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s.
            
             This property is useful in helping limit the memory consumption of typical applications.
             But this does not limit the number of <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s that are recorded,
             because there may be an unlimited number of those within each <see cref="T:Northwoods.Go.Models.Transaction"/>.
             Decreasing this value will not necessarily remove any existing <see cref="T:Northwoods.Go.Models.Transaction"/>s
             if there currently exist more in <see cref="P:Northwoods.Go.Models.UndoManager.History"/> than the new value permits.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.HistoryIndex">
            <summary>
            This read-only property returns the index into <see cref="P:Northwoods.Go.Models.UndoManager.History"/> for the current undoable <see cref="T:Northwoods.Go.Models.Transaction"/>.
            </summary>
            <remarks>
            The value is -1 if there is no undoable <see cref="T:Northwoods.Go.Models.Transaction"/> to be undone.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.CurrentTransaction">
            <summary>
            This read-only property returns the current <see cref="T:Northwoods.Go.Models.Transaction"/> for recording additional model change events.
            </summary>
            <remarks>
            This is initialized and augmented by <see cref="M:Northwoods.Go.Models.UndoManager.HandleChanged(Northwoods.Go.Models.ChangedEvent)"/>
            before it is added to <see cref="P:Northwoods.Go.Models.UndoManager.History"/> by a top-level call
            to <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/>.
            The value will be null between transactions.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.TransactionLevel">
            <summary>
            This read-only property returns the current transaction level.
            </summary>
            <remarks>
            The value is zero when there is no ongoing transaction.
            The initial value is zero.
            <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/> will increment this value;
            <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/> or <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/> will decrement it.
            When this value is greater than zero, <see cref="M:Northwoods.Go.Models.UndoManager.CanUndo"/>
            and <see cref="M:Northwoods.Go.Models.UndoManager.CanRedo"/> will be false, because
            additional logically related model change events may occur.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.IsInTransaction">
            <summary>
            This read-only property is true after the first call to <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>
            and before a corresponding call to <see cref="M:Northwoods.Go.Models.UndoManager.CommitTransaction(System.String)"/> or <see cref="M:Northwoods.Go.Models.UndoManager.RollbackTransaction"/>.
            </summary>
            <remarks>
            During a transaction <see cref="M:Northwoods.Go.Models.UndoManager.CanUndo"/> and <see cref="M:Northwoods.Go.Models.UndoManager.CanRedo"/> will be false.
            <see cref="P:Northwoods.Go.Models.UndoManager.CurrentTransaction"/> may be non-null if any <see cref="T:Northwoods.Go.Models.ChangedEvent"/>s were recorded.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.ChecksTransactionLevel">
            <summary>
            Gets or sets whether the system should issue warnings if the <see cref="P:Northwoods.Go.Models.UndoManager.TransactionLevel"/>
            appears to be inconsistent with current behavior.
            The default value is false.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.NestedTransactionNames">
             <summary>
             This read-only property returns a stack of ongoing transaction names.
             </summary>
             <remarks>
             The outermost transaction name will be the first item in the list.
             The last one will be the name of the most recent (nested) call
             to <see cref="M:Northwoods.Go.Models.UndoManager.StartTransaction(System.String)"/>.
            
             You should not modify this List.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.IsPendingClear">
            <summary>
            Gets or sets whether the UndoManger is waiting to be cleared after completing the top level transaction.
            The default value is false.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.IsPendingUnmodified">
            <summary>
            Gets or sets whether the UndoManger is waiting to set the Diagram to unmodified after completing the top level transaction.
            The default value is false.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.IsInternalTransaction">
            <summary>
            Gets or sets whether the transaction should be considered nested, even if TransactionLevel is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Models.UndoManager.IsJustDiscarded">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="T:Northwoods.Go.Palette">
             <summary>
             Palette extends the Diagram class to allow objects to be dragged and placed onto other Diagrams.
             </summary>
             <remarks>
             Its <see cref="P:Northwoods.Go.Diagram.Layout"/> is a <see cref="T:Northwoods.Go.Layouts.GridLayout"/>.
             The Palette is <see cref="P:Northwoods.Go.Diagram.IsReadOnly"/>, but to support drag-and-drop, its <see cref="P:Northwoods.Go.Diagram.AllowDragOut"/> is true.
            
             <p class="boxread">
             For more discussion, see <a href="../../intro/palettes.html">Introduction to Palettes</a>.
             </p>
            
             You can control the order of Parts in the palette in several manners:
               - If you want to keep the order given by <c>myPalette.Model.NodeDataSource</c>, just set <c>myPalette.Layout.Sorting = GridSorting.Forwards</c> (<see cref="P:Northwoods.Go.Layouts.GridLayout.Sorting"/>)
               - If you want to sort based on some text string associated with each Part, just bind <see cref="P:Northwoods.Go.Part.Text"/>
               - If you want to sort more generally, set <c>myPalette.Layout.Comparer</c> (<see cref="P:Northwoods.Go.Layouts.GridLayout.Comparer"/>)
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Palette.#ctor">
            <summary>
            Constructs a new Palette. You will not normally call this constructor.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Palette.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Northwoods.Go.Palette.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Northwoods.Go.PartManager">
             <summary>
             The PartManager handles interaction between a <see cref="T:Northwoods.Go.Diagram"/> and its <see cref="T:Northwoods.Go.Models.IModel"/>.
             </summary>
             <remarks>
             It is responsible for creating and removing <see cref="T:Northwoods.Go.Node"/>s, <see cref="T:Northwoods.Go.Link"/>s, and <see cref="T:Northwoods.Go.Part"/>s for the data in the model.
            
             Each <see cref="T:Northwoods.Go.Diagram"/> has an instance of this class as its <see cref="P:Northwoods.Go.Diagram.PartManager"/> property.
             This class maintains a collection of all diagram <see cref="T:Northwoods.Go.Node"/>s, <see cref="T:Northwoods.Go.Link"/>s, and <see cref="T:Northwoods.Go.Part"/>s,
             as well as dictionaries mapping model data to <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s.
             You can find the <see cref="T:Northwoods.Go.Part"/> for a model data object by calling <see cref="M:Northwoods.Go.PartManager.FindNodeForData(System.Object)"/> and
             <see cref="M:Northwoods.Go.PartManager.FindLinkForData(System.Object,System.Object)"/>.
             </remarks>
             @category Model
        </member>
        <member name="M:Northwoods.Go.PartManager.#ctor">
            <summary>
            Constructs a PartManager. You will not normally call this constructor.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.Clear">
            <summary>
            Removes all Parts from the PartManager.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.InternalAdd(Northwoods.Go.Part)">
            <summary>
            This is called from <see cref="M:Northwoods.Go.Diagram.InternalAdd(Northwoods.Go.Part)"/> for bookkeeping.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.InternalRemove(Northwoods.Go.Part)">
            <summary>
            This is called from <see cref="M:Northwoods.Go.Layer.InternalRemove(System.Int32,Northwoods.Go.Part,System.Boolean)"/> for bookkeeping.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.RebuildParts">
             <summary>
             Remove all of the <see cref="T:Northwoods.Go.Part"/>s created from model data
             and then create them again.
             </summary>
             <remarks>
             This must be called after modifying or replacing any of the template maps
             such as <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/>.
             This re-selects all of the new Parts that were created from data of the original selected Parts.
            
             If you modify a template Map, there is no notification that the map has changed.
             You will need to call rebuildParts explicitly.
             If you are replacing the <see cref="P:Northwoods.Go.Diagram.NodeTemplate"/> or the <see cref="P:Northwoods.Go.Diagram.NodeTemplateMap"/> or
             the corresponding properties for Groups or Links,
             the Diagram property setters will automatically call rebuildParts.
            
             It is extremely wasteful to call this method after making some model data changes that you want to
             be reflected in the diagram.  Instead, it is better call <see cref="M:Northwoods.Go.Models.IModel.Set(System.Object,System.String,System.Object)"/>,
             <see cref="M:Northwoods.Go.Models.IModel.AddNodeData(System.Object)"/>, <see cref="M:Northwoods.Go.Models.IModel.RemoveNodeData(System.Object)"/>, or other model methods.
             Not only do those methods update efficiently, they also preserve unbound state and support undo/redo.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.PartManager.AddModeledParts(System.Collections.IEnumerable)">
            <summary>
            Add <see cref="T:Northwoods.Go.Part"/>s corresponding to the given data array.
            </summary>
            <remarks>
            This will also resolve references in the node data.
            </remarks>
            <param name="dataarray">the array of node data to be added as Parts</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.AddModeledPart(System.Object,System.Boolean)">
            <summary>
            For a given data object, adds a <see cref="T:Northwoods.Go.Part"/> to the <see cref="P:Northwoods.Go.PartManager.Diagram"/>
            and optionally resolves any references for that data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.InsertLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)">
             <summary>
             Make a copy of the <see cref="P:Northwoods.Go.Tools.LinkingTool.ArchetypeLinkData"/>, set its node and port properties, and add it to the <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
             </summary>
             <remarks>
             If the model is a <see cref="T:Northwoods.Go.Models.TreeModel`3"/>, set the parent key of the child's node data object.
            
             For GraphLinksModels, if <see cref="P:Northwoods.Go.Tools.LinkingTool.ArchetypeLabelNodeData"/> is non-null, this method also adds that node data as an initial label node
             for the new link data.
            
             For TreeModels, if <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/> is false, the roles of the *fromnode* and *tonode* arguments are exchanged.
            
             This method may be overridden.
             Usually though it is easiest to just set <see cref="P:Northwoods.Go.Tools.LinkingTool.ArchetypeLinkData"/> to control what kind of link is created
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="fromnode"></param>
             <param name="fromport">the from-port, or null to use the node itself</param>
             <param name="tonode"></param>
             <param name="toport">the to-port, or null to use the node itself</param>
             <returns>the newly created Link, or null if it failed.</returns>
        </member>
        <member name="M:Northwoods.Go.PartManager.ResolveReferencesForData(System.Object)">
            <summary>
            Handle any references within a data object to other data objects in the model.
            </summary>
            <param name="data">a data object in the model, potentially referencing other objects</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.GetCategoryForNodeData(System.Object)">
            <summary>Undocumented</summary>
            <param name="data">a data for a Part/Node but not for a Link.</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.FindTemplateForNodeData(System.Object,System.String)">
            <summary>Undocumented</summary>
            <param name="data">a data for a Part/Node but not for a Link.</param>
            <param name="cat">the category.</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.GetLinkCategoryForData(System.Object)">
            <summary>
            Find the category of a given data representing a link, a string naming the link template
            that the <see cref="P:Northwoods.Go.PartManager.Diagram"/> should use to represent the data.
            </summary>
            <param name="data">a data for a Link (if GraphLinksModel) or for the child Node (if TreeModel)</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.SetLinkCategoryForData(System.Object,System.String)">
            <summary>
            Change the category of a given data representing a link, a string naming the link template
            that the <see cref="P:Northwoods.Go.PartManager.Diagram"/> should use to represent the data.
            </summary>
            <param name="data">a data for a Link (if GraphLinksModel) or for the child Node (if TreeModel)</param>
            <param name="value"></param>
        </member>
        <member name="M:Northwoods.Go.PartManager.SetFromNodeForLink(Northwoods.Go.Link,Northwoods.Go.Node,Northwoods.Go.Node)">
            <summary>
            Change the node key that the given link references as the source of the link.
            </summary>
            <param name="link">a Link</param>
            <param name="value">the Node whose key will be referenced in the data</param>
            <param name="old">an optional parameter holding the old value</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.SetToNodeForLink(Northwoods.Go.Link,Northwoods.Go.Node,Northwoods.Go.Node)">
            <summary>
            Change the node key that the given data representing a link references as the
            destination of the link.
            </summary>
            <param name="link">a Link</param>
            <param name="value">the Node whose key will be referenced in the data</param>
            <param name="old">an optional parameter holding the old value</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.FindLinkTemplateForCategory(System.String)">
            <summary>
            Looks up the Diagram's link template for a given category.
            </summary>
            <param name="cat">the category</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.ReplaceBoundData(Northwoods.Go.Panel,System.Object,System.Object)">
            <summary>Undocumented</summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.RemoveModeledParts(System.Collections.IEnumerable)">
            <summary>
            Remove <see cref="T:Northwoods.Go.Part"/>s associated with the given array of model data.
            </summary>
            <param name="dataarray">the array of data to be removed as Parts</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.RemoveModeledPart(System.Object)">
            <summary>
            Remove a <see cref="T:Northwoods.Go.Part"/> given a data object.
            </summary>
            <param name="data">the data to be removed as a Part</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.UnresolveReferencesForPart(Northwoods.Go.Part)">
            <summary>
            Remove any references that may exist for the given Part.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.RemoveDataForLink(Northwoods.Go.Link)">
            <summary>
            Remove model data associated with the given Link.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.FindPartForKey(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Part"/> or <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/> corresponding to a model's data object's unique key.
            </summary>
            <remarks>
            This will find a <see cref="T:Northwoods.Go.Link"/> if the model is a <see cref="T:Northwoods.Go.Models.ILinkDataModel"/>
            that is maintaining a key on the link data objects.
            </remarks>
            <param name="key">an object.</param>
            <returns>null if a data with that key cannot be found in the model,
            or if a corresponding <see cref="T:Northwoods.Go.Part"/> cannot be found in the Diagram.
            This will not return a <see cref="T:Northwoods.Go.Link"/> unless the model is a <see cref="T:Northwoods.Go.Models.ILinkDataModel"/> and
            <see cref="P:Northwoods.Go.Models.ILinkDataModel.LinkKeyProperty"/> is set.
            If the same key is used for both a node data object and a link data object, this will return a Node.</returns>
        </member>
        <member name="M:Northwoods.Go.PartManager.FindNodeForKey(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/> corresponding to a model's node data object's unique key.
            </summary>
            <param name="key">a string or number.</param>
            <returns>null if a node data with that key cannot be found in the model,
            or if a corresponding <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/> cannot be found in the Diagram,
            or if what is found is just a <see cref="T:Northwoods.Go.Part"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.PartManager.FindLinkForKey(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Link"/> corresponding to a model's link data object's unique key.
            </summary>
            <param name="key">a string or number.</param>
            <returns>null if a link data with that key cannot be found in the model,
            or if a corresponding <see cref="T:Northwoods.Go.Link"/> cannot be found in the Diagram,
            or if the model is a <see cref="T:Northwoods.Go.Models.ILinkDataModel"/> without <see cref="P:Northwoods.Go.Models.ILinkDataModel.LinkKeyProperty"/> set to a non-empty string.</returns>
        </member>
        <member name="M:Northwoods.Go.PartManager.FindPartForData(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Part"/>, <see cref="T:Northwoods.Go.Node"/>, <see cref="T:Northwoods.Go.Group"/>, or <see cref="T:Northwoods.Go.Link"/> corresponding to a <see cref="T:Northwoods.Go.Models.IModel"/>'s data object.
            </summary>
            <remarks>
            We recommend that you call <see cref="M:Northwoods.Go.PartManager.FindNodeForData(System.Object)"/> or <see cref="M:Northwoods.Go.PartManager.FindLinkForData(System.Object,System.Object)"/> if you are looking for a <see cref="T:Northwoods.Go.Node"/> or a <see cref="T:Northwoods.Go.Link"/>.
            </remarks>
            <param name="data">an object matched by reference identity</param>
            <returns>an existing <see cref="T:Northwoods.Go.Part"/> in this Diagram that was
            created because its <see cref="P:Northwoods.Go.Panel.Data"/> was the data in the Diagram's <see cref="T:Northwoods.Go.Models.IModel"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.PartManager.FindNodeForData(System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/>  corresponding to a model's node data object.
            </summary>
            <param name="nodedata">an object matched by reference identity</param>
            <returns>an existing <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Group"/> in this Diagram that was
            created because its <see cref="P:Northwoods.Go.Panel.Data"/> was the node data in the Diagram's <see cref="T:Northwoods.Go.Models.IModel"/>.
            This will be null if there is no such part or if it's just a <see cref="T:Northwoods.Go.Part"/> or <see cref="T:Northwoods.Go.Link"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.PartManager.FindLinkForData(System.Object,System.Object)">
            <summary>
            Look for a <see cref="T:Northwoods.Go.Link"/> corresponding to a <see cref="T:Northwoods.Go.Models.ILinkDataModel"/>'s link data object.
            </summary>
            <param name="linkdata">an object matched by reference identity</param>
            <param name="key">an optional key in case data can correspond to more than one link (GraphModel)</param>
            <returns>an existing <see cref="T:Northwoods.Go.Link"/> in this Diagram that was
            created because its <see cref="P:Northwoods.Go.Panel.Data"/> was the link data in the Diagram's <see cref="T:Northwoods.Go.Models.IModel"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.PartManager.DoModelDataChanged(Northwoods.Go.Models.ChangedEvent)">
            <summary>
            This is a temporary Model Changed event handler.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.DoModelChanged(Northwoods.Go.Models.ChangedEvent)">
            <summary>
            This function is called when the Diagram's <see cref="T:Northwoods.Go.Models.IModel"/> has changed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.UpdateAllTargetBindings(System.String)">
             <summary>
             Update all of the data-bound properties of <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Link"/>s in this diagram,
             without having to call <see cref="M:Northwoods.Go.Models.IModel.Set(System.Object,System.String,System.Object)"/>.
             </summary>
             <remarks>
             This copies/converts model data properties to set properties on <see cref="T:Northwoods.Go.Part"/>s.
             This method does not conduct a transaction, so you need to start and commit one yourself.
            
             It is better to call <see cref="M:Northwoods.Go.Models.IModel.Set(System.Object,System.String,System.Object)"/> to modify data properties,
             because that will both record changes for undo/redo and will update all bindings
             that make depend on that property.
             Simply modifying the data and calling an "update..." method will not be able to record
             the previous value(s) of properties in the model data to support undo.
            
             If you know which model data objects have been modified,
             it will be more efficient to update only the <see cref="T:Northwoods.Go.Part"/>s that need it
             by calling <see cref="M:Northwoods.Go.Panel.UpdateTargetBindings(System.String)"/>.
            
             To update relationships between nodes, call <see cref="M:Northwoods.Go.PartManager.UpdateAllRelationshipsFromData"/>.
             </remarks>
             <param name="srcprop">An optional source data property name:
               when provided, only evaluates those <see cref="T:Northwoods.Go.Models.Binding"/>s that use that particular property;
               when not provided or when it is the empty string, all bindings are evaluated.</param>
             <seealso cref="M:Northwoods.Go.PartManager.UpdateAllRelationshipsFromData"/>
        </member>
        <member name="M:Northwoods.Go.PartManager.UpdateAllRelationshipsFromData">
             <summary>
             Add or remove any nodes or links according to additional or missing data objects in the model
             and update all of the references to nodes, in case they had been modified in the model without
             properly notifying the model by calling <see cref="M:Northwoods.Go.Models.IModel.AddNodeData(System.Object)"/> or
             <see cref="M:Northwoods.Go.Models.ILinkDataModel.RemoveLinkData(System.Object)"/> or
             <see cref="M:Northwoods.Go.Models.IGroupModel.SetGroupKeyForData(System.Object,System.Object)"/> or
             <see cref="M:Northwoods.Go.Models.ILinkDataModel.SetNodeKeyForLinkData(System.Object,System.Object,System.Boolean)"/> or other similar methods.
             </summary>
             <remarks>
             This method does not conduct a transaction, so you need to start and commit one yourself.
            
             It is better to call <see cref="M:Northwoods.Go.Models.IModel.AddNodeData(System.Object)"/>, <see cref="M:Northwoods.Go.Models.IModel.RemoveNodeData(System.Object)"/>,
             <see cref="M:Northwoods.Go.Models.ILinkDataModel.AddLinkData(System.Object)"/>, <see cref="M:Northwoods.Go.Models.ILinkDataModel.RemoveLinkData(System.Object)"/>,
             <see cref="M:Northwoods.Go.Models.IModel.Set(System.Object,System.String,System.Object)"/>, and other model methods to add/remove/modify data,
             because those methods will both record changes for undo/redo and will update all bindings
             that make depend on that property.
             Simply modifying the data and calling an "update..." method will not be able to record
             the previous value(s) of properties in the model data to support undo.
            
             This only adds, removes, or updates the relationships between nodes and links,
             to have them reflect what is now declared in the model data.
             If you know which model data objects have been modified,
             it will be more efficient to update only the <see cref="T:Northwoods.Go.Part"/>s that need it
             by calling <see cref="M:Northwoods.Go.Part.UpdateRelationshipsFromData"/>.
            
             To update <see cref="T:Northwoods.Go.GraphObject"/> properties that are data bound, call <see cref="M:Northwoods.Go.Diagram.UpdateAllTargetBindings(System.String)"/>.
             </remarks>
             <seealso cref="M:Northwoods.Go.PartManager.UpdateAllTargetBindings(System.String)"/>
        </member>
        <member name="M:Northwoods.Go.PartManager.UpdateRelationshipsFromData(Northwoods.Go.Part)">
            <summary>
            Given a Part, update any relationships based on its data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.UpdateDataBindings(System.Object,System.String)">
            <summary>
            Re-evaluate a given binding on some Part associated with a data object.
            </summary>
            <remarks>
            This method can be overridden to handle bindings that may not be stored in data specific to a Part.
            An example would be a link binding stored on some node data in a TreeModel.
            We recommend calling the super method in any override.
            </remarks>
            <param name="data">the data object for which the binding will be re-evaluated</param>
            <param name="pname">the property name of the data to re-evaluate</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.FindPanelsForItem(System.Object)">
            <summary>
            Return an Array of item Panels that are bound to the given data.
            </summary>
            <remarks>
            There may be multiple container Panels whose .ItemList refers to the list holding this data.
            This assumes that a data object is not shared by different lists.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PartManager.ModifyItemList(Northwoods.Go.Models.ChangedEvent)">
            <summary>
            Support for ChangeType.Insert/Remove into/from item list for model data.
            </summary>
        </member>
        <member name="M:Northwoods.Go.PartManager.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Diagram,System.Boolean)">
            <summary>
            This method makes a copy of a collection of <see cref="T:Northwoods.Go.Part"/>s.
            This is not a command and thus does not perform a transaction nor does it raise a <see cref="T:Northwoods.Go.DiagramEvent"/>.
            </summary>
            <param name="coll">A collection of Parts.</param>
            <param name="destdiagram"> The destination diagram; if null, the copied parts are not added to this diagram.</param>
            <param name="check">Whether to check <see cref="M:Northwoods.Go.Part.CanCopy"/> on each part; the default value is false</param>
        </member>
        <member name="M:Northwoods.Go.PartManager.CopyPart(Northwoods.Go.Part,Northwoods.Go.Diagram,System.Collections.Generic.Dictionary{Northwoods.Go.Part,Northwoods.Go.Part},System.Boolean)">
            <summary>Undocumented</summary>
            <param name="part"></param>
            <param name="destdiagram"> The destination diagram; if null, the copied parts are not added to this diagram.</param>
            <param name="dict"></param>
            <param name="check"></param>
            <returns> null if not copied.</returns>
        </member>
        <member name="M:Northwoods.Go.PartManager.CopyPartData(Northwoods.Go.Part,Northwoods.Go.Diagram)">
            <summary>
            This method handles the data copying portion of copying a <see cref="T:Northwoods.Go.Part"/>.
            This method is called while copying parts, and should not be called by the user.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PartManager.Nodes">
            <summary>
            This read-only property returns a set of all <see cref="T:Northwoods.Go.Node"/>s and <see cref="T:Northwoods.Go.Group"/>s in the Diagram.
            </summary>
            <remarks>
            This includes both data-bound and unbound nodes,
            and both top-level nodes and nodes inside <see cref="T:Northwoods.Go.Group"/>s.
            All of the simple <see cref="T:Northwoods.Go.Part"/>s are accessible via the <see cref="P:Northwoods.Go.PartManager.Parts"/> property.
            </remarks>
            <seealso cref="M:Northwoods.Go.Diagram.FindTopLevelGroups"/>
            <seealso cref="M:Northwoods.Go.Diagram.FindTreeRoots"/>
        </member>
        <member name="P:Northwoods.Go.PartManager.Links">
            <summary>
            This read-only property returns a set of all <see cref="T:Northwoods.Go.Link"/>s in the Diagram.
            </summary>
            <remarks>
            This includes both data-bound and unbound links,
            and both top-level links and links inside <see cref="T:Northwoods.Go.Group"/>s.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.PartManager.Parts">
            <summary>
            This read-only property returns a set of all <see cref="T:Northwoods.Go.Part"/>s in the Diagram
            that are not <see cref="T:Northwoods.Go.Node"/>s or <see cref="T:Northwoods.Go.Link"/>s or <see cref="T:Northwoods.Go.Adornment"/>s.
            </summary>
            <remarks>
            This includes both data-bound and unbound parts,
            and both top-level parts and parts inside <see cref="T:Northwoods.Go.Group"/>s.
            Use the <see cref="P:Northwoods.Go.PartManager.Nodes"/> or <see cref="P:Northwoods.Go.PartManager.Links"/> properties for getting the
            collection of all <see cref="T:Northwoods.Go.Node"/>s or <see cref="T:Northwoods.Go.Link"/>s in the diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.PartManager.Diagram">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Diagram"/> for which this class manages <see cref="T:Northwoods.Go.Part"/>s.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PartManager.AddsToTemporaryLayer">
            <summary>
            Gets or sets whether newly added <see cref="T:Northwoods.Go.Part"/>s should be in a temporary <see cref="T:Northwoods.Go.Layer"/>.
            </summary>
            <remarks>
            This is used by the <see cref="T:Northwoods.Go.Tools.DraggingTool"/> to ensure bounds won't be improperly updated during drags.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Tools.IHasContextMenu">
            <summary>
            This simple interface is implemented by classes that allow for the use of a ContextMenu,
            namely <see cref="T:Northwoods.Go.Diagram"/> and <see cref="T:Northwoods.Go.GraphObject"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.IHasContextMenu.ContextMenu">
            <summary>
            A context menu to be shown.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.ContextMenuButtonInfo">
            <summary>
            This is only used when defining the default context menu
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuButtonInfo.#ctor(System.String,System.Action{Northwoods.Go.Diagram},System.Predicate{Northwoods.Go.Diagram})">
            <param name="text"></param>
            <param name="command"></param>
            <param name="visible"></param>
        </member>
        <member name="T:Northwoods.Go.Tools.ContextMenuTool">
             <summary>
             The ContextMenuTool is used to create and show a context menu.
             It automatically disables any browser context menu.
             </summary>
             <remarks>
             Define context menus on individual <see cref="T:Northwoods.Go.GraphObject"/>s by setting <see cref="P:Northwoods.Go.GraphObject.ContextMenu"/>.
             Define a context menu for the diagram background by setting <see cref="P:Northwoods.Go.Diagram.ContextMenu"/>.
            
             This tool is a standard mouse-down tool, the <see cref="P:Northwoods.Go.Tools.ToolManager.ContextMenuTool"/>.
            
             This tool does not utilize any tool handles.
             This tool does not modify the model or conduct any transaction,
             although any code invoked by context menu commands might do so.
            
             There are examples of customizing this tool in the
             <a href="../../samples/customContextMenu.Html">Custom Context Menu</a> and
             <a href="../../samples/htmlLightBoxContextMenu.Html">HTML LightBox Context Menu</a> samples.
            
             If you want to programmatically show a context menu for a particular GraphObject or for the
             whole diagram, call <see cref="M:Northwoods.Go.CommandHandler.ShowContextMenu(Northwoods.Go.Tools.IHasContextMenu)"/>.
             That command method is also invoked by the Menu key on the keyboard.
            
             Normally this shows a context menu (if available) on a right-mouse-up event.
             If you want it to happen on a right-mouse-down event, you'll need to move this tool
             from the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/> list to the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/> list:
             <code language="cs">
             myDiagram.ToolManager.MouseDownTools.Add(myDiagram.ToolManager.ReplaceTool("ContextMenu", null));
             </code>
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.ContextMenuTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "ContextMenu".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.CreateDefaultContextMenu">
            <summary>
            Creates the default context menu for touch systems
            Called on the first showDefaultContextMenu
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.CanStart">
             <summary>
             Return true if it's a single mouse right click that hasn't moved <see cref="M:Northwoods.Go.Tools.Tool.IsBeyondDragSize(System.Nullable{Northwoods.Go.Point},System.Nullable{Northwoods.Go.Point})"/>
             and that is on a <see cref="T:Northwoods.Go.GraphObject"/> with a <see cref="P:Northwoods.Go.GraphObject.ContextMenu"/>.
             This is also true if the mouse right click is in the diagram background
             and the diagram's <see cref="P:Northwoods.Go.Diagram.ContextMenu"/> is non-null.
             </summary>
             <remarks>
             On touch devices, a special default context menu will appear even if no object with a context menu is found.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.DoStart">
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.DoStop">
            Make sure any context menu has been removed.
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.FindElementWithContextMenu(Northwoods.Go.Tools.IHasContextMenu)">
            <summary>
            Find a <see cref="T:Northwoods.Go.GraphObject"/> at the current mouse point with a <see cref="P:Northwoods.Go.GraphObject.ContextMenu"/>,
            or return the <see cref="T:Northwoods.Go.Diagram"/> if there is a <see cref="P:Northwoods.Go.Diagram.ContextMenu"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="obj">Optional GraphObject with which to start searching for a context menu.
            If null, the Diagram will be used. If no argument is specified, this method will look for an element at the current mouse point.</param>
            <returns>something with a `ContextMenu`,
            or null if nothing can be found with a context menu at the current mouse point.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.DoActivate">
            <summary>
            Do nothing, activation is special and relies on DoMouseUp.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.DoMouseDown">
            <summary>
            Activate this but also execute the normal behavior that would happen on a mouse-up
            if this tool is in the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/> list.
            Perform <see cref="M:Northwoods.Go.Tools.ActionTool.DoMouseDown"/> if a ContextMenuButton was hit.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.DoMouseUp">
            <summary>
            If there is something found by <see cref="M:Northwoods.Go.Tools.ContextMenuTool.FindElementWithContextMenu(Northwoods.Go.Tools.IHasContextMenu)"/>,
            call <see cref="M:Northwoods.Go.Tools.ContextMenuTool.ShowContextMenu(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)"/> with that object"s <see cref="P:Northwoods.Go.GraphObject.ContextMenu"/>
            or the <see cref="P:Northwoods.Go.Diagram.ContextMenu"/>.
            </summary>
            <remarks>
            Once a context menu is being shown,
            if a click occurs on a part of the context menu, call <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseClick(System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject})"/>.
            Otherwise if the click occurs elsewhere, just stop this tool.
            Unlike most tools, the first mouse-up should not stop this tool.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.OpenMenu(System.Boolean,Northwoods.Go.Tools.IHasContextMenu)">
            <summary>
            Called by DoContextClick and CommandHandler.ShowContextMenu
            </summary>
            <param name="mouseUp">whether or not this was called by a real mouse(up) event</param>
            <param name="cmo"></param>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.DoMouseMove">
            <summary>
            Handle mouse-enter, mouse-over, and mouse-leave events, as well as tooltips.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.ShowContextMenu(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)">
             <summary>
             Show an <see cref="T:Northwoods.Go.IShowHidable"/> (such as an <see cref="T:Northwoods.Go.Adornment"/>) as a context menu.
             </summary>
             <remarks>
             This method is called by the context click (<see cref="M:Northwoods.Go.Tools.Tool.DoMouseDown"/>) and <see cref="M:Northwoods.Go.CommandHandler.ShowContextMenu(Northwoods.Go.Tools.IHasContextMenu)"/>.
             If you want to programmatically show a context menu for a particular GraphObject or for the
             whole diagram, do not call this method, which only does one small piece of the process of
             bringing up a context menu.
             Instead call <see cref="M:Northwoods.Go.CommandHandler.ShowContextMenu(Northwoods.Go.Tools.IHasContextMenu)"/>, which will start this tool
             and eventually call this method and handle additional input events.
            
             For <see cref="T:Northwoods.Go.Adornment"/> context menus: If the object's containing <see cref="T:Northwoods.Go.Part"/> is data-bound,
             this sets the context menu's `Part.Data` to the same value.
             The <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> property is set to the <see cref="T:Northwoods.Go.GraphObject"/> for which the menu is being shown.
            
             This method sets the <see cref="P:Northwoods.Go.Tools.ContextMenuTool.CurrentContextMenu"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="contextmenu"></param>
             <param name="obj">the <see cref="T:Northwoods.Go.GraphObject"/> for which the context menu is being shown;
             this is null if the contextmenu is being shown for the diagram background.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.PositionContextMenu(Northwoods.Go.Adornment,Northwoods.Go.GraphObject)">
             <summary>
             This is called by <see cref="M:Northwoods.Go.Tools.ContextMenuTool.ShowContextMenu(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)"/> to position the context menu within the viewport.
             </summary>
             <remarks>
             It normally goes just below the cursor.
             But if the mouse is too close to the right edge or the bottom edge of the viewport,
             it is positioned left and/or above the cursor.
            
             This method only operates if the context menu, an <see cref="T:Northwoods.Go.Adornment"/>, does not have a <see cref="P:Northwoods.Go.Adornment.Placeholder"/>.
             When there is a <see cref="T:Northwoods.Go.Placeholder"/> in the context menu, that Adornment is automatically positioned
             so that the Placeholder is positioned at the adorned object, the second argument to this method.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            
             If you override this method to position the context menu,
             the context menu has already been measured but not arranged,
             so you can use its <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> width and height
             but not its <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
             </remarks>
             <param name="contextmenu"></param>
             <param name="obj">The <see cref="T:Northwoods.Go.GraphObject"/> getting the context menu,
             or null if the context menu is for the diagram background.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.HideContextMenu">
            <summary>
            Hide any context menu.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.InitializeDefaultButtons">
            @hidden @internal
            <returns>
            a List of objects describing button functionality,
            each with the properties "Text", "Command", and "Visible".
            </returns>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.ShowDefaultContextMenu">
             <summary>
             This is the <see cref="M:Northwoods.Go.IShowHidable.Show(Northwoods.Go.GraphObject,Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)"/> method for the <see cref="P:Northwoods.Go.Tools.ContextMenuTool.DefaultTouchContextMenu"/>.
             </summary>
             <remarks>
             If the object's containing <see cref="T:Northwoods.Go.Part"/> is data-bound,
             set the context menu's `Part.Data` to the same value.
             The <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> property is set to the <see cref="T:Northwoods.Go.GraphObject"/>
             for which the menu is being shown.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a>
             for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ContextMenuTool.HideDefaultContextMenu">
            <summary>
            This is the <see cref="M:Northwoods.Go.IShowHidable.Hide(Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)"/> method for the <see cref="P:Northwoods.Go.Tools.ContextMenuTool.DefaultTouchContextMenu"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a>
            for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ContextMenuTool.CurrentContextMenu">
            <summary>
            Gets or sets the currently showing context menu, or null if there is none.
            </summary>
            <remarks>
            This is typically only set in <see cref="M:Northwoods.Go.Tools.ContextMenuTool.ShowContextMenu(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)"/> and not by the user.
            It is also typically set to null in <see cref="M:Northwoods.Go.Tools.ContextMenuTool.HideContextMenu"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ContextMenuTool.DefaultTouchContextMenu">
             <summary>
             Gets or sets the Adornment that acts as the default touch context menu.
             </summary>
             <remarks>
             On touch devices, this context menu will appear even there is no context menu defined.
            
             You can disable this functionality by setting this property to null.
            
             By default, this is null.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ContextMenuTool.CurrentElement">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GraphObject"/> found at the mouse point that has a context menu.
            </summary>
            <remarks>
            This property remembers the result returned by <see cref="M:Northwoods.Go.Tools.ContextMenuTool.FindElementWithContextMenu(Northwoods.Go.Tools.IHasContextMenu)"/> if it is a GraphObject.
            This value is passed to <see cref="M:Northwoods.Go.Tools.ContextMenuTool.ShowContextMenu(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)"/> as the second argument.
            The value will be null if the context menu is for the diagram rather than for a particular GraphObject.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ContextMenuTool.MouseDownPoint">
            <summary>
            This read-only property returns the original mouse-down point in document coordinates.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.DraggingTool">
             <summary>
             The DraggingTool is used to move or copy selected parts with the mouse.
             This sets the <see cref="P:Northwoods.Go.Part.Location"/> property; you may want to save the location to the model
             by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "Location" property in your Parts/Nodes/Groups templates.
             </summary>
             <remarks>
             Dragging the selection moves parts for which <see cref="M:Northwoods.Go.Part.CanMove"/> is true.
             If the user holds down the Control key (Option key on Mac), this tool will make a copy of the parts being dragged,
             for those parts for which <see cref="M:Northwoods.Go.Part.CanCopy"/> is true.
            
             When the drag starts it calls <see cref="M:Northwoods.Go.Tools.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.DraggingOptions)"/> to find the actual collection
             of <see cref="T:Northwoods.Go.Part"/>s to be dragged.
             Normally this collection includes not only the <see cref="P:Northwoods.Go.Diagram.Selection"/>, but also parts that belong
             to those selected parts, such as members of groups.
             If <see cref="P:Northwoods.Go.Tools.DraggingTool.DragsTree"/> is true, the effective collection also includes all of the nodes and links that
             constitute the subtree starting from selected nodes.
             The result of <see cref="M:Northwoods.Go.Tools.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.DraggingOptions)"/> is a dictionary
             which remembers the original <see cref="P:Northwoods.Go.Part.Location"/> for all of the dragged parts.
             This dictionary is saved as the value of <see cref="P:Northwoods.Go.Tools.DraggingTool.DraggedParts"/>.
            
             During the drag if the user holds down the Control/Option key this tool makes a copy of the <see cref="P:Northwoods.Go.Tools.DraggingTool.DraggedParts"/>
             and proceeds to drag it around.
             (It only copies the <see cref="P:Northwoods.Go.Diagram.Selection"/>, not the whole effective collection,
             if <see cref="P:Northwoods.Go.Tools.DraggingTool.CopiesEffectiveCollection"/> is false.)
             The collection of copied parts is held by <see cref="P:Northwoods.Go.Tools.DraggingTool.CopiedParts"/>.
             It too is a dictionary remembering the original locations of the parts.
             <see cref="P:Northwoods.Go.Tools.DraggingTool.CopiedParts"/> will be null when this tool is moving (not copying) at the moment.
            
             Each Part's movement is limited by the <see cref="M:Northwoods.Go.Diagram.ComputeMove(Northwoods.Go.Part,Northwoods.Go.Point,Northwoods.Go.DraggingOptions)"/> method.
             By default it limits the <see cref="P:Northwoods.Go.Part.Location"/> to be within the bounds given by <see cref="P:Northwoods.Go.Part.MinLocation"/> and <see cref="P:Northwoods.Go.Part.MaxLocation"/>.
             (Those default to double.NegativeInfinity to double.PositiveInfinity.)
             As a further convenience, the value of NaN in MinLocation and MaxLocation cause <see cref="M:Northwoods.Go.Diagram.ComputeMove(Northwoods.Go.Part,Northwoods.Go.Point,Northwoods.Go.DraggingOptions)"/> to use the
             part's current location.
             So, for example, an easy way to declare that the user may only drag a node horizontally is to just set:
             <code language="cs">
             new Node {
               . . .
               MinLocation: new Point(double.NegativeInfinity, double.NaN), MaxLocation: new Point(double.PositiveInfinity, double.NaN) }
               . . .
             }
             </code>
            
             If you set <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/> to true, dragged or copied parts will be snapped to points on a grid.
             The snapping occurs continuously during a drag unless you set <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapRealtime"/> to false.
             Normally the grid points come from the <see cref="P:Northwoods.Go.Diagram.Grid"/>, even if that grid is not <see cref="P:Northwoods.Go.GraphObject.Visible"/>.
             However you can override those grid's properties for the snapping grid cell size and offset
             by setting the properties here: <see cref="P:Northwoods.Go.Tools.DraggingTool.GridSnapCellSize"/> and <see cref="P:Northwoods.Go.Tools.DraggingTool.GridSnapOrigin"/>.
             This computes the point to snap to for each dragged part.
             The resulting point is used as the new <see cref="P:Northwoods.Go.Part.Location"/>.
            
             For the most general control over where a part may be dragged, either set the <see cref="P:Northwoods.Go.Part.DragComputation"/> property
             or override <see cref="M:Northwoods.Go.Diagram.ComputeMove(Northwoods.Go.Part,Northwoods.Go.Point,Northwoods.Go.DraggingOptions)"/>.
             For the common case of wanting to keep member nodes within the <see cref="T:Northwoods.Go.Group"/> that they are members of,
             you can do something like:
             <code language="cs">
              // this is a Part.DragComputation function for limiting where a Node may be dragged
              static Point stayInGroup(Part part, Point pt, Point gridpt) {
                // don't constrain top-level nodes
                var grp = part.ContainingGroup;
                if (grp == null) return pt;
                // try to stay within the background Shape of the Group
                var back = grp.ResizeElement;
                if (back == null) return pt;
                // allow dragging a Node out of a Group if the Shift key is down
                if (part.Diagram.LastInput.Shift) return pt;
                var p1 = back.GetDocumentPoint(Spot.TopLeft);
                var p2 = back.GetDocumentPoint(Spot.BottomRight);
                var b = part.ActualBounds;
                var loc = part.Location;
                // find the padding inside the group's placeholder that is around the member parts
                var m = grp.Placeholder.Padding;
                // now limit the location appropriately, assuming no grid-snapping
                var x = Math.Max(p1.X + m.Left, Math.Min(pt.X, p2.X - m.Right - b.Width - 1)) + (loc.X - b.X);
                var y = Math.Max(p1.Y + m.Top, Math.Min(pt.Y, p2.Y - m.Bottom - b.Height - 1)) + (loc.Y - b.Y);
                return new Point(x, y);
              }
             </code>
             Note that this expects there to be a "SHAPE" object within the Group's visual tree that delimits
             where the part may be dragged within the group.
             This also expects that <see cref="P:Northwoods.Go.Group.ComputesBoundsIncludingLinks"/> is false.
             Then in your node template(s), just set:
             <code language="cs">
              new Node {
                . . .
                DragComputation = stayInGroup
                . . .
              }
             </code>
            
             This tool does not utilize any <see cref="T:Northwoods.Go.Adornment"/>s or tool handles.
             If the drag is successful, it raises the "SelectionMoved" or "SelectionCopied" <see cref="T:Northwoods.Go.DiagramEvent"/>
             and produces a "Move" or a "Copy" transaction.
            
             If you want to programmatically start a new user's dragging of a particular existing node,
             you can make sure that node is selected, set the <see cref="P:Northwoods.Go.Tools.DraggingTool.CurrentPart"/> property, and then start and activate the tool.
             <code language="cs">
               var node = ...;
               myDiagram.Select(node);        // in this case the only selected node
               var tool = myDiagram.ToolManager.DraggingTool;
               tool.CurrentPart = node;       // the DraggingTool will not call StandardMouseSelect
               myDiagram.CurrentTool = tool;  // starts the DraggingTool
               tool.DoActivate();             // activates the DraggingTool
             </code>
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.DraggingTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "Dragging".
             </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.IsCopyEnabled">
             <summary>
             Gets or sets whether any internal copying operation is permitted by control-drag-and-drop.
             </summary>
             <remarks>
             This property affects the behavior of <see cref="M:Northwoods.Go.Tools.DraggingTool.MayCopy"/>,
             but does not affect whether copied objects may be dropped into this diagram from a different diagram.
            
             The default value is true.
             Setting this property does not raise any events.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.CopiesEffectiveCollection">
             <summary>
             Gets or sets whether for a copying operation the extended selection
             is copied or only the selected parts.
             </summary>
             <remarks>
             The default value is true.
             Setting this property does not raise any events.
            
             The <see cref="P:Northwoods.Go.CommandHandler.CopiesConnectedLinks"/> property serves a similar role for the <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> command,
             when the user types control-C to copy the currently selected parts.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.DragOptions">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Tools.DraggingTool"/>'s <see cref="T:Northwoods.Go.DraggingOptions"/> instance, which controls several dragging properties.
             </summary>
             <remarks>
             Several DraggingTool properties are just convenience properties:
               - <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/>
               - <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapRealtime"/>
               - <see cref="P:Northwoods.Go.Tools.DraggingTool.GridSnapCellSize"/>
               - <see cref="P:Northwoods.Go.Tools.DraggingTool.GridSnapCellSpot"/>
               - <see cref="P:Northwoods.Go.Tools.DraggingTool.GridSnapOrigin"/>
               - <see cref="P:Northwoods.Go.Tools.DraggingTool.DragsLink"/>
               - <see cref="P:Northwoods.Go.Tools.DraggingTool.DragsTree"/>
            
             Setting any of these properties really sets the corresponding dragOptions property.
            
             Setting this property does not raise any events.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled">
             <summary>
             Gets or sets whether the <see cref="T:Northwoods.Go.Tools.DraggingTool"/> snaps objects to grid points.
             </summary>
             <remarks>
             Whether the snapping movement of the dragged parts occurs during the drag or only upon a drop
             is determined by the value of <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapRealtime"/>.
            
             This property does not affect dragging disconnected links,
             but those links to respect the <see cref="P:Northwoods.Go.Part.DragComputation"/>, which can be used to snap them.
            
             By default this property is false.
             Setting this property does not raise any events.
            
             This property is a convenience getter/setter, and sets a value on <see cref="P:Northwoods.Go.Tools.DraggingTool.DragOptions"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.IsComplexRoutingRealtime">
            <summary>
            Gets or sets whether link routing takes some short-cuts during dragging.
            </summary>
            <remarks>
            When false, Links whose routing is AvoidsNodes are not routed to avoid Nodes, in order to improve dragging performance.
            The default value is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapRealtime">
             <summary>
             Gets or sets whether the <see cref="T:Northwoods.Go.Tools.DraggingTool"/> snaps objects to grid points during the drag.
             </summary>
             <remarks>
             This property is ignored unless <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/> is true.
             By default this property is true; when false parts are only snapped to grid locations upon the drop (i.e. mouse-up).
             Setting this property does not raise any events.
            
             This property is a convenience getter/setter, and sets a value on <see cref="P:Northwoods.Go.Tools.DraggingTool.DragOptions"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.GridSnapCellSize">
             <summary>
             Gets or sets the size of the grid cell used when snapping during a drag
             if the value of <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/> is true.
             </summary>
             <remarks>
             By default this property is the Size(NaN, NaN), which causes this tool to use the <see cref="P:Northwoods.Go.Panel.GridCellSize"/> value of the <see cref="P:Northwoods.Go.Diagram.Grid"/>.
             Setting this property does not raise any events.
            
             This property is a convenience getter/setter, and sets a value on <see cref="P:Northwoods.Go.Tools.DraggingTool.DragOptions"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.GridSnapCellSpot">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Spot"/> that specifies what point in the grid cell dragged parts snap to,
             if the value of <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/> is true.
             </summary>
             <remarks>
             By default this property is <see cref="F:Northwoods.Go.Spot.TopLeft"/>:
             node locations will snap exactly to the grid point.
             Setting this property does not raise any events.
            
             This property is a convenience getter/setter, and sets a value on <see cref="P:Northwoods.Go.Tools.DraggingTool.DragOptions"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.GridSnapOrigin">
             <summary>
             Gets or sets the snapping grid's origin point, in document coordinates,
             if the value of <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/> is true.
             </summary>
             <remarks>
             By default this property is the Point(NaN, NaN),
             which causes this tool to use the <see cref="P:Northwoods.Go.Panel.GridOrigin"/> value from the <see cref="P:Northwoods.Go.Diagram.Grid"/>.
             Setting this property does not raise any events.
            
             This property is a convenience getter/setter, and sets a value on <see cref="P:Northwoods.Go.Tools.DraggingTool.DragOptions"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.DragsLink">
             <summary>
             Gets or sets whether the user can drag a single <see cref="T:Northwoods.Go.Link"/>,
             disconnecting it from its connected nodes and possibly connecting it
             to valid ports when the link is dropped.
             </summary>
             <remarks>
             The default value is false.
             Setting this property does not raise any events.
            
             In order to avoid too many cases of having both ends of a dragged Link connect to the same node (if allowed),
             it is commonplace to decrease the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.PortGravity"/> to a smaller value such as 10 or 20.
            
             This property is a convenience getter/setter, and sets a value on <see cref="P:Northwoods.Go.Tools.DraggingTool.DragOptions"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.DragsTree">
             <summary>
             Gets or sets whether moving or copying a node also includes all of the
             node's tree children and their descendants, along with the links to those additional nodes.
             </summary>
             <remarks>
             The default value is false.
             Setting this property does not raise any events.
            
             The <see cref="P:Northwoods.Go.CommandHandler.CopiesTree"/> property serves a similar role for the <see cref="M:Northwoods.Go.CommandHandler.CopySelection"/> command,
             when the user types control-C to copy the currently selected parts.
            
             This property is a convenience getter/setter, and sets a value on <see cref="P:Northwoods.Go.Tools.DraggingTool.DragOptions"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.CopyCursor">
            <summary>
            The cursor to show when a drop is allowed and will result in a copy.
            </summary>
            <remarks>
            This defaults to "copy".
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.MoveCursor">
            <summary>
            The cursor to show when a drop is allowed and will result in a move.
            </summary>
            <remarks>
            This defaults to the empty string, which refers to the <see cref="P:Northwoods.Go.Diagram.DefaultCursor"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.NodropCursor">
            <summary>
            The cursor to show when a drop is not allowed.
            </summary>
            <remarks>
            This defaults to "no-drop".
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.CurrentPart">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Part"/> found at the mouse point.
            </summary>
            <remarks>
            This is normally set by a call to <see cref="M:Northwoods.Go.Tools.DraggingTool.StandardMouseSelect"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.CopiedParts">
             <summary>
             Gets or sets the collection of <see cref="T:Northwoods.Go.Part"/>s that this tool has copied.
             </summary>
             <remarks>
             The value is a dictionary mapping <see cref="T:Northwoods.Go.Part"/>s to DraggingInfo Objects
             that have a "Point" property remembering the original location of that Part.
             The value is null when moving instead of copying.
            
             <see cref="P:Northwoods.Go.Tools.DraggingTool.DraggedParts"/> provides the dictionary of Parts that are being moved and from which this collection was copied.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.DraggedParts">
             <summary>
             Gets or sets the collection of <see cref="T:Northwoods.Go.Part"/>s being moved.
             </summary>
             <remarks>
             The value is a dictionary mapping <see cref="T:Northwoods.Go.Part"/>s to DraggingInfo Objects
             that have a "Point" property remembering the original location of that Part.
            
             <see cref="P:Northwoods.Go.Tools.DraggingTool.CopiedParts"/> provides the dictionary of Parts that have been copied during a copying operation, if any.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.DraggingParts">
            <summary>
            (undocumented)
            This read-only property returns a collection that holds all of the Parts that are currently being dragged for either copying or moving.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.DraggedLink">
            @hidden @internal
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.Link"/> that may be dragged and reconnected
            when <see cref="P:Northwoods.Go.Tools.DraggingTool.DragsLink"/> is true.
            </summary>
            <remarks>
            This property is set during <see cref="M:Northwoods.Go.Tools.DraggingTool.DoActivate"/>.
            The default value is null.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.IsDragOutStarted">
             @hidden @internal
             <summary>
             Gets or sets whether a potentially external drag-and-drop has been started by this tool.
            </summary>
             <remarks>
             This property is set to true when starting a drag-and-drop in <see cref="M:Northwoods.Go.Tools.DraggingTool.DoDragOut"/>.
            
             The default value is false.
             Setting this property does not raise any events.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.StartPoint">
            <summary>
            Gets or sets the mouse point from which parts start to move.
            </summary>
            <remarks>
            The value is a Point in document coordinates.
            This property is normally set to the diagram's mouse-down point in <see cref="M:Northwoods.Go.Tools.DraggingTool.DoActivate"/>,
            but may be set to a different point if parts are being copied from a different control.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DraggingTool.Delay">
            <summary>
            On touch gestures only, this property gets or sets the TimeSpan
            for which the mouse must be stationary before this tool can be started.
            </summary>
            <remarks>
            The default value is 100 milliseconds.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.CanStart">
            <summary>
            This tool can run if the diagram allows selection and moves/copies/dragging-out,
            if the mouse has moved far enough away to be a drag and not a click,
            and if <see cref="M:Northwoods.Go.Tools.DraggingTool.FindDraggablePart"/> has found a selectable part at the mouse-down point.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.FindDraggablePart">
             <summary>
             Return the selectable and movable/copyable <see cref="T:Northwoods.Go.Part"/> at the mouse-down point.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.DraggingTool.CanStart"/> to decide if this tool is ready to run.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.StandardMouseSelect">
             <summary>
             This override prevents the Control modifier unselecting an already selected part.
             </summary>
             <remarks>
             This also remembers the selectable <see cref="P:Northwoods.Go.Tools.DraggingTool.CurrentPart"/> at the current mouse point.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoActivate">
             <summary>
             Start the dragging operation.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Tools.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.DraggingOptions)"/> and saves the result as <see cref="P:Northwoods.Go.Tools.DraggingTool.DraggedParts"/>.
            
             This starts a "Drag" transaction.
             Depending on what happens, the transaction may be finished as a "Move" or a "Copy"
             transaction, or it may be rolled-back if the tool is cancelled.
            
             Normally when this method is called the value of <see cref="P:Northwoods.Go.Tools.DraggingTool.CurrentPart"/> will be null,
             in which case this will call <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseSelect"/> which will set <see cref="P:Northwoods.Go.Tools.DraggingTool.CurrentPart"/>.
             But if when this method is called the value of <see cref="P:Northwoods.Go.Tools.DraggingTool.CurrentPart"/> has already been set
             because the programmer wants the user to start dragging that Part,
             then this method will not need to call <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseSelect"/> because
             the Part(s) to be selected and dragged have already been determined by the caller.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._CheckForDraggedLink(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.DraggingOptions)">
            <summary>
            By default, this just calls <see cref="M:Northwoods.Go.CommandHandler.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.DraggingOptions)"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="parts">A collection of <see cref="T:Northwoods.Go.Part"/>s.</param>
            <param name="options">Potential options for the collection computation</param>
            <returns>a dictionary mapping <see cref="T:Northwoods.Go.Part"/>s to DraggingInfo Objects
            that have a "Point" property remembering the original location of that Part.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._NewDraggingInfo(System.Nullable{Northwoods.Go.Point})">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoDeactivate">
            <summary>
            Stop the dragging operation by stopping the transaction and cleaning up any temporary state.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.StopTransaction">
            <summary>
            This calls the base <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/> method, and if the result is `true`,
            attempts to optimize the transaction by removing all changes except the first and last
            by calling <see cref="M:Northwoods.Go.Models.Transaction.Optimize"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>the result of the call to rollback or commit the transaction.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._StopEnterLeave">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._SourceCancel">
            @hidden @internal
            <summary>
            Called by DoSimulatedDragEnter to restore state in the source diagram without stopping the DraggingTool.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoCancel">
            <summary>
            Abort any dragging operation.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoKeyDown">
            <summary>
            Handle switching between copying and moving modes as the Control/Option key is pressed or released.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoKeyUp">
            <summary>
            Handle switching between copying and moving modes as the Control/Option key is pressed or released.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.ComputeLocations(System.Collections.Generic.IEnumerable{Northwoods.Go.Part})">
            @hidden @internal
            <param name="nodes">a collection of <see cref="T:Northwoods.Go.Part"/>s</param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.AddCopies(System.Boolean)">
            @hidden @internal
            <summary>
            When !Undoable, calls Diagram.CopyParts with Layer = "Tool"
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.RemoveCopies">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._CleanUpDraggedLink">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.MoveCollection(System.Collections.Generic.IDictionary{Northwoods.Go.Part,Northwoods.Go.DraggingInfo},System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.MoveParts(System.Collections.Generic.IDictionary{Northwoods.Go.Part,Northwoods.Go.DraggingInfo},Northwoods.Go.Point,System.Boolean)">
             <summary>
             Move a collection Map of <see cref="T:Northwoods.Go.Part"/>s by a given offset.
             </summary>
             <remarks>
             If *check* is true this respects the <see cref="M:Northwoods.Go.Part.CanMove"/> predicate for <see cref="T:Northwoods.Go.Node"/>s or simple <see cref="T:Northwoods.Go.Part"/>s
             when this is the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>.
             It also respects <see cref="P:Northwoods.Go.Tools.DraggingTool.IsGridSnapEnabled"/> in order to try to automatically snap part locations to a grid.
             And it also uses the <see cref="P:Northwoods.Go.Part.DragComputation"/> function, if any, to determine the new location for each part.
            
             The first argument is a dictionary as produced by <see cref="M:Northwoods.Go.Tools.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.DraggingOptions)"/>.
             Call <see cref="M:Northwoods.Go.Diagram.MoveParts(System.Collections.Generic.IEnumerable{Northwoods.Go.Part},Northwoods.Go.Point,System.Boolean,Northwoods.Go.DraggingOptions)"/> if you want to move a simple collection of Parts without having to create the argument Map.
             </remarks>
             <param name="parts">a Map mapping <see cref="T:Northwoods.Go.Part"/>s to DraggingInfo Objects
             that have a "Point" property remembering the original location of that Part.</param>
             <param name="offset">The offset, before snapping, to move parts.
             This offset reflects the total amount moved during tool operation,
             based on original Part locations remembered when the DraggingTool activated.</param>
             <param name="check">Whether to check <see cref="M:Northwoods.Go.Part.CanMove"/> on each part; the default value is false.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._RestoreOriginalLocations">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._IsDraggedElement(Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.InternalDragOver(Northwoods.Go.Point)">
             @hidden @internal
             <summary>
             Affect some stationary unselected parts that are under a given point, and consider auto-scrolling.
             </summary>
             <remarks>
             Look for a <see cref="T:Northwoods.Go.GraphObject"/> at the given point.
             If it is a different object, this calls <see cref="P:Northwoods.Go.GraphObject.MouseDragLeave"/> (if it is a function) on the previous object
             and <see cref="P:Northwoods.Go.GraphObject.MouseDragEnter"/> (if it is a function) on the new object.
             If there is no object at the given point, this calls <see cref="P:Northwoods.Go.Diagram.MouseDragOver"/> if that property is a function.
            
             This method also performs auto-scrolling, if <see cref="P:Northwoods.Go.Diagram.AllowHorizontalScroll"/> or <see cref="P:Northwoods.Go.Diagram.AllowVerticalScroll"/> is true.
             </remarks>
             <param name="pt">a Point in document coordinates.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.FindDragOverElement(Northwoods.Go.Point)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoUpdateCursor(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Update the Diagram.CurrentCursor if it hadn't been changed by an event handler earlier in InternalDragOver.
            </summary>
            <param name="obj">the non-temporary stationary GraphObject at the last mouse point; will be null over the diagram background</param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.EnterDragOverStack(Northwoods.Go.InputEvent,Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Walk up the visual tree or containing Groups and push them on the stack, outermost first.
            </summary>
            <param name="e">the current InputEvent</param>
            <param name="curr">the GraphObject at the current mouse point, might be null</param>
            <returns>true if any event handler was called</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.IsInPanelOrGroup(Northwoods.Go.GraphObject,Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Support bubbling of drag-and-drop events from member Parts to containing Groups.
            </summary>
            <param name="obj"></param>
            <param name="panel">normally a Panel, might be a Group</param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.FindPanelOrGroup(Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            Support bubbling of drag-and-drop events from member Parts to containing Groups.
            </summary>
            <returns>either a simple Panel or a Group</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._FindClosestValidPort(Northwoods.Go.Point,System.Boolean)">
            @hidden @internal
            <param name="p"></param>
            <param name="toend"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._UpdateDraggedLinkOverPorts(System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoDragOver(Northwoods.Go.Point,Northwoods.Go.GraphObject)">
            <summary>
            Perform any additional side-effects during a drag, whether an internal move or copy or an external drag,
            that may affect the existing non-moved object(s).
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="pt">a Point in document coordinates.</param>
            <param name="obj">the <see cref="T:Northwoods.Go.GraphObject"/> at the point,
            excluding what is being dragged or temporary objects;
            the argument may be null if the drag is occurring in the background of the diagram.
            Use <see cref="P:Northwoods.Go.GraphObject.Part"/> to get the <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Part"/> at the root of
            the visual tree of the stationary object.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.InternalDropOnto(Northwoods.Go.Point)">
             @hidden @internal
             <summary>
             Perform any additional side-effects after a drop.
             </summary>
             <remarks>
             This looks for a <see cref="T:Northwoods.Go.GraphObject"/> at the given point.
             If it finds one, this calls its <see cref="P:Northwoods.Go.GraphObject.MouseDrop"/> value if it is a function.
             Otherwise this calls the <see cref="P:Northwoods.Go.Diagram.MouseDrop"/> value if it is a function.
            
             This also reroutes "AvoidsNodes" links that intersect with the area(s) where the selection is dropped.
             </remarks>
             <param name="pt">a Point in document coordinates.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.MaybeDiagramMouseDrop(Northwoods.Go.InputEvent,Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            If the object is a top-level part that isn't a group, maybe run the diagram's MouseDrop.
            Called only by DraggingTool.InternalDropOnto.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.InvalidateAvoidsNodesLinks(Northwoods.Go.Diagram,Northwoods.Go.Node)">
            @hidden @internal
            <summary>
            Called only by DraggingTool.InternalDropOnto
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoDropOnto(Northwoods.Go.Point,Northwoods.Go.GraphObject)">
            <summary>
            Perform any additional side-effects after a drop, whether an internal move or copy or an external drop,
            that may affect the existing non-moved object(s).
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="pt">a Point in document coordinates.</param>
            <param name="obj">the <see cref="T:Northwoods.Go.GraphObject"/> where the drop occurred,
            excluding what was dropped or temporary objects;
            the argument may be null if the drop occurred in the background of the diagram.
            Use <see cref="P:Northwoods.Go.GraphObject.Part"/> to get the <see cref="T:Northwoods.Go.Node"/> or <see cref="T:Northwoods.Go.Part"/> at the root of
            the visual tree of the stationary object.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoMouseMove">
             <summary>
             Move the <see cref="P:Northwoods.Go.Tools.DraggingTool.DraggedParts"/> (or if copying, the <see cref="P:Northwoods.Go.Tools.DraggingTool.CopiedParts"/>) to follow the current mouse point.
             </summary>
             <remarks>
             If this creates any temporary parts, by default it adds them to the Tool layer.
            
             This calls <see cref="M:Northwoods.Go.Tools.DraggingTool.DoDragOver(Northwoods.Go.Point,Northwoods.Go.GraphObject)"/> for any side-effects on stationary parts.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoMouseUp">
             <summary>
             On a mouse-up, finish moving or copying the effective selection.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Tools.DraggingTool.DoDropOnto(Northwoods.Go.Point,Northwoods.Go.GraphObject)"/> for any side-effects on stationary parts.
            
             This also updates the diagram's bounds,
             raises a "SelectionCopied" or "SelectionMoved" DiagramEvent, and stops this tool.
            
             This method also raises the "ChangingSelection" and "ChangedSelection" diagram events.
             Changes are performed in a "Drag" transaction, but the "ChangedSelection" event is raised outside the transaction.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.SimulatedMouseMove(Northwoods.Go.InputEvent,Northwoods.Go.Point,Northwoods.Go.Diagram)">
            Called in MouseMove/TouchMove events, returns true or false depending on
            whether or not the mouse move is over another diagram (dragging tool target)
            that could receive a simulated mouse move.
            <summary>
            (undocumented)
            </summary>
            <param name="e"></param>
            <param name="modelpt"></param>
            <param name="overdiag">the diagram attached to the target of the mouse move event, if any.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.SimulatedMouseUp(Northwoods.Go.InputEvent,Northwoods.Go.Point,Northwoods.Go.Diagram)">
            Called by MouseUp/TouchEnd, returns true if the action occurs
            over a different (but valid) Diagram (dragging tool target)
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool._MaybeUpdateContainingGroups">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.MayCopy">
            <summary>
            This predicate is true when the diagram allows objects to be copied and inserted,
            and some object in the selection is copyable,
            and the user is holding down the Control key (Option key on Mac).
            </summary>
            <remarks>
            This method may be overridden, although in most cases it is easiest to set <see cref="P:Northwoods.Go.Part.Copyable"/>.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.MayDragOut">
            @hidden @internal
            <summary>
            This predicate is true when the diagram allows objects to be copied out of the diagram,
            and some object in the selection is copyable.
            </summary>
            <remarks>
            This method may be overridden, although in most cases it is easiest to set <see cref="P:Northwoods.Go.Part.Copyable"/>.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.MayMove">
            <summary>
            This predicate is true when the diagram allows objects to be moved,
            and some object in the selection is movable.
            </summary>
            <remarks>
            This method may be overridden, although in most cases it is easiest to set <see cref="P:Northwoods.Go.Part.Movable"/>.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.RememberDraggingTool">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.CleanUpDraggingTool">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.ComputeBorder(Northwoods.Go.Group,Northwoods.Go.Rect)">
            @hidden @internal
            called by Placeholder.ComputeBorder
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.MayDragIn">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoSimulatedDragEnter">
            @hidden @internal
            <summary>
            Called when entering a target diagram.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoSimulatedDragLeave">
            @hidden @internal
            <summary>
            Called when leaving a target diagram.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoSimulatedDragOver">
            @hidden @internal
            <summary>
            Called when moving the mouse over a target Diagram, after a call to doSimulatedDragEnter.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoSimulatedDrop">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.AddCopiesSim(System.Collections.Generic.HashSet{Northwoods.Go.Part},System.Boolean,Northwoods.Go.InputEvent)">
            @hidden @internal
            <summary>
            Nearly identical to AddCopies
            </summary>
            <param name="originals"></param> a collection of <see cref="T:Northwoods.Go.Part"/>s
            <param name="undoable"></param>
            <param name="startEvt"></param>
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoDragOut">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.DraggingTool.DoSimulatedDragOut">
            @hidden @internal
            <summary>
            Called on the original Diagram when the mouse is now over a different diagram.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.LinkingDirection">
            <summary>
            This enumeration specifies possible values for <seealso cref="P:Northwoods.Go.Tools.LinkingTool.Direction"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.LinkingDirection.Either">
            <summary>
            Users may draw new links in either direction.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.LinkingDirection.ForwardsOnly">
            <summary>
            Users may draw new links forwards only (i.e. from "from" node to "to" node).
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.LinkingDirection.BackwardsOnly">
            <summary>
            Users may draw new links backwards only (i.e. from "to" node to "from" node).
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.LinkingBaseTool">
             <summary>
             This abstract class is the base class for the <see cref="T:Northwoods.Go.Tools.LinkingTool"/> and <see cref="T:Northwoods.Go.Tools.RelinkingTool"/> classes.
             </summary>
             <remarks>
             This class includes properties for defining and accessing any temporary nodes and temporary link
             that are used during any linking operation, as well as access to the existing diagram's nodes and link
             (if any) that are involved with the linking operation.
            
             <p class="boxread">
             For a general discussion of link routing, see:
             <a href="../../intro/links.Html">Introduction to Links</a>,
             <a href="../../intro/linkLabels.Html">Introduction to Link Labels</a>, and
             <a href="../../intro/connectionPoints.Html">Introduction to Link Connection Points</a>.
             For customizing the linking tools, see <a href="../../intro/tools.Html#LinkingAndRelinkingTools">Introduction to the Linking Tools</a>.
             For customizing the reshaping of Links, see <a href="../../intro/tools.Html#LinkReshapingTool">Introduction to the LinkReshapingTool</a>.
             For a general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.#ctor">
            <summary>
            Don't construct this directly -- this is an abstract class.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.DoStop">
            @hidden @internal
            <summary>
            Clear out any temporary state.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.PortGravity">
            <summary>
            Gets or sets the distance at which link snapping occurs.
            </summary>
            <remarks>
            The default value is 100.0.
            The value must be non-negative.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.IsUnconnectedLinkValid">
            <summary>
            Gets or sets whether it is valid to have partly or completely unconnected links.
            </summary>
            <remarks>
            The default value is false -- the user cannot draw or reconnect a link to "nowhere".
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.LinkingCursor">
            <summary>
            Gets or sets the cursor used during the linking or relinking operation.
            </summary>
            <remarks>
            The default value is "pointer".
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryLink">
            <summary>
            Gets or sets the temporary <see cref="T:Northwoods.Go.Link"/> that is shown while the user is drawing or reconnecting a link.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryFromNode">
            <summary>
            Gets or sets the temporary <see cref="T:Northwoods.Go.Node"/> at the "from" end of the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryLink"/>
            while the user is drawing or reconnecting a link.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryFromPort">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GraphObject"/> that is the port at the "from" end of the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryLink"/>
            while the user is drawing or reconnecting a link.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryToNode">
            <summary>
            Gets or sets the temporary <see cref="T:Northwoods.Go.Node"/> at the "to" end of the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryLink"/>
            while the user is drawing or reconnecting a link.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryToPort">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GraphObject"/> that is the port at the "to" end of the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryLink"/>
            while the user is drawing or reconnecting a link.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink">
            <summary>
            Gets or sets the original <see cref="T:Northwoods.Go.Link"/> being reconnected by the <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalFromNode">
            <summary>
            Gets or sets the original <see cref="T:Northwoods.Go.Node"/> from which the new link is being drawn
            or from which the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/> was connected when being relinked.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalFromPort">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GraphObject"/> that is the port in the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalFromNode"/>.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalToNode">
            <summary>
            Gets or sets the original <see cref="T:Northwoods.Go.Node"/> to which the new link is being drawn
            or to which the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/> was connected when being relinked.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalToPort">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GraphObject"/> that is the port in the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalToNode"/>.
            </summary>
            <remarks>
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.IsForwards">
            <summary>
            Gets whether the linking operation is in the forwards direction,
            connecting from the "from" port to the "to" port.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.ValidPortsCache">
            @hidden @internal
            <summary>
            This read-only property returns the Map used to keep track of ports for which a link may be valid.
            </summary>
            <remarks>
            This remembers the results of calls to <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            The values are either true or false if known, or null if the validity is untested.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.TargetPort">
             <summary>
             Gets or sets a proposed <see cref="T:Northwoods.Go.GraphObject"/> port for connecting a link.
             </summary>
             <remarks>
             Whether this is a "to" port or a "from" port depends on the direction
             (<see cref="P:Northwoods.Go.Tools.LinkingBaseTool.IsForwards"/>) in which the link is being drawn or reconnected.
            
             This is set when the mouse is being dragged and when a mouse-up event occurs
             with the result of a call to <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.FindTargetPort(System.Boolean)"/>.
             Setting this property does not raise any events.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.CopyPortProperties(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)">
             <summary>
             Make a temporary port look and act like a real one.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.DoMouseMove"/> as the tool finds new valid target ports.
             If <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.FindTargetPort(System.Boolean)"/> returns null, it calls <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.SetNoTargetPortProperties(Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)"/> instead.
            
             If the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.PortTargeted"/> property is a function, that function is called.
             It is easier to customize the behavior by setting that functional property than it is to override
             this method and the <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.SetNoTargetPortProperties(Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)"/> method.
             But you may want to call this method to get the standard behavior for dynamically adapting
             the temporary node/port to "act like" the target port.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.SetNoTargetPortProperties(Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)">
             <summary>
             Reset a temporary port's properties to neutral values when there is no target port.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.DoMouseMove"/> when the tool finds no new valid target port.
             If <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.FindTargetPort(System.Boolean)"/> returns non-null, it calls <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.CopyPortProperties(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)"/> instead.
            
             If the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.PortTargeted"/> property is a function, that function is called with null values as the first two arguments.
             It is easier to customize the behavior by setting that functional property than it is to override
             this method and the <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.CopyPortProperties(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)"/> method.
             But you may want to call this method to get the standard behavior for dynamically adapting
             the temporary node/port to "act like" it is not connecting with any target port.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.DoMouseDown">
            @hidden @internal
            <summary>
            Call <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.DoMouseMove"/> in order to update any temporary nodes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.DoMouseMove">
             <summary>
             Mouse movement results in a temporary node moving to where a valid target port is located,
             or to where the mouse is if there is no valid target port nearby.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.FindTargetPort(System.Boolean)"/> to update the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TargetPort"/>
             given the new mouse point.
             If a valid target port is found this moves the temporary node/port and
             makes them appear like the target node/port by calling <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.CopyPortProperties(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)"/>.
             If no valid target port is found, this moves the temporary node to
             where the mouse currently is and removes any node/port appearance,
             by calling <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.SetNoTargetPortProperties(Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)"/>.
            
             This method may be overridden, but we recommend that you call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.FindValidLinkablePort(Northwoods.Go.GraphObject,System.Boolean)">
            @hidden @internal
            <summary>
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.FindTargetPort(System.Boolean)">
             <summary>
             Find a port with which the user could complete a valid link.
             </summary>
             <remarks>
             This finds objects near to the current mouse point for which a valid link connection is possible.
            
             For each port element found, this calls <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/> to find out if a link between
             the original node/port and the found node/port would be valid.
             The result is saved in a cache for faster decisions later during operation of this tool.
             The closest valid port is returned.
            
             This method may be overridden, but we recommend that you call this base method.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="toend">true if looking for a "to" port.</param>
             <returns>a valid port, or null if no such port is near the current mouse point
             within the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.PortGravity"/> distance.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidFrom(Northwoods.Go.Node,Northwoods.Go.GraphObject)">
             <summary>
             This predicate is true if it is permissible to connect a link from a given node/port.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             <p class="boxread">
             For a more general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
            
             This method may be overridden, but we recommend that you call this base method.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>
             False if the node is in a <see cref="T:Northwoods.Go.Layer"/> that does not <see cref="P:Northwoods.Go.Layer.AllowLink"/>.
             False if the port's <see cref="P:Northwoods.Go.GraphObject.FromLinkable"/> is either false or null.
             False if the double of links connected to the port would exceed the port's <see cref="P:Northwoods.Go.GraphObject.FromMaxLinks"/>.
             Otherwise true.
             </returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidTo(Northwoods.Go.Node,Northwoods.Go.GraphObject)">
             <summary>
             This predicate is true if it is permissible to connect a link to a given node/port.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             <p class="boxread">
             For a more general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
            
             This method may be overridden, but we recommend that you call this base method.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>
             False if the node is in a <see cref="T:Northwoods.Go.Layer"/> that does not <see cref="P:Northwoods.Go.Layer.AllowLink"/>.
             False if the port's <see cref="P:Northwoods.Go.GraphObject.ToLinkable"/> is either false or null.
             False if the double of links connected from the port would exceed the port's <see cref="P:Northwoods.Go.GraphObject.ToMaxLinks"/>.
             Otherwise true.
             </returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.IsInSameNode(Northwoods.Go.GraphObject,Northwoods.Go.GraphObject)">
             <summary>
             This predicate is true if both argument ports are in the same <see cref="T:Northwoods.Go.Node"/>.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             This method may be overridden, but we recommend that you call this base method.
             It is rare that you will want to override this method.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.IsLinked(Northwoods.Go.GraphObject,Northwoods.Go.GraphObject)">
             <summary>
             This predicate is true if there is a link in the diagram going from the given port to the given port.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             This method may be overridden, but we recommend that you call this base method.
             It is rare that you will want to override this method.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)">
             <summary>
             This predicate should be true when it is logically valid to connect a new link from
             one node/port to another node/port.
             </summary>
             <remarks>
             When this is called by the <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>, that tool sets <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/>
             to be the <see cref="T:Northwoods.Go.Link"/> being reconnected.
            
             <p class="boxread">
             For a more general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
            
             This method may be overridden, although it is usually much easier to just set <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.LinkValidation"/>
             or <see cref="P:Northwoods.Go.Node.LinkValidation"/> in order to add some application-specific link validation.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="fromnode">the "from" <see cref="T:Northwoods.Go.Node"/>.</param>
             <param name="fromport">the "from" <see cref="T:Northwoods.Go.GraphObject"/> port.</param>
             <param name="tonode">the "to" <see cref="T:Northwoods.Go.Node"/>.</param>
             <param name="toport">the "to" <see cref="T:Northwoods.Go.GraphObject"/> port.</param>
             <returns>
             False if <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidFrom(Northwoods.Go.Node,Northwoods.Go.GraphObject)"/> is false for the "from" node/port.
             False if <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidTo(Northwoods.Go.Node,Northwoods.Go.GraphObject)"/> is false for the "to" node/port.
             False if <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsInSameNode(Northwoods.Go.GraphObject,Northwoods.Go.GraphObject)"/> is true unless <see cref="P:Northwoods.Go.GraphObject.FromLinkableSelfNode"/>
             and <see cref="P:Northwoods.Go.GraphObject.ToLinkableSelfNode"/> are true for the two ports.
             False if <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsLinked(Northwoods.Go.GraphObject,Northwoods.Go.GraphObject)"/> is true unless <see cref="P:Northwoods.Go.GraphObject.FromLinkableDuplicates"/>
             and <see cref="P:Northwoods.Go.GraphObject.ToLinkableDuplicates"/> are true for the two ports.
             False if trying to link to the link's own label node(s).
             If <see cref="P:Northwoods.Go.Node.LinkValidation"/> is a predicate on either or both of the "from" node and the "to" node,
             the predicate is called and if it returns false, this predicate returns false.
             If <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.LinkValidation"/> is a predicate and if it returns false, this predicate returns false.
             Otherwise this predicate is true.
             </returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.IsLabelDependentOnLink(Northwoods.Go.Node,Northwoods.Go.Link)">
             @hidden @internal
             <summary>
             Undocumented
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             This method may be overridden, but we recommend that you call this base method.
             It is rare that you will want to override this method.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>
             False if the node is not a link label node.
             True if the node is a label on the link (i.e. if the link owns the node).
             Otherwise true if the label node is on a link whose from or to node is dependent on the link.
             </returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool._IsLinkDependent(Northwoods.Go.Link,Northwoods.Go.Link,System.Collections.Generic.HashSet{Northwoods.Go.Node})">
            @hidden @internal
            <summary>
            False if the node is not a link label node.
            True if the node is a label on the link (i.e. if the link owns the node).
            Otherwise true if the label node is on a link whose from or to node is dependent on the link.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidCycle(Northwoods.Go.Node,Northwoods.Go.Node,Northwoods.Go.Link)">
             <summary>
             Checks whether a proposed link would be valid according to <see cref="P:Northwoods.Go.Diagram.ValidCycle"/>.
             </summary>
             <remarks>
             This does not distinguish between different ports on a node, so this method does not need to take port arguments.
             This is called by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
            
             This method may be overridden, but we recommend that you call this base method.
             It is rare that you will want to override this method.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="from"></param>
             <param name="to"></param>
             <param name="ignore"></param> may be null; this is useful during relinking to ignore the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool._MakesDirectedCycleFast(Northwoods.Go.Node,Northwoods.Go.Node,Northwoods.Go.Link,System.Boolean)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool._MakesDirectedCycle(Northwoods.Go.Node,Northwoods.Go.Node,Northwoods.Go.Link)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool._MakesDirectedCycle1(System.Collections.Generic.HashSet{Northwoods.Go.Node},Northwoods.Go.Node,Northwoods.Go.Node,Northwoods.Go.Link)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool._MakesUndirectedCycle(Northwoods.Go.Node,Northwoods.Go.Node,Northwoods.Go.Link)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingBaseTool._MakesUndirectedCycle1(System.Collections.Generic.HashSet{Northwoods.Go.Node},Northwoods.Go.Node,Northwoods.Go.Node,Northwoods.Go.Link)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.LinkValidation">
             <summary>
             Gets or sets a predicate that determines whether or not a new link between two ports would be valid.
             </summary>
             <remarks>
             This predicate is called in addition to the normal link checking performed by <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>
             and any <see cref="P:Northwoods.Go.Node.LinkValidation"/> predicates on the "from" and "to" nodes.
             When relinking, the <see cref="T:Northwoods.Go.Link"/> being considered for reconnection is passed as the fifth argument.
             The default predicate is null, which is equivalent to simply returning true.
            
             <p class="boxread">
             For a more general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
            
             The function, if supplied, must not have any side-effects.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingBaseTool.PortTargeted">
             <summary>
             Gets or sets a function that is called as the tool targets the nearest valid port.
             </summary>
             <remarks>
             The first two arguments specify the port by providing the <see cref="T:Northwoods.Go.Node"/> that it is in
             and the <see cref="T:Northwoods.Go.GraphObject"/> that is the actual port object.
             The next two arguments are the temporary port that has been moved and styled to be like the valid port.
             These values will be either the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryToNode"/> and <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryToPort"/>
             or the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryFromNode"/> and <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryFromPort"/>, depending on
             which end of the temporary link is being updated.
             The fifth argument is true if the target port represents a potential "to" end of a link;
             it is false if it is for the "from" end of a link.
            
             When there is no valid port within the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.PortGravity"/>, the first two arguments are null.
            
             The function, if supplied, must not add or remove any links or nodes or port objects,
             nor may it change the validity of any potential link connection.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.Tools.LinkingTool">
             <summary>
             The LinkingTool lets a user draw a new <see cref="T:Northwoods.Go.Link"/> between two ports,
             using a mouse-drag operation.
             </summary>
             <remarks>
             By default an instance of this tool is installed as a mouse-move tool in the
             <see cref="P:Northwoods.Go.Diagram.ToolManager"/> as the <see cref="P:Northwoods.Go.Tools.ToolManager.LinkingTool"/>.
             However this tool may be used modally, as described below.
            
             <see cref="M:Northwoods.Go.Tools.LinkingTool.CanStart"/> calls <see cref="M:Northwoods.Go.Tools.LinkingTool.FindLinkablePort"/> to find a valid "port" element
             from which (or to which) the user may interactively draw a new link.
             <see cref="M:Northwoods.Go.Tools.LinkingTool.DoActivate"/> sets up a temporary link and two temporary nodes,
             one at the start port and one following the mouse.
            
             <p class="boxread">
             For a general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
            
             This tool does not utilize any <see cref="T:Northwoods.Go.Adornment"/>s or tool handles.
            
             This tool conducts a transaction while the tool is active.
             A successful linking will result in a "LinkDrawn" <see cref="T:Northwoods.Go.DiagramEvent"/> and a "Linking" transaction.
            
             If you want to programmatically start a new user mouse-gesture to draw a new link
             from a given <see cref="T:Northwoods.Go.GraphObject"/> that either is a "port" or may be within
             the visual tree of a "port", set the <see cref="P:Northwoods.Go.Tools.LinkingTool.StartElement"/> property
             to let <see cref="M:Northwoods.Go.Tools.LinkingTool.FindLinkablePort"/> find the real "port" element.
             Then start and activate this tool:
             <code language="cs">
               var tool = myDiagram.ToolManager.LinkingTool;
               tool.StartElement = ...;
               myDiagram.CurrentTool = tool;
               tool.DoActivate();
             </code>
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.LinkingTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "Linking".
             </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingTool.ArchetypeLinkData">
             <summary>
             Gets or sets a data object that is copied by <see cref="M:Northwoods.Go.Tools.LinkingTool.InsertLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>
             and added to the <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/> when creating a new <see cref="T:Northwoods.Go.Link"/>.
             </summary>
             <remarks>
             The default value is an empty Object, which will be copied.
             The value must be an Object for the linking operation to succeed.
             A null value will cause <see cref="M:Northwoods.Go.Tools.LinkingTool.InsertLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/> to fail.
            
             The copied link data's <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromKeyProperty"/>
             and <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToKeyProperty"/> properties are set to
             the corresponding node's data's key values.
             If the ports have <see cref="P:Northwoods.Go.GraphObject.PortId"/> values that are not null,
             the link data's <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkFromPortIdProperty"/>
             and <see cref="P:Northwoods.Go.Models.GraphLinksModel`6.LinkToPortIdProperty"/> properties are also set.
            
             Setting this property does not raise any events.
             This property is ignored if the <see cref="P:Northwoods.Go.Diagram.Model"/> is not a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingTool.ArchetypeLabelNodeData">
             <summary>
             Gets or sets an optional node data object representing a link label, that is copied by <see cref="M:Northwoods.Go.Tools.LinkingTool.InsertLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>
             and added to the <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/> when creating a new <see cref="T:Northwoods.Go.Link"/>.
             </summary>
             <remarks>
             The default value is null, which causes no such label node data to be added to the model
             along with the new link data.
            
             <see cref="M:Northwoods.Go.Tools.LinkingTool.InsertLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/> calls <see cref="M:Northwoods.Go.Models.GraphLinksModel`6.AddLabelKeyForLinkData(`3,`1)"/>
             to associate the label node data with the link data.
            
             Setting this property does not raise any events.
             This property is ignored if the <see cref="P:Northwoods.Go.Diagram.Model"/> is not a <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingTool.Direction">
            <summary>
            Gets or sets the direction in which new links may be drawn.
            </summary>
            <remarks>
            Possible values are <see cref="F:Northwoods.Go.Tools.LinkingDirection.ForwardsOnly"/>, <see cref="F:Northwoods.Go.Tools.LinkingDirection.BackwardsOnly"/>, or <see cref="F:Northwoods.Go.Tools.LinkingDirection.Either"/>.
            This defaults to <see cref="F:Northwoods.Go.Tools.LinkingDirection.Either"/>.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkingTool.StartElement">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.GraphObject"/> at which <see cref="M:Northwoods.Go.Tools.LinkingTool.FindLinkablePort"/> should start its search.
             </summary>
             <remarks>
             The default value is null.
             Setting this property does not raise any events.
            
             If you want to explicitly start a new user mouse-gesture to draw a new link
             from a given <see cref="T:Northwoods.Go.GraphObject"/> that may be a "port" object or may be within
             the visual tree of a "port" object, set this property to that object
             to let <see cref="M:Northwoods.Go.Tools.LinkingTool.FindLinkablePort"/> find the real "port" object.
             Then start and activate this tool:
             <code language="cs">
               var tool = myDiagram.ToolManager.LinkingTool;
               tool.StartElement = ...;
               myDiagram.CurrentTool = tool;
               tool.DoActivate();
             </code>
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.CanStart">
            <summary>
            This tool can run when the diagram allows linking, the model is modifiable,
            the left-button mouse drag has moved far enough away to not be a click, and
            when <see cref="M:Northwoods.Go.Tools.LinkingTool.FindLinkablePort"/> has returned a valid port
            or when <see cref="P:Northwoods.Go.Tools.LinkingTool.StartElement"/> is a valid port.
            </summary>
            <remarks>
            This method may be overridden, but we recommend that you call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.FindLinkablePort">
             <summary>
             Return the <see cref="T:Northwoods.Go.GraphObject"/> at the mouse-down point,
             if it is part of a node and if it is valid to link with it.
             </summary>
             <remarks>
             This starts looking for a port at the <see cref="P:Northwoods.Go.Tools.LinkingTool.StartElement"/> if it is non-null,
             otherwise it looks for an element at the <see cref="P:Northwoods.Go.Diagram.FirstInput"/>'s <see cref="P:Northwoods.Go.InputEvent.DocumentPoint"/>.
             If it finds no element, or if the element it finds is not in a node, this method returns null.
             If it does find a port, it should set <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.IsForwards"/> to declare which direction the new link is being drawn.
            
             This method may be overridden, but we recommend that you call this base method.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>
             If the <see cref="P:Northwoods.Go.Tools.LinkingTool.Direction"/> is <see cref="F:Northwoods.Go.Tools.LinkingDirection.Either"/> or <see cref="F:Northwoods.Go.Tools.LinkingDirection.ForwardsOnly"/>,
             this checks the element and its parent <see cref="T:Northwoods.Go.Node"/> by calling <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidFrom(Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
             If the <see cref="P:Northwoods.Go.Tools.LinkingTool.Direction"/> is <see cref="F:Northwoods.Go.Tools.LinkingDirection.Either"/> or <see cref="F:Northwoods.Go.Tools.LinkingDirection.BackwardsOnly"/>,
             this checks the element and its parent <see cref="T:Northwoods.Go.Node"/> by calling <see cref="M:Northwoods.Go.Tools.LinkingBaseTool.IsValidTo(Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
             In either case finding a matching port will return that port and set <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.IsForwards"/> appropriately.
             Otherwise this will return null.
             </returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.DoActivate">
             <summary>
             Start the linking operation.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Tools.LinkingTool.FindLinkablePort"/> to find the port from which to start drawing a new link.
             If it is not set, it looks for a linkable port at the <see cref="P:Northwoods.Go.Diagram.FirstInput"/> point.
             If it finds one, it remembers it as the starting port, otherwise it stops this tool.
            
             It then starts a transaction, captures the mouse, and changes the cursor.
             Next it initializes and adds the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryFromNode"/>,
             <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryToNode"/>, and <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryLink"/> to the diagram.
             The temporary nodes that are positioned and sized to be like the real <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalFromPort"/>
             and <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalToPort"/> ports.
             The temporary link connects the two temporary ports, of course.
            
             This method may be overridden, but we recommend that you call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.DoDeactivate">
            <summary>
            Finishing the linking operation stops the transaction, releases the mouse, and resets the cursor.
            </summary>
            <remarks>
            This method may be overridden, but we recommend that you call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.DoStop">
            @hidden @internal
            <summary>
            Clean up tool state.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.DoMouseUp">
             <summary>
             A mouse-up ends the linking operation; if there is a valid <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TargetPort"/> nearby,
             this adds a new <see cref="T:Northwoods.Go.Link"/> by calling <see cref="M:Northwoods.Go.Tools.LinkingTool.InsertLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
             </summary>
             <remarks>
             If there is a new link, it is selected and the "LinkDrawn" <see cref="T:Northwoods.Go.DiagramEvent"/> is raised
             with the new link as the <see cref="P:Northwoods.Go.DiagramEvent.Subject"/>.
             If there is no new link, this calls <see cref="M:Northwoods.Go.Tools.LinkingTool.DoNoLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>.
             In any case this stops the tool.
            
             This method also raises the "ChangingSelection" and "ChangedSelection" diagram events.
             Changes are performed in a "Linking" transaction, but the "ChangedSelection" event is raised outside the transaction.
            
             This method may be overridden, but we recommend that you call this base method.
             It is usually easier to override <see cref="M:Northwoods.Go.Tools.LinkingTool.InsertLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/> or just set <see cref="P:Northwoods.Go.Tools.LinkingTool.ArchetypeLinkData"/>.
             It is also common to implement a "LinkDrawn" <see cref="T:Northwoods.Go.DiagramEvent"/> listener on the <see cref="T:Northwoods.Go.Diagram"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.IsNewTreeLink">
            @hidden @internal
            <summary>
            Note: this does not make an actual copy of a link template and bind the data to it,
            so any data binding of Link.IsTreeLink will not take effect to produce a more accurate answer.
            </summary>
            <returns>true iff a newly drawn Link will have Link.IsTreeLink true</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.InsertLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)">
             <summary>
             Make a copy of the <see cref="P:Northwoods.Go.Tools.LinkingTool.ArchetypeLinkData"/>, set its node and port properties, and add it to the <see cref="T:Northwoods.Go.Models.GraphLinksModel`6"/>.
             If the model is a <see cref="T:Northwoods.Go.Models.TreeModel`3"/>, set the parent key of the child's node data object.
             </summary>
             <remarks>
             For GraphLinksModels, if <see cref="P:Northwoods.Go.Tools.LinkingTool.ArchetypeLabelNodeData"/> is non-null, this method also adds that node data as an initial label node
             for the new link data.
            
             For TreeModels, if <see cref="P:Northwoods.Go.Diagram.IsTreePathToChildren"/> is false, the roles of the *fromnode* and *tonode* arguments are exchanged.
            
             This method may be overridden, but we recommend that you call this base method.
             Usually though it is easiest to just set <see cref="P:Northwoods.Go.Tools.LinkingTool.ArchetypeLinkData"/> to control what kind of link is created.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="fromnode"></param>
             <param name="fromport">the from-port, or null to use the node itself</param>
             <param name="tonode"></param>
             <param name="toport">the to-port, or null to use the node itself</param>
             <returns>the newly created Link, or null if it failed.</returns>
             <seealso cref="M:Northwoods.Go.Tools.LinkingTool.DoNoLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkingTool.DoNoLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)">
            <summary>
            This method is called upon a mouse up when no new link is drawn,
            either because no valid <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TargetPort"/> was found or because
            <see cref="M:Northwoods.Go.Tools.LinkingTool.InsertLink(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)"/> returned null.
            </summary>
            <remarks>
            This method may be overridden.  By default this method does nothing.
            If you want to successfully perform any side-effects, you will need to set <see cref="P:Northwoods.Go.Tools.Tool.TransactionResult"/> to a string;
            otherwise this tool's transaction will be rolled-back.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="fromnode"></param>
            <param name="fromport">the from-port, or null to use the node itself</param>
            <param name="tonode"></param>
            <param name="toport">the to-port, or null to use the node itself</param>
        </member>
        <member name="T:Northwoods.Go.Tools.RelinkingTool">
             <summary>
             The RelinkingTool allows the user to reconnect an existing <see cref="T:Northwoods.Go.Link"/>
             if the <see cref="P:Northwoods.Go.Link.RelinkableTo"/> and/or <see cref="P:Northwoods.Go.Link.RelinkableFrom"/> properties are true.
             </summary>
             <remarks>
             <p class="boxread">
             For a general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
            
             By default an instance of this tool is installed as a mouse-down tool in the
             <see cref="P:Northwoods.Go.Diagram.ToolManager"/> as the <see cref="P:Northwoods.Go.Tools.ToolManager.RelinkingTool"/>.
            
             This tool makes use of two <see cref="T:Northwoods.Go.Adornment"/>s,
             each including a relink handle (potentially one for each end of the link),
             shown when a link is selected.
            
             This tool conducts a transaction while the tool is active.
             A successful relinking will result in a "LinkRelinked" <see cref="T:Northwoods.Go.DiagramEvent"/> and a "Relinking" transaction.
            
             If you want to programmatically start a new user's relinking of a <see cref="T:Northwoods.Go.Link"/>,
             you can set the <see cref="P:Northwoods.Go.Tools.RelinkingTool.Handle"/> property to the specific "RelinkFrom" or "RelinkTo" handle and
             then start and activate the tool.
             <code language="cs">
               var tool = myDiagram.ToolManager.RelinkingTool;
               tool.OriginalLink = ...;   // specify which Link to have the user reconnect
               tool.IsForwards = true;    // specify which end of the Link to reconnect
               myDiagram.CurrentTool = tool;  // starts the RelinkingTool
               tool.DoActivate();             // activates the RelinkingTool
             </code>
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.RelinkingTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "Relinking".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.UpdateAdornments(Northwoods.Go.Part)">
             <summary>
             Show an <see cref="T:Northwoods.Go.Adornment"/> for each end of the <see cref="T:Northwoods.Go.Link"/> that the user may reconnect.
             </summary>
             <remarks>
             The Adornment may have a copy of <see cref="P:Northwoods.Go.Tools.RelinkingTool.FromHandleArchetype"/> and/or <see cref="P:Northwoods.Go.Tools.RelinkingTool.ToHandleArchetype"/>.
            
             This method may be overridden.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.MakeAdornment(Northwoods.Go.GraphObject,System.Boolean)">
            <summary>
            (undocumented)
            Create and return an <see cref="T:Northwoods.Go.Adornment"/> that lets the user grab a handle to reconnect one end of the selected link.
            </summary>
            <remarks>
            This method may be overridden, but we recommend that you call this base method.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="selelt">the <see cref="T:Northwoods.Go.GraphObject"/> of the <see cref="T:Northwoods.Go.Link"/> being relinked.</param>
            <param name="toend"></param>
        </member>
        <member name="P:Northwoods.Go.Tools.RelinkingTool.FromHandleArchetype">
             <summary>
             Gets or sets a small GraphObject that is copied as a relinking handle for the selected link path
             at the "from" end of the link.
             </summary>
             <remarks>
             By default this is a <see cref="T:Northwoods.Go.Shape"/> that is a small blue diamond.
             Setting this property does not raise any events.
            
             Here is an example of changing the default handle to be larger green triangles:
             <code language="cs">
              myDiagram.ToolManager.RelinkingTool.ToHandleArchetype =
                new Shape("Triangle") { Width = 10, Height = 10, Fill = "limegreen", SegmentIndex = 0 };
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.Tools.RelinkingTool.ToHandleArchetype"/>
        </member>
        <member name="P:Northwoods.Go.Tools.RelinkingTool.ToHandleArchetype">
             <summary>
             Gets or sets a small GraphObject that is copied as a relinking handle for the selected link path
             at the "to" end of the link.
             </summary>
             <remarks>
             By default this is a <see cref="T:Northwoods.Go.Shape"/> that is a small blue diamond.
             Setting this property does not raise any events.
            
             Here is an example of changing the default handle to be larger orange triangles:
             <code language="cs">
              myDiagram.ToolManager.RelinkingTool.ToHandleArchetype =
                new Shape("Triangle") { Width = 10, Height = 10, Fill = "orange", SegmentIndex = -1 };
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.Tools.RelinkingTool.FromHandleArchetype"/>
        </member>
        <member name="P:Northwoods.Go.Tools.RelinkingTool.Handle">
             <summary>
             Returns the <see cref="T:Northwoods.Go.GraphObject"/> that is the tool handle being dragged by the user.
             </summary>
             <remarks>
             This will be contained by an <see cref="T:Northwoods.Go.Adornment"/> whose category is "RelinkFrom" or "RelinkTo".
             Its <see cref="P:Northwoods.Go.Adornment.AdornedPart"/> is the same as the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/>.
            
             This property is also settable, but should only be set either within an override of <see cref="M:Northwoods.Go.Tools.RelinkingTool.DoActivate"/>
             or prior to calling <see cref="M:Northwoods.Go.Tools.RelinkingTool.DoActivate"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.CanStart">
            <summary>
            This tool can run when the diagram allows relinking, the model is modifiable,
            and there is a relink handle at the mouse-down point.
            </summary>
            <remarks>
            This method may be overridden, but we recommend that you call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.DoActivate">
             <summary>
             Start the relinking operation.
             </summary>
             <remarks>
             Find the relink handle by calling <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/>
             looking for either the "RelinkFrom" adornment or the "RelinkTo" adornment,
             saving the result in <see cref="P:Northwoods.Go.Tools.RelinkingTool.Handle"/>.
            
             Normally when this method is called the value of <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/> and <see cref="P:Northwoods.Go.Tools.RelinkingTool.Handle"/> will be null,
             resulting in a call to <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/> to find a "RelinkFrom" or "RelinkTo" tool handle,
             which is then remembered as the value of <see cref="P:Northwoods.Go.Tools.RelinkingTool.Handle"/>.
             If when this method is called the value of <see cref="P:Northwoods.Go.Tools.RelinkingTool.Handle"/> is already set,
             then there is no need to call <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/>,
             because the programmer has already set up which relinking handle they want the user to be relinking.
             Finding a handle is not necessary if <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/> and
             <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.IsForwards"/> have been set before calling this method.
            
             This starts a transaction, captures the mouse, and sets the cursor.
            
             If <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/> or <see cref="P:Northwoods.Go.Tools.RelinkingTool.Handle"/> was not set beforehand,
             the value of <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.IsForwards"/> is set depending on the category of the relink handle found.
             The <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/> property and various
             "Original..." port and node properties are set too.
             The temporary nodes and temporary link are also initialized.
            
             This method may be overridden, but we recommend that you call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.CopyLinkProperties(Northwoods.Go.Link,Northwoods.Go.Link)">
             <summary>
             Make a temporary link look and act like the real Link being relinked.
             </summary>
             <remarks>
             By default this method copies many of the routing-oriented properties
             from the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.OriginalLink"/> to the <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TemporaryLink"/>.
            
             This method may be overridden, but we recommend that you call this base method.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.DoDeactivate">
            <summary>
            Finishing the linking operation stops the transaction, releases the mouse, and resets the cursor.
            </summary>
            <remarks>
            This method may be overridden, but we recommend that you call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.DoStop">
            @hidden @internal
            <summary>
            Clean up tool state.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.DoMouseUp">
             <summary>
             A mouse-up ends the relinking operation; if there is a valid <see cref="P:Northwoods.Go.Tools.LinkingBaseTool.TargetPort"/> nearby,
             this modifies the old link to connect with the target port.
             </summary>
             <remarks>
             A successful relinking calls <see cref="M:Northwoods.Go.Tools.RelinkingTool.ReconnectLink(Northwoods.Go.Link,Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)"/> to actually change the link.
             The "LinkRelinked" <see cref="T:Northwoods.Go.DiagramEvent"/> is raised with the link as the <see cref="P:Northwoods.Go.DiagramEvent.Subject"/>
             and with the now-disconnected original port as the <see cref="P:Northwoods.Go.DiagramEvent.Parameter"/>.
             If the link was not reconnected, this calls <see cref="M:Northwoods.Go.Tools.RelinkingTool.DoNoRelink(Northwoods.Go.Link,System.Boolean)"/>.
             In any case this stops the tool.
            
             A failure to find a valid target port results in no changes and no DiagramEvent.
            
             This method may be overridden, but we recommend that you call this base method.
             You might find it easier to override <see cref="M:Northwoods.Go.Tools.RelinkingTool.ReconnectLink(Northwoods.Go.Link,Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)"/>.
             It is actually most common to implement a "LinkRelinked" <see cref="T:Northwoods.Go.DiagramEvent"/> listener on the <see cref="T:Northwoods.Go.Diagram"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.ReconnectLink(Northwoods.Go.Link,Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)">
            <summary>
            Modify an existing <see cref="T:Northwoods.Go.Link"/> to connect to a new node and port.
            </summary>
            <remarks>
            This method may be overridden, but we recommend that you call this base method.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="existinglink"></param>
            <param name="newnode">the <see cref="T:Northwoods.Go.Node"/> to connect to or from.</param>
            <param name="newport">the <see cref="T:Northwoods.Go.GraphObject"/> port to connect to or from.</param>
            <param name="toend">If true, this modifies the link's "to" node and port; otherwise it modifies the "from" node and port.</param>
            <returns>true if successful.</returns>
            <seealso cref="M:Northwoods.Go.Tools.RelinkingTool.DoNoRelink(Northwoods.Go.Link,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.DoNoRelink(Northwoods.Go.Link,System.Boolean)">
            <summary>
            This method is called upon a mouse up when <see cref="M:Northwoods.Go.Tools.RelinkingTool.ReconnectLink(Northwoods.Go.Link,Northwoods.Go.Node,Northwoods.Go.GraphObject,System.Boolean)"/> is not called.
            </summary>
            <remarks>
            This method may be overridden.  By default this method does nothing.
            If you want to successfully perform any side-effects, you will need to set <see cref="P:Northwoods.Go.Tools.Tool.TransactionResult"/> to a string;
            otherwise this tool's transaction will be rolled-back.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="existinglink"></param>
            <param name="toend">If true, the user was trying to modify the link's "to" node and port.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.DoDraggingMouseMove(Northwoods.Go.Node,Northwoods.Go.GraphObject,Northwoods.Go.Node,Northwoods.Go.GraphObject)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.RelinkingTool.StopDraggingMouseMove">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.Tools.ReshapingBehavior">
            <summary>
            This enumeration specifies possible values for <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.SetReshapingBehavior(Northwoods.Go.GraphObject,Northwoods.Go.Tools.ReshapingBehavior)"/>
            and <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.GetReshapingBehavior(Northwoods.Go.GraphObject)"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.ReshapingBehavior.None">
            <summary>
            Disallow dragging.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.ReshapingBehavior.Horizontal">
            <summary>
            Allow only horizontal (left-and-right) dragging.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.ReshapingBehavior.Vertical">
            <summary>
            Allow only vertical (up-and-down) dragging.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.ReshapingBehavior.All">
            <summary>
            Allow dragging in any direction.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.LinkReshapingTool">
             <summary>
             The LinkReshapingTool is used to interactively change the route of a <see cref="T:Northwoods.Go.Link"/>
             by setting its <see cref="P:Northwoods.Go.Link.Points"/> list.
             You may want to save the route to the model by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "Points" property of the Link.
             </summary>
             <remarks>
             This tool makes use of an <see cref="T:Northwoods.Go.Adornment"/>, shown when the adorned <see cref="T:Northwoods.Go.Link"/> is selected,
             that includes some number of reshape handles.
             This tool conducts a transaction while the tool is active.
             A successful reshaping will result in a "LinkReshaped" <see cref="T:Northwoods.Go.DiagramEvent"/> and a "LinkReshaping" transaction.
            
             <p class="boxread">
             For a general discussion of link routing, see:
             <a href="../../intro/links.Html">Introduction to Links</a>,
             <a href="../../intro/linkLabels.Html">Introduction to Link Labels</a>, and
             <a href="../../intro/connectionPoints.Html">Introduction to Link Connection Points</a>.
             For customizing the linking tools, see <a href="../../intro/tools.Html#LinkingAndRelinkingTools">Introduction to the Linking Tools</a>.
             For a general discussion of validation, see <a href="../../intro/validation.Html">Introduction to Validation</a>.
             </p>
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.LinkReshapingTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "LinkReshaping".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.GetReshapingBehavior(Northwoods.Go.GraphObject)">
            <summary>
            Get the permitted reshaping behavior for a particular reshape handle.
            </summary>
            <param name="obj">a reshape handle in the "LinkReshaping" Adornment.</param>
            <returns>one of ReshapingBehavior.All, .Vertical, .Horizontal, or .None</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.SetReshapingBehavior(Northwoods.Go.GraphObject,Northwoods.Go.Tools.ReshapingBehavior)">
            <summary>
            Set the permitted reshaping behavior for a particular reshape handle.
            </summary>
            <param name="obj">a reshape handle in the "LinkReshaping" Adornment.</param>
            <param name="behavior">one of ReshapingBehavior.All, .Vertical, .Horizontal, or .None</param>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.UpdateAdornments(Northwoods.Go.Part)">
            <summary>
            Show an <see cref="T:Northwoods.Go.Adornment"/> with reshape handles at each of the interesting points of the link's route,
            if the link is selected and visible and if <see cref="M:Northwoods.Go.Part.CanReshape"/> is true.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.MakeAdornment(Northwoods.Go.GraphObject)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.MakeHandle(Northwoods.Go.GraphObject,System.Double)">
             <summary>
             (undocumented)
             Create and return a <see cref="T:Northwoods.Go.GraphObject"/> that the user can "grab" to relink the selected Link.
             </summary>
             <remarks>
             By default this returns a copy of <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.HandleArchetype"/>, a <see cref="T:Northwoods.Go.Shape"/> that is a small blue rectangle.
            
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="pathshape">the <see cref="T:Northwoods.Go.GraphObject"/> path of the link being reshaped.</param>
             <param name="idx">the index of the route point to be moved.</param>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkReshapingTool.HandleArchetype">
             <summary>
             Gets or sets a small GraphObject that is copied as a reshape handle at each movable point in the selected link's route.
             </summary>
             <remarks>
             By default this is a <see cref="T:Northwoods.Go.Shape"/> that is a small blue rectangle.
             Setting this property does not raise any events.
            
             Here is an example of changing the default handles to be larger yellow circles:
             <code language="cs">
              myDiagram.ToolManager.LinkReshapingTool.HandleArchetype =
                new Shape("Circle") { Width = 10, Height = 10, Fill = "yellow" };
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.Tools.LinkReshapingTool.MidHandleArchetype"/>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.MakeResegmentHandle(Northwoods.Go.GraphObject,System.Double)">
             <summary>
             (undocumented)
             Create and return a <see cref="T:Northwoods.Go.GraphObject"/> that the user can "grab" to add a segment to the selected Link.
             </summary>
             <remarks>
             By default this returns a copy of <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.MidHandleArchetype"/>, a <see cref="T:Northwoods.Go.Shape"/> that is a small blue diamond.
            
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="pathshape">the <see cref="T:Northwoods.Go.GraphObject"/> path of the link being reshaped.</param>
             <param name="idx">the index of the route point to be moved.</param>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkReshapingTool.MidHandleArchetype">
             <summary>
             Gets or sets a small GraphObject that is copied as a resegment handle at each mid-point in the selected Link's route.
             </summary>
             <remarks>
             By default this is a <see cref="T:Northwoods.Go.Shape"/> that is a small blue diamond.
             Setting this property does not raise any events.
            
             Here is an example of changing the default handle to be larger cyan triangles:
             <code language="cs">
              myDiagram.ToolManager.LinkReshapingTool.MidHandleArchetype =
                new Shape("Triangle") { Width = 10, Height = 10, Fill = "cyan" };
             </code>
             </remarks>
             <seealso cref="P:Northwoods.Go.Tools.LinkReshapingTool.HandleArchetype"/>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkReshapingTool.Handle">
            <summary>
            Returns the <see cref="T:Northwoods.Go.GraphObject"/> that is the tool handle being dragged by the user.
            </summary>
            <remarks>
            This will be contained by an <see cref="T:Northwoods.Go.Adornment"/> whose category is "LinkReshaping".
            Its <see cref="P:Northwoods.Go.Adornment.AdornedPart"/> is the same as the <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.AdornedLink"/>.
            This is normally set by <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.DoActivate"/>, remembering the result of the call to <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkReshapingTool.AdornedLink">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Link"/> that is being routed manually.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.CanStart">
            <summary>
            This tool may run when there is a mouse-down event on a reshape handle.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.DoActivate">
            <summary>
            Start reshaping, if <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/> finds a reshape handle at the mouse down point.
            </summary>
            <remarks>
            If successful this sets <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.Handle"/> to be the reshape handle that it finds
            and <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.AdornedLink"/> to be the <see cref="T:Northwoods.Go.Link"/> being routed.
            It also remembers the original link route (a list of Points) in case this tool is cancelled.
            And it starts a transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.DoDeactivate">
            <summary>
            This stops the current reshaping operation with the link route shaped the way it is.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.StopTransaction">
            <summary>
            This calls the base <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/> method, and if the result is `true`,
            attempts to optimize the transaction by removing all changes except the first and last
            by calling <see cref="M:Northwoods.Go.Models.Transaction.Optimize"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>the result of the call to rollback or commit the transaction.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.DoCancel">
            <summary>
            Restore the link route to be the original points and stop this tool.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.GetResegmentingPoint">
             <summary>
             (undocumented)
             If the handle clicked during activation was a resegment handle, return the point at which to start a new segment.
             </summary>
             <remarks>
             By default this returns the center of the handle that was clicked.
            
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>the point where resegmenting begins</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.DoMouseMove">
            <summary>
            Call <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.Reshape(Northwoods.Go.Point)"/> with a new point determined by the mouse
            to change the route of the <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.AdornedLink"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.DoMouseUp">
            <summary>
            Reshape the route with a point based on the most recent mouse point by calling <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.Reshape(Northwoods.Go.Point)"/>,
            and then raise a "LinkReshaped" <see cref="T:Northwoods.Go.DiagramEvent"/> before stopping this tool.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.IsWithinResegmentingDistance(Northwoods.Go.Point,Northwoods.Go.Point)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.IsInLineOrtho(Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,Northwoods.Go.Point,System.Boolean)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Tools.LinkReshapingTool.ResegmentingDistance">
             @hidden @internal
             <summary>
             Gets or sets the distance from a straight line that controls whether a
             <see cref="P:Northwoods.Go.Link.Resegmentable"/> Link segment is kept as a separate segment or
             removed to form a straight segment of the adjacent points.
            </summary>
             <remarks>
             The default value is 3.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.Reshape(Northwoods.Go.Point)">
             <summary>
             Change the route of the <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.AdornedLink"/> by moving the point corresponding to the current
             <see cref="P:Northwoods.Go.Tools.LinkReshapingTool.Handle"/> to be at the given <see cref="T:Northwoods.Go.Point"/>.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.DoMouseMove"/> and <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.DoMouseUp"/> with the result of calling
             <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.ComputeReshape(Northwoods.Go.Point)"/> to constrain the input point.
            
             This method respects the orthogonality of the link, if necessary limiting movement along only one axis.
             To maintain orthogonality it may need to modify more than one point in the route.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             @expose
             <param name="newPoint">the value of the call to <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.ComputeReshape(Northwoods.Go.Point)"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.LinkReshapingTool.ComputeReshape(Northwoods.Go.Point)">
            <summary>
            This is called by <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.DoMouseMove"/> and <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.DoMouseUp"/> to limit the input point
            before calling <see cref="M:Northwoods.Go.Tools.LinkReshapingTool.Reshape(Northwoods.Go.Point)"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="p">the point where the handle is being dragged.</param>
            <returns>Either the same Point p or one constrained by the reshape behavior to be moved
            only vertically or only horizontally.</returns>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkReshapingTool.OriginalPoint">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Point"/> that was the original location of the handle that is being dragged to reshape the Link.
            </summary>
            <remarks>
            This value is null if the tool hasn't activated or the handle's location didn't correspond with a value from <see cref="P:Northwoods.Go.Link.Points"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.LinkReshapingTool.OriginalPoints">
            <summary>
            This read-only property returns the read-only collection of <see cref="T:Northwoods.Go.Point"/>s that was the original route of the Link that is being reshaped.
            </summary>
            <remarks>
            This List should not be modified; its value is indeterminate until a reshaping has been activated.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Tools.ResizingTool">
             <summary>
             The ResizingTool is used to interactively change the size of a <see cref="T:Northwoods.Go.GraphObject"/>
             in the selected <see cref="T:Northwoods.Go.Part"/> or <see cref="T:Northwoods.Go.Node"/> by setting its <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> property.
             You may want to save the size to the model by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "DesiredSize" property
             of the GraphObject that is named by <see cref="P:Northwoods.Go.Part.ResizeElementName"/>.
             This tool does not operate on <see cref="T:Northwoods.Go.Link"/>s.
             </summary>
             <remarks>
             You can limit the permitted minimum and maximum dimensions by setting
             <see cref="P:Northwoods.Go.Tools.ResizingTool.MinSize"/> and <see cref="P:Northwoods.Go.Tools.ResizingTool.MaxSize"/>.
             The resizing will also respect the <see cref="P:Northwoods.Go.GraphObject.MinSize"/> and
             <see cref="P:Northwoods.Go.GraphObject.MaxSize"/> properties.
             Width or height values that are NaN do not constrain the resizing.
             Override <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeMinSize"/> and/or <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeMaxSize"/> to change this behavior.
            
             You can also limit the width and/or height to be multiples of a particular size by
             setting <see cref="P:Northwoods.Go.Part.ResizeCellSize"/>.
             If either or both of these values are NaN, as they are by default,
             it will get the values from this tool's <see cref="P:Northwoods.Go.Tools.ResizingTool.CellSize"/>.
             Finally it will consider the <see cref="P:Northwoods.Go.Diagram.Grid"/>'s <see cref="P:Northwoods.Go.Panel.GridCellSize"/>
             if <see cref="P:Northwoods.Go.Tools.ResizingTool.IsGridSnapEnabled"/> is true.
             Override <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeCellSize"/> to change this behavior.
            
             Pressing the Shift key or resizing a <see cref="T:Northwoods.Go.Shape"/> with a <see cref="P:Northwoods.Go.Shape.GeometryStretch"/> of
             <see cref="F:Northwoods.Go.GeometryStretch.Uniform"/> will maintain the aspect ratio during the resize.
             Override <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeReshape"/> to change this behavior.
            
             This tool makes use of an <see cref="T:Northwoods.Go.Adornment"/>, shown when the <see cref="T:Northwoods.Go.Part"/> or <see cref="T:Northwoods.Go.Node"/> is selected,
             that includes some double of resize handles.
             The resize handles are normally copies of <see cref="P:Northwoods.Go.Tools.ResizingTool.HandleArchetype"/>,
             unless you specify a custom resize Adornment by setting <see cref="P:Northwoods.Go.Part.ResizeAdornmentTemplate"/>.
             The resize Adornment is normally a "Spot" Panel with eight resize handles,
             each with <see cref="P:Northwoods.Go.GraphObject.Alignment"/> set to one of the eight standard <see cref="T:Northwoods.Go.Spot"/> values --
             the four corners and the four side middles.
             The <see cref="P:Northwoods.Go.GraphObject.Alignment"/> is what identifies and distinguishes each of the handles and
             the behavior when the user drags the handle.
            
             This tool conducts a transaction while the tool is active.
             A successful resizing will result in a "PartResized" <see cref="T:Northwoods.Go.DiagramEvent"/> and a "Resizing" transaction.
            
             <p class="boxread">
             For a general discussion of the sizing of objects, see: <a href="../../intro/sizing.Html">Introduction to the sizing of GraphObjects</a>.
             For customizing the ResizingTool, see <a href="../../intro/tools.Html#ResizingTool">Introduction to the ResizingTool</a>.
             </p>
            
             If you want to programmatically start a user's resizing of the <see cref="P:Northwoods.Go.Part.ResizeElement"/> of an existing selected node,
             you can set the <see cref="P:Northwoods.Go.Tools.ResizingTool.Handle"/> property to the specific resize handle and then start and activate the tool.
             <code language="cs">
               var node = ...;
               myDiagram.Select(node);
               var adorn = node.FindAdornment("Resizing");
               var tool = myDiagram.ToolManager.ResizingTool;
               // specify which resize handle of the "Resizing" Adornment of the selected node
               tool.Handle = adorn.Elt(...);
               myDiagram.CurrentTool = tool;  // starts the ResizingTool
               tool.DoActivate();             // activates the ResizingTool
             </code>
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.ResizingTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "Resizing".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.UpdateAdornments(Northwoods.Go.Part)">
             <summary>
             Show an <see cref="T:Northwoods.Go.Adornment"/> with the resize handles at points along the edge of the bounds of the
             selected <see cref="T:Northwoods.Go.Part"/>'s <see cref="P:Northwoods.Go.Part.ResizeElement"/>.
             </summary>
             <remarks>
             First this finds the object in the visual tree of the Part that should
             get the resize adornment and that the user will be able to resize interactively.
             It finds the object that has the <see cref="P:Northwoods.Go.Part.ResizeElementName"/> property of the Part.
             If the <see cref="P:Northwoods.Go.Part.ResizeElementName"/> property is an empty string, as it is by default,
             it uses the whole part.
            
             It then builds the adornment, associating it with the chosen resize object.
             If <see cref="P:Northwoods.Go.Part.ResizeAdornmentTemplate"/> is non-null, it is copied.
             Otherwise it constructs a new Adornment with a <see cref="T:Northwoods.Go.Placeholder"/> and eight copies of <see cref="P:Northwoods.Go.Tools.ResizingTool.HandleArchetype"/>,
             four at the corners and four at the middle of each side.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.MakeAdornment(Northwoods.Go.GraphObject)">
             <summary>
             (undocumented)
             Create and return an <see cref="T:Northwoods.Go.Adornment"/> that lets the user grab a handle to resize the selected part.
             </summary>
             <remarks>
             The Adornment will be a "Spot" Panel with a <see cref="T:Northwoods.Go.Placeholder"/> and eight copies of <see cref="P:Northwoods.Go.Tools.ResizingTool.HandleArchetype"/>.
             Each handle will have one of the standard Spots as their <see cref="P:Northwoods.Go.GraphObject.Alignment"/>.
            
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="resizeObj">the <see cref="T:Northwoods.Go.GraphObject"/> being resized.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.MakeHandle(Northwoods.Go.GraphObject,Northwoods.Go.Spot)">
             <summary>
             (undocumented)
             Create and return a <see cref="T:Northwoods.Go.GraphObject"/> that the user can "grab" to resize an object in the selected part.
             </summary>
             <remarks>
             By default this returns a <see cref="T:Northwoods.Go.Shape"/> that is a small blue rectangle.
            
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="resizeObj">the <see cref="T:Northwoods.Go.GraphObject"/> to be resized, which may be the same as the whole Part.></param>
             <param name="spot"></param>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.UpdateResizeHandles(Northwoods.Go.GraphObject,System.Double)">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.SetResizeCursor(Northwoods.Go.GraphObject,System.Double)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.HandleArchetype">
             <summary>
             Gets or sets a small GraphObject that is copied as a resizing handle for the selected part.
             </summary>
             <remarks>
             By default this is a <see cref="T:Northwoods.Go.Shape"/> that is a small blue rectangle.
             Setting this property does not raise any events.
            
             Here is an example of changing the default handle to be larger yellow circles:
             <code language="cs">
              myDiagram.ToolManager.ResizingTool.HandleArchetype =
                new Shape("Circle") { Width = 10, Height = 10, Fill = "yellow" };
             </code>
            
             This property is ignored when a custom resizing Adornment is specified as the <see cref="P:Northwoods.Go.Part.ResizeAdornmentTemplate"/>.
             That property is normally null, in which case this tool will automatically construct Adornments
             holding eight copies of this handle archetype, each with a <see cref="P:Northwoods.Go.GraphObject.Alignment"/> being one of the
             standard eight <see cref="T:Northwoods.Go.Spot"/>s.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.Handle">
             <summary>
             Returns the <see cref="T:Northwoods.Go.GraphObject"/> that is the tool handle being dragged by the user.
             </summary>
             <remarks>
             This will be contained by an <see cref="T:Northwoods.Go.Adornment"/> whose category is "ResizingTool".
             Its <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> is the same as the <see cref="P:Northwoods.Go.Tools.ResizingTool.AdornedElement"/>.
             This is normally set by <see cref="M:Northwoods.Go.Tools.ResizingTool.DoActivate"/>, remembering the result of the call to <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/>.
            
             This property is also settable, but should only be set either within an override of <see cref="M:Northwoods.Go.Tools.ResizingTool.DoActivate"/>
             or prior to calling <see cref="M:Northwoods.Go.Tools.ResizingTool.DoActivate"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.AdornedElement">
             <summary>
             Gets the <see cref="T:Northwoods.Go.GraphObject"/> that is being resized.
             </summary>
             <remarks>
             This may be the same element as the selected <see cref="T:Northwoods.Go.Part"/> or it may be contained within that Part.
            
             This property is also settable, but should only be set when overriding functions
             in ResizingTool, and not during normal operation.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.CanStart">
            <summary>
            This tool may run when there is a mouse-down event on a resize handle,
            the diagram is not read-only and it allows resizing,
            the left mouse button is being used,
            and this tool's adornment's resize handle is at the current mouse point.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.DoActivate">
            <summary>
            Find the <see cref="P:Northwoods.Go.Tools.ResizingTool.Handle"/>, remember the object's original bounds,
            save the results of calling <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeMinSize"/>, <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeMaxSize"/>, and <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeCellSize"/>,
            capture the mouse, and start a transaction.
            </summary>
            <remarks>
            Normally when this method is called the value of <see cref="P:Northwoods.Go.Tools.ResizingTool.Handle"/> will be null,
            resulting in a call to <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/> to find a "Resizing" tool handle,
            which is then remembered as the value of <see cref="P:Northwoods.Go.Tools.ResizingTool.Handle"/>.
            If when this method is called the value of <see cref="P:Northwoods.Go.Tools.ResizingTool.Handle"/> is already set,
            then there is no need to call <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/>,
            because the programmer has already set up which resize handle they want the user to be resizing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.DoDeactivate">
            <summary>
            Stop the current transaction, forget the <see cref="P:Northwoods.Go.Tools.ResizingTool.Handle"/> and <see cref="P:Northwoods.Go.Tools.ResizingTool.AdornedElement"/>, and release the mouse.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.StopTransaction">
            <summary>
            This calls the base <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/> method, and if the result is `true`,
            attempts to optimize the transaction by removing all changes except the first and last
            by calling <see cref="M:Northwoods.Go.Models.Transaction.Optimize"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>the result of the call to rollback or commit the transaction.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.DoCancel">
            <summary>
            Restore the original size of the <see cref="T:Northwoods.Go.GraphObject"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.DoMouseMove">
             <summary>
             Call <see cref="M:Northwoods.Go.Tools.ResizingTool.Resize(Northwoods.Go.Rect)"/> with a new size determined by the current mouse point.
             </summary>
             <remarks>
             This determines the new bounds by calling <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeResize(Northwoods.Go.Point,Northwoods.Go.Spot,Northwoods.Go.Size,Northwoods.Go.Size,Northwoods.Go.Size,System.Boolean)"/>.
            
             When this calls <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeResize(Northwoods.Go.Point,Northwoods.Go.Spot,Northwoods.Go.Size,Northwoods.Go.Size,Northwoods.Go.Size,System.Boolean)"/> it passes as the reshape argument the result of calling <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeReshape"/>.
             The min, max, and cell arguments will be the saved results of <see cref="M:Northwoods.Go.Tools.ResizingTool.DoActivate"/>'s calls to <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeMinSize"/>, <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeMaxSize"/>, and <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeCellSize"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.DoMouseUp">
             <summary>
             Call <see cref="M:Northwoods.Go.Tools.ResizingTool.Resize(Northwoods.Go.Rect)"/> with the final bounds based on the most recent mouse point,
             commit the transaction, and raise the "PartResized" <see cref="T:Northwoods.Go.DiagramEvent"/>.
             </summary>
             <remarks>
             This determines the new bounds by calling <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeResize(Northwoods.Go.Point,Northwoods.Go.Spot,Northwoods.Go.Size,Northwoods.Go.Size,Northwoods.Go.Size,System.Boolean)"/>.
            
             When this calls <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeResize(Northwoods.Go.Point,Northwoods.Go.Spot,Northwoods.Go.Size,Northwoods.Go.Size,Northwoods.Go.Size,System.Boolean)"/> it passes as the reshape argument the result of calling <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeReshape"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.Resize(Northwoods.Go.Rect)">
             <summary>
             Change the size of the selected part's <see cref="P:Northwoods.Go.Part.ResizeElement"/> to have the given bounds.
             </summary>
             <remarks>
             This modifies its <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/> and maybe its <see cref="P:Northwoods.Go.Part.Location"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="newr">a Rectangle in the <see cref="P:Northwoods.Go.Tools.ResizingTool.AdornedElement"/>'s local coordinates, not in document coordinates</param>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.ComputeResize(Northwoods.Go.Point,Northwoods.Go.Spot,Northwoods.Go.Size,Northwoods.Go.Size,Northwoods.Go.Size,System.Boolean)">
            <summary>
            Given a <see cref="T:Northwoods.Go.Spot"/> in the original bounds of the object being resized and a new <see cref="T:Northwoods.Go.Point"/>,
            compute the new <see cref="T:Northwoods.Go.Rect"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="newPoint">a Point in local coordinates.</param>
            <param name="spot">the alignment spot of the handle being dragged.</param>
            <param name="min">the result of the call to <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeMinSize"/>.</param>
            <param name="max">the result of the call to <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeMaxSize"/>.</param>
            <param name="cell">the result of the call to <see cref="M:Northwoods.Go.Tools.ResizingTool.ComputeCellSize"/>.</param>
            <param name="reshape">true if the new size may change the aspect ratio from that of the natural bounds of the <see cref="P:Northwoods.Go.Tools.ResizingTool.AdornedElement"/>.</param>
            <returns>a Rectangle in the <see cref="P:Northwoods.Go.Tools.ResizingTool.AdornedElement"/>'s local coordinates, not in document coordinates</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.ComputeReshape">
             <summary>
             Decide whether to allow arbitrary reshaping or whether to keep the same aspect ratio of the object being resized.
             </summary>
             <remarks>
             If the <see cref="P:Northwoods.Go.Tools.ResizingTool.AdornedElement"/> is a <see cref="T:Northwoods.Go.Shape"/>,
             then if the <see cref="P:Northwoods.Go.Shape.GeometryStretch"/> is <see cref="F:Northwoods.Go.GeometryStretch.Uniform"/>,
             this method will return false to restrict reshaping to maintain the object's current ratio of height to width.
             Also, if the user is holding down the Shift key, this method will return false.
            
             This is called on each mouse-move and on mouse-up; the result is passed to the call to <see cref="M:Northwoods.Go.Tools.ResizingTool.Resize(Northwoods.Go.Rect)"/>.
             This permits the user to change the behavior dynamically during resizing.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            
             For example, to always keep the object's original aspect ratio, override this method to return false.
             When overriding the method dynamically:
             <code language="cs">
              public class MyResizingTool : ResizingTool {
                public override bool ComputeReshape() => false;
              }
             </code>
             Your override might want to look at the `this.AdornedElement.Part.Data` properties to decide whether to allow reshaping.
             </remarks>
             <returns>true to allow any aspect ratio; false to preserve the <see cref="P:Northwoods.Go.Tools.ResizingTool.AdornedElement"/>'s height/width ratio</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.ComputeMinSize">
             <summary>
             The effective minimum resizing size is the maximum of <see cref="P:Northwoods.Go.Tools.ResizingTool.MinSize"/> and the
             <see cref="P:Northwoods.Go.Tools.ResizingTool.AdornedElement"/>'s <see cref="P:Northwoods.Go.GraphObject.MinSize"/>.
             </summary>
             <remarks>
             This is called once when the tool is activated.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.ComputeMaxSize">
             <summary>
             The effective maximum resizing size is the minimum of the <see cref="P:Northwoods.Go.Tools.ResizingTool.MaxSize"/> and the
             <see cref="P:Northwoods.Go.Tools.ResizingTool.AdornedElement"/>'s <see cref="P:Northwoods.Go.GraphObject.MaxSize"/>.
             </summary>
             <remarks>
             This is called once when the tool is activated.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ResizingTool.ComputeCellSize">
             <summary>
             The size should be a multiple of the value returned by this method.
             </summary>
             <remarks>
             This is called once when the tool is activated.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.MinSize">
             <summary>
             Gets or sets the minimum size to which the user can resize.
             </summary>
             <remarks>
             The effective minimum size is the maximum of this value and the <see cref="P:Northwoods.Go.GraphObject.MinSize"/>,
             independently in each direction.
            
             The default value is `Size(1, 1)`.
             Any new value must be of type Size; `NaN` width or height values are treated as zero.
             Setting this property does not raise any events.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.MaxSize">
             <summary>
             Gets or sets the maximum size to which the user can resize.
             </summary>
             <remarks>
             The effective maximum size is the minimum of this value and the <see cref="P:Northwoods.Go.GraphObject.MaxSize"/>,
             independently in each direction.
            
             The default value is `Size(9999, 9999)`.
             Any new value must be of type Size; `NaN` width or height values are treated as double.PositiveInfinity.
             Setting this property does not raise any events.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.CellSize">
             <summary>
             Gets or sets the width and height multiples with which the user must resize.
             </summary>
             <remarks>
             The effective cell size is computed by first looking at the <see cref="P:Northwoods.Go.Adornment.AdornedPart"/>'s <see cref="P:Northwoods.Go.Part.ResizeCellSize"/>.
             If either or both of its width and height are `NaN`, it will use this property, `CellSize`.
             If either or both of this property's width and height are `NaN`, it will
             consider the <see cref="P:Northwoods.Go.Diagram.Grid"/>'s <see cref="P:Northwoods.Go.Panel.GridCellSize"/>.
            
             The default value is `Size(NaN, NaN)`.
             Setting this property does not raise any events.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.IsGridSnapEnabled">
            <summary>
            Gets or sets whether the <see cref="T:Northwoods.Go.Tools.ResizingTool"/> snaps object sizes to the diagram's background grid during the resize.
            </summary>
            <remarks>
            By default this property is false.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.DragsMembers">
            <summary>
            Gets or sets whether the <see cref="T:Northwoods.Go.Tools.ResizingTool"/> moves the member Parts of a Group that has no <see cref="P:Northwoods.Go.Group.Placeholder"/>.
            </summary>
            <remarks>
            By default this property is false.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.OppositePoint">
            <summary>
            Gets or sets the Point opposite to the chosen, dragged handle of the "Resizing" Adornment.
            </summary>
            <remarks>
            This property has no meaning until after <see cref="M:Northwoods.Go.Tools.ResizingTool.DoActivate"/> has been called.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.OriginalDesiredSize">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Size"/> that was the original value of the <see cref="P:Northwoods.Go.GraphObject.DesiredSize"/>
            of the element that is being resized.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.ResizingTool.OriginalLocation">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Point"/> that was the original value of the <see cref="P:Northwoods.Go.Part.Location"/>
            of the Part that is being resized.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.RotatingTool">
             <summary>
             The RotatingTool is used to interactively change the <see cref="P:Northwoods.Go.GraphObject.Angle"/> of a <see cref="T:Northwoods.Go.GraphObject"/>
             by setting its <see cref="P:Northwoods.Go.GraphObject.Angle"/> property.
             You may want to save the angle to the model by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "Angle" property
             of the GraphObject that is named by <see cref="P:Northwoods.Go.Part.RotateElementName"/>.
             </summary>
             <remarks>
             This tool allows the user to rotate the <see cref="P:Northwoods.Go.Part.RotateElement"/> of the selected <see cref="T:Northwoods.Go.Part"/>.
             The <see cref="T:Northwoods.Go.Part"/> must be <see cref="P:Northwoods.Go.Part.Rotatable"/>, which is false by default.
             Normally this works with <see cref="T:Northwoods.Go.Part"/>s or <see cref="T:Northwoods.Go.Node"/>s; it does not make sense for whole <see cref="T:Northwoods.Go.Link"/>s
             or <see cref="P:Northwoods.Go.Link.Path"/>s, so if you want to rotate a label on a Link, make sure to name that label
             and refer to it as the <see cref="P:Northwoods.Go.Part.RotateElementName"/>.
            
             You can control the point about which the object is rotated by setting <see cref="P:Northwoods.Go.Part.RotationSpot"/>.
             The rotation spot can be computed dynamically by overriding <see cref="M:Northwoods.Go.Tools.RotatingTool.ComputeRotationPoint(Northwoods.Go.GraphObject)"/>.
             The value of that method call is saved as <see cref="P:Northwoods.Go.Tools.RotatingTool.RotationPoint"/>.
            
             You can limit the permitted angles by setting <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleMultiple"/> and <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleEpsilon"/>.
             For example, if you want to permit only angles that are multiples of 90 degrees,
             set <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleMultiple"/> to 90 and <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleEpsilon"/> to 45.
             Pressing the Shift key during rotation ignores these two properties.
            
             This tool makes use of an <see cref="T:Northwoods.Go.Adornment"/> that includes a rotation handle.
             It is shown when the selected <see cref="T:Northwoods.Go.Part"/> is <see cref="P:Northwoods.Go.Part.Rotatable"/>.
             You can control its direction relative to the <see cref="P:Northwoods.Go.Tools.RotatingTool.RotationPoint"/>
             by setting <see cref="P:Northwoods.Go.Tools.RotatingTool.HandleAngle"/> to a multiple of 90 degrees,
             and its distance from the rotation point by setting <see cref="P:Northwoods.Go.Tools.RotatingTool.HandleDistance"/>.
             The rotate handle is normally a copy of <see cref="P:Northwoods.Go.Tools.RotatingTool.HandleArchetype"/>.
             unless you specify a custom rotate Adornment by setting <see cref="P:Northwoods.Go.Part.RotateAdornmentTemplate"/>.
            
             This tool conducts a transaction while the tool is active.
             A successful rotation will result in a "PartRotated" <see cref="T:Northwoods.Go.DiagramEvent"/> and a "Rotating" transaction.
            
             <p class="boxread">
             For customizing the RotatingTool, see <a href="../../intro/tools.Html#RotatingTool">Introduction to the RotatingTool</a>.
             </p>
            
             If you want to programmatically start a user's rotating of the <see cref="P:Northwoods.Go.Part.RotateElement"/> of an existing selected node,
             you can set the <see cref="P:Northwoods.Go.Tools.RotatingTool.Handle"/> property to the rotate handle and then start and activate the tool.
             <code language="cs">
               var node = ...;
               myDiagram.Select(node);
               var adorn = node.FindAdornment("Rotating");
               var tool = myDiagram.ToolManager.RotatingTool;
               // specify the rotation handle of the "Rotating" Adornment of the selected node
               tool.Handle = adorn.Elt(0);
               myDiagram.CurrentTool = tool;  // starts the RotatingTool
               tool.DoActivate();             // activates the RotatingTool
             </code>
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.RotatingTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "Rotating".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.UpdateAdornments(Northwoods.Go.Part)">
            <summary>
            Show an <see cref="T:Northwoods.Go.Adornment"/> with a rotate handle at a point to the side of the adorned object
            if the part is selected and visible and if <see cref="M:Northwoods.Go.Part.CanRotate"/>() is true.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.MakeAdornment(Northwoods.Go.GraphObject)">
            <summary>
            (undocumented)
            Create and return an <see cref="T:Northwoods.Go.Adornment"/> that lets the user grab a handle to rotate an object in the selected part.
            </summary>
            <remarks>
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="rotateObj">the <see cref="T:Northwoods.Go.GraphObject"/> being rotated.</param>
        </member>
        <member name="P:Northwoods.Go.Tools.RotatingTool.HandleArchetype">
             <summary>
             Gets or sets a small GraphObject that is copied as a rotation handle for the selected part.
             </summary>
             <remarks>
             By default this is a <see cref="T:Northwoods.Go.Shape"/> that is a small yellow circle.
             Setting this property does not raise any events.
            
             Here is an example of changing the default handle to be green "X":
             <code language="cs">
              myDiagram.ToolManager.RotatingTool.HandleArchetype =
                new Shape("XLine") { Width = 8, Height = 8, Stroke = "green", Fill = "transparent" };
             </code>
            
             This property is ignored when a custom rotating Adornment is specified as the <see cref="P:Northwoods.Go.Part.RotateAdornmentTemplate"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.RotatingTool.Handle">
             <summary>
             This read-only property returns the <see cref="T:Northwoods.Go.GraphObject"/> that is the tool handle being dragged by the user.
             </summary>
             <remarks>
             This will be contained by an <see cref="T:Northwoods.Go.Adornment"/> whose category is "RotatingTool".
             Its <see cref="P:Northwoods.Go.Adornment.AdornedElement"/> is the same as the <see cref="P:Northwoods.Go.Tools.RotatingTool.AdornedElement"/>.
            
             This property is also settable, but should only be set either within an override of <see cref="M:Northwoods.Go.Tools.RotatingTool.DoActivate"/>
             or prior to calling <see cref="M:Northwoods.Go.Tools.RotatingTool.DoActivate"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.RotatingTool.AdornedElement">
             <summary>
             Gets the <see cref="T:Northwoods.Go.GraphObject"/> that is being rotated.
             </summary>
             <remarks>
             This may be the same element as the selected <see cref="T:Northwoods.Go.Part"/> or it may be contained within that Part.
            
             This property is also settable, but should only be set when overriding functions
             in RotatingTool, and not during normal operation.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.CanStart">
            <summary>
            This tool may run when there is a mouse-down event on a rotate handle,
            the diagram is not read-only and it allows rotation,
            the left mouse button is being used,
            and this tool's adornment's rotate handle is at the current mouse point.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.DoActivate">
            <summary>
            Capture the mouse, remember the original <see cref="P:Northwoods.Go.GraphObject.Angle"/>,
            and start a transaction.
            </summary>
            <remarks>
            Normally when this method is called the value of <see cref="P:Northwoods.Go.Tools.RotatingTool.Handle"/> will be null,
            resulting in a call to <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/> to find a "Rotating" tool handle,
            which is then remembered as the value of <see cref="P:Northwoods.Go.Tools.RotatingTool.Handle"/>.
            If when this method is called the value of <see cref="P:Northwoods.Go.Tools.RotatingTool.Handle"/> is already set,
            then there is no need to call <see cref="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)"/>,
            because the programmer has already set up which rotate handle they want the user to be rotating.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.ComputeRotationPoint(Northwoods.Go.GraphObject)">
            <summary>
            Compute the Point about which things should rotate.
            </summary>
            <remarks>
            This is called when this tool is activated and sometimes when updating the Adornment.
            The value of the call is remembered as <see cref="P:Northwoods.Go.Tools.RotatingTool.RotationPoint"/>.
            </remarks>
            <param name="obj">the <see cref="P:Northwoods.Go.Part.RotateElement"/></param>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.ComputeAdornmentLocation(Northwoods.Go.GraphObject)">
             @hidden @internal
             <summary>
             Compute the location for the Adornment, assuming the Adornment only holds a rotate handle.
             </summary>
             <remarks>
             This is only called when the Adornment does not have a Placeholder.
            
             Only supports <see cref="P:Northwoods.Go.Tools.RotatingTool.HandleAngle"/> as multiples of 90 degrees.
             Behavior when a multiple of 45 degrees (but not 90) is non-optimal.
             </remarks>
             <param name="obj">the <see cref="P:Northwoods.Go.Part.RotateElement"/></param>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.DoDeactivate">
            <summary>
            Stop the current transaction, forget the <see cref="P:Northwoods.Go.Tools.RotatingTool.Handle"/> and <see cref="P:Northwoods.Go.Tools.RotatingTool.AdornedElement"/>, and release the mouse.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.StopTransaction">
            <summary>
            This calls the base <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/> method, and if the result is `true`,
            attempts to optimize the transaction by removing all changes except the first and last
            by calling <see cref="M:Northwoods.Go.Models.Transaction.Optimize"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>the result of the call to rollback or commit the transaction.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.DoCancel">
            <summary>
            Restore the original <see cref="P:Northwoods.Go.GraphObject.Angle"/> of the adorned object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.DoMouseMove">
            <summary>
            Call <see cref="M:Northwoods.Go.Tools.RotatingTool.Rotate(System.Double)"/> with a new angle determined by the current mouse point.
            </summary>
            <remarks>
            This determines the new angle by calling <see cref="M:Northwoods.Go.Tools.RotatingTool.ComputeRotate(Northwoods.Go.Point)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.DoMouseUp">
            <summary>
            Call <see cref="M:Northwoods.Go.Tools.RotatingTool.Rotate(System.Double)"/> with an angle based on the most recent mouse point,
            commit the transaction, and raise the "PartRotated" <see cref="T:Northwoods.Go.DiagramEvent"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.Rotate(System.Double)">
             <summary>
             Change the angle of the selected part's <see cref="P:Northwoods.Go.Part.RotateElement"/>.
             </summary>
             <remarks>
             This modifies its <see cref="P:Northwoods.Go.GraphObject.Angle"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="newangle">in degrees.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.RotatingTool.ComputeRotate(Northwoods.Go.Point)">
             <summary>
             Compute the new angle given a point.
             </summary>
             <remarks>
             If the Shift key is pressed, this method ignores the <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleMultiple"/> and <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleEpsilon"/>.
            
             If the angle is close (by <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleEpsilon"/> degrees)
             to a multiple of <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleMultiple"/> degrees,
             make it exactly that multiple.
            
             This method is called by both <see cref="M:Northwoods.Go.Tools.RotatingTool.DoMouseMove"/> and <see cref="M:Northwoods.Go.Tools.RotatingTool.DoMouseUp"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="newPoint">in document coordinates.</param>
             <returns>the new angle, in degrees.</returns>
        </member>
        <member name="P:Northwoods.Go.Tools.RotatingTool.SnapAngleMultiple">
            <summary>
            Gets or sets the preferred angles for the selected object.
            </summary>
            <remarks>
            The default value is 45 degrees, meaning that angles that are multiples
            of 45 degrees are automatically preferred, if the actual angle is
            close to that multiple.
            The closeness is determined by the <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleEpsilon"/> property.
            A value of zero for <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleMultiple"/> results in no snapping at all.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.RotatingTool.SnapAngleEpsilon">
            <summary>
            Gets or sets the the closeness to a desired angle at which the angle is "snapped to".
            </summary>
            <remarks>
            The default value is 2 degrees, meaning that any angle within 2 degrees
            of a multiple of the <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleMultiple"/> automatically
            snaps to that multiple.
            Values are limited to half of the <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleMultiple"/>;
            such values restrict user selected angles only to exact multiples of
            <see cref="P:Northwoods.Go.Tools.RotatingTool.SnapAngleMultiple"/> -- no other angles between them.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.RotatingTool.OriginalAngle">
            <summary>
            This read-only property returns the angle that was the original value of the <see cref="P:Northwoods.Go.GraphObject.Angle"/>
            of the GraphObject that is being rotated.
            </summary>
            <remarks>
            The value is invalid when this tool is not active.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.RotatingTool.RotationPoint">
            <summary>
            Gets or sets the Point at which the axis of the rotation should be.
            </summary>
            <remarks>
            <see cref="M:Northwoods.Go.Tools.RotatingTool.DoActivate"/> saves here the value returned by the call to <see cref="M:Northwoods.Go.Tools.RotatingTool.ComputeRotationPoint(Northwoods.Go.GraphObject)"/>.
            The value is invalid when this tool is not active.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.RotatingTool.HandleAngle">
             <summary>
             Gets or sets the spot to locate the Adornment for the rotation handle when it does not have a Placeholder.
             </summary>
             <remarks>
             This assumes the Adornment's location will be at the center of the rotation handle.
            
             By default this is zero degrees, which locates the Adornment
             so that it is placed to the right of an un-rotated object.
             You can set this to a multiple of 90 degrees to position the rotation handle differently
             with respect to the <see cref="P:Northwoods.Go.Tools.RotatingTool.RotationPoint"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.RotatingTool.HandleDistance">
             <summary>
             Gets or sets the spot to locate the Adornment at a particular distance from the <see cref="P:Northwoods.Go.Tools.RotatingTool.AdornedElement"/>.
             </summary>
             <remarks>
             This assumes the Adornment's location will be at the center of the rotation handle.
            
             By default this is 50, which locates the Adornment
             so that it is placed to the right of an un-rotated object.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.Tools.ClickSelectingTool">
             <summary>
             The ClickSelectingTool selects and deselects <see cref="T:Northwoods.Go.Part"/>s when there is a click.
             It does this by calling <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseSelect"/>.
             It is also responsible for handling and dispatching click events on <see cref="T:Northwoods.Go.GraphObject"/>s
             by calling <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseClick(System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject})"/>.
             </summary>
             <remarks>
             Note that this tool avoids raising click events on objects that are in temporary layers.
             This is to prevent parts such as selection adornments from interfering with clicking on selected nodes or links.
             (Adornments are in the "Adornment" <see cref="T:Northwoods.Go.Layer"/>, which <see cref="P:Northwoods.Go.Layer.IsTemporary"/>.)
             However this means that if you add a <see cref="P:Northwoods.Go.GraphObject.Click"/> event handler on a GraphObject in an Adornment,
             it will not be called.
             You can get it to be called by setting <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> to true on that object in the adornment.
            
             This tool is a standard mouse-up tool, the <see cref="P:Northwoods.Go.Tools.ToolManager.ClickSelectingTool"/>.
            
             This tool does not utilize any <see cref="T:Northwoods.Go.Adornment"/>s or tool handles.
             This tool does not modify the model or conduct any transaction.
            
             An example customization of this tool is shown in the Tree Map sample,
             where the <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseSelect"/> method is overridden to permit the user to cycle through
             the chain of containing groups, changing the selection on each click to the next containing group.
            
             If you want to programmatically select a Part, you can set <see cref="P:Northwoods.Go.Part.IsSelected"/> or call <see cref="M:Northwoods.Go.Diagram.Select(Northwoods.Go.Part)"/>.
             If you want to know which Part is at a particular point, you can call <see cref="M:Northwoods.Go.Diagram.FindPartAt(Northwoods.Go.Point,System.Boolean)"/>.
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.ClickSelectingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.ClickSelectingTool"/>.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "ClickSelecting".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ClickSelectingTool.CanStart">
            <summary>
            This tool can run whenever a click occurs.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ClickSelectingTool.DoMouseUp">
            <summary>
            Upon a click, this calls <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseSelect"/> to change the <see cref="P:Northwoods.Go.Diagram.Selection"/> collection,
            then calls <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseClick(System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject})"/> to perform the normal click behaviors,
            and then stops this tool.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.ActionTool">
             <summary>
             The ActionTool is responsible for handling and dispatching mouse events on <see cref="T:Northwoods.Go.GraphObject"/>s
             that have <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> set to true.
             This is how one implements "controls", such as buttons or sliders or knobs, as <see cref="T:Northwoods.Go.GraphObject"/>s
             that can be inside <see cref="T:Northwoods.Go.Part"/>s without interfering with the standard tool behaviors.
             </summary>
             <remarks>
             This tool allows individual GraphObjects (usually Panels) to handle mouse-down-move-up events without
             having to define new <see cref="T:Northwoods.Go.Tools.Tool"/>s.
             It does this by calling <see cref="P:Northwoods.Go.GraphObject.ActionDown"/>, <see cref="P:Northwoods.Go.GraphObject.ActionMove"/>, <see cref="P:Northwoods.Go.GraphObject.ActionUp"/>,
             and <see cref="P:Northwoods.Go.GraphObject.ActionCancel"/> on objects that have <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> set to true.
            
             This tool is a standard mouse-down tool, the <see cref="P:Northwoods.Go.Tools.ToolManager.ActionTool"/>.
            
             This tool does not utilize any <see cref="T:Northwoods.Go.Adornment"/>s or tool handles.
             This tool does not modify the model or conduct any transaction, although the actions that this invokes may do so.
            
             It would be very unusual to want to customize this tool.
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.ActionTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.ActionTool"/>.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "Action".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ActionTool.CanStart">
            <summary>
            This tool can run when there is a mouse-down on an object with <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> true
            or if the object is within a <see cref="T:Northwoods.Go.Panel"/> that "IsActionable".
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ActionTool.DoMouseDown">
            <summary>
            If there is a <see cref="T:Northwoods.Go.GraphObject"/> found with <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> set to true,
            call that object's <see cref="P:Northwoods.Go.GraphObject.ActionDown"/> event, if it exists.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ActionTool.DoMouseMove">
            <summary>
            If this tool is active call <see cref="P:Northwoods.Go.GraphObject.ActionMove"/>, if it exists, on the active object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ActionTool.DoMouseUp">
            <summary>
            Calls the <see cref="P:Northwoods.Go.GraphObject.ActionUp"/> event if defined, then effectively calls
            <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseClick(System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject})"/> to perform the normal click behaviors,
            and then stops this tool.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ActionTool.DoCancel">
            <summary>
            Call the <see cref="P:Northwoods.Go.GraphObject.ActionCancel"/> event if defined on the current object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ActionTool.DoStop">
            @hidden @internal
        </member>
        <member name="T:Northwoods.Go.Tools.ClickCreatingTool">
             <summary>
             The ClickCreatingTool lets the user create a node by clicking where they want the new node to be.
             By default a double-click is required to start this tool;
             set <see cref="P:Northwoods.Go.Tools.ClickCreatingTool.IsDoubleClick"/> to false if you want a single-click to create a node.
             </summary>
             <remarks>
             This tool is a standard mouse-up tool, the <see cref="P:Northwoods.Go.Tools.ToolManager.ClickCreatingTool"/>.
             However, it will not be able to start running unless you have set the
             <see cref="P:Northwoods.Go.Tools.ClickCreatingTool.ArchetypeNodeData"/> property to an object that can be copied and added to the diagram's model.
            
             If you set <see cref="P:Northwoods.Go.Tools.ClickCreatingTool.IsGridSnapEnabled"/> to true, newly created parts will be snapped to points on a grid.
            
             This tool does not utilize any <see cref="T:Northwoods.Go.Adornment"/>s or tool handles.
             This tool does conduct a transaction when inserting the new node.
            
             If you want to programmatically create a Part, you can call <see cref="M:Northwoods.Go.Tools.ClickCreatingTool.InsertPart(Northwoods.Go.Point)"/>.
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.ClickCreatingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.ClickCreatingTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "ClickCreating".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ClickCreatingTool.CanStart">
            <summary>
            This tool can run when the diagram is not read-only and supports creating new nodes,
            and when there has been a click (or double-click if <see cref="P:Northwoods.Go.Tools.ClickCreatingTool.IsDoubleClick"/> is true)
            in the background of the diagram (not on a <see cref="T:Northwoods.Go.Part"/>),
            and <see cref="P:Northwoods.Go.Tools.ClickCreatingTool.ArchetypeNodeData"/> is an object that can be copied and added to the model.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ClickCreatingTool.DoMouseUp">
            <summary>
            Upon a click, call <see cref="M:Northwoods.Go.Tools.ClickCreatingTool.InsertPart(Northwoods.Go.Point)"/> and stop this tool.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ClickCreatingTool.InsertPart(Northwoods.Go.Point)">
             <summary>
             Create a node by adding a copy of the <see cref="P:Northwoods.Go.Tools.ClickCreatingTool.ArchetypeNodeData"/> object
             to the diagram's model, assign its <see cref="P:Northwoods.Go.Part.Location"/>
             to be the given point, and select the new part.
             </summary>
             <remarks>
             This starts and commits a transaction and also raises the "PartCreated" <see cref="T:Northwoods.Go.DiagramEvent"/>.
             The actual part that is added to the diagram may be a <see cref="T:Northwoods.Go.Part"/>, a <see cref="T:Northwoods.Go.Node"/>,
             or even a <see cref="T:Northwoods.Go.Group"/>, depending on the properties of the <see cref="P:Northwoods.Go.Tools.ClickCreatingTool.ArchetypeNodeData"/>
             and the type of the template that is copied to create the part.
            
             This method also raises the "ChangingSelection" and "ChangedSelection" diagram events outside the transaction.
            
             This method may be overridden, although it is usually much easier to just set <see cref="P:Northwoods.Go.Tools.ClickCreatingTool.ArchetypeNodeData"/>.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="loc">a Point in document coordinates.</param>
             <returns>the newly created Part, or null if it failed.</returns>
        </member>
        <member name="P:Northwoods.Go.Tools.ClickCreatingTool.ArchetypeNodeData">
            <summary>
            Gets or sets a data object that will be copied and added to the diagram's model each time this tool executes.
            </summary>
            <remarks>
            The default value is null.
            The value must be non-null for this tool to be able to run.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ClickCreatingTool.IsDoubleClick">
            <summary>
            Gets or sets whether a double click rather than a single-click is required
            to insert a new <see cref="T:Northwoods.Go.Part"/> at the mouse-up point.
            </summary>
            <remarks>
            The default value is true -- only a double-click will cause a node to be created.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ClickCreatingTool.IsGridSnapEnabled">
            <summary>
            Gets or sets whether the <see cref="T:Northwoods.Go.Tools.ClickCreatingTool"/> snaps object sizes to the diagram's background grid during creation.
            </summary>
            <remarks>
            By default this property is false.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.Tools.DragSelectingTool">
             <summary>
             The DragSelectingTool lets the user select multiple parts within a rectangular area drawn by the user.
             </summary>
             <remarks>
             There is a temporary part, the <see cref="P:Northwoods.Go.Tools.DragSelectingTool.Box"/>,
             that shows the current area encompassed between the mouse-down
             point and the current mouse point.
             The default drag selection box is a magenta rectangle.
             You can change the <see cref="P:Northwoods.Go.Tools.DragSelectingTool.Box"/> to customize its appearance -- see its documentation for an example.
            
             This tool is a standard mouse-move tool, the <see cref="P:Northwoods.Go.Tools.ToolManager.DragSelectingTool"/>.
             However this cannot start running unless there has been a motionless delay
             after the mouse-down event of at least <see cref="P:Northwoods.Go.Tools.DragSelectingTool.Delay"/>.
            
             This tool does not utilize any <see cref="T:Northwoods.Go.Adornment"/>s or tool handles,
             but it does temporarily add the <see cref="P:Northwoods.Go.Tools.DragSelectingTool.Box"/> part to the diagram.
             This tool does not modify the model or conduct any transaction.
            
             Selection occurs on a mouse-up when it calls <see cref="M:Northwoods.Go.Tools.DragSelectingTool.SelectInRect(Northwoods.Go.Rect)"/>
             with the value of <see cref="M:Northwoods.Go.Tools.DragSelectingTool.ComputeBoxBounds"/>.
             Selectable parts are selected when their bounds fall entirely within the rectangle,
             unless <see cref="P:Northwoods.Go.Tools.DragSelectingTool.IsPartialInclusion"/> is set to true.
            
             <p class="boxread">
             For customizing the DragSelectingTool, see <a href="../../intro/tools.Html#DragSelectingTool">Introduction to the DragSelectingTool</a>.
             </p>
            
             If you implement your own drag-in-the-background-to-do-something tool, you may need to disable
             this tool or insert your new tool in the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/> list before this tool,
             in order for your tool to run.  There are examples of such tools defined in the extensions directory:
             <a href="https://github.com/NorthwoodsSoftware/GoDiagram/tree/main/Extensions/Tools/RealtimeDragSelecting">Realtime Drag Selecting Tool</a>,
             <a href="https://github.com/NorthwoodsSoftware/GoDiagram/tree/main/Extensions/Tools/DragCreating">Drag Creating Tool</a>, and
             <a href="https://github.com/NorthwoodsSoftware/GoDiagram/tree/main/Extensions/Tools/DragZooming">Drag Zooming Tool</a>.
            
             If you want to programmatically select some Parts in a rectangular area,
             you can call <see cref="M:Northwoods.Go.Tools.DragSelectingTool.SelectInRect(Northwoods.Go.Rect)"/>.
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.DragSelectingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.DragSelectingTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "DragSelecting".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DragSelectingTool.CanStart">
             <summary>
             This tool can run when the diagram allows selection,
             there has been delay of at least <see cref="P:Northwoods.Go.Tools.DragSelectingTool.Delay"/> milliseconds
             after the mouse-down before a mouse-move,
             there has been a mouse-drag far enough away not to be a click,
             and there is no selectable part at the mouse-down point.
             </summary>
             <remarks>
             The delay required to start this tool enables both this tool and
             the <see cref="P:Northwoods.Go.Tools.ToolManager.PanningTool"/> to co-exist as mode-less mouse-move tools.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DragSelectingTool.DoActivate">
            <summary>
            Capture the mouse and show the <see cref="P:Northwoods.Go.Tools.DragSelectingTool.Box"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DragSelectingTool.DoDeactivate">
            <summary>
            Release the mouse and remove any <see cref="P:Northwoods.Go.Tools.DragSelectingTool.Box"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DragSelectingTool.DoMouseMove">
            <summary>
            Update the <see cref="P:Northwoods.Go.Tools.DragSelectingTool.Box"/>'s position and size according to the value
            of <see cref="M:Northwoods.Go.Tools.DragSelectingTool.ComputeBoxBounds"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.DragSelectingTool.DoMouseUp">
            <summary>
            Call <see cref="M:Northwoods.Go.Tools.DragSelectingTool.SelectInRect(Northwoods.Go.Rect)"/> with the value of a call to <see cref="M:Northwoods.Go.Tools.DragSelectingTool.ComputeBoxBounds"/>.
            </summary>
            <remarks>
            This method changes the cursor to "wait" and
            raises the "ChangingSelection" <see cref="T:Northwoods.Go.DiagramEvent"/> before calling <see cref="M:Northwoods.Go.Tools.DragSelectingTool.SelectInRect(Northwoods.Go.Rect)"/>,
            and raises the "ChangedSelection" DiagramEvent afterward.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.DragSelectingTool.ComputeBoxBounds">
            <summary>
            This just returns a <see cref="T:Northwoods.Go.Rect"/> stretching from the mouse-down point to the current mouse point.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <returns>a <see cref="T:Northwoods.Go.Rect"/> in document coordinates.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.DragSelectingTool.SelectInRect(Northwoods.Go.Rect)">
             <summary>
             This method is called to select some parts within the area of a given rectangle.
             </summary>
             <remarks>
             The normal behavior is to set the diagram's selection collection to only those parts
             in the given rectangle according to the <see cref="P:Northwoods.Go.Tools.DragSelectingTool.IsPartialInclusion"/> policy.
             However, if the Shift key modifier is used, no parts are deselected --
             this adds to the selection the parts in the rectangle not already selected.
             If the Control key (Command on Mac) modifier is used, this toggles the selectedness of the parts in the rectangle.
             If the Control key (Command on Mac) and Shift key modifiers are both used, this deselects the parts in the rectangle.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="r">a rectangular bounds in document coordinates.</param>
        </member>
        <member name="P:Northwoods.Go.Tools.DragSelectingTool.Delay">
            <summary>
            Gets or sets the TimeSpan for which the mouse must be stationary
            before this tool can be started.
            </summary>
            <remarks>
            The default value is 175 milliseconds.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DragSelectingTool.IsPartialInclusion">
            <summary>
            Gets or sets whether a selectable <see cref="T:Northwoods.Go.Part"/> may be only partly
            or must be completely enclosed by the rectangle given to <see cref="M:Northwoods.Go.Tools.DragSelectingTool.SelectInRect(Northwoods.Go.Rect)"/>.
            </summary>
            <remarks>
            The default value is false: parts must be completely inside the rectangle.
            Setting this property does not raise any events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.DragSelectingTool.Box">
             <summary>
             Gets or sets the <see cref="T:Northwoods.Go.Part"/> used as the "rubber-band selection box"
             that is stretched to follow the mouse, as feedback for what area will
             be passed to <see cref="M:Northwoods.Go.Tools.DragSelectingTool.SelectInRect(Northwoods.Go.Rect)"/> upon a mouse-up.
             </summary>
             <remarks>
             Initially this is a <see cref="T:Northwoods.Go.Part"/> containing only a simple magenta rectangular <see cref="T:Northwoods.Go.Shape"/>.
             The object to be resized during dragging should be named "SHAPE".
             Setting this property does not raise any events.
            
             Here is an example of changing the selection box to be a thicker bright green rectangle:
             <code language="cs">
              myDiagram.ToolManager.DragSelectingTool.Box =
                new Part { LayerName = "Tool", Selectable = false }
                  .Add(new Shape { Name = "SHAPE", Fill = null, Stroke = "chartreuse", StrokeWidth = 3 });
             </code>
             Note that the Part should be put into a <see cref="T:Northwoods.Go.Layer"/> that <see cref="P:Northwoods.Go.Layer.IsTemporary"/>.
            
             Modifying this property while this tool <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/> might have no effect.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.Tools.PanningTool">
             <summary>
             The PanningTool supports manual panning, where the user can shift the
             <see cref="P:Northwoods.Go.Diagram.Position"/> by dragging the mouse.
             </summary>
             <remarks>
             This tool is a standard mouse-move tool, the <see cref="P:Northwoods.Go.Tools.ToolManager.PanningTool"/>.
             Although the <see cref="P:Northwoods.Go.Tools.ToolManager.DragSelectingTool"/> takes precedence over this tool,
             the <see cref="T:Northwoods.Go.Tools.DragSelectingTool"/> only starts if there is a delay after a mouse-down event.
             If it does not start, then this PanningTool gets a chance to start.
            
             This tool does not utilize any <see cref="T:Northwoods.Go.Adornment"/>s or tool handles.
             This tool does not modify the model or conduct any transaction.
            
             If you want to programmatically "pan" the diagram, you can just set <see cref="P:Northwoods.Go.Diagram.Position"/>
             or call methods such as <see cref="M:Northwoods.Go.Diagram.Scroll(System.String,System.String,System.Double)"/>, <see cref="M:Northwoods.Go.Diagram.ScrollToRect(Northwoods.Go.Rect)"/>, or <see cref="M:Northwoods.Go.Diagram.CenterRect(Northwoods.Go.Rect)"/>.
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.PanningTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.PanningTool"/>.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "Panning".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.PanningTool.CanStart">
            <summary>
            This tool can run when the diagram allows scrolling and
            the mouse has been dragged with the left button far enough away
            from the mouse-down point to avoid being a click.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.PanningTool.DoActivate">
            <summary>
            Capture the mouse, change the diagram cursor to "move", and remember the <see cref="P:Northwoods.Go.Diagram.Position"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.PanningTool.DoDeactivate">
            <summary>
            Release the mouse and restore the default diagram cursor.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.PanningTool.DoCancel">
            <summary>
            Restore the <see cref="P:Northwoods.Go.Diagram.Position"/> to what it was when this tool activated.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.PanningTool.DoMouseMove">
            <summary>
            Modify the <see cref="P:Northwoods.Go.Diagram.Position"/> according to how much the mouse has moved.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.PanningTool.DoMouseUp">
            <summary>
            Modify the <see cref="P:Northwoods.Go.Diagram.Position"/> according to how much the mouse has moved.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.PanningTool.Move">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Tools.PanningTool.Bubbles">
             <summary>
             Gets or sets whether panning actions will allow
             events to bubble **instead** of panning in the diagram.
             </summary>
             <remarks>
             Set this to true to allow mobile devices to scroll the page with panning gestures on the diagram.
             Otherwise, the panning events will be captured and used to pan inside of the diagram.
            
             The default value is false.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.PanningTool.OriginalPosition">
            <summary>
            This read-only property returns the <see cref="T:Northwoods.Go.Point"/> that was the original value of <see cref="P:Northwoods.Go.Diagram.Position"/> when the panning operation started.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.TextEditingAccept">
            <summary>
            This enumeration specifies possible values for <see cref="M:Northwoods.Go.Tools.TextEditingTool.AcceptText(Northwoods.Go.Tools.TextEditingAccept)"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingAccept.LostFocus">
            <summary>
            The text editing control has lost focus.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingAccept.MouseDown">
            <summary>
            The user has clicked somewhere else in the diagram.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingAccept.Tab">
            <summary>
            The user has typed TAB.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingAccept.Enter">
            <summary>
            The user has typed ENTER.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.TextEditingStarting">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Tools.TextEditingTool.Starting"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingStarting.SingleClick">
            <summary>
            A single click on a <see cref="T:Northwoods.Go.TextBlock"/> with <see cref="P:Northwoods.Go.TextBlock.Editable"/> property set to true
            will start in-place editing.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingStarting.SingleClickSelected">
            <summary>
            A single click on a <see cref="T:Northwoods.Go.TextBlock"/> with <see cref="P:Northwoods.Go.TextBlock.Editable"/> property set to true
            will start in-place editing, but only if the <see cref="T:Northwoods.Go.Part"/> that the <see cref="T:Northwoods.Go.TextBlock"/> is in is already selected.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingStarting.DoubleClick">
            <summary>
            A double click on a <see cref="T:Northwoods.Go.TextBlock"/> with <see cref="P:Northwoods.Go.TextBlock.Editable"/> property set to true
            will start in-place editing.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.TextEditingState">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Tools.TextEditingTool.State"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingState.None">
            <summary>
            This is the starting value before the tool is activated.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingState.Active">
            <summary>
            <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/> sets the value of <see cref="P:Northwoods.Go.Tools.TextEditingTool.State"/> to this.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingState.Editing">
            <summary>
            The default text editor receiving focus sets the value of <see cref="P:Northwoods.Go.Tools.TextEditingTool.State"/> to this.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingState.Validating">
            <summary>
            <see cref="M:Northwoods.Go.Tools.TextEditingTool.AcceptText(Northwoods.Go.Tools.TextEditingAccept)"/> sets the value of <see cref="P:Northwoods.Go.Tools.TextEditingTool.State"/> to this.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingState.Invalid">
            <summary>
            If validation fails, <see cref="M:Northwoods.Go.Tools.TextEditingTool.AcceptText(Northwoods.Go.Tools.TextEditingAccept)"/> sets the value of <see cref="P:Northwoods.Go.Tools.TextEditingTool.State"/> to this.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.TextEditingState.Validated">
            <summary>
            Once accepted and the tool begins the "TextEditing" transaction, the value of <see cref="P:Northwoods.Go.Tools.TextEditingTool.State"/> is set to this.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.TextEditingTool">
             <summary>
             The TextEditingTool is used to let the user interactively edit text in place.
             This sets the <see cref="P:Northwoods.Go.TextBlock.Text"/> property; you may want to save the changed text to the model
             by using a TwoWay <see cref="T:Northwoods.Go.Models.Binding"/> on the "Text" property of editable TextBlocks.
             </summary>
             <remarks>
             Typically this is used by setting the <see cref="P:Northwoods.Go.TextBlock.Editable"/> property to true
             on a particular <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> in a part.
             When the part is selected and the user clicks on the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/>
             or invokes the <see cref="M:Northwoods.Go.CommandHandler.EditTextBlock(Northwoods.Go.TextBlock)"/> command,
             this tool is started and it uses an HTMLTextArea to perform in-place text editing.
             (For more details see the description for <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/>.)
            
             The <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> is accessible as the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> property.
             The text editor is accessible as the <see cref="P:Northwoods.Go.Tools.TextEditingTool.CurrentTextEditor"/> property.
             From the text editor control one can access the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> being edited via the
             "TextEditingTool" property to get to this tool, from which one can use
             the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> property.
            
             You can disable mouse clicking from starting this text editing tool
             by setting <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> to false.
             You can disable the F2 key from starting this text editing tool
             by making sure <see cref="M:Northwoods.Go.Part.CanEdit"/> returns false,
             by either setting <see cref="P:Northwoods.Go.Diagram.AllowTextEdit"/> to false
             or by setting <see cref="P:Northwoods.Go.Part.TextEditable"/> to false.
            
             If you want to programmatically start the user editing a particular TextBlock,
             call <see cref="M:Northwoods.Go.CommandHandler.EditTextBlock(Northwoods.Go.TextBlock)"/>.
             That command method is also invoked by the F2 key on the keyboard.
            
             <p class="boxread">
             For a general discussion of text editing validation, see: <a href="../../intro/validation.Html#TextEditingValidation">Introduction to Text Validation</a>.
             For customizing the TextEditingTool, read about <see cref="T:Northwoods.Go.IHostInfo"/> and see <a href="../../intro/HTMLInteraction.Html#TextEditors">Introduction to Text Editors</a>.
             </p>
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Tools.ToolManager.TextEditingTool"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "TextEditing".
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.SetupDefaultEditor(Northwoods.Go.IHostInfo)">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Tools.TextEditingTool.TextBlock">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> that is being edited.
            </summary>
            <remarks>
            This property is initially null and is set in <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/>
            as the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> at the mouse click point.
            However, if you set this property beforehand, <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/>
            will not set it, and this tool will edit the given <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.TextEditingTool.CurrentTextEditor">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.IHostInfo"/> that is editing the text.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.TextEditingTool.DefaultTextEditor">
             <summary>
             Gets or sets the default <see cref="T:Northwoods.Go.IHostInfo"/> that edits the text.
             </summary>
             <remarks>
             When <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/> is called, the <see cref="P:Northwoods.Go.Tools.TextEditingTool.CurrentTextEditor"/> is set to this value by default.
             If a <see cref="P:Northwoods.Go.TextBlock.TextEditor"/> is specified on the TextBlock, that editor is used instead.
            
             This tool will call <see cref="M:Northwoods.Go.IShowHidable.Show(Northwoods.Go.GraphObject,Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)"/> during <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/>,
             and <see cref="M:Northwoods.Go.IShowHidable.Hide(Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)"/> during <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoDeactivate"/>.
            
             By default the value is an <see cref="T:Northwoods.Go.IHostInfo"/>.
            
             For typical operation, IHostInfo implementations should have a way of calling <see cref="M:Northwoods.Go.Tools.TextEditingTool.AcceptText(Northwoods.Go.Tools.TextEditingAccept)"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.TextEditingTool.Starting">
             <summary>
             Gets or sets how user gestures can start in-place editing of text.
             </summary>
             <remarks>
             Possible values are <see cref="F:Northwoods.Go.Tools.TextEditingStarting.SingleClickSelected"/>, <see cref="F:Northwoods.Go.Tools.TextEditingStarting.SingleClick"/>, and <see cref="F:Northwoods.Go.Tools.TextEditingStarting.DoubleClick"/>.
            
             The default is <see cref="F:Northwoods.Go.Tools.TextEditingStarting.SingleClickSelected"/>
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.CanStart">
            <summary>
            This may run when there is a mouse-click on a <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> for which the
            <see cref="P:Northwoods.Go.TextBlock.Editable"/> property is true in a <see cref="T:Northwoods.Go.Part"/>
            that <see cref="P:Northwoods.Go.Part.IsSelected"/>.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoStart">
            <summary>
            This calls <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/> if there is a
            <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> set. <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/> attempts to set <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> if it is null.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoActivate">
             <summary>
             Start editing the text for a <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/>.
             </summary>
             <remarks>
             If <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> is not already specified, this looks for one at the current
             mouse point. If none is found, this method does nothing.
            
             This method sets <see cref="P:Northwoods.Go.Tools.TextEditingTool.CurrentTextEditor"/>.
             If <see cref="P:Northwoods.Go.TextBlock.TextEditor"/> is defined on the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> it will use that as the value.
             By default, it uses the value of <see cref="P:Northwoods.Go.Tools.TextEditingTool.DefaultTextEditor"/>, which is an <see cref="T:Northwoods.Go.IHostInfo"/>
             showing a context-dependent text editor.
            
             If the <see cref="P:Northwoods.Go.Tools.TextEditingTool.CurrentTextEditor"/> is an <see cref="T:Northwoods.Go.IHostInfo"/>, this method calls <see cref="M:Northwoods.Go.IShowHidable.Show(Northwoods.Go.GraphObject,Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)"/> on that instance.
            
             This sets <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/> to true.
             Custom text editors should call <see cref="M:Northwoods.Go.Tools.TextEditingTool.AcceptText(Northwoods.Go.Tools.TextEditingAccept)"/> to finish the edit
             by modifying the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> and committing the edit transaction.
             Or call <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoCancel"/> to abort the edit.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoCancel">
            <summary>
            Abort any text editing operation.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoMouseUp">
            <summary>
            A click (mouse up) calls <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/> if this tool is not already active
            and if <see cref="M:Northwoods.Go.Tools.TextEditingTool.CanStart"/> returns true.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoMouseDown">
            <summary>
            This calls <see cref="M:Northwoods.Go.Tools.TextEditingTool.AcceptText(Northwoods.Go.Tools.TextEditingAccept)"/> with the reason <see cref="F:Northwoods.Go.Tools.TextEditingAccept.MouseDown"/>,
            if this tool <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.AcceptText(Northwoods.Go.Tools.TextEditingAccept)">
            <summary>
            Finish editing by trying to accept the new text.
            </summary>
            <remarks>
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="reason">The reason must be either <see cref="F:Northwoods.Go.Tools.TextEditingAccept.LostFocus"/>,
            <see cref="F:Northwoods.Go.Tools.TextEditingAccept.MouseDown"/>, <see cref="F:Northwoods.Go.Tools.TextEditingAccept.Tab"/>, or <see cref="F:Northwoods.Go.Tools.TextEditingAccept.Enter"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoAcceptText">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoError(System.String,System.String)">
            <summary>
            Call the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/>'s <see cref="P:Northwoods.Go.TextBlock.ErrorFunction"/>, if there is one,
            and then show the text editor again.
            </summary>
            <remarks>
            This is called only when the <see cref="M:Northwoods.Go.Tools.TextEditingTool.IsValidText(Northwoods.Go.TextBlock,System.String,System.String)"/> method returned false.
            The value of <see cref="P:Northwoods.Go.Tools.TextEditingTool.State"/> will be <see cref="F:Northwoods.Go.Tools.TextEditingState.Invalid"/>.
            This method may be overridden.
            You may wish to override this method in order to not continue showing the editor.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoSuccess(System.String,System.String)">
            <summary>
            Call the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/>'s <see cref="P:Northwoods.Go.TextBlock.TextEdited"/> event handler, if there is one.
            </summary>
            <remarks>
            This is called just after the <see cref="P:Northwoods.Go.TextBlock.Text"/> has been set to the new string value.
            When this method returns, this tool raises the "TextEdited" <see cref="T:Northwoods.Go.DiagramEvent"/>
            and commits the transaction.
            This method may be overridden.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoDeactivate">
             <summary>
             Release the mouse.
            
             If the <see cref="P:Northwoods.Go.Tools.TextEditingTool.CurrentTextEditor"/> is an <see cref="T:Northwoods.Go.IHostInfo"/>, this calls <see cref="M:Northwoods.Go.IShowHidable.Hide(Northwoods.Go.Diagram,Northwoods.Go.Tools.Tool)"/>.
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoStop">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoFocusInternal">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.DoBlurInternal">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.IsValidText(Northwoods.Go.TextBlock,System.String,System.String)">
            <summary>
            This predicate checks any <see cref="P:Northwoods.Go.TextBlock.TextValidation"/> predicate and
            this tool's <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextValidation"/> predicate to make sure the <see cref="P:Northwoods.Go.TextBlock.Text"/>
            property may be set to the new string.
            </summary>
            <remarks>
            This method may be overridden, although usually it is sufficient to set <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextValidation"/>.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
            <param name="textblock">the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> that is being edited.</param>
            <param name="oldstr">the previous string value.</param>
            <param name="newstr">the proposed new string value.</param>
            <returns>true if the new string is valid for the given TextBlock.</returns>
        </member>
        <member name="P:Northwoods.Go.Tools.TextEditingTool.TextValidation">
             <summary>
             Gets or sets the predicate that determines whether or not a string of text is valid.
             </summary>
             <remarks>
             If this is non-null, this predicate is called in addition to any <see cref="P:Northwoods.Go.TextBlock.TextValidation"/> predicate.
             See <see cref="M:Northwoods.Go.Tools.TextEditingTool.IsValidText(Northwoods.Go.TextBlock,System.String,System.String)"/> for more details.
             The default predicate is null, which is equivalent to simply returning true.
            
             The function, if supplied, must not have any side-effects.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.TextEditingTool.MinimumEditorScale">
            @hidden @internal
            <summary>
            Gets or sets the minimum scale that the TextEditingTool's default editor will use when constructing itself.
            </summary>
            <remarks>
            This is useful for stopping the editor from becoming too small when the diagram is zoomed out and editing is activated.
            The default is 1.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.TextEditingTool.SelectsTextOnActivate">
            <summary>
            Gets or sets whether to select (highlight) the editable text when the TextEditingTool is activated.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.TextEditingTool.State">
             <summary>
             Gets or sets the state of the TextEditingTool.
             </summary>
             <remarks>
             The only accepted values are listed as constant properties of TextEditingTool, including:
               - <see cref="F:Northwoods.Go.Tools.TextEditingState.None"/>
               - <see cref="F:Northwoods.Go.Tools.TextEditingState.Active"/>
               - <see cref="F:Northwoods.Go.Tools.TextEditingState.Editing"/>
               - <see cref="F:Northwoods.Go.Tools.TextEditingState.Validating"/>
               - <see cref="F:Northwoods.Go.Tools.TextEditingState.Validated"/>
            
             The starting value value is <see cref="F:Northwoods.Go.Tools.TextEditingState.None"/>,
             <see cref="M:Northwoods.Go.Tools.TextEditingTool.DoActivate"/> sets the value to <see cref="F:Northwoods.Go.Tools.TextEditingState.Active"/>.
             The default text editor receiving focus sets the value to <see cref="F:Northwoods.Go.Tools.TextEditingState.Editing"/>.
             <see cref="M:Northwoods.Go.Tools.TextEditingTool.AcceptText(Northwoods.Go.Tools.TextEditingAccept)"/> sets the value to <see cref="F:Northwoods.Go.Tools.TextEditingState.Validating"/>.
             Once accepted and the tool begins the "TextEditing" transaction, the value is set to <see cref="F:Northwoods.Go.Tools.TextEditingState.Validated"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.TextEditingTool.MeasureTemporaryTextBlock(System.String)">
             <summary>
             This method returns a temporary <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/> used for measuring text during editing.
             </summary>
             <remarks>
             The TextBlock.Text is set to the parameter's value,
             and the TextBlock is measured with the last available width of the <see cref="P:Northwoods.Go.Tools.TextEditingTool.TextBlock"/>.
            
             Text editors can use the <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> and <see cref="P:Northwoods.Go.TextBlock.LineCount"/>
             to determine a reasonable size for their text areas.
             </remarks>
             <param name="text">the text to measure</param>
        </member>
        <member name="T:Northwoods.Go.Tools.Tool">
             <summary>
             Tools handle mouse, keyboard, and touch events.
             The currently running tool, <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>, receives all input events from the <see cref="P:Northwoods.Go.Tools.Tool.Diagram"/>
             via canonicalized <see cref="T:Northwoods.Go.InputEvent"/>s.
             </summary>
             <remarks>
             <p class="boxrun">
             For more discussion, see <a href="../../intro/tools.Html">Introduction to Tools</a>.
             See samples that make use of tools in the <a href="../../samples/index.Html#tools">samples index</a>.
             </p>
            
             Most tools are "mode-less" tools that are managed by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>,
             which chooses the current tool based on the kind and position of the mouse event and the parts in the diagram.
             The <see cref="T:Northwoods.Go.Tools.ToolManager"/> has properties holding instances of most of the pre-defined <see cref="T:Northwoods.Go.Tools.Tool"/> classes.
             These classes include:
               - In the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/> list:
                 - <see cref="T:Northwoods.Go.Tools.ActionTool"/>
                 - <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>
                 - <see cref="T:Northwoods.Go.Tools.LinkReshapingTool"/>
                 - <see cref="T:Northwoods.Go.Tools.RotatingTool"/>
                 - <see cref="T:Northwoods.Go.Tools.ResizingTool"/>
               - In the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/> list:
                 - <see cref="T:Northwoods.Go.Tools.LinkingTool"/>
                 - <see cref="T:Northwoods.Go.Tools.DraggingTool"/>
                 - <see cref="T:Northwoods.Go.Tools.DragSelectingTool"/>
                 - <see cref="T:Northwoods.Go.Tools.PanningTool"/>
               - In the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/> list:
                 - <see cref="T:Northwoods.Go.Tools.ContextMenuTool"/>
                 - <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>
                 - <see cref="T:Northwoods.Go.Tools.ClickCreatingTool"/>
                 - <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>
            
             The ToolManager chooses a tool to run as the diagram's current tool by finding in its lists of tools the first tool
             whose <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> method returns true.  The ToolManager then sets <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> to be that tool.
            
             A tool is in the "running" state when it is the value of <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>.
             The <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> property setter will call <see cref="M:Northwoods.Go.Tools.Tool.DoStop"/> on the old tool
             and then call <see cref="M:Northwoods.Go.Tools.Tool.DoStart"/> on the new tool.
            
             A tool can then go into the "active" state once it decides it can actually do something.
             This happens with a call to <see cref="M:Northwoods.Go.Tools.Tool.DoActivate"/>, normally called by the ToolManager.
             Later it is deactivated (<see cref="M:Northwoods.Go.Tools.Tool.DoDeactivate"/>) and then stopped.
             <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/> should be true when the tool is "active".
             Often tools should ignore certain common events, such as calls to <see cref="M:Northwoods.Go.Tools.Tool.DoMouseMove"/>,
             unless the tool <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/>.
            
             You can prevent a "mode-less" tool (i.e. one managed by the <see cref="T:Northwoods.Go.Tools.ToolManager"/>)
             from being started by the ToolManager by setting <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> to false.
            
             You can also go into a particular "mode" by setting <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> explicitly,
             thereby circumventing the normal operation of the <see cref="T:Northwoods.Go.Tools.ToolManager"/>.
             This ignores the <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property and does not call the <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> predicate.
             The behavior will depend on the tool -- not all of the predefined tools support operating as a "modal" tool.
            
             Tools cannot be shared amongst multiple Diagrams.
            
             If you define a Tool subclass, you may override any of the methods whose names start with "Do"
             and any other methods that are documented to be overridable, such as <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/>.
             However you must seriously consider calling the base method in order to gets its default behavior.
             There may be situations where not calling the base method may cause subtle bugs.
             But that depends on the method and the tool.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call the base method.
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.#ctor">
            <summary>
            Don't construct this directly -- this is an abstract class.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.Tool.Diagram">
            <summary>
            This read-only property returns the <see cref="P:Northwoods.Go.Tools.Tool.Diagram"/> that owns this tool and
            for which this tool is handling input events.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.ToString">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.UpdateAdornments(Northwoods.Go.Part)">
             <summary>
             The diagram asks each tool to update any adornments the tool might
             use for a given part.
             </summary>
             <remarks>
             If the tool uses its own tool handles,
             this should display them or hide them as appropriate.
             Typically this should only show them if the part is selected.
            
             By default this method does nothing.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.CanStart">
             <summary>
             This predicate is used by the <see cref="T:Northwoods.Go.Tools.ToolManager"/> to decide if this tool can be started mode-lessly
             by mouse and touch events.
             </summary>
             <remarks>
             Implementations of this method can look at <see cref="P:Northwoods.Go.Diagram.LastInput"/> to get the mouse
             event and input state.
            
             By default this method returns <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>true if <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> is true and
             if the <see cref="P:Northwoods.Go.Diagram.ToolManager"/> can make this tool the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> and
             then call the <see cref="M:Northwoods.Go.Tools.Tool.DoStart"/> method.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoStart">
             <summary>
             The Diagram calls this method when this tool becomes the current tool; you should not call this method.
             </summary>
             <remarks>
             Tool implementations should perform their per-use initialization here, such
             as setting up internal data structures, or capturing the mouse.
             Implementations of this method can look at <see cref="P:Northwoods.Go.Diagram.LastInput"/> to get the mouse
             event and input state.
            
             You should not call this method -- only the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> property setter should call this method.
            
             By default this method does nothing.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            
             If you override this method, it is commonplace to also override <see cref="M:Northwoods.Go.Tools.Tool.DoStop"/> to clean up whatever you set up in this method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoActivate">
             <summary>
             The Diagram calls this method after setting <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>,
             to make the new tool active.
             </summary>
             <remarks>
             This should set <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/> to true.
             Overrides of this method might call <see cref="M:Northwoods.Go.Tools.Tool.StartTransaction(System.String)"/>,
             if this tool's activity involves modification of the model.
             Implementations of this method can look at <see cref="P:Northwoods.Go.Diagram.LastInput"/> to get the mouse
             event and input state.
            
             You should call this method only after setting <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> to the Tool that you want to activate.
            
             By default this only sets <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/> to true.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            
             If you override this method, it is commonplace to also override <see cref="M:Northwoods.Go.Tools.Tool.DoDeactivate"/> to clean up whatever you set up in this method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoDeactivate">
             <summary>
             The Diagram calls this method on the old tool when
             <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> is set to a new tool.
             </summary>
             <remarks>
             This needs to set <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/> to false.
             Overrides of this method might call <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/>,
             if this tool's activity involves modification of the model.
            
             You should have no reason to call this method, because it is automatically called by the
             <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> property setter on the old tool.
            
             By default this only sets <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/> to false.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            
             It is commonplace to override this method in order to clean up whatever you have set up in an override of <see cref="M:Northwoods.Go.Tools.Tool.DoActivate"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoStop">
             <summary>
             The Diagram calls this method when this tool stops being the current tool; you should not call this method.
             </summary>
             <remarks>
             Tool implementations should perform their per-use cleanup here,
             such as releasing mouse capture.
            
             You should not call this method -- only the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> property setter should call this method.
             If you want to stop a tool unexpectedly, you should call <see cref="M:Northwoods.Go.Tools.Tool.DoCancel"/>.
             If your implementation of a tool wants to stop itself, you should call <see cref="M:Northwoods.Go.Tools.Tool.StopTool"/>.
            
             By default this method does nothing.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            
             It is commonplace to override this method in order to clean up whatever you have set up in an override of <see cref="M:Northwoods.Go.Tools.Tool.DoStart"/>.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoCancel">
             <summary>
             The diagram will call this method when the user wishes to cancel the
             current tool's operation.
             </summary>
             <remarks>
             Typically this is called when the user hits the ESCAPE key.
             This should restore the original state of what was modified by this tool, and then it should call <see cref="M:Northwoods.Go.Tools.Tool.StopTool"/>.
             This method is not responsible for cleaning up any side-effects that should be performed
             by <see cref="M:Northwoods.Go.Tools.Tool.DoDeactivate"/> and/or <see cref="M:Northwoods.Go.Tools.Tool.DoStop"/>, which will always be called whether the tool stops normally or abnormally.
            
             By default this method just sets <see cref="P:Northwoods.Go.Tools.Tool.TransactionResult"/> to null and calls <see cref="M:Northwoods.Go.Tools.Tool.StopTool"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             You will want to override this method even in tools that call <see cref="M:Northwoods.Go.Tools.Tool.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/>,
             because the <see cref="T:Northwoods.Go.Models.UndoManager"/> might not be enabled.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StopTool">
             <summary>
             If the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> is this tool,
             stop this tool and start the <see cref="P:Northwoods.Go.Diagram.DefaultTool"/>
             by making it be the new current tool.
             </summary>
             <remarks>
             The implementation of various tool methods can call this method to stop the current tool.
             This will call <see cref="M:Northwoods.Go.Tools.Tool.DoStop"/> -- you should not call that method directly.
            
             If you want to stop the current tool and have it restore the original state, call <see cref="M:Northwoods.Go.Tools.Tool.DoCancel"/>.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoMouseDown">
             <summary>
             The diagram will call this method upon a mouse down event.
             </summary>
             <remarks>
             This is normally overridden for mouse-down tools;
             it is not called for mouse-move or mouse-up tools.
             However it may also be called when the tool is run in a modal fashion,
             when code explicitly sets the diagram's <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>.
             Implementations of this method can look at <see cref="P:Northwoods.Go.Diagram.LastInput"/> to get the mouse
             event and input state.
            
             By default this method checks <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/>; if that is false it calls <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/>.
             If that in turn is true, this calls <see cref="M:Northwoods.Go.Tools.Tool.DoActivate"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoMouseMove">
             <summary>
             The diagram will call this method upon a mouse move event.
             </summary>
             <remarks>
             This is normally overridden for mouse-move tools;
             it is not called for mouse-up tools.
             However it may also be called when the tool is run in a modal fashion,
             when code explicitly sets the diagram's <see cref="P:Northwoods.Go.Diagram.CurrentTool"/>.
             An override of this method usually does nothing when <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/> is false.
             Implementations of this method can look at <see cref="P:Northwoods.Go.Diagram.LastInput"/> to get the mouse
             event and input state.
            
             By default this method does nothing.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoMouseUp">
             <summary>
             The diagram will call this method upon a mouse up event.
             </summary>
             <remarks>
             This is normally overridden for mouse-up tools.
             An override of this method usually does nothing when <see cref="P:Northwoods.Go.Tools.Tool.IsActive"/> is false,
             except for calling <see cref="M:Northwoods.Go.Tools.Tool.StopTool"/>.
             Tools normally stop upon a mouse up, by calling <see cref="M:Northwoods.Go.Tools.Tool.StopTool"/>.
             If you want to handle multiple mouse down-up gestures in one tool activation,
             you will need to override this method to only stop the tool when you want.
             Implementations of this method can look at <see cref="P:Northwoods.Go.Diagram.LastInput"/> to get the mouse
             event and input state.
            
             By default this method just calls <see cref="M:Northwoods.Go.Tools.Tool.StopTool"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoMouseWheel">
             <summary>
             The diagram will call this method as the mouse wheel is rotated.
             </summary>
             <remarks>
             Implementations of this method can look at <see cref="P:Northwoods.Go.Diagram.LastInput"/> to get the mouse
             event and input state.
            
             By default this method does nothing.
             (But the <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseWheel"/> override will call <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseWheel"/>.)
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.CanStartMultiTouch">
             <summary>
             Called by <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseDown"/> and <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseMove"/>,
             this method determines whether or not to allow pinch zooming from a multi-touch event.
             </summary>
             <remarks>
             By default this predicate just returns true.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <seealso cref="M:Northwoods.Go.Tools.Tool.StandardPinchZoomStart"/>
             <seealso cref="M:Northwoods.Go.Tools.Tool.StandardPinchZoomMove"/>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StandardPinchZoomStart">
             <summary>
             Initiates pinch-zooming on multi-touch devices.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseDown"/> if the <see cref="P:Northwoods.Go.Diagram.LastInput"/> has <see cref="P:Northwoods.Go.InputEvent.IsMultiTouch"/>
             set to true and <see cref="M:Northwoods.Go.Tools.Tool.CanStartMultiTouch"/> returns true.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <seealso cref="M:Northwoods.Go.Tools.Tool.CanStartMultiTouch"/>
             <seealso cref="M:Northwoods.Go.Tools.Tool.StandardPinchZoomMove"/>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StandardPinchZoomMove">
             <summary>
             Continues pinch-zooming (started by <see cref="M:Northwoods.Go.Tools.Tool.StandardPinchZoomStart"/> on multi-touch devices.
             </summary>
             <remarks>
             This is called by <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseMove"/> if the <see cref="P:Northwoods.Go.Diagram.LastInput"/> has <see cref="P:Northwoods.Go.InputEvent.IsMultiTouch"/>
             set to true and <see cref="M:Northwoods.Go.Tools.Tool.CanStartMultiTouch"/> returns true.
             By default this calls <see cref="M:Northwoods.Go.Tools.Tool.DoCancel"/> in order to cancel the regular tool behavior caused by the multitouch events.
             This then calculates the appropriate zoom level and calls <see cref="M:Northwoods.Go.CommandHandler.CanResetZoom(System.Double)"/> to decide
             whether to call <see cref="M:Northwoods.Go.CommandHandler.ResetZoom(System.Double)"/> to actually set <see cref="P:Northwoods.Go.Diagram.Scale"/>.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <seealso cref="M:Northwoods.Go.Tools.Tool.CanStartMultiTouch"/>
             <seealso cref="M:Northwoods.Go.Tools.Tool.StandardPinchZoomStart"/>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoKeyDown">
             <summary>
             The diagram will call this method upon a key down event.
             </summary>
             <remarks>
             By default this just calls <see cref="M:Northwoods.Go.Tools.Tool.DoCancel"/> if the key is the ESCAPE key.
             Implementations of this method can look at <see cref="P:Northwoods.Go.Diagram.LastInput"/> to get the key.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoKeyUp">
             <summary>
             The diagram will call this method upon a key up event.
             </summary>
             <remarks>
             Implementations of this method can look at <see cref="P:Northwoods.Go.Diagram.LastInput"/> to get the key.
            
             By default this method does nothing.
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StartTransaction(System.String)">
             <summary>
             Call <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/> with the given transaction name.
             </summary>
             <remarks>
             This always sets <see cref="P:Northwoods.Go.Tools.Tool.TransactionResult"/> to null.
            
             This is normally called in an override of <see cref="M:Northwoods.Go.Tools.Tool.DoActivate"/>, if the tool modifies the model,
             along with a call to <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/> in an override of <see cref="M:Northwoods.Go.Tools.Tool.DoDeactivate"/>.
             Alternatively, you can surround a block of code that sets the <see cref="P:Northwoods.Go.Tools.Tool.TransactionResult"/>
             with calls to StartTransaction and StopTransaction.
             </remarks>
             <param name="tname">a string describing the transaction.</param>
             <returns>the value of the call to <see cref="M:Northwoods.Go.Diagram.StartTransaction(System.String)"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StopTransaction">
             <summary>
             If <see cref="P:Northwoods.Go.Tools.Tool.TransactionResult"/> is null, call <see cref="M:Northwoods.Go.Diagram.RollbackTransaction"/>,
             otherwise call <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/>.
             </summary>
             <remarks>
             This is normally called in an override of <see cref="M:Northwoods.Go.Tools.Tool.DoDeactivate"/>,
             if <see cref="M:Northwoods.Go.Tools.Tool.StartTransaction(System.String)"/> was called in <see cref="M:Northwoods.Go.Tools.Tool.DoActivate"/>.
             Alternatively, you can surround a block of code that sets the <see cref="P:Northwoods.Go.Tools.Tool.TransactionResult"/>
             with calls to `StartTransaction` and `StopTransaction`.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <returns>the result of the call to rollback or commit the transaction.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StandardMouseSelect">
             <summary>
             Implement the standard behavior for selecting parts with the mouse,
             depending on the control and shift modifier keys.
             </summary>
             <remarks>
             Control-clicking on a part will select it if it wasn't already,
             and will deselect if it had been selected.
             Shift-clicking on a part will add it to the selection (if it wasn't already).
             Otherwise, clicking on a part will select it (if it wasn't already).
            
             Note that there are restrictions on selection.
             For example, a part cannot be selected in this manner if <see cref="P:Northwoods.Go.Part.Selectable"/> is false,
             or if <see cref="P:Northwoods.Go.Diagram.MaxSelectionCount"/> would be exceeded.
            
             A left click in the background of the diagram with no modifier keys clears the selection.
            
             This method does not implement any click event behavior -- that is implemented by <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseClick(System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject})"/>.
            
             The <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/> calls this method in its override of <see cref="M:Northwoods.Go.Tools.Tool.DoMouseUp"/> in order to change the selection.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StandardMouseClick(System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject})">
             <summary>
             Implement the standard behavior for mouse clicks,
             searching for and calling click handler functions on <see cref="T:Northwoods.Go.GraphObject"/>s
             or on <see cref="P:Northwoods.Go.Tools.Tool.Diagram"/>,
             and raising the corresponding <see cref="T:Northwoods.Go.DiagramEvent"/>.
             </summary>
             <remarks>
             A click on a <see cref="T:Northwoods.Go.GraphObject"/> of the diagram will raise one of the following <see cref="T:Northwoods.Go.DiagramEvent"/>s:
             <see cref="E:Northwoods.Go.Diagram.ElementSingleClicked"/>, <see cref="E:Northwoods.Go.Diagram.ElementDoubleClicked"/>, <see cref="E:Northwoods.Go.Diagram.ElementContextClicked"/>.
             This will also look at the corresponding click property:
             <see cref="P:Northwoods.Go.GraphObject.Click"/>, <see cref="P:Northwoods.Go.GraphObject.DoubleClick"/>, or <see cref="P:Northwoods.Go.GraphObject.ContextClick"/>.
             If the value is a function, this will call it, passing the current <see cref="T:Northwoods.Go.InputEvent"/>
             and the GraphObject.
             If the value is null, it tries looking at the parent <see cref="P:Northwoods.Go.GraphObject.Panel"/>,
             and so on, walking up the visual tree until it finds the appropriate function to call.
             After calling the click function, if the value of <see cref="P:Northwoods.Go.InputEvent.Handled"/> is false,
             this method will continue walking up the visual tree looking for more click functions
             to call.
             Once it has looked at the top-level object (a <see cref="T:Northwoods.Go.Part"/>)
             for a click function, this method stops.
            
             A click in the background of the diagram will raise one of the following <see cref="T:Northwoods.Go.DiagramEvent"/>s:
             "BackgroundSingleClicked", "BackgroundDoubleClicked", or "BackgroundContextClicked".
             This will also look at the corresponding click property:
             <see cref="P:Northwoods.Go.Diagram.Click"/>, <see cref="P:Northwoods.Go.Diagram.DoubleClick"/>, or <see cref="P:Northwoods.Go.Diagram.ContextClick"/>.
             If the value is a function, this will call it, passing the current <see cref="T:Northwoods.Go.InputEvent"/>.
            
             This method is not responsible for selecting or deselecting any parts.
             Call <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseSelect"/> for that functionality.
            
             Note that this calls <see cref="M:Northwoods.Go.GraphObject.IsEnabledElement"/> on the target object;
             if it returns false, no click action will occur.
            
             The <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/> calls this method in its override of <see cref="M:Northwoods.Go.Tools.Tool.DoMouseUp"/> in order to raise "click" events.
             Note that by default GraphObjects in Layers that are <see cref="P:Northwoods.Go.Layer.IsTemporary"/> will not be "clicked".
             To change that behavior it is easiest to set <see cref="P:Northwoods.Go.GraphObject.IsActionable"/> to true on those objects for which you wish to handle "click" events.
             Then the <see cref="T:Northwoods.Go.Tools.ActionTool"/>'s <see cref="M:Northwoods.Go.Tools.Tool.DoMouseUp"/> override will raise the standard "click" events.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="navig">A custom navigation
             function to find target objects.</param>
             <param name="pred">A custom predicate
             function to find target objects. No value means that only objects in layers holding permanent objects.</param>
             <returns>true if <see cref="P:Northwoods.Go.InputEvent.Handled"/> had been set to true on the <see cref="P:Northwoods.Go.Diagram.LastInput"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StandardMouseClick(System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject})">
            <inheritdoc cref="M:Northwoods.Go.Tools.Tool.StandardMouseClick(System.Func{Northwoods.Go.GraphObject,Northwoods.Go.GraphObject},System.Predicate{Northwoods.Go.GraphObject})"/>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool._StandardClick(Northwoods.Go.GraphObject,Northwoods.Go.InputEvent,Northwoods.Go.Diagram)">
            @hidden @internal
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StandardMouseOver">
             <summary>
             Implement the standard behavior for mouse enter, over, and leave events,
             where the mouse is moving but no button is pressed.
             </summary>
             <remarks>
             This should be called by mouse move event handlers when wanting to
             detect and invoke mouse enter/over/leave event handlers.
            
             The <see cref="P:Northwoods.Go.GraphObject.MouseEnter"/> property provides a function to call
             when the mouse first enters an object or any of its contained objects
             (if the object is actually a <see cref="T:Northwoods.Go.Panel"/>).
            
             The <see cref="P:Northwoods.Go.GraphObject.MouseLeave"/> property provides a function to call
             when the mouse leaves an object and all of its contained objects
             (if the object is actually a <see cref="T:Northwoods.Go.Panel"/>).
            
             The <see cref="P:Northwoods.Go.GraphObject.MouseOver"/> property and <see cref="P:Northwoods.Go.Diagram.MouseOver"/>
             properties provide functions to call when the mouse moves but stays
             within the same <see cref="T:Northwoods.Go.GraphObject"/> or when the mouse moves in the
             background of the <see cref="P:Northwoods.Go.Tools.Tool.Diagram"/>.
            
             This method is also responsible for updating the <see cref="P:Northwoods.Go.Diagram.CurrentCursor"/>
             according to the value of <see cref="P:Northwoods.Go.GraphObject.Cursor"/> and <see cref="P:Northwoods.Go.Diagram.DefaultCursor"/>.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoCurrentElementChanged(Northwoods.Go.GraphObject,Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            This is called by <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseOver"/> when the current element changes.
            </summary>
            <remarks>
            By default this does nothing.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StandardMouseWheel">
             <summary>
             Implement the standard behavior for mouse wheel events.
             <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseWheel"/> calls this method.
             </summary>
             <remarks>
             Turning the mouse wheel if <see cref="P:Northwoods.Go.Diagram.AllowVerticalScroll"/> is true
             causes the diagram to scroll up or down.
             If <see cref="P:Northwoods.Go.InputEvent.Shift"/> and <see cref="P:Northwoods.Go.Diagram.AllowHorizontalScroll"/> are true,
             the diagram scrolls left or right.
            
             If <see cref="P:Northwoods.Go.InputEvent.Control"/> and <see cref="P:Northwoods.Go.Diagram.AllowZoom"/> are true,
             turning the mouse wheel changes the diagram's scale,
             zooming in or out while trying to keep the point in the model
             at the same point as the mouse.
            
             The value of <see cref="P:Northwoods.Go.Tools.ToolManager.MouseWheelBehavior"/> affects what operations might occur
             upon mouse wheel events.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoWheelChange(Northwoods.Go.Diagram,Northwoods.Go.Point,Northwoods.Go.InputEvent)">
             This is called be <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseWheel"/> after an Diagram actions are taken.
             By default this disallows wheel events from bubbling if the Diagram position changed (it does not equal the old position).
            
             This method is rarely overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             <summary>
             (undocumented)
             </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.StandardWaitAfter(System.Double,Northwoods.Go.InputEvent)">
             <summary>
             This is called to start a new timer to call <see cref="M:Northwoods.Go.Tools.Tool.DoWaitAfter(Northwoods.Go.InputEvent)"/> after a given delay.
             It first cancels any previously running "WaitAfter" timer, by calling <see cref="M:Northwoods.Go.Tools.Tool.CancelWaitAfter"/>.
             </summary>
             <remarks>
             This is normally used to implement mouse hover and mouse hold events.
             If the mouse has moved, it must not have moved beyond the distance as determined by
             <see cref="M:Northwoods.Go.Tools.Tool.IsBeyondDragSize(System.Nullable{Northwoods.Go.Point},System.Nullable{Northwoods.Go.Point})"/> for it be considered "stationary".
             So the regular <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseMove"/> implementation only calls
             this method when the mouse has moved beyond the drag size.
            
             This method is rarely overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="delay">The delay, in milliseconds.</param>
             <param name="e">An optional event that caused this timer. Defaults to <see cref="P:Northwoods.Go.Diagram.LastInput"/>.
             This gets passed on to <see cref="M:Northwoods.Go.Tools.Tool.DoWaitAfter(Northwoods.Go.InputEvent)"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.CancelWaitAfter">
             <summary>
             This is called to cancel any running "WaitAfter" timer.
             </summary>
             <remarks>
             This is called when a tool is stopped.
            
             This method is rarely overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.DoWaitAfter(Northwoods.Go.InputEvent)">
             <summary>
             This is called a certain delay after a call to <see cref="M:Northwoods.Go.Tools.Tool.StandardWaitAfter(System.Double,Northwoods.Go.InputEvent)"/> if there
             has not been any call to <see cref="M:Northwoods.Go.Tools.Tool.CancelWaitAfter"/>.
             </summary>
             <remarks>
             The <see cref="T:Northwoods.Go.Tools.ToolManager"/> overrides this method in order to implement support for mouse-hover behavior and tooltips.
            
             By default this does nothing.
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="e">The event that caused <see cref="M:Northwoods.Go.Tools.Tool.StandardWaitAfter(System.Double,Northwoods.Go.InputEvent)"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.FindToolHandleAt(Northwoods.Go.Point,System.String)">
             <summary>
             This convenience function finds the front-most <see cref="T:Northwoods.Go.GraphObject"/>
             that is at a given point and that is an element of an <see cref="T:Northwoods.Go.Adornment"/>
             that is of a given category.
             </summary>
             <remarks>
             The tool handle must be an immediate element of the Adornment,
             not a GraphObject that is nested within Panels within the Adornment.
            
             This method is very infrequently overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="p">a Point in document coordinates.</param>
             <param name="category">the required <see cref="P:Northwoods.Go.Part.Category"/> of the <see cref="T:Northwoods.Go.Adornment"/>.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.Tool.IsBeyondDragSize(System.Nullable{Northwoods.Go.Point},System.Nullable{Northwoods.Go.Point})">
             <summary>
             Return true when the last mouse point is far enough away from the first mouse down point
             to constitute a drag operation instead of just a potential click.
             </summary>
             <remarks>
             This uses the value of <see cref="P:Northwoods.Go.Tools.ToolManager.DragSize"/>.
             On touch devices the value is automatically increased to accommodate the unavoidable movement of fingers.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             @expose
             <param name="first">Point in view coordinates, defaults to <see cref="P:Northwoods.Go.Diagram.FirstInput"/>'s <see cref="P:Northwoods.Go.InputEvent.ViewPoint"/>.</param>
             <param name="last">Point in view coordinates, defaults to <see cref="P:Northwoods.Go.Diagram.LastInput"/>'s <see cref="P:Northwoods.Go.InputEvent.ViewPoint"/>.</param>
        </member>
        <member name="P:Northwoods.Go.Tools.Tool.Name">
             <summary>
             Gets or sets the name of this tool.
             </summary>
             <remarks>
             The default name is an empty string,
             but the constructor for each instance of a subclass of Tool will initialize it appropriately.
             For example, the name of the <see cref="T:Northwoods.Go.Tools.DragSelectingTool"/> is "DragSelecting".
            
             This name is sometimes used by tools that use <see cref="T:Northwoods.Go.Adornment"/>s as the <see cref="P:Northwoods.Go.Part.Category"/> for their Adornments.
             It is also sometimes used by tools that conduct transactions as the transaction name.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.Tool.IsEnabled">
             <summary>
             Gets or sets whether this tool can be started by a mouse event.
             </summary>
             <remarks>
             Set this to false to prevent <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> from returning true.
             Setting this property to false should prevent this tool from being used in a mode-less fashion
             by the <see cref="T:Northwoods.Go.Tools.ToolManager"/> with a mouse down/move/up event.
             However, even when this property is false, this tool can still be used in a modal fashion:
             it can still be started by explicitly setting the
             <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> property to this tool.
            
             The default value is true.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.Tool.IsActive">
             <summary>
             Gets or sets whether this tool is started and is actively doing something.
             </summary>
             <remarks>
             You can set this to true after your tool is started (i.e. when it is the
             <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> and <see cref="M:Northwoods.Go.Tools.Tool.DoStart"/>
             had been called), but when it is not yet in a state
             that it is actually "doing" something, because it is waiting for the right
             circumstances.  This is typically only important when the tool is used in
             a modal fashion.
            
             The default value is false.
            
             This is normally set by <see cref="M:Northwoods.Go.Tools.Tool.DoActivate"/> and <see cref="M:Northwoods.Go.Tools.Tool.DoDeactivate"/>.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.Tool.TransactionResult">
             <summary>
             Gets or sets the name of the transaction to be committed by <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/>
             </summary>
             <remarks>
             If null, the transaction will be rolled back.
            
             If this is non-null at the time of a call to <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/>,
             it calls <see cref="M:Northwoods.Go.Diagram.CommitTransaction(System.String)"/> with this transaction name;
             if this is null at that time, it calls <see cref="M:Northwoods.Go.Diagram.RollbackTransaction"/>.
            
             The default value is null; <see cref="M:Northwoods.Go.Tools.Tool.StartTransaction(System.String)"/> will also set this to null.
             Because a value of null when <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/> is called will rollback the transaction,
             it is important that your code sets this property to a non-null value when it thinks it has succeeded.
            
             This property exists so that no matter what execution path occurs to end the usage of a tool,
             any ongoing transaction can be properly committed or rolled-back.
             Many tools call <see cref="M:Northwoods.Go.Tools.Tool.StartTransaction(System.String)"/> and <see cref="M:Northwoods.Go.Tools.Tool.StopTransaction"/>; thus they set this property
             for their transaction to be committed.
             <see cref="M:Northwoods.Go.Tools.Tool.DoCancel"/> also sets this property to null.
             </remarks>
        </member>
        <member name="T:Northwoods.Go.Tools.IHasToolTip">
            <summary>
            This simple interface is implemented by classes that allow for the use of a ToolTip,
            namely <see cref="T:Northwoods.Go.Diagram"/> and <see cref="T:Northwoods.Go.GraphObject"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.IHasToolTip.ToolTip">
            <summary>
            A tooltip to be shown.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.WheelMode">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Tools.ToolManager.MouseWheelBehavior"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.WheelMode.Scroll">
            <summary>
            Mouse wheel events scroll the diagram.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.WheelMode.Zoom">
            <summary>
            Mouse wheel events change the scale of the diagram.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.WheelMode.WheelNone">
            <summary>
            Mouse wheel events are ignored, although scrolling or zooming by other means may still be allowed.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.GestureMode">
            <summary>
            This enumeration specifies possible values for <see cref="P:Northwoods.Go.Tools.ToolManager.GestureBehavior"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.GestureMode.Zoom">
            <summary>
            Pointer/touch pinch gestures on the canvas intend to zoom the Diagram.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.GestureMode.Cancel">
            <summary>
            Pointer/touch pinch gestures on the canvas intend to have no effect on the Diagram, but also no effect on the page.
            </summary>
        </member>
        <member name="F:Northwoods.Go.Tools.GestureMode.None">
            <summary>
            Pointer/touch pinch gestures on the canvas intend to have no effect on the Diagram, but will not be prevented,
            and may bubble up the page to have other effects (such as zooming the page).
            </summary>
        </member>
        <member name="T:Northwoods.Go.Tools.ToolManager">
             <summary>
             This special <see cref="T:Northwoods.Go.Tools.Tool"/> is responsible for managing all of the Diagram's
             mode-less tools, which you can access as the <see cref="P:Northwoods.Go.Diagram.ToolManager"/>.
            
             Mode-less tools are tools that are present in one of the following lists:
             <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>, <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/>, or <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/>.
             This ToolManager tool is normally the <see cref="P:Northwoods.Go.Diagram.DefaultTool"/>,
             so it is also usually the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> when the user is doing "nothing".
             </summary>
             <remarks>
             When this tool is running as the current tool, it handles mouse-down,
             mouse-move, and mouse-up events and the corresponding touch events.
             For each event it iterates over each of the tools in the corresponding list,
             calling the tool's <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> predicate.
             If that predicate returns true, it starts that tool by making it the
             diagram's current tool.
             It then activates the tool and passes on the event to the tool by calling
             the corresponding method (either <see cref="M:Northwoods.Go.Tools.Tool.DoMouseDown"/>,
             <see cref="M:Northwoods.Go.Tools.Tool.DoMouseMove"/>, or <see cref="M:Northwoods.Go.Tools.Tool.DoMouseUp"/>).
            
             Because this tool is typically the one running as the diagram's current tool
             when the user isn't "doing" anything, this tool can also handle other events,
             such as mouse wheel events and keyboard commands.
            
             Keyboard events are just passed on to the <see cref="P:Northwoods.Go.Diagram.CommandHandler"/>'s
             <see cref="M:Northwoods.Go.CommandHandler.DoKeyDown"/> or <see cref="M:Northwoods.Go.CommandHandler.DoKeyUp"/> method.
            
             This tool also is responsible for showing tooltips.
             Tooltip <see cref="T:Northwoods.Go.Adornment"/>s may be declared as any <see cref="P:Northwoods.Go.GraphObject.ToolTip"/>,
             or as the <see cref="P:Northwoods.Go.Diagram.ToolTip"/> if the mouse or finger remains motionless in the background of the diagram.
             You can set <see cref="P:Northwoods.Go.Tools.ToolManager.ToolTipDuration"/> to control how long the tooltip remains visible after being motionless.
            
             This tool does not utilize any tool handles.
             This tool does not conduct any transactions.
             But of course some of the tools that the ToolManager starts can show tool handles and/or
             conduct their own transactions.
             </remarks>
             @category Tool
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.#ctor">
             <summary>
             You do not normally need to create an instance of this tool
             because one already exists as the <see cref="P:Northwoods.Go.Diagram.ToolManager"/>, which you can modify.
            
             The <see cref="P:Northwoods.Go.Tools.Tool.Name"/> of this tool is "ToolManager".
             </summary>
             <remarks>
             The constructor produces a ToolManager that manages no tools.
             Call <see cref="M:Northwoods.Go.Tools.ToolManager.InitializeStandardTools"/> to create various tools,
             initialize the tool properties such as <see cref="T:Northwoods.Go.Tools.DraggingTool"/>,
             and initialize the three mouse tool lists with those newly created tools.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.MouseWheelBehavior">
            <summary>
            Gets or sets the ToolManager's mouse wheel behavior. Allowed values are <see cref="F:Northwoods.Go.Tools.WheelMode.Scroll"/> and
            <see cref="F:Northwoods.Go.Tools.WheelMode.Zoom"/> and <see cref="F:Northwoods.Go.Tools.WheelMode.WheelNone"/>.
            </summary>
            <remarks>
            The default value is <see cref="F:Northwoods.Go.Tools.WheelMode.Scroll"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.GestureBehavior">
             <summary>
             Gets or sets the ToolManager's touch pinching behavior. Allowed values are <see cref="F:Northwoods.Go.Tools.GestureMode.Zoom"/> and
             <see cref="F:Northwoods.Go.Tools.GestureMode.Cancel"/> and <see cref="F:Northwoods.Go.Tools.GestureMode.None"/>.
             </summary>
             <remarks>
             The default value is <see cref="F:Northwoods.Go.Tools.GestureMode.Zoom"/>.
            
             If you want to control whether a single finger touch movement
             causes a pan (i.e. scroll) of the diagram's contents or scrolls the page,
             consider either disabling the <see cref="P:Northwoods.Go.Tools.ToolManager.PanningTool"/>
             by setting its property <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> to false
             or by setting <see cref="P:Northwoods.Go.Tools.PanningTool.Bubbles"/> to true.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.InitializeStandardTools">
            <summary>
            Initialize the three mouse tool lists with instances of the standard tools.
            </summary>
            <remarks>
            This adds new instances of tools to the following three mouse tool lists:
            <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>, <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/>, or <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/>.
            This also sets the various tool properties of this ToolManager
            to those newly created tools.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.UpdateAdornments(Northwoods.Go.Part)">
            @hidden @internal
            <summary>
            Update any tooltip.
            </summary>
            <remarks>
            This method may be overridden.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoMouseDown">
             <summary>
             Iterate over the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/> list and start the first tool
             for which its <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> predicate returns true.
             </summary>
             <remarks>
             Starting a tool replaces the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> with the new tool.
             Successfully doing so also activates the new tool by calling <see cref="M:Northwoods.Go.Tools.Tool.DoActivate"/>
             and passes on the mouse-down event to it by calling <see cref="M:Northwoods.Go.Tools.Tool.DoMouseDown"/>.
            
             Not finding any startable tools causes this tool manager to activate,
             thereby enabling the mouse-move and mouse-up behaviors and starts
             detection of a mouse-hold event after <see cref="P:Northwoods.Go.Tools.ToolManager.HoldDelay"/> milliseconds.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoMouseMove">
             <summary>
             Iterate over the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/> list and start the first tool
             for which its <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> predicate returns true.
             </summary>
             <remarks>
             Starting a tool replaces the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> with the new tool.
             Successfully doing so also activates the new tool by calling <see cref="M:Northwoods.Go.Tools.Tool.DoActivate"/>
             and passes on the mouse-move event to it by calling <see cref="M:Northwoods.Go.Tools.Tool.DoMouseMove"/>.
            
             If no tool is found and activated, this:
               - Calls <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseOver"/> to invoke any mouse-enter, mouse-over, or mouse-leave functions.
               - If the mouse has moved sufficiently, such that <see cref="M:Northwoods.Go.Tools.Tool.IsBeyondDragSize(System.Nullable{Northwoods.Go.Point},System.Nullable{Northwoods.Go.Point})"/> is true,
                 this also calls <see cref="M:Northwoods.Go.Tools.Tool.StandardWaitAfter(System.Double,Northwoods.Go.InputEvent)"/> for a possible call to
                 <see cref="M:Northwoods.Go.Tools.ToolManager.DoWaitAfter(Northwoods.Go.InputEvent)"/> after <see cref="P:Northwoods.Go.Tools.ToolManager.HoverDelay"/> milliseconds.
               - Sets the <see cref="P:Northwoods.Go.Diagram.LastInput"/> to bubble.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.StandardMouseActivity(Northwoods.Go.Diagram)">
            @hidden @internal
            <summary>
            This function calls StandardMouseOver for mouse events
            And StandardWaitAfter for hover and hold events
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoCurrentElementChanged(Northwoods.Go.GraphObject,Northwoods.Go.GraphObject)">
            @hidden @internal
            <summary>
            This is called by <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseOver"/> when the current element changes.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoWaitAfter(Northwoods.Go.InputEvent)">
             <summary>
             Implement the standard behavior for when the mouse has not moved for a period of time.
             This is due to an expired timer started by calling <see cref="M:Northwoods.Go.Tools.Tool.StandardWaitAfter(System.Double,Northwoods.Go.InputEvent)"/>.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseHover"/> and, if not mouse-down, <see cref="M:Northwoods.Go.Tools.ToolManager.DoToolTip"/>.
             Afterwards, if the event that called <see cref="M:Northwoods.Go.Tools.Tool.StandardWaitAfter(System.Double,Northwoods.Go.InputEvent)"/> was a touch event,
             this simulates a right click, enabling context menu functionality and other actions on touch devices.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="ievent">The input event that caused <see cref="M:Northwoods.Go.Tools.Tool.StandardWaitAfter(System.Double,Northwoods.Go.InputEvent)"/>. In this override,
             if it is a touch input event and the <see cref="P:Northwoods.Go.Diagram.LastInput"/> is not handled (<see cref="P:Northwoods.Go.InputEvent.Handled"/> set to false),
             then this method will simulate a right click.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoMouseHover">
             <summary>
             Implement the standard behavior for mouse hover and mouse hold events,
             called by <see cref="M:Northwoods.Go.Tools.ToolManager.DoWaitAfter(Northwoods.Go.InputEvent)"/> when the mouse has not moved for a period of time.
             </summary>
             <remarks>
             If there has been no mouse down, the timer is set for <see cref="P:Northwoods.Go.Tools.ToolManager.HoverDelay"/> milliseconds.
             If it executes, it calls any <see cref="P:Northwoods.Go.GraphObject.MouseHover"/> function on the object
             at the mouse or on any of its containing panels,
             or it calls any <see cref="P:Northwoods.Go.Diagram.MouseHover"/> function for a background mouse-hover event.
            
             If there had been a mouse down, the timer is set for <see cref="P:Northwoods.Go.Tools.ToolManager.HoldDelay"/> milliseconds.
             If it executes, it calls any <see cref="P:Northwoods.Go.GraphObject.MouseHold"/> function on the object
             at the mouse or on any of its containing panels,
             or it calls any <see cref="P:Northwoods.Go.Diagram.MouseHold"/> function for a background mouse-held-down event.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoToolTip">
             <summary>
             Implement the standard behavior for tooltips,
             called by <see cref="M:Northwoods.Go.Tools.ToolManager.DoWaitAfter(Northwoods.Go.InputEvent)"/> when the mouse has not moved for a period of time.
             </summary>
             <remarks>
             This looks for a <see cref="T:Northwoods.Go.GraphObject"/> at the latest mouse point.
             If it finds an object, it checks for a <see cref="P:Northwoods.Go.GraphObject.ToolTip"/>.
             If it has none, this method searches up the visual tree for a containing
             <see cref="T:Northwoods.Go.Panel"/> that does have a tooltip.
            
             If it didn't find any object, this looks for a <see cref="P:Northwoods.Go.Diagram.ToolTip"/>.
            
             If it eventually finds a tooltip, this calls <see cref="M:Northwoods.Go.Tools.ToolManager.ShowToolTip(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)"/>.
             Otherwise this calls <see cref="M:Northwoods.Go.Tools.ToolManager.HideToolTip"/>.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.ShowToolTip(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)">
             <summary>
             Show a tooltip.
             This is called by <see cref="M:Northwoods.Go.Tools.ToolManager.DoToolTip"/> once that method has found a tooltip to display.
             </summary>
             <remarks>
             This calls <see cref="M:Northwoods.Go.Tools.ToolManager.PositionToolTip(Northwoods.Go.Adornment,Northwoods.Go.GraphObject)"/> to make it easier to customize how the tooltip
             is positioned relative to the object with the tooltip.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="tooltip"></param>
             <param name="obj">The GraphObject getting the tooltip; this is null if the tooltip is being shown for the diagram background.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.PositionToolTip(Northwoods.Go.Adornment,Northwoods.Go.GraphObject)">
             <summary>
             This is called by <see cref="M:Northwoods.Go.Tools.ToolManager.ShowToolTip(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)"/> to position the part within the viewport.
             </summary>
             <remarks>
             It normally goes just below the cursor.
             But if the mouse is too close to the right edge or the bottom edge of the viewport,
             it is positioned left and/or above the cursor.
            
             This method only operates if the tooltip, an <see cref="T:Northwoods.Go.Adornment"/>, does not have a <see cref="P:Northwoods.Go.Adornment.Placeholder"/>.
             When there is a <see cref="T:Northwoods.Go.Placeholder"/> in the tooltip, that Adornment is automatically positioned
             so that the Placeholder is positioned at the adorned object, the second argument to this method.
            
             This method may be overridden.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            
             If you override this method to position the tooltip,
             the tooltip has already been measured but not arranged,
             so you can use its <see cref="P:Northwoods.Go.GraphObject.MeasuredBounds"/> width and height
             but not its <see cref="P:Northwoods.Go.GraphObject.ActualBounds"/>.
             </remarks>
             <param name="tooltip"></param>
             <param name="obj">The <see cref="T:Northwoods.Go.GraphObject"/> getting the tooltip,
             or null if the tooltip is for the diagram background.</param>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.HideToolTip">
            <summary>
            Hide any tooltip.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.CurrentToolTip">
            <summary>
            This read-only property returns the currently showing tooltip, or null if there is none.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoMouseUp">
             <summary>
             Iterate over the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/> list and start the first tool
             for which its <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> predicate returns true.
             </summary>
             <remarks>
             Starting a tool replaces the <see cref="P:Northwoods.Go.Diagram.CurrentTool"/> with the new tool.
             Successfully doing so also activates the new tool by calling <see cref="M:Northwoods.Go.Tools.Tool.DoActivate"/>
             and passes on the mouse-up event to it by calling <see cref="M:Northwoods.Go.Tools.Tool.DoMouseUp"/>.
            
             If no startable tool is found it deactivates this tool manager,
             to get ready for a mouse-down and ignore mouse-move and mouse-up events.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoMouseWheel">
            <summary>
            The diagram will call this method as the mouse wheel is rotated.
            </summary>
            <remarks>
            By default this just calls <see cref="M:Northwoods.Go.Tools.Tool.StandardMouseWheel"/>.
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoKeyDown">
            <summary>
            This just calls <see cref="M:Northwoods.Go.CommandHandler.DoKeyDown"/> on the diagram's <see cref="P:Northwoods.Go.Diagram.CommandHandler"/>.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoKeyUp">
            <summary>
            This just calls <see cref="M:Northwoods.Go.CommandHandler.DoKeyUp"/> on the diagram's <see cref="P:Northwoods.Go.Diagram.CommandHandler"/>.
            </summary>
            <remarks>
            This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
            Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.FindTool(System.String)">
             <summary>
             Find a mouse tool of a given name.
             </summary>
             <remarks>
             This searches the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>, <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/>, and <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/> lists.
            
             This method may be overridden, but you should consider calling this base method in order to get all of its functionality.
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="name">the type of tool, such as "Dragging" or "ClickSelecting".</param>
             <returns>a <see cref="T:Northwoods.Go.Tools.Tool"/> whose <see cref="P:Northwoods.Go.Tools.Tool.Name"/> exactly matches the given name,
             or null if no such tool is found in any of the three lists.</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.ReplaceTool(System.String,Northwoods.Go.Tools.Tool)">
             <summary>
             Replace a mouse tool of a given name with a new tool, or remove an existing tool (if the *newtool* is null).
             </summary>
             <remarks>
             This searches the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>, <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/>,
             and <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/> lists.
             The new tool is inserted into the same list in which the same-named tool is found,
             at the same position as the old tool.
             However, if no existing tool with the given name is present, this does **not** add the new tool to any list, since it cannot know where it should be added.
            
             Please read the Introduction page on <a href="../../intro/extensions.Html">Extensions</a> for how to override methods and how to call this base method.
             </remarks>
             <param name="name">the type of tool, such as "Dragging" or "ClickSelecting".</param>
             <param name="newtool">If null, any tool that the search finds will just be removed
             from the list in which it was found.</param>
             <returns>the old tool that was replaced by the new one; this is null if none was found and the new tool was not added to any mouse tool list</returns>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.ReplaceStandardTool(System.String,Northwoods.Go.Tools.Tool,System.Collections.Generic.IList{Northwoods.Go.Tools.Tool})">
            <summary>
            (undocumented)
            </summary>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.MouseDownTools">
             <summary>
             This read-only property returns the list of <see cref="T:Northwoods.Go.Tools.Tool"/>s that might be started upon a mouse or finger press event.
             </summary>
             <remarks>
             When the ToolManager handles a mouse-down or touch-down event in <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseDown"/>,
             it searches this list in order, starting the first tool for which
             <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> returns true.
            
             This list may be modified, but it must not be modified while any tool
             is handling events.
            
             <see cref="M:Northwoods.Go.Tools.ToolManager.InitializeStandardTools"/> installs the following tools, in order:
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ActionTool"/>, an <see cref="T:Northwoods.Go.Tools.ActionTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.RelinkingTool"/>, a <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.LinkReshapingTool"/>, a <see cref="T:Northwoods.Go.Tools.LinkReshapingTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.RotatingTool"/>, a <see cref="T:Northwoods.Go.Tools.RotatingTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ResizingTool"/>, a <see cref="T:Northwoods.Go.Tools.ResizingTool"/>
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools">
             <summary>
             This read-only property returns the list of <see cref="T:Northwoods.Go.Tools.Tool"/>s that might be started upon a mouse or finger move event.
             </summary>
             <remarks>
             When the ToolManager handles a mouse-move or touch-move event in <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseMove"/>,
             it searches this list in order, starting the first tool for which
             <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> returns true.
            
             This list may be modified, but it must not be modified while any tool
             is handling events.
            
             <see cref="M:Northwoods.Go.Tools.ToolManager.InitializeStandardTools"/> installs the following tools, in order:
               - <see cref="P:Northwoods.Go.Tools.ToolManager.LinkingTool"/>, a <see cref="T:Northwoods.Go.Tools.LinkingTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.DraggingTool"/>, a <see cref="T:Northwoods.Go.Tools.DraggingTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.DragSelectingTool"/>, a <see cref="T:Northwoods.Go.Tools.DragSelectingTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.PanningTool"/>, a <see cref="P:Northwoods.Go.Tools.ToolManager.PanningTool"/>
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.MouseUpTools">
             <summary>
             This read-only property returns the list of <see cref="T:Northwoods.Go.Tools.Tool"/>s that might be started upon a mouse or finger up event.
             </summary>
             <remarks>
             When the ToolManager handles a mouse-up or touch-up event in <see cref="M:Northwoods.Go.Tools.ToolManager.DoMouseUp"/>,
             it searches this list in order, starting the first tool for which
             <see cref="M:Northwoods.Go.Tools.Tool.CanStart"/> returns true.
            
             This list may be modified, but it must not be modified while any tool
             is handling events.
            
             <see cref="M:Northwoods.Go.Tools.ToolManager.InitializeStandardTools"/> installs the following tools, in order:
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ContextMenuTool"/>, a <see cref="T:Northwoods.Go.Tools.ContextMenuTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.TextEditingTool"/>, a <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ClickCreatingTool"/>, a <see cref="T:Northwoods.Go.Tools.ClickCreatingTool"/>
               - <see cref="P:Northwoods.Go.Tools.ToolManager.ClickSelectingTool"/>, a <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.HoverDelay">
             <summary>
             Gets or sets the time between when the mouse stops moving and a hover event,
             in milliseconds.
             </summary>
             <remarks>
             This value affects the delay before <see cref="P:Northwoods.Go.GraphObject.ToolTip"/>s are shown.
            
             The default value is 850 milliseconds.
            
             Set <see cref="P:Northwoods.Go.Tools.ToolManager.ToolTipDuration"/> to control how long a tooltip will remain visible.
             </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.HoldDelay">
            <summary>
            Gets or sets the time between when the mouse stops moving and a hold event,
            in milliseconds.
            </summary>
            <remarks>
            The default value is 850 milliseconds.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.DragSize">
            <summary>
            Gets or sets the distance in view coordinates within which a mouse down-and-up is considered a click and beyond which a mouse movement is considered a drag.
            </summary>
            <remarks>
            The default value is 2 pixels horizontally and vertically for mouse events, and increases by 6 pixels for touch events.
            This value is used by <see cref="M:Northwoods.Go.Tools.Tool.IsBeyondDragSize(System.Nullable{Northwoods.Go.Point},System.Nullable{Northwoods.Go.Point})"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.ToolTipDuration">
             <summary>
             Gets or sets how long a tool tip is visible.
             </summary>
             <remarks>
             The default value is 5000 milliseconds.
            
             This is used by <see cref="M:Northwoods.Go.Tools.ToolManager.ShowToolTip(Northwoods.Go.IShowHidable,Northwoods.Go.GraphObject)"/> to determine how long to wait before calling <see cref="M:Northwoods.Go.Tools.ToolManager.HideToolTip"/>.
            
             Set <see cref="P:Northwoods.Go.Tools.ToolManager.HoverDelay"/> to control how long the mouse should stay stationary before it shows a tooltip.
             </remarks>
        </member>
        <member name="M:Northwoods.Go.Tools.ToolManager.DoCancel">
            @hidden @internal
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.ActionTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.ActionTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.RelinkingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.RelinkingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.LinkReshapingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.LinkReshapingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.ResizingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.ResizingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.RotatingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.RotatingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseDownTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.LinkingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.LinkingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.DraggingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.DraggingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.DragSelectingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.DragSelectingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.PanningTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.PanningTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseMoveTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.ContextMenuTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.ContextMenuTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.TextEditingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.TextEditingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.ClickCreatingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.ClickCreatingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.Tools.ToolManager.ClickSelectingTool">
            <summary>
            Gets or sets the mode-less <see cref="T:Northwoods.Go.Tools.ClickSelectingTool"/>, normally one of the <see cref="P:Northwoods.Go.Tools.ToolManager.MouseUpTools"/>.
            </summary>
            <remarks>
            You can disable this tool by setting its <see cref="P:Northwoods.Go.Tools.Tool.IsEnabled"/> property to false.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.UndocumentedAttribute">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.UndocumentedAttribute.#ctor">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:Northwoods.Go.TextBaseline">
            <summary>
            This enumeration specifies possible values for TextBaseline.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IDrawingSurface">
            <summary>
            (undocumented)
            Interface used for drawing surfaces, which are undocumented classes.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IDrawingContext">
            <summary>
            Interface used for contexts to ensure all platforms implement the required methods/properties.
            </summary>
        </member>
        <member name="T:Northwoods.Go.ScrollInfo">
            <summary>
            Stores scrolling information.
            </summary>
        </member>
        <member name="T:Northwoods.Go.Trace">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Trace.Debug(System.String)">
            <summary>
            Write to Diagnostics.Trace if in debug.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Trace.Info(System.String)">
            <summary>
            Write information to Diagnostics.Trace.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Trace.Warn(System.String)">
            <summary>
            Write a warning Diagnostics.Trace.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Trace.Error(System.String)">
            <summary>
            Throw an error after logging to Diagnostics.Trace.
            </summary>
            <param name="msg">the error message</param>
        </member>
        <member name="M:Northwoods.Go.Trace.Error(System.Exception)">
            <summary>
            Return a given Exception after logging its message to Diagnostics.Trace.
            </summary>
            <param name="ex">The Exception to throw</param>
        </member>
        <member name="M:Northwoods.Go.Trace.TypeError(System.Object,System.Type,System.String)">
            <summary>
            Throw an error for a value that isn't the expected type.
            </summary>
            <param name="val"></param>
            <param name="type">a type that val isn't</param>
            <param name="name">optional: "Class.Property" or "Class.Method:parameter", defaults to caller name</param>
        </member>
        <member name="M:Northwoods.Go.Trace.TypeError(System.Object,System.Type,System.Type,System.String)">
            <summary>
            Throw an error for a value that isn't the expected type.
            </summary>
            <param name="val"></param>
            <param name="type">a type that val isn't</param>
            <param name="classtype">the calling class type</param>
            <param name="member">optional: "Property" or "Method:parameter", defaults to caller name</param>
        </member>
        <member name="M:Northwoods.Go.Trace.RangeError(System.Object,System.String,System.String)">
            <summary>
            Throw an error for a value that isn't within a specified range.
            </summary>
            <param name="val"></param>
            <param name="range">a human-readable description of the value range that val isn't in</param>
            <param name="name">optional: "Class.property" or "Class.method:parameter", defaults to caller name</param>
        </member>
        <member name="M:Northwoods.Go.Trace.RangeError(System.Object,System.String,System.Type,System.String)">
            <summary>
            Throw an error for a value that isn't within a specified range.
            </summary>
            <param name="val"></param>
            <param name="range">a human-readable description of the value range that val isn't in</param>
            <param name="classtype">the calling class type</param>
            <param name="member">optional: "Property" or "Method:parameter", defaults to caller name</param>
        </member>
        <member name="M:Northwoods.Go.Trace.NumberError(System.Object,System.String)">
            <summary>
            Throw an error for a value that isn't a real number.
            </summary>
            <param name="val"></param>
            <param name="name">optional: "Class.Property" or "Class.Method:parameter", defaults to caller name; should be provided for parameters</param>
        </member>
        <member name="M:Northwoods.Go.Trace.NumberError(System.Object,System.Type,System.String)">
            <summary>
            Throw an error for a value that isn't a real number.
            </summary>
            <param name="val"></param>
            <param name="classtype">the calling class type</param>
            <param name="member">optional: "Property" or "Method:parameter", defaults to caller name; should be provided for parameters</param>
        </member>
        <member name="M:Northwoods.Go.Trace.FrozenError(System.Object,System.Object)">
            <summary>
            Throw an error for a frozen object being modified.
            </summary>
            <param name="obj">an object that might no longer be modifiable</param>
            <param name="val">the attempted new value for the property</param>
        </member>
        <member name="T:Northwoods.Go.Util">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:Northwoods.Go.Util.SetTimeout(System.Action,System.Int32,Northwoods.Go.Diagram)">
            <summary>
            Perform some action after a delay.
            </summary>
            <param name="action"></param>
            <param name="delay"></param>
            <param name="srcDiagram"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Util.ClearTimeout(System.Threading.CancellationTokenSource)">
            <summary>
            Clear an existing timeout.
            </summary>
            <param name="cts"></param>
        </member>
        <member name="M:Northwoods.Go.Util.Debounce(System.Action,System.Int32,Northwoods.Go.Diagram)">
            <summary>
            `action` will not be invoked until it stops being called for `wait` milliseconds
            </summary>
            <param name="action"></param>
            <param name="wait"></param>
            <param name="srcDiagram"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Util.IsFinite(System.Double)">
            <summary>
            Check if a double is finite.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.Util.IsSimpleType(System.Object)">
            <summary>
            Check if an object is primitive or a simple type (including nullables).
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
    </members>
</doc>
