<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAA
        AAAAAAAAAAAAACEjJgAeICM6PEBG8UNHTv9DR07/KSww5hobHoFjaXUAAAAAAAAAAAC2v8wAho2WY9Xg
        8P/c6fr/1+T2/9nm9//f6/v/sLnGwAAAAAoWFxkAAAAAAB4gIwAbHB80Ki0x7EBES/9DR07/PkJJ/zAz
        OMsEBAUPCQkKAAAAAAAAAAAAODxCACcqLmZAREr/Q0dO/0BESv8yNTv6IyUpVS0wNAAAAAAAAAAAAHmA
        igBrcnpFt8ba97jK5f+xxOH/s8bi/7/Q5/+WoK6iAAAAAQEBAgAAAAAAAAAABAQEBBIiJCi9PkJI/0NH
        Tv9DR07/ODxC4BMVFx8TFBYAAAAAAAAAAACMlKMALTA1jUJGTf9DR07/PkJI/zU4PeYaHB4oGBocAAAA
        AAAAAAAATFViAEpTXzOXqcTwobXS/5epw/+brsn/o7fU/3OBlY3///8AAAAAAAAAAAAAAAAKAAAAPCIk
        KIg+Qkn/Q0dO/0NIT/87P0XsGhwfLRocHwAAAAAAAAAAAAAAAAgwMzisQ0dO/0NHTv9DR07/NTg+xwMD
        Aw4JCQoAAAAAAAAAAABTXGkAOkBJQYCNn/Ogq7v/tsHP/6q1xP+RnrD/Xmh2mgAAAAMHCAgAAAAAACEj
        JwAPEBJWICIlqEBDSvhDR07/Q0dP/zw/RvAdHiI0Hh8jAAAAAAAJCQoABgYHOCwuM9tESE//Q0dO/0NH
        Tv8xNDmqAAAAAwEBAQAXGBoAAAAAB15jalWfqLPNzNfl/9vn9v/U3/L/2OP1/9jj8v+1vsvufYSNiy4w
        NB19hI0AFxkbABgZHCYuMTbbQERK/kNHTv9DR0//PEBG8R0fIjYfICMAAAAAABYYGgASExRJLS8090RI
        T/9DR07/QkZN/y4xNZO1v9IAVTckAC4VBRl7Y1iUwMjV9ODs+//L1+7/lKDf/4SS5/+IleH/sb3i/9/r
        +//T3+/+mpOUylMwHEUAAAABAAAABjI1O7JDR07/Q0dO/0NHT/88P0XvHB4hMh0eIgAAAAAAHh8jABoc
        HzY3OkDxQ0dO/0NHTv9BRUz/LC4zgmZbWABDKxwsomhDvsiRc/7a5PL/3ur5/46Zzv92hvD/gJH//3yM
        +v9zgNP/xdHm/+Hv///Ot6//u3dN6XBJMGgAAAABLC8zgkFFTP9DR07/Q0dP/zo+ROkZGh0pGBocAAAA
        AAAhIiYAIiQnHT1BR91DR07/Q0dO/0FFS/8pLDB0HTE/FY9uXcLkk1//1Zp5/9ni8f/g7fz/kJq5/0xY
        ov9hb8z/VWG3/19pmv/P2uv/4O7//864sP/ok1//uX1b8lhXWlQjJipeQENK/0NHTv9DR0//OTxC4BQV
        Fx8TFBYAAAAAACgrLwAqLDARP0NJz0JGTf88P0b/PUFH/yMlKGl6hZNwwqWb//CZYv/ZmXb/1+Du/+Ds
        /P/X4/P/h5Gr/0NMd/9faIz/vcjb/+Ds/P/e7P7/z7Sr/+uUXv/YmHb/naGrxSMmKlo+QUj2Q0dO/0NH
        Tv83OkDTCwwNFAwMDgAAAAAAFRcZABcYGhg6PkTZODxC/zE1O/81OD7/RUlQvq25ztvUtKr//aZq/+Kg
        ev/U3O3/3+v8/+Ds/P/g7Pv/0d3t/9rm9v/h7f3/3+v7/9zq/f/RtKv/+aJn/+Sgef/Dydv3anF9wzxA
        R/hDR07/Q0dO/zQ3PcAAAAAKBAUFAAAAAAAQERMAFBUXHDI1Ot0rLTP/ODtB/zI2O/+DjJr/0+H+/9S2
        qv//u3j/462F/9Ha7//e6vz/3+v7/9/r+//i7Pn/4Ov7/9/r+//f6/v/2ef9/9C7s//9vXn/6rKC/83T
        6/+vvNH/RElR/0JGTf9BRUz/MzY8oAAAAAEAAAAAAAAAAA0OEAASExQaJCcs2i8yOP9AREv/MjU6/4SN
        nP/T4v//1b6u///Ng//huo//0Nrw/97q/P/f6/v/4Oz8/+vz/v/j7fz/3+v7/9/r+//Y5v3/z8O7//3T
        iP/rxY//zdTs/7TB1/9GSlL/ODxC/zU4Pv83OkB+UldgAAAAAAAAAAABgYudAAQEBRIgIibPPkJI/0FF
        TP8rLjP/b3iF/8rW7v/UwKz//9aK/+LClf/U3vL/4e3+/+Ht/f/V4PD/tsDN/9vn9//f6/v/4e39/9zq
        ///RysD//N+Q/+vQlf/Izt//sr7S/0BFTf8sLzT/MjU6/zI1Oop6go4AAAAAAAwMDhEICQoeAAAADzAz
        OMtDR07/QUVM/ysuM/9mbnr/lJ6t/2FYU/+1l2T/yq6H/8jS4f+5w9D/rbfF/3mBi/9GSlD/oqu3/87a
        6P+ttsL/yNPk/8S/tP/Ls3X/gHNX/3F2gP+lsMD/MTU7/zg7Qf83OkD/LzE2qQAAAAIAAAAAISMnNB0f
        ImAQERMzODxB7kRIT/85PEL/NzpA/19nc/+cqLj/eoKP/1JXYv9qbXH/cnuK/4KNnP91foz/QERL/0FF
        S/9UWWL/ucXV/5yntf+AiZj/cHZ+/1xgZv9dY3H/tL7M/6Swwf8yNTv/Q0dO/zI1Ov8qLTG5AAAABwEC
        AgAmKCxOKy4yqhUWGWA7P0X8QkZN/zM2PP9AREv/SVBb/3mDkP/U3+//ydXn/7/N4P+Xpbr/h5Kj/1BW
        YP9CRkz/Q0dO/0BESv93gZL/laCv/5+quf++y97/x9Xo/7bB0P/BzNv/h5Kj/z1BSP9ESE//LzI3/xwe
        Ib4AAAAJAgIDACcqLks2OkDhHiAjoj5CSfs9QEf/Njk//0RIT/8+Qkn/T1Re/8DM2//F0N7/qLLA/4OP
        of9gaHX/QkdO/0NHTv9DR07/QkVM/01UX/9haXb/d3+K/7C6yP/a6Pv/c3yK/4SPn/9WXWn/QkVM/0JG
        Tf8zNjz/HyEkvgAAAAkDBAQAISMnNjw/RuoqLTL1P0JJ/jg7Qf85PUP/REhP/z1BSP89QUn/fYWS/3F4
        gf9weIX/Zm9+/0JIUf9CRk3/Q0dO/0NHTv9DR07/PkJJ/0BFTP9faHX/a3J8/5qltv89Q0z/XGZ0/0JG
        Tv9DR07/P0NK/zM2O/8sLzPREBETEwsMDQAPEBIZODtB0jQ3Pf8+Qkj/Njk//zo+RP9ESE//QERL/z1B
        R/9ocH3/bHaD/zE1O/81OkH/LzI3/0FFTP9DR07/Q0dO/0NHTv9DR03/PUFH/zpASP8wNDn/QkhR/zo+
        RP89Qkr/Q0dO/0NHT/87PkX/NTg+/zM2PNoTFBYZDxARAAAAAAMxMzihNztA/zxARv83O0D/ODxB/0RI
        T/9CRkz/QERK/0RJUf9YYW//OT1E/zY6Qf8+QUj/QkZN/0NHTv9DR07/Q0dO/0NHTv9BRUz/NzxD/zw/
        Rv9ARU7/Njk//zs+RP9DSE//QkZN/zc6QP8/Q0r/NzpA2Q4PEBgNDg8ANDc9ACYoLF04O0H8PkJI/zs+
        RP80Nz3/REhP/0NHTv9CRk3/QkZN/zc7Qv85PEL/MTQ6/0NHTv9DR07/Q0dO/0NHTv9DR07/Q0dO/0FF
        TP8yNTv/QUVL/zg7Qf80Nz3/QUVM/0NHTv8+QUj/OTxC/0RIT/80NzzKAAAADwYGBwAVFhgAExUWHTQ3
        PddBRUz/QERL/zAzOP9DR07/Q0dO/0NHTv9DR07/PEBG/zo+RP8zNjz/Q0dO/0tPV/9DR07/Q0hP/0NH
        Tv9ITFT/REhP/zQ3Pf9DR07/PkJI/zg7Qf9DR07/Q0dO/zg7Qf9AQ0r/Q0dO/zAyN54AAAABAQEBAAIC
        AwD///8AKSwwfz9DSf9ESE//MDI4/0FFS/9FSlH/Q0dO/0NHTv9DRk3/QUVM/zg7Qf9BREv/V1xm/05T
        W/9NUlr/TlNb/1leZ/9GSlL/ODtB/0tPV/88P0b/PEBG/0RIT/9FSVD/PkJI/0NHTv8+Qkn6JigsWDM2
        PAAAAAAAAAAAABgaHAAWFxkcLjE2yjxARv80OD3/ODxC/09UXP9JTlX/R0xT/0NHTf9DR0//PD9G/zs/
        Rf9YXWb/Ymhz/19lcP9iaHL/Ymhz/0JGTP89QEf/VFlj/zo9Q/9AQ0r/SE1U/05TW/9DR07/Q0dO/zQ3
        PcYMDQ8UEhMVAAAAAAAAAAAAAAAAABMVFwAODxFJJScr7CosMf8nKi7/TFFZ/1xha/9aX2n/S09X/0RI
        T/9BREv/ODtB/09UXf9YXmf/T1Rc/1ZbZf9WW2T/Oj1D/0ZKUf9TV2D/Oj1D/0RIT/9XXGb/Wl9p/0dL
        U/9AREr4JyouXUdLUwAAAAAAAAAAAAAAAAAAAAAAAwMDAAAAAAMoKy+gKCov/yosMf81OD7/Vltl/1lf
        aP9ZXmj/SExT/0NHTv87PkT/REhP/0xQWP9DR07/R0tS/0RIUP83OkD/R0tS/0VJUP9CRkz/TVJa/1Zb
        ZP9QVV7/RElQ/zk8Qq0LDA0MFhcZAAAAAAAAAAAAAAAAAAAAAAAAAAAALjE2ACUnK0s4PEL0Njk//zc7
        Qf86PUP/TFBY/0tPV/9FSVD/Q0dO/0FFTP89QUj/RkpR/0NHTv9DR07/ODtB/z5BSP9DR07/Q0dO/0RJ
        UP9GSlH/Oz9F/0BESv85PUPZIyYpLy4xNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASExUABQYGCjg7
        QaFDSE//Q0dO/zs+RP89QEf/Q0dO/0NHTv9DR07/Q0dO/0FFS/9BRUz/Q0dO/0FFTP89QEf/Q0dO/0NH
        Tv9DR07/P0NK/zg7Qf89QUf/Oj1D6SIkJ09eZG4AAwMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAmKS0AHB0hGDc6QKBAREr7REhP/0JGTf9DR07/Q0dO/0NHTv9DR07/Q0dO/0JGTf9DR07/Q0dO/0NH
        Tv9DR07/Q0dO/z9DSf89QUf/QURL/zk8QuQjJShWAAAAAQUGBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAXGBoADQ4QDSkrL3U5PUPmQkZN/0NHT/9DR07/Q0dO/0NHTv9DR07/REdP/0NG
        Tf9CRk3/Q0dO/0NHTv9DR07/Q0dO/z9DSv0zNjvCHiAjPgAAAAEDBAQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBQYAAAAAAh0eITQvMTacOj1D5UBESv1CRk3/REdO/0pH
        Uf9AP0f/OTlB/z5BSP8+QUj/PkJI/zw/RvMyNjvNJykuchITFBYmKCwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwgIAAEBAQUaGx4xKCoudjAz
        OK03Oj+/ODc+tygoLpkiJSmWLS80ti0uM7InKS2IHiAjSggJChcAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4HgHAeB4BgHgeA4BwHgHAcBgAwHAwAABwIAAAcAAAAHAAAABwAAAAcAA
        AAHAAAADQAAAAwAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAGAAAABgAAAAcAAAAPAAAAD4AAAB+AA
        AAfwAAAP8AAAH/gAAB/8AAA//gAA//+AAf8=
</value>
  </data>
</root>